
/Users/chipmc/Documents/Maker/Particle/Projects/Connected-Sensor-Next/target/6.1.0/boron/Connected-Sensor-Next.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bab8  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bfad8  000bfad8  0000fad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000120  2003e338  000bfafc  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003a0  2003e458  2003e458  0002e458  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bfc1c  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bfc20  000bfc20  0001fc20  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_suffix 00000024  000bfc26  000bfc26  0001fc26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bfc4a  000bfc4a  0001fc4a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   002e77a4  00000000  00000000  0001fc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000275c1  00000000  00000000  003073f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0007d015  00000000  00000000  0032e9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00004de0  00000000  00000000  003ab9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00014ae0  00000000  00000000  003b07a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00052a4d  00000000  00000000  003c5288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0008612b  00000000  00000000  00417cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001e28ac  00000000  00000000  0049de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000eec8  00000000  00000000  006806ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <strcmp>:
   b4a28:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a30:	2a01      	cmp	r2, #1
   b4a32:	bf28      	it	cs
   b4a34:	429a      	cmpcs	r2, r3
   b4a36:	d0f7      	beq.n	b4a28 <strcmp>
   b4a38:	1ad0      	subs	r0, r2, r3
   b4a3a:	4770      	bx	lr

000b4a3c <strlen>:
   b4a3c:	4603      	mov	r3, r0
   b4a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a42:	2a00      	cmp	r2, #0
   b4a44:	d1fb      	bne.n	b4a3e <strlen+0x2>
   b4a46:	1a18      	subs	r0, r3, r0
   b4a48:	3801      	subs	r0, #1
   b4a4a:	4770      	bx	lr

000b4a4c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a4c:	4809      	ldr	r0, [pc, #36]	; (b4a74 <module_user_pre_init+0x28>)
   b4a4e:	490a      	ldr	r1, [pc, #40]	; (b4a78 <module_user_pre_init+0x2c>)
   b4a50:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a52:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a54:	d005      	beq.n	b4a62 <module_user_pre_init+0x16>
   b4a56:	4a09      	ldr	r2, [pc, #36]	; (b4a7c <module_user_pre_init+0x30>)
   b4a58:	4282      	cmp	r2, r0
   b4a5a:	d002      	beq.n	b4a62 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a5c:	1a12      	subs	r2, r2, r0
   b4a5e:	f009 f9e5 	bl	bde2c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a62:	4807      	ldr	r0, [pc, #28]	; (b4a80 <module_user_pre_init+0x34>)
   b4a64:	4a07      	ldr	r2, [pc, #28]	; (b4a84 <module_user_pre_init+0x38>)
   b4a66:	2100      	movs	r1, #0
   b4a68:	1a12      	subs	r2, r2, r0
   b4a6a:	f009 fa07 	bl	bde7c <memset>
    return &link_global_data_start;
}
   b4a6e:	4801      	ldr	r0, [pc, #4]	; (b4a74 <module_user_pre_init+0x28>)
   b4a70:	bd08      	pop	{r3, pc}
   b4a72:	bf00      	nop
   b4a74:	2003e338 	.word	0x2003e338
   b4a78:	000bfafc 	.word	0x000bfafc
   b4a7c:	2003e458 	.word	0x2003e458
   b4a80:	2003e458 	.word	0x2003e458
   b4a84:	2003e7f8 	.word	0x2003e7f8

000b4a88 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a88:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a8a:	4e07      	ldr	r6, [pc, #28]	; (b4aa8 <module_user_init+0x20>)
   b4a8c:	4c07      	ldr	r4, [pc, #28]	; (b4aac <module_user_init+0x24>)
    module_user_init_hook();
   b4a8e:	f008 fec9 	bl	bd824 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a92:	1ba4      	subs	r4, r4, r6
   b4a94:	08a4      	lsrs	r4, r4, #2
   b4a96:	2500      	movs	r5, #0
   b4a98:	42ac      	cmp	r4, r5
   b4a9a:	d100      	bne.n	b4a9e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a9c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a9e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4aa2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aa4:	3501      	adds	r5, #1
   b4aa6:	e7f7      	b.n	b4a98 <module_user_init+0x10>
   b4aa8:	000bfaa0 	.word	0x000bfaa0
   b4aac:	000bfad8 	.word	0x000bfad8

000b4ab0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4ab0:	f000 ba6a 	b.w	b4f88 <setup>

000b4ab4 <module_user_loop>:
}

void module_user_loop() {
   b4ab4:	b508      	push	{r3, lr}
    loop();
   b4ab6:	f000 fb93 	bl	b51e0 <loop>
    _post_loop();
}
   b4aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4abe:	f008 be69 	b.w	bd794 <_post_loop>

000b4ac2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ac2:	f005 bedb 	b.w	ba87c <malloc>

000b4ac6 <_Znaj>:
   b4ac6:	f005 bed9 	b.w	ba87c <malloc>

000b4aca <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4aca:	f005 bedf 	b.w	ba88c <free>
	...

000b4ad0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ad0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ad2:	4a03      	ldr	r2, [pc, #12]	; (b4ae0 <__cxa_pure_virtual+0x10>)
   b4ad4:	4903      	ldr	r1, [pc, #12]	; (b4ae4 <__cxa_pure_virtual+0x14>)
   b4ad6:	200c      	movs	r0, #12
   b4ad8:	f005 fd44 	bl	ba564 <panic_>
  while (1);
   b4adc:	e7fe      	b.n	b4adc <__cxa_pure_virtual+0xc>
   b4ade:	bf00      	nop
   b4ae0:	000ba175 	.word	0x000ba175
   b4ae4:	000be3f4 	.word	0x000be3f4

000b4ae8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ae8:	7800      	ldrb	r0, [r0, #0]
   b4aea:	fab0 f080 	clz	r0, r0
   b4aee:	0940      	lsrs	r0, r0, #5
   b4af0:	4770      	bx	lr

000b4af2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4af2:	2301      	movs	r3, #1
   b4af4:	7003      	strb	r3, [r0, #0]
   b4af6:	4770      	bx	lr

000b4af8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4af8:	4b01      	ldr	r3, [pc, #4]	; (b4b00 <_Z18outOfMemoryHandleryi+0x8>)
   b4afa:	601a      	str	r2, [r3, #0]
}
   b4afc:	4770      	bx	lr
   b4afe:	bf00      	nop
   b4b00:	2003e338 	.word	0x2003e338

000b4b04 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b4b04:	4b01      	ldr	r3, [pc, #4]	; (b4b0c <_Z13userSwitchISRv+0x8>)
   b4b06:	2201      	movs	r2, #1
   b4b08:	701a      	strb	r2, [r3, #0]
}
   b4b0a:	4770      	bx	lr
   b4b0c:	2003e5a4 	.word	0x2003e5a4

000b4b10 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4b10:	b530      	push	{r4, r5, lr}
   b4b12:	b085      	sub	sp, #20
   b4b14:	4604      	mov	r4, r0
   b4b16:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4b18:	b160      	cbz	r0, b4b34 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4b1a:	6840      	ldr	r0, [r0, #4]
   b4b1c:	b150      	cbz	r0, b4b34 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4b1e:	6885      	ldr	r5, [r0, #8]
   b4b20:	b145      	cbz	r5, b4b34 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4b22:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4b26:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b2a:	68c4      	ldr	r4, [r0, #12]
   b4b2c:	ab01      	add	r3, sp, #4
   b4b2e:	466a      	mov	r2, sp
   b4b30:	a902      	add	r1, sp, #8
   b4b32:	47a0      	blx	r4
    }
   b4b34:	b005      	add	sp, #20
   b4b36:	bd30      	pop	{r4, r5, pc}

000b4b38 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4b38:	b530      	push	{r4, r5, lr}
   b4b3a:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4b3c:	6800      	ldr	r0, [r0, #0]
   b4b3e:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4b46:	6883      	ldr	r3, [r0, #8]
   b4b48:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4b4c:	b90b      	cbnz	r3, b4b52 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4b4e:	f009 f80d 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b52:	68c3      	ldr	r3, [r0, #12]
   b4b54:	aa01      	add	r2, sp, #4
   b4b56:	a902      	add	r1, sp, #8
   b4b58:	4798      	blx	r3
      }
   b4b5a:	b005      	add	sp, #20
   b4b5c:	bd30      	pop	{r4, r5, pc}

000b4b5e <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4b5e:	2a01      	cmp	r2, #1
   b4b60:	d102      	bne.n	b4b68 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b62:	6001      	str	r1, [r0, #0]
      }
   b4b64:	2000      	movs	r0, #0
   b4b66:	4770      	bx	lr
	  switch (__op)
   b4b68:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4b6a:	bf04      	itt	eq
   b4b6c:	680b      	ldreq	r3, [r1, #0]
   b4b6e:	6003      	streq	r3, [r0, #0]
	      break;
   b4b70:	e7f8      	b.n	b4b64 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4b72 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b72:	6803      	ldr	r3, [r0, #0]
   b4b74:	6812      	ldr	r2, [r2, #0]
   b4b76:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4b7a:	4718      	bx	r3

000b4b7c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4b7c:	b510      	push	{r4, lr}
      if (_M_manager)
   b4b7e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4b80:	4604      	mov	r4, r0
      if (_M_manager)
   b4b82:	b113      	cbz	r3, b4b8a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b84:	2203      	movs	r2, #3
   b4b86:	4601      	mov	r1, r0
   b4b88:	4798      	blx	r3
    }
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	bd10      	pop	{r4, pc}

000b4b8e <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4b8e:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4b90:	4604      	mov	r4, r0
   b4b92:	b138      	cbz	r0, b4ba4 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4b94:	f7ff fff2 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b4b98:	4620      	mov	r0, r4
   b4b9a:	2110      	movs	r1, #16
        };
   b4b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4ba0:	f7ff bf93 	b.w	b4aca <_ZdlPvj>
        };
   b4ba4:	bd10      	pop	{r4, pc}

000b4ba6 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4ba6:	b40e      	push	{r1, r2, r3}
   b4ba8:	b500      	push	{lr}
   b4baa:	b08c      	sub	sp, #48	; 0x30
   b4bac:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4bae:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4bb2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4bb6:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bb8:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4bbc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bbe:	6801      	ldr	r1, [r0, #0]
   b4bc0:	aa04      	add	r2, sp, #16
   b4bc2:	201e      	movs	r0, #30
    attr.flags = 0;
   b4bc4:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bc8:	f005 fcdc 	bl	ba584 <log_message_v>
}
   b4bcc:	b00c      	add	sp, #48	; 0x30
   b4bce:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bd2:	b003      	add	sp, #12
   b4bd4:	4770      	bx	lr
	...

000b4bd8 <_Z22publishStateTransitionv>:
{
   b4bd8:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4bda:	4e13      	ldr	r6, [pc, #76]	; (b4c28 <_Z22publishStateTransitionv+0x50>)
   b4bdc:	4c13      	ldr	r4, [pc, #76]	; (b4c2c <_Z22publishStateTransitionv+0x54>)
   b4bde:	7832      	ldrb	r2, [r6, #0]
   b4be0:	4d13      	ldr	r5, [pc, #76]	; (b4c30 <_Z22publishStateTransitionv+0x58>)
   b4be2:	2a02      	cmp	r2, #2
{
   b4be4:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b4be6:	d117      	bne.n	b4c18 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4be8:	f008 fc7e 	bl	bd4e8 <_ZN9TimeClass7isValidEv>
   b4bec:	7832      	ldrb	r2, [r6, #0]
   b4bee:	782b      	ldrb	r3, [r5, #0]
   b4bf0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4bf4:	9200      	str	r2, [sp, #0]
   b4bf6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4bfa:	b998      	cbnz	r0, b4c24 <_Z22publishStateTransitionv+0x4c>
   b4bfc:	4a0d      	ldr	r2, [pc, #52]	; (b4c34 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4c02:	a802      	add	r0, sp, #8
   b4c04:	f005 fe62 	bl	ba8cc <snprintf>
	oldState = state;
   b4c08:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4c0a:	480b      	ldr	r0, [pc, #44]	; (b4c38 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b4c0c:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4c0e:	a902      	add	r1, sp, #8
   b4c10:	f7ff ffc9 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
}
   b4c14:	b042      	add	sp, #264	; 0x108
   b4c16:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4c18:	782b      	ldrb	r3, [r5, #0]
   b4c1a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4c1e:	9200      	str	r2, [sp, #0]
   b4c20:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4c24:	4a05      	ldr	r2, [pc, #20]	; (b4c3c <_Z22publishStateTransitionv+0x64>)
   b4c26:	e7ea      	b.n	b4bfe <_Z22publishStateTransitionv+0x26>
   b4c28:	2003e59a 	.word	0x2003e59a
   b4c2c:	2003e33c 	.word	0x2003e33c
   b4c30:	2003e599 	.word	0x2003e599
   b4c34:	000be409 	.word	0x000be409
   b4c38:	2003e64c 	.word	0x2003e64c
   b4c3c:	000be429 	.word	0x000be429

000b4c40 <_Z9softDelaym>:
 * @brief soft delay let's us process Particle functions and service the sensor interrupts while pausing
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
   b4c40:	b570      	push	{r4, r5, r6, lr}
   b4c42:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c44:	f005 fa9e 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c48:	4e06      	ldr	r6, [pc, #24]	; (b4c64 <_Z9softDelaym+0x24>)
   b4c4a:	4604      	mov	r4, r0
   b4c4c:	f005 fa9a 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b4c50:	1b00      	subs	r0, r0, r4
   b4c52:	42a8      	cmp	r0, r5
   b4c54:	d205      	bcs.n	b4c62 <_Z9softDelaym+0x22>
		return HAL_Timer_Get_Milli_Seconds();
   b4c56:	f005 fa95 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4c5a:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b4c5c:	f005 fd46 	bl	ba6ec <spark_process>
   b4c60:	e7f4      	b.n	b4c4c <_Z9softDelaym+0xc>
   b4c62:	bd70      	pop	{r4, r5, r6, pc}
   b4c64:	2003e714 	.word	0x2003e714

000b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4c68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4c6a:	2300      	movs	r3, #0
   b4c6c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4c6e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4c70:	4604      	mov	r4, r0
   b4c72:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4c74:	b12b      	cbz	r3, b4c82 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4c76:	2202      	movs	r2, #2
   b4c78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4c7a:	68eb      	ldr	r3, [r5, #12]
   b4c7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4c7e:	68ab      	ldr	r3, [r5, #8]
   b4c80:	60a3      	str	r3, [r4, #8]
    }
   b4c82:	4620      	mov	r0, r4
   b4c84:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c88 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c8c:	b095      	sub	sp, #84	; 0x54
   b4c8e:	4605      	mov	r5, r0
        };
   b4c90:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4c92:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4c94:	4690      	mov	r8, r2
   b4c96:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4c98:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4c9a:	f7ff ffe5 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4c9e:	a904      	add	r1, sp, #16
   b4ca0:	a808      	add	r0, sp, #32
   b4ca2:	f7ff ffe1 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4ca6:	a908      	add	r1, sp, #32
   b4ca8:	4630      	mov	r0, r6
   b4caa:	f7ff ffdd 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4cae:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4cb2:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4cb4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4cb8:	f7ff ff03 	bl	b4ac2 <_Znwj>
   b4cbc:	4604      	mov	r4, r0
   b4cbe:	b1a0      	cbz	r0, b4cea <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cc0:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4cc4:	ab01      	add	r3, sp, #4
   b4cc6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4cca:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4cce:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4cd8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4cda:	60a3      	str	r3, [r4, #8]
   b4cdc:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4ce2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4ce6:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4ce8:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4cea:	4b24      	ldr	r3, [pc, #144]	; (b4d7c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4cec:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4cee:	4b24      	ldr	r3, [pc, #144]	; (b4d80 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4cf0:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4cf2:	2200      	movs	r2, #0
   b4cf4:	2300      	movs	r3, #0
   b4cf6:	f04f 0900 	mov.w	r9, #0
   b4cfa:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4cfe:	4b21      	ldr	r3, [pc, #132]	; (b4d84 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4d00:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4d04:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d06:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4d08:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4d0c:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4d10:	f7ff fed7 	bl	b4ac2 <_Znwj>
   b4d14:	4604      	mov	r4, r0
   b4d16:	b1d8      	cbz	r0, b4d50 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4d1a:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4d1e:	b133      	cbz	r3, b4d2e <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4d20:	2202      	movs	r2, #2
   b4d22:	a910      	add	r1, sp, #64	; 0x40
   b4d24:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4d28:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4d2c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4d2e:	4b16      	ldr	r3, [pc, #88]	; (b4d88 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4d30:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4d32:	4a16      	ldr	r2, [pc, #88]	; (b4d8c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4d34:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4d36:	ab01      	add	r3, sp, #4
   b4d38:	4640      	mov	r0, r8
   b4d3a:	4639      	mov	r1, r7
   b4d3c:	f005 fc6c 	bl	ba618 <system_subscribe_event>
        if (r) {
   b4d40:	b1b0      	cbz	r0, b4d70 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4d42:	4620      	mov	r0, r4
   b4d44:	f7ff ff1a 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4d48:	2110      	movs	r1, #16
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	f7ff febd 	bl	b4aca <_ZdlPvj>
   b4d50:	a810      	add	r0, sp, #64	; 0x40
   b4d52:	f7ff ff13 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b4d56:	4630      	mov	r0, r6
   b4d58:	f7ff ff10 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b4d5c:	a808      	add	r0, sp, #32
   b4d5e:	f7ff ff0d 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b4d62:	a804      	add	r0, sp, #16
   b4d64:	f7ff ff0a 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
    }
   b4d68:	4628      	mov	r0, r5
   b4d6a:	b015      	add	sp, #84	; 0x54
   b4d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4d70:	9b02      	ldr	r3, [sp, #8]
   b4d72:	60ab      	str	r3, [r5, #8]
   b4d74:	e9c5 8700 	strd	r8, r7, [r5]
   b4d78:	e7ea      	b.n	b4d50 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4d7a:	bf00      	nop
   b4d7c:	000b4b39 	.word	0x000b4b39
   b4d80:	000b4d91 	.word	0x000b4d91
   b4d84:	000c0002 	.word	0x000c0002
   b4d88:	000b4b8f 	.word	0x000b4b8f
   b4d8c:	000b4b11 	.word	0x000b4b11

000b4d90 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4d90:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4d92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d94:	4604      	mov	r4, r0
	switch (__op)
   b4d96:	d104      	bne.n	b4da2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4d98:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4d9a:	6003      	str	r3, [r0, #0]
      }
   b4d9c:	2000      	movs	r0, #0
   b4d9e:	b003      	add	sp, #12
   b4da0:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4da2:	2a02      	cmp	r2, #2
   b4da4:	d00c      	beq.n	b4dc0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4da6:	2a03      	cmp	r2, #3
   b4da8:	d1f8      	bne.n	b4d9c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4daa:	6804      	ldr	r4, [r0, #0]
   b4dac:	2c00      	cmp	r4, #0
   b4dae:	d0f5      	beq.n	b4d9c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4db0:	4620      	mov	r0, r4
   b4db2:	f7ff fee3 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4db6:	2110      	movs	r1, #16
   b4db8:	4620      	mov	r0, r4
   b4dba:	f7ff fe86 	bl	b4aca <_ZdlPvj>
   b4dbe:	e7ed      	b.n	b4d9c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4dc0:	6809      	ldr	r1, [r1, #0]
   b4dc2:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4dc4:	2010      	movs	r0, #16
   b4dc6:	f7ff fe7c 	bl	b4ac2 <_Znwj>
   b4dca:	4605      	mov	r5, r0
   b4dcc:	b110      	cbz	r0, b4dd4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4dce:	9901      	ldr	r1, [sp, #4]
   b4dd0:	f7ff ff4a 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4dd4:	6025      	str	r5, [r4, #0]
	}
   b4dd6:	e7e1      	b.n	b4d9c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4dd8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4dda:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4ddc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4dde:	b17c      	cbz	r4, b4e00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4de0:	6863      	ldr	r3, [r4, #4]
   b4de2:	3b01      	subs	r3, #1
   b4de4:	6063      	str	r3, [r4, #4]
   b4de6:	b95b      	cbnz	r3, b4e00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4de8:	6823      	ldr	r3, [r4, #0]
   b4dea:	4620      	mov	r0, r4
   b4dec:	689b      	ldr	r3, [r3, #8]
   b4dee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4df0:	68a3      	ldr	r3, [r4, #8]
   b4df2:	3b01      	subs	r3, #1
   b4df4:	60a3      	str	r3, [r4, #8]
   b4df6:	b91b      	cbnz	r3, b4e00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4df8:	6823      	ldr	r3, [r4, #0]
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	68db      	ldr	r3, [r3, #12]
   b4dfe:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4e00:	4628      	mov	r0, r5
   b4e02:	bd38      	pop	{r3, r4, r5, pc}

000b4e04 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b4e04:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   b4e06:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b4e08:	b094      	sub	sp, #80	; 0x50
   b4e0a:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   b4e0c:	b9f3      	cbnz	r3, b4e4c <_Z14UbidotsHandlerPKcS0_+0x48>
    snprintf(responseString, sizeof(responseString),"No Data");
   b4e0e:	4922      	ldr	r1, [pc, #136]	; (b4e98 <_Z14UbidotsHandlerPKcS0_+0x94>)
   b4e10:	a804      	add	r0, sp, #16
   b4e12:	f009 f880 	bl	bdf16 <strcpy>
  if (sysStatus.get_verboseMode() && Particle.connected()) {
   b4e16:	f000 fd8f 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b4e1a:	f000 fea0 	bl	b5b5e <_ZNK13sysStatusData15get_verboseModeEv>
   b4e1e:	b178      	cbz	r0, b4e40 <_Z14UbidotsHandlerPKcS0_+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e20:	f005 fc74 	bl	ba70c <spark_cloud_flag_connected>
   b4e24:	b160      	cbz	r0, b4e40 <_Z14UbidotsHandlerPKcS0_+0x3c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4e26:	4b1d      	ldr	r3, [pc, #116]	; (b4e9c <_Z14UbidotsHandlerPKcS0_+0x98>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4e28:	491d      	ldr	r1, [pc, #116]	; (b4ea0 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   b4e2a:	781b      	ldrb	r3, [r3, #0]
   b4e2c:	f88d 3000 	strb.w	r3, [sp]
   b4e30:	a802      	add	r0, sp, #8
   b4e32:	233c      	movs	r3, #60	; 0x3c
   b4e34:	aa04      	add	r2, sp, #16
   b4e36:	f006 f945 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4e3a:	a803      	add	r0, sp, #12
   b4e3c:	f7ff ffcc 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info(responseString);
   b4e40:	4818      	ldr	r0, [pc, #96]	; (b4ea4 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   b4e42:	a904      	add	r1, sp, #16
   b4e44:	f7ff feaf 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
}
   b4e48:	b014      	add	sp, #80	; 0x50
   b4e4a:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4e4c:	4608      	mov	r0, r1
   b4e4e:	f008 ffc3 	bl	bddd8 <atoi>
   b4e52:	28c8      	cmp	r0, #200	; 0xc8
   b4e54:	d111      	bne.n	b4e7a <_Z14UbidotsHandlerPKcS0_+0x76>
    snprintf(responseString, sizeof(responseString),"Response Received");
   b4e56:	4914      	ldr	r1, [pc, #80]	; (b4ea8 <_Z14UbidotsHandlerPKcS0_+0xa4>)
   b4e58:	a804      	add	r0, sp, #16
   b4e5a:	f009 f85c 	bl	bdf16 <strcpy>
	dataInFlight = false;											 // We have received a response - so we can send another
   b4e5e:	4b13      	ldr	r3, [pc, #76]	; (b4eac <_Z14UbidotsHandlerPKcS0_+0xa8>)
   b4e60:	2200      	movs	r2, #0
   b4e62:	701a      	strb	r2, [r3, #0]
    sysStatus.set_lastHookResponse(Time.now());                          // Record the last successful Webhook Response
   b4e64:	f000 fd68 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b4e68:	4604      	mov	r4, r0
   b4e6a:	f008 fb5a 	bl	bd522 <_ZN9TimeClass3nowEv>
   b4e6e:	4602      	mov	r2, r0
   b4e70:	17c3      	asrs	r3, r0, #31
   b4e72:	4620      	mov	r0, r4
   b4e74:	f000 ff00 	bl	b5c78 <_ZN13sysStatusData20set_lastHookResponseEx>
   b4e78:	e7cd      	b.n	b4e16 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4e7a:	4620      	mov	r0, r4
   b4e7c:	f008 ffac 	bl	bddd8 <atoi>
   b4e80:	28c9      	cmp	r0, #201	; 0xc9
   b4e82:	d0e8      	beq.n	b4e56 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   b4e84:	4620      	mov	r0, r4
   b4e86:	f008 ffa7 	bl	bddd8 <atoi>
   b4e8a:	4a09      	ldr	r2, [pc, #36]	; (b4eb0 <_Z14UbidotsHandlerPKcS0_+0xac>)
   b4e8c:	4603      	mov	r3, r0
   b4e8e:	2140      	movs	r1, #64	; 0x40
   b4e90:	a804      	add	r0, sp, #16
   b4e92:	f005 fd1b 	bl	ba8cc <snprintf>
   b4e96:	e7be      	b.n	b4e16 <_Z14UbidotsHandlerPKcS0_+0x12>
   b4e98:	000be437 	.word	0x000be437
   b4e9c:	2003e45c 	.word	0x2003e45c
   b4ea0:	000be46e 	.word	0x000be46e
   b4ea4:	2003e64c 	.word	0x2003e64c
   b4ea8:	000be43f 	.word	0x000be43f
   b4eac:	2003e598 	.word	0x2003e598
   b4eb0:	000be451 	.word	0x000be451

000b4eb4 <_Z12dailyCleanupv>:
void dailyCleanup() {
   b4eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4eb6:	f005 fc29 	bl	ba70c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Daily Cleanup","Running", PRIVATE);   // Make sure this is being run
   b4eba:	b160      	cbz	r0, b4ed6 <_Z12dailyCleanupv+0x22>
   b4ebc:	4b12      	ldr	r3, [pc, #72]	; (b4f08 <_Z12dailyCleanupv+0x54>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ebe:	4a13      	ldr	r2, [pc, #76]	; (b4f0c <_Z12dailyCleanupv+0x58>)
   b4ec0:	781b      	ldrb	r3, [r3, #0]
   b4ec2:	f88d 3000 	strb.w	r3, [sp]
   b4ec6:	a802      	add	r0, sp, #8
   b4ec8:	4911      	ldr	r1, [pc, #68]	; (b4f10 <_Z12dailyCleanupv+0x5c>)
   b4eca:	233c      	movs	r3, #60	; 0x3c
   b4ecc:	f006 f8fa 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4ed0:	a803      	add	r0, sp, #12
   b4ed2:	f7ff ff81 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info("Running Daily Cleanup");
   b4ed6:	490f      	ldr	r1, [pc, #60]	; (b4f14 <_Z12dailyCleanupv+0x60>)
   b4ed8:	480f      	ldr	r0, [pc, #60]	; (b4f18 <_Z12dailyCleanupv+0x64>)
   b4eda:	f7ff fe64 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_verboseMode(false);                                       // Saves bandwidth - keep extra chatter off
   b4ede:	f000 fd2b 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b4ee2:	2100      	movs	r1, #0
   b4ee4:	f000 fe67 	bl	b5bb6 <_ZN13sysStatusData15set_verboseModeEb>
  if (sysStatus.get_solarPowerMode() || current.get_stateOfCharge() <= 65) {     // If Solar or if the battery is being discharged
   b4ee8:	f000 fd26 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b4eec:	f000 fe3c 	bl	b5b68 <_ZNK13sysStatusData18get_solarPowerModeEv>
   b4ef0:	b918      	cbnz	r0, b4efa <_Z12dailyCleanupv+0x46>
   b4ef2:	f000 fd7f 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b4ef6:	f001 f843 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
  current.resetEverything();                                                   // If so, we need to Zero the counts for the new day
   b4efa:	f000 fd7b 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
}
   b4efe:	b005      	add	sp, #20
   b4f00:	f85d eb04 	ldr.w	lr, [sp], #4
  current.resetEverything();                                                   // If so, we need to Zero the counts for the new day
   b4f04:	f000 bec2 	b.w	b5c8c <_ZN17currentStatusData15resetEverythingEv>
   b4f08:	2003e45c 	.word	0x2003e45c
   b4f0c:	000be47b 	.word	0x000be47b
   b4f10:	000be48b 	.word	0x000be48b
   b4f14:	000be483 	.word	0x000be483
   b4f18:	2003e64c 	.word	0x2003e64c

000b4f1c <_GLOBAL__sub_I_currentPointRelease>:
        val_(val) {
   b4f1c:	4b15      	ldr	r3, [pc, #84]	; (b4f74 <_GLOBAL__sub_I_currentPointRelease+0x58>)
   b4f1e:	b510      	push	{r4, lr}
   b4f20:	2401      	movs	r4, #1
   b4f22:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4f24:	f008 fcb0 	bl	bd888 <spark_protocol_instance>
   b4f28:	2300      	movs	r3, #0
   b4f2a:	461a      	mov	r2, r3
   b4f2c:	4621      	mov	r1, r4
   b4f2e:	f008 fcbb 	bl	bd8a8 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4f32:	f008 fca9 	bl	bd888 <spark_protocol_instance>
   b4f36:	2300      	movs	r3, #0
   b4f38:	210d      	movs	r1, #13
   b4f3a:	461a      	mov	r2, r3
   b4f3c:	f008 fcac 	bl	bd898 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4f40:	4b0d      	ldr	r3, [pc, #52]	; (b4f78 <_GLOBAL__sub_I_currentPointRelease+0x5c>)
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b4f42:	480e      	ldr	r0, [pc, #56]	; (b4f7c <_GLOBAL__sub_I_currentPointRelease+0x60>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b4f44:	751c      	strb	r4, [r3, #20]
        : config_(config) {
   b4f46:	1d1a      	adds	r2, r3, #4
   b4f48:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4f4a:	4a0d      	ldr	r2, [pc, #52]	; (b4f80 <_GLOBAL__sub_I_currentPointRelease+0x64>)
   b4f4c:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4f4e:	2200      	movs	r2, #0
   b4f50:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4f54:	611a      	str	r2, [r3, #16]
   b4f56:	2306      	movs	r3, #6
   b4f58:	f840 3b04 	str.w	r3, [r0], #4
   b4f5c:	f003 fba0 	bl	b86a0 <_ZN22LocalTimePosixTimezoneC1Ev>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f60:	f008 fd72 	bl	bda48 <_Z19__fetch_global_Wirev>
   b4f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f68:	4601      	mov	r1, r0
   b4f6a:	2269      	movs	r2, #105	; 0x69
   b4f6c:	4805      	ldr	r0, [pc, #20]	; (b4f84 <_GLOBAL__sub_I_currentPointRelease+0x68>)
   b4f6e:	f001 bfb9 	b.w	b6ee4 <_ZN6AB1805C1ER7TwoWireh>
   b4f72:	bf00      	nop
   b4f74:	2003e45c 	.word	0x2003e45c
   b4f78:	2003e490 	.word	0x2003e490
   b4f7c:	2003e4a8 	.word	0x2003e4a8
   b4f80:	00030010 	.word	0x00030010
   b4f84:	2003e470 	.word	0x2003e470

000b4f88 <setup>:
void setup() {
   b4f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f8c:	b0c0      	sub	sp, #256	; 0x100
        return spark_deviceID();
   b4f8e:	a806      	add	r0, sp, #24
   b4f90:	f005 fbc4 	bl	ba71c <spark_deviceID>
    void setCharAt(unsigned int index, char c);
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
   b4f94:	2300      	movs	r3, #0
   b4f96:	227d      	movs	r2, #125	; 0x7d
   b4f98:	a920      	add	r1, sp, #128	; 0x80
   b4f9a:	a806      	add	r0, sp, #24
   b4f9c:	f008 f82e 	bl	bcffc <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4fa0:	2300      	movs	r3, #0
   b4fa2:	497c      	ldr	r1, [pc, #496]	; (b5194 <setup+0x20c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4fa4:	4f7c      	ldr	r7, [pc, #496]	; (b5198 <setup+0x210>)
	    _M_invoker = &_My_handler::_M_invoke;
   b4fa6:	4d7d      	ldr	r5, [pc, #500]	; (b519c <setup+0x214>)
	    _M_manager = &_My_handler::_M_manager;
   b4fa8:	4c7d      	ldr	r4, [pc, #500]	; (b51a0 <setup+0x218>)
   b4faa:	461a      	mov	r2, r3
   b4fac:	e9cd 3300 	strd	r3, r3, [sp]
   b4fb0:	a820      	add	r0, sp, #128	; 0x80
   b4fb2:	f005 fbc3 	bl	ba73c <spark_subscribe>
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4fb6:	ab0a      	add	r3, sp, #40	; 0x28
   b4fb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4fbc:	9300      	str	r3, [sp, #0]
   b4fbe:	a802      	add	r0, sp, #8
   b4fc0:	2300      	movs	r3, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4fc2:	970a      	str	r7, [sp, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
   b4fc4:	950d      	str	r5, [sp, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
   b4fc6:	940c      	str	r4, [sp, #48]	; 0x30
   b4fc8:	f7ff fe5e 	bl	b4c88 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4fcc:	a80a      	add	r0, sp, #40	; 0x28
   b4fce:	f7ff fdd5 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	Particle_Functions::instance().setup();			// Initialize Particle Functions and Variables
   b4fd2:	f001 f8b5 	bl	b6140 <_ZN18Particle_Functions8instanceEv>
   b4fd6:	f001 f8c5 	bl	b6164 <_ZN18Particle_Functions5setupEv>
    initializePinModes();                           // Sets the pinModes
   b4fda:	f001 fd03 	bl	b69e4 <_Z18initializePinModesv>
	digitalWrite(BLUE_LED, HIGH);					// Turn on the Blue LED for setup
   b4fde:	4b71      	ldr	r3, [pc, #452]	; (b51a4 <setup+0x21c>)
   b4fe0:	881e      	ldrh	r6, [r3, #0]
   b4fe2:	2101      	movs	r1, #1
   b4fe4:	4630      	mov	r0, r6
   b4fe6:	f008 fcb6 	bl	bd956 <digitalWrite>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4fea:	f001 fd1f 	bl	b6a2c <_Z18initializePowerCfgv>
	softDelay(2000);								// This helps us get a battery measurment
   b4fee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4ff2:	f7ff fe25 	bl	b4c40 <_Z9softDelaym>
	sysStatus.setup();								// Initialize persistent storage
   b4ff6:	f000 fc9f 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b4ffa:	6803      	ldr	r3, [r0, #0]
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	4798      	blx	r3
	current.setup();
   b5000:	f000 fcf8 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5004:	6803      	ldr	r3, [r0, #0]
   b5006:	681b      	ldr	r3, [r3, #0]
   b5008:	4798      	blx	r3
  	PublishQueuePosix::instance().setup();          // Start the Publish Queue
   b500a:	f003 fe8b 	bl	b8d24 <_ZN17PublishQueuePosix8instanceEv>
   b500e:	f004 f895 	bl	b913c <_ZN17PublishQueuePosix5setupEv>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5012:	4865      	ldr	r0, [pc, #404]	; (b51a8 <setup+0x220>)
   b5014:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5016:	2101      	movs	r1, #1
   b5018:	8143      	strh	r3, [r0, #10]
   b501a:	f002 fb53 	bl	b76c4 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b501e:	217c      	movs	r1, #124	; 0x7c
   b5020:	4861      	ldr	r0, [pc, #388]	; (b51a8 <setup+0x220>)
   b5022:	f002 f84f 	bl	b70c4 <_ZN6AB18056setWDTEi>
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5026:	ab0a      	add	r3, sp, #40	; 0x28
   b5028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b502c:	9300      	str	r3, [sp, #0]
   b502e:	a802      	add	r0, sp, #8
   b5030:	2300      	movs	r3, #0
	    _M_manager = &_My_handler::_M_manager;
   b5032:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5036:	970a      	str	r7, [sp, #40]	; 0x28
   b5038:	f7ff fe26 	bl	b4c88 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b503c:	a80a      	add	r0, sp, #40	; 0x28
   b503e:	f7ff fd9d 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
  	takeMeasurements();                             // Populates values so you can read them before the hour
   b5042:	f001 fe25 	bl	b6c90 <_Z16takeMeasurementsv>
	if (!digitalRead(BUTTON_PIN)) {						// The user will press this button at startup to reset settings
   b5046:	4b59      	ldr	r3, [pc, #356]	; (b51ac <setup+0x224>)
   b5048:	4d59      	ldr	r5, [pc, #356]	; (b51b0 <setup+0x228>)
   b504a:	881f      	ldrh	r7, [r3, #0]
   b504c:	4638      	mov	r0, r7
   b504e:	f008 fc9b 	bl	bd988 <digitalRead>
   b5052:	b950      	cbnz	r0, b506a <setup+0xe2>
		Log.info("User button pressed at startup - setting defaults");
   b5054:	4957      	ldr	r1, [pc, #348]	; (b51b4 <setup+0x22c>)
   b5056:	4858      	ldr	r0, [pc, #352]	; (b51b8 <setup+0x230>)
   b5058:	f7ff fda5 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b505c:	2304      	movs	r3, #4
   b505e:	702b      	strb	r3, [r5, #0]
		sysStatus.initialize();                  	// Make sure the device wakes up and connects - reset to defaults and exit low power mode
   b5060:	f000 fc6a 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5064:	6803      	ldr	r3, [r0, #0]
   b5066:	699b      	ldr	r3, [r3, #24]
   b5068:	4798      	blx	r3
	if (Time.day(sysStatus.get_lastConnection() != Time.day())) {
   b506a:	f000 fc65 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b506e:	f000 fdd6 	bl	b5c1e <_ZNK13sysStatusData18get_lastConnectionEv>
   b5072:	460c      	mov	r4, r1
   b5074:	4680      	mov	r8, r0
   b5076:	f008 fa71 	bl	bd55c <_ZN9TimeClass3dayEv>
   b507a:	17c3      	asrs	r3, r0, #31
   b507c:	42a3      	cmp	r3, r4
   b507e:	bf08      	it	eq
   b5080:	4540      	cmpeq	r0, r8
   b5082:	bf14      	ite	ne
   b5084:	2001      	movne	r0, #1
   b5086:	2000      	moveq	r0, #0
   b5088:	2100      	movs	r1, #0
   b508a:	f008 f929 	bl	bd2e0 <_ZN9TimeClass3dayEx>
   b508e:	b128      	cbz	r0, b509c <setup+0x114>
		Log.info("New day, resetting counts");
   b5090:	494a      	ldr	r1, [pc, #296]	; (b51bc <setup+0x234>)
   b5092:	4849      	ldr	r0, [pc, #292]	; (b51b8 <setup+0x230>)
   b5094:	f7ff fd87 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
		dailyCleanup();
   b5098:	f7ff ff0c 	bl	b4eb4 <_Z12dailyCleanupv>
	if (!Time.isValid()) {
   b509c:	f008 fa24 	bl	bd4e8 <_ZN9TimeClass7isValidEv>
   b50a0:	2800      	cmp	r0, #0
   b50a2:	d167      	bne.n	b5174 <setup+0x1ec>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b50a4:	f008 fa3d 	bl	bd522 <_ZN9TimeClass3nowEv>
   b50a8:	17c3      	asrs	r3, r0, #31
   b50aa:	4602      	mov	r2, r0
   b50ac:	a80a      	add	r0, sp, #40	; 0x28
   b50ae:	f008 f933 	bl	bd318 <_ZN9TimeClass7timeStrEx>
		Log.info("Time is invalid -  %s so connecting", Time.timeStr().c_str());
   b50b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b50b4:	4942      	ldr	r1, [pc, #264]	; (b51c0 <setup+0x238>)
   b50b6:	4840      	ldr	r0, [pc, #256]	; (b51b8 <setup+0x230>)
   b50b8:	f7ff fd75 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b50bc:	a80a      	add	r0, sp, #40	; 0x28
   b50be:	f007 fe5f 	bl	bcd80 <_ZN6StringD1Ev>
		state = CONNECTING_STATE;
   b50c2:	2304      	movs	r3, #4
   b50c4:	702b      	strb	r3, [r5, #0]
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b50c6:	f003 fbc9 	bl	b885c <_ZN9LocalTime8instanceEv>
   b50ca:	493e      	ldr	r1, [pc, #248]	; (b51c4 <setup+0x23c>)
   b50cc:	4604      	mov	r4, r0
   b50ce:	a80a      	add	r0, sp, #40	; 0x28
   b50d0:	f003 fb98 	bl	b8804 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b50d4:	a90b      	add	r1, sp, #44	; 0x2c
   b50d6:	f104 0008 	add.w	r0, r4, #8
   b50da:	f007 fed9 	bl	bce90 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b50de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b50e0:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b50e2:	a911      	add	r1, sp, #68	; 0x44
   b50e4:	f104 0020 	add.w	r0, r4, #32
   b50e8:	f007 fed2 	bl	bce90 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b50ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b50ee:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b50f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b50f2:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b50f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b50f6:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b50f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b50fa:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b50fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b50fe:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5100:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   b5104:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5108:	a80a      	add	r0, sp, #40	; 0x28
   b510a:	f003 f95b 	bl	b83c4 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b510e:	f008 fa08 	bl	bd522 <_ZN9TimeClass3nowEv>
   b5112:	4b2d      	ldr	r3, [pc, #180]	; (b51c8 <setup+0x240>)
   b5114:	17c2      	asrs	r2, r0, #31
   b5116:	e9c3 0218 	strd	r0, r2, [r3, #96]	; 0x60
	conv.withCurrentTime().convert();  	
   b511a:	4618      	mov	r0, r3
   b511c:	f003 fc16 	bl	b894c <_ZN16LocalTimeConvert7convertEv>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5120:	2200      	movs	r2, #0
   b5122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5126:	4929      	ldr	r1, [pc, #164]	; (b51cc <setup+0x244>)
   b5128:	9200      	str	r2, [sp, #0]
   b512a:	4638      	mov	r0, r7
   b512c:	f006 fa20 	bl	bb570 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b5130:	782b      	ldrb	r3, [r5, #0]
   b5132:	b90b      	cbnz	r3, b5138 <setup+0x1b0>
   b5134:	2303      	movs	r3, #3
   b5136:	702b      	strb	r3, [r5, #0]
  	Log.info("Startup complete with last connect %s", Time.format(sysStatus.get_lastConnection(), "%T").c_str());
   b5138:	f000 fbfe 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b513c:	f000 fd6f 	bl	b5c1e <_ZNK13sysStatusData18get_lastConnectionEv>
   b5140:	460b      	mov	r3, r1
   b5142:	4923      	ldr	r1, [pc, #140]	; (b51d0 <setup+0x248>)
   b5144:	9100      	str	r1, [sp, #0]
   b5146:	4602      	mov	r2, r0
   b5148:	4922      	ldr	r1, [pc, #136]	; (b51d4 <setup+0x24c>)
   b514a:	a80a      	add	r0, sp, #40	; 0x28
   b514c:	f008 f98a 	bl	bd464 <_ZN9TimeClass6formatExPKc>
   b5150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5152:	4921      	ldr	r1, [pc, #132]	; (b51d8 <setup+0x250>)
   b5154:	4818      	ldr	r0, [pc, #96]	; (b51b8 <setup+0x230>)
   b5156:	f7ff fd26 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b515a:	a80a      	add	r0, sp, #40	; 0x28
   b515c:	f007 fe10 	bl	bcd80 <_ZN6StringD1Ev>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b5160:	2100      	movs	r1, #0
   b5162:	4630      	mov	r0, r6
   b5164:	f008 fbf7 	bl	bd956 <digitalWrite>
	String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   b5168:	a806      	add	r0, sp, #24
   b516a:	f007 fe09 	bl	bcd80 <_ZN6StringD1Ev>
}
   b516e:	b040      	add	sp, #256	; 0x100
   b5170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5174:	f008 f9d5 	bl	bd522 <_ZN9TimeClass3nowEv>
   b5178:	17c3      	asrs	r3, r0, #31
   b517a:	4602      	mov	r2, r0
   b517c:	a80a      	add	r0, sp, #40	; 0x28
   b517e:	f008 f8cb 	bl	bd318 <_ZN9TimeClass7timeStrEx>
	else Log.info("Time is valid - %s", Time.timeStr().c_str());
   b5182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5184:	4915      	ldr	r1, [pc, #84]	; (b51dc <setup+0x254>)
   b5186:	480c      	ldr	r0, [pc, #48]	; (b51b8 <setup+0x230>)
   b5188:	f7ff fd0d 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b518c:	a80a      	add	r0, sp, #40	; 0x28
   b518e:	f007 fdf7 	bl	bcd80 <_ZN6StringD1Ev>
   b5192:	e798      	b.n	b50c6 <setup+0x13e>
   b5194:	000b4e05 	.word	0x000b4e05
   b5198:	000b4af9 	.word	0x000b4af9
   b519c:	000b4b73 	.word	0x000b4b73
   b51a0:	000b4b5f 	.word	0x000b4b5f
   b51a4:	000bed62 	.word	0x000bed62
   b51a8:	2003e470 	.word	0x2003e470
   b51ac:	000bed64 	.word	0x000bed64
   b51b0:	2003e59a 	.word	0x2003e59a
   b51b4:	000be499 	.word	0x000be499
   b51b8:	2003e64c 	.word	0x2003e64c
   b51bc:	000be4cb 	.word	0x000be4cb
   b51c0:	000be4e5 	.word	0x000be4e5
   b51c4:	000be51c 	.word	0x000be51c
   b51c8:	2003e4a8 	.word	0x2003e4a8
   b51cc:	000b4b05 	.word	0x000b4b05
   b51d0:	000be543 	.word	0x000be543
   b51d4:	2003e6a0 	.word	0x2003e6a0
   b51d8:	000be546 	.word	0x000be546
   b51dc:	000be509 	.word	0x000be509

000b51e0 <loop>:
void loop() {
   b51e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b51e4:	4ca9      	ldr	r4, [pc, #676]	; (b548c <loop+0x2ac>)
void loop() {
   b51e6:	ed2d 8b02 	vpush	{d8}
   b51ea:	7823      	ldrb	r3, [r4, #0]
   b51ec:	3b01      	subs	r3, #1
   b51ee:	b099      	sub	sp, #100	; 0x64
   b51f0:	2b06      	cmp	r3, #6
   b51f2:	d82b      	bhi.n	b524c <loop+0x6c>
   b51f4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b51f8:	00070254 	.word	0x00070254
   b51fc:	01e50048 	.word	0x01e50048
   b5200:	011b002a 	.word	0x011b002a
   b5204:	01bf      	.short	0x01bf
			if (state != oldState) publishStateTransition();
   b5206:	4ba2      	ldr	r3, [pc, #648]	; (b5490 <loop+0x2b0>)
   b5208:	781b      	ldrb	r3, [r3, #0]
   b520a:	2b02      	cmp	r3, #2
   b520c:	d001      	beq.n	b5212 <loop+0x32>
   b520e:	f7ff fce3 	bl	b4bd8 <_Z22publishStateTransitionv>
			if (sysStatus.get_lowPowerMode() && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;         // When in low power mode, we can nap between taps
   b5212:	f000 fb91 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5216:	f000 fcac 	bl	b5b72 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b521a:	b150      	cbz	r0, b5232 <loop+0x52>
   b521c:	f004 ffb2 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
   b5220:	4b9c      	ldr	r3, [pc, #624]	; (b5494 <loop+0x2b4>)
   b5222:	681b      	ldr	r3, [r3, #0]
   b5224:	1ac0      	subs	r0, r0, r3
   b5226:	4b9c      	ldr	r3, [pc, #624]	; (b5498 <loop+0x2b8>)
   b5228:	681b      	ldr	r3, [r3, #0]
   b522a:	4298      	cmp	r0, r3
   b522c:	bf84      	itt	hi
   b522e:	2303      	movhi	r3, #3
   b5230:	7023      	strbhi	r3, [r4, #0]
			if (Time.hour() != Time.hour(sysStatus.get_lastReport())) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   b5232:	f008 f987 	bl	bd544 <_ZN9TimeClass4hourEv>
   b5236:	4605      	mov	r5, r0
   b5238:	f000 fb7e 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b523c:	f000 fcea 	bl	b5c14 <_ZNK13sysStatusData14get_lastReportEv>
   b5240:	f008 f846 	bl	bd2d0 <_ZN9TimeClass4hourEx>
   b5244:	4285      	cmp	r5, r0
   b5246:	d001      	beq.n	b524c <loop+0x6c>
   b5248:	2306      	movs	r3, #6
					state = ERROR_STATE;
   b524a:	7023      	strb	r3, [r4, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b524c:	4893      	ldr	r0, [pc, #588]	; (b549c <loop+0x2bc>)
   b524e:	f002 f9e7 	bl	b7620 <_ZN6AB18054loopEv>
	current.loop();
   b5252:	f000 fbcf 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5256:	f000 fbe7 	bl	b5a28 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b525a:	f000 fb6d 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b525e:	f000 fb85 	bl	b596c <_ZN13sysStatusData4loopEv>
	PublishQueuePosix::instance().loop();                                // Check to see if we need to tend to the message queue
   b5262:	f003 fd5f 	bl	b8d24 <_ZN17PublishQueuePosix8instanceEv>
   b5266:	f003 fc4f 	bl	b8b08 <_ZN17PublishQueuePosix4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b526a:	4b8d      	ldr	r3, [pc, #564]	; (b54a0 <loop+0x2c0>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	2b00      	cmp	r3, #0
   b5270:	db05      	blt.n	b527e <loop+0x9e>
		Log.info("Resetting due to low memory");
   b5272:	498c      	ldr	r1, [pc, #560]	; (b54a4 <loop+0x2c4>)
   b5274:	488c      	ldr	r0, [pc, #560]	; (b54a8 <loop+0x2c8>)
   b5276:	f7ff fc96 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
		state = ERROR_STATE;
   b527a:	2301      	movs	r3, #1
   b527c:	7023      	strb	r3, [r4, #0]
}
   b527e:	b019      	add	sp, #100	; 0x64
   b5280:	ecbd 8b02 	vpop	{d8}
   b5284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5288:	4b81      	ldr	r3, [pc, #516]	; (b5490 <loop+0x2b0>)
   b528a:	781b      	ldrb	r3, [r3, #0]
   b528c:	2b03      	cmp	r3, #3
   b528e:	d001      	beq.n	b5294 <loop+0xb4>
   b5290:	f7ff fca2 	bl	b4bd8 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5294:	f005 fa3a 	bl	ba70c <spark_cloud_flag_connected>
			if (Particle.connected() || !Cellular.isOff()) {
   b5298:	b130      	cbz	r0, b52a8 <loop+0xc8>
				if (!Particle_Functions::instance().disconnectFromParticle()) {                                 // Disconnect cleanly from Particle and power down the modem
   b529a:	f000 ff51 	bl	b6140 <_ZN18Particle_Functions8instanceEv>
   b529e:	f001 fb09 	bl	b68b4 <_ZN18Particle_Functions22disconnectFromParticleEv>
   b52a2:	b930      	cbnz	r0, b52b2 <loop+0xd2>
					state = ERROR_STATE;
   b52a4:	2301      	movs	r3, #1
   b52a6:	e7d0      	b.n	b524a <loop+0x6a>
			if (Particle.connected() || !Cellular.isOff()) {
   b52a8:	4880      	ldr	r0, [pc, #512]	; (b54ac <loop+0x2cc>)
   b52aa:	f007 fb81 	bl	bc9b0 <_ZN5spark12NetworkClass5isOffEv>
   b52ae:	2800      	cmp	r0, #0
   b52b0:	d0f3      	beq.n	b529a <loop+0xba>
			int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary) + 1;;	// Figure out how long to sleep 		
   b52b2:	f008 f936 	bl	bd522 <_ZN9TimeClass3nowEv>
   b52b6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b52ba:	4d7d      	ldr	r5, [pc, #500]	; (b54b0 <loop+0x2d0>)
   b52bc:	fb90 f2f6 	sdiv	r2, r0, r6
   b52c0:	fb02 0616 	mls	r6, r2, r6, r0
   b52c4:	f5c6 6661 	rsb	r6, r6, #3600	; 0xe10
   b52c8:	f5b6 6f61 	cmp.w	r6, #3600	; 0xe10
   b52cc:	7d2b      	ldrb	r3, [r5, #20]
   b52ce:	bfa8      	it	ge
   b52d0:	f44f 6661 	movge.w	r6, #3600	; 0xe10
   b52d4:	3601      	adds	r6, #1
   b52d6:	b10b      	cbz	r3, b52dc <loop+0xfc>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b52d8:	2202      	movs	r2, #2
   b52da:	722a      	strb	r2, [r5, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b52dc:	4a75      	ldr	r2, [pc, #468]	; (b54b4 <loop+0x2d4>)
   b52de:	f8b2 8000 	ldrh.w	r8, [r2]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(hal_pin_t pin, InterruptMode mode) {
        if (valid_) {
   b52e2:	2b00      	cmp	r3, #0
   b52e4:	d04b      	beq.n	b537e <loop+0x19e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b52e6:	682b      	ldr	r3, [r5, #0]
   b52e8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b52ea:	b1f3      	cbz	r3, b532a <loop+0x14a>
            if (start->type == type) {
   b52ec:	889a      	ldrh	r2, [r3, #4]
   b52ee:	2a01      	cmp	r2, #1
   b52f0:	d006      	beq.n	b5300 <loop+0x120>
            start = start->next;
   b52f2:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b52f4:	e7f9      	b.n	b52ea <loop+0x10a>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b52f6:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b52f8:	b1bb      	cbz	r3, b532a <loop+0x14a>
            if (start->type == type) {
   b52fa:	889a      	ldrh	r2, [r3, #4]
   b52fc:	2a01      	cmp	r2, #1
   b52fe:	d1fa      	bne.n	b52f6 <loop+0x116>
                if (gpioWakeup->pin == pin) {
   b5300:	899a      	ldrh	r2, [r3, #12]
   b5302:	4542      	cmp	r2, r8
   b5304:	d1f7      	bne.n	b52f6 <loop+0x116>
                    gpioWakeup->mode = mode;
   b5306:	2200      	movs	r2, #0
   b5308:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b530a:	7d2b      	ldrb	r3, [r5, #20]
   b530c:	2b00      	cmp	r3, #0
   b530e:	d036      	beq.n	b537e <loop+0x19e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5310:	682b      	ldr	r3, [r5, #0]
				.duration(wakeInSeconds * 1000L);
   b5312:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
   b5316:	68db      	ldr	r3, [r3, #12]
   b5318:	fb09 f906 	mul.w	r9, r9, r6
        if (!start) {
   b531c:	b1db      	cbz	r3, b5356 <loop+0x176>
            if (start->type == type) {
   b531e:	889a      	ldrh	r2, [r3, #4]
   b5320:	2a04      	cmp	r2, #4
   b5322:	f000 81e5 	beq.w	b56f0 <loop+0x510>
            start = start->next;
   b5326:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5328:	e7f8      	b.n	b531c <loop+0x13c>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b532a:	4963      	ldr	r1, [pc, #396]	; (b54b8 <loop+0x2d8>)
   b532c:	2010      	movs	r0, #16
   b532e:	f008 fc13 	bl	bdb58 <_ZnwjRKSt9nothrow_t>
   b5332:	4607      	mov	r7, r0
   b5334:	2800      	cmp	r0, #0
   b5336:	f000 81de 	beq.w	b56f6 <loop+0x516>
   b533a:	2210      	movs	r2, #16
   b533c:	2100      	movs	r1, #0
   b533e:	f008 fd9d 	bl	bde7c <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5342:	4b5e      	ldr	r3, [pc, #376]	; (b54bc <loop+0x2dc>)
   b5344:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5346:	2301      	movs	r3, #1
   b5348:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b534a:	692b      	ldr	r3, [r5, #16]
   b534c:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b534e:	f8a7 800c 	strh.w	r8, [r7, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5352:	612f      	str	r7, [r5, #16]
   b5354:	e7d9      	b.n	b530a <loop+0x12a>
            }
            // Otherwise, configure RTC as wakeup source.
#if HAL_PLATFORM_RTL872X
            auto wakeupSource = (hal_wakeup_source_rtc_t*)system_pool_alloc(sizeof(hal_wakeup_source_rtc_t), nullptr);
#else
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5356:	4958      	ldr	r1, [pc, #352]	; (b54b8 <loop+0x2d8>)
   b5358:	2010      	movs	r0, #16
   b535a:	f008 fbfd 	bl	bdb58 <_ZnwjRKSt9nothrow_t>
   b535e:	4607      	mov	r7, r0
   b5360:	2800      	cmp	r0, #0
   b5362:	f000 81c8 	beq.w	b56f6 <loop+0x516>
   b5366:	2210      	movs	r2, #16
   b5368:	2100      	movs	r1, #0
   b536a:	f008 fd87 	bl	bde7c <memset>
#endif
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b536e:	4b53      	ldr	r3, [pc, #332]	; (b54bc <loop+0x2dc>)
   b5370:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5372:	2304      	movs	r3, #4
   b5374:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5376:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5378:	612f      	str	r7, [r5, #16]
            wakeupSource->ms = ms;
   b537a:	e9c7 3902 	strd	r3, r9, [r7, #8]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b537e:	2100      	movs	r1, #0
   b5380:	4846      	ldr	r0, [pc, #280]	; (b549c <loop+0x2bc>)
   b5382:	f001 fe9f 	bl	b70c4 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b5386:	494a      	ldr	r1, [pc, #296]	; (b54b0 <loop+0x2d0>)
   b5388:	a805      	add	r0, sp, #20
   b538a:	f007 fed9 	bl	bd140 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b538e:	4843      	ldr	r0, [pc, #268]	; (b549c <loop+0x2bc>)
   b5390:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5394:	f001 fe96 	bl	b70c4 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5398:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b539a:	b343      	cbz	r3, b53ee <loop+0x20e>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b539c:	889a      	ldrh	r2, [r3, #4]
   b539e:	2a01      	cmp	r2, #1
   b53a0:	d125      	bne.n	b53ee <loop+0x20e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b53a2:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b53a4:	4598      	cmp	r8, r3
   b53a6:	d125      	bne.n	b53f4 <loop+0x214>
				Log.info("Woke with user button - Resetting hours and going to connect");
   b53a8:	4945      	ldr	r1, [pc, #276]	; (b54c0 <loop+0x2e0>)
   b53aa:	483f      	ldr	r0, [pc, #252]	; (b54a8 <loop+0x2c8>)
   b53ac:	f7ff fbfb 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_lowPowerMode(false);
   b53b0:	f000 fac2 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b53b4:	2100      	movs	r1, #0
   b53b6:	f000 fc0a 	bl	b5bce <_ZN13sysStatusData16set_lowPowerModeEb>
				sysStatus.set_closeTime(24);
   b53ba:	f000 fabd 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b53be:	2118      	movs	r1, #24
   b53c0:	f000 fba9 	bl	b5b16 <_ZN13sysStatusData13set_closeTimeEh>
				sysStatus.set_openTime(0);
   b53c4:	f000 fab8 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b53c8:	2100      	movs	r1, #0
   b53ca:	f000 fb9e 	bl	b5b0a <_ZN13sysStatusData12set_openTimeEh>
				stayAwake = stayAwakeLong;
   b53ce:	4b32      	ldr	r3, [pc, #200]	; (b5498 <loop+0x2b8>)
   b53d0:	4a3c      	ldr	r2, [pc, #240]	; (b54c4 <loop+0x2e4>)
   b53d2:	601a      	str	r2, [r3, #0]
   b53d4:	f004 fed6 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();
   b53d8:	4b2e      	ldr	r3, [pc, #184]	; (b5494 <loop+0x2b4>)
   b53da:	6018      	str	r0, [r3, #0]
				state = CONNECTING_STATE;
   b53dc:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b53de:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b53e0:	7023      	strb	r3, [r4, #0]
   b53e2:	2800      	cmp	r0, #0
   b53e4:	f43f af32 	beq.w	b524c <loop+0x6c>
            free(wakeupSource_);
   b53e8:	f005 fa50 	bl	ba88c <free>
		} break;
   b53ec:	e72e      	b.n	b524c <loop+0x6c>
            return std::numeric_limits<hal_pin_t>::max();
   b53ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b53f2:	e7d7      	b.n	b53a4 <loop+0x1c4>
				softDelay(2000);											// Gives the device a couple seconds to get the battery reading
   b53f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b53f8:	f7ff fc22 	bl	b4c40 <_Z9softDelaym>
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b53fc:	f008 f891 	bl	bd522 <_ZN9TimeClass3nowEv>
   b5400:	4b31      	ldr	r3, [pc, #196]	; (b54c8 <loop+0x2e8>)
   b5402:	4932      	ldr	r1, [pc, #200]	; (b54cc <loop+0x2ec>)
   b5404:	9300      	str	r3, [sp, #0]
   b5406:	1982      	adds	r2, r0, r6
   b5408:	17d3      	asrs	r3, r2, #31
   b540a:	a808      	add	r0, sp, #32
   b540c:	f008 f82a 	bl	bd464 <_ZN9TimeClass6formatExPKc>
    const char * c_str() const { return buffer; }
   b5410:	9a08      	ldr	r2, [sp, #32]
   b5412:	9203      	str	r2, [sp, #12]
   b5414:	f007 fef4 	bl	bd200 <_ZN11SystemClass10freeMemoryEv>
   b5418:	9a03      	ldr	r2, [sp, #12]
   b541a:	492d      	ldr	r1, [pc, #180]	; (b54d0 <loop+0x2f0>)
   b541c:	4603      	mov	r3, r0
   b541e:	4822      	ldr	r0, [pc, #136]	; (b54a8 <loop+0x2c8>)
   b5420:	f7ff fbc1 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b5424:	a808      	add	r0, sp, #32
   b5426:	f007 fcab 	bl	bcd80 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b542a:	2302      	movs	r3, #2
   b542c:	e7d7      	b.n	b53de <loop+0x1fe>
			if (state != oldState) publishStateTransition();
   b542e:	4b18      	ldr	r3, [pc, #96]	; (b5490 <loop+0x2b0>)
   b5430:	781b      	ldrb	r3, [r3, #0]
   b5432:	2b06      	cmp	r3, #6
   b5434:	d001      	beq.n	b543a <loop+0x25a>
   b5436:	f7ff fbcf 	bl	b4bd8 <_Z22publishStateTransitionv>
			sysStatus.set_lastReport(Time.now());                              // We are only going to report once each hour from the IDLE state.  We may or may not connect to Particle
   b543a:	f000 fa7d 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b543e:	4605      	mov	r5, r0
   b5440:	f008 f86f 	bl	bd522 <_ZN9TimeClass3nowEv>
   b5444:	4602      	mov	r2, r0
   b5446:	17c3      	asrs	r3, r0, #31
   b5448:	4628      	mov	r0, r5
   b544a:	f000 fc0b 	bl	b5c64 <_ZN13sysStatusData14set_lastReportEx>
			takeMeasurements();                                                // Take Measurements here for reporting
   b544e:	f001 fc1f 	bl	b6c90 <_Z16takeMeasurementsv>
			if (Time.hour() == sysStatus.get_openTime()) dailyCleanup();       // Once a day, clean house and publish to Google Sheets
   b5452:	f008 f877 	bl	bd544 <_ZN9TimeClass4hourEv>
   b5456:	4605      	mov	r5, r0
   b5458:	f000 fa6e 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b545c:	f000 fb1d 	bl	b5a9a <_ZNK13sysStatusData12get_openTimeEv>
   b5460:	4285      	cmp	r5, r0
   b5462:	d101      	bne.n	b5468 <loop+0x288>
   b5464:	f7ff fd26 	bl	b4eb4 <_Z12dailyCleanupv>
			Particle_Functions::instance().sendEvent();                        // Publish hourly but not at opening time as there is nothing to publish
   b5468:	f000 fe6a 	bl	b6140 <_ZN18Particle_Functions8instanceEv>
   b546c:	f000 febc 	bl	b61e8 <_ZN18Particle_Functions9sendEventEv>
			state = CONNECTING_STATE;                                          // Default behaviour would be to connect and send report to Ubidots
   b5470:	2304      	movs	r3, #4
   b5472:	7023      	strb	r3, [r4, #0]
   b5474:	f005 f94a 	bl	ba70c <spark_cloud_flag_connected>
			if (Particle.connected()) {                                        // We are already connected go to response wait
   b5478:	b360      	cbz	r0, b54d4 <loop+0x2f4>
				stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   b547a:	4b07      	ldr	r3, [pc, #28]	; (b5498 <loop+0x2b8>)
   b547c:	4a11      	ldr	r2, [pc, #68]	; (b54c4 <loop+0x2e4>)
   b547e:	601a      	str	r2, [r3, #0]
   b5480:	f004 fe80 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();
   b5484:	4b03      	ldr	r3, [pc, #12]	; (b5494 <loop+0x2b4>)
   b5486:	6018      	str	r0, [r3, #0]
				(retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE; // so, if we are connecting to report - next step is response wait - otherwise IDLE
   b5488:	2307      	movs	r3, #7
   b548a:	e6de      	b.n	b524a <loop+0x6a>
   b548c:	2003e59a 	.word	0x2003e59a
   b5490:	2003e599 	.word	0x2003e599
   b5494:	2003e5a0 	.word	0x2003e5a0
   b5498:	2003e59c 	.word	0x2003e59c
   b549c:	2003e470 	.word	0x2003e470
   b54a0:	2003e338 	.word	0x2003e338
   b54a4:	000be6ce 	.word	0x000be6ce
   b54a8:	2003e64c 	.word	0x2003e64c
   b54ac:	2003e608 	.word	0x2003e608
   b54b0:	2003e490 	.word	0x2003e490
   b54b4:	000bed64 	.word	0x000bed64
   b54b8:	000bf87c 	.word	0x000bf87c
   b54bc:	00030010 	.word	0x00030010
   b54c0:	000be56c 	.word	0x000be56c
   b54c4:	00015f90 	.word	0x00015f90
   b54c8:	000be543 	.word	0x000be543
   b54cc:	2003e6a0 	.word	0x2003e6a0
   b54d0:	000be5a9 	.word	0x000be5a9
			else if (sysStatus.get_lowBatteryMode() && digitalRead(BUTTON_PIN)) {
   b54d4:	f000 fa30 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b54d8:	f000 fb50 	bl	b5b7c <_ZNK13sysStatusData18get_lowBatteryModeEv>
   b54dc:	b9e8      	cbnz	r0, b551a <loop+0x33a>
			else if (sysStatus.get_lowPowerMode() && digitalRead(BUTTON_PIN)) {      // Low power mode and user switch not pressed
   b54de:	f000 fa2b 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b54e2:	f000 fb46 	bl	b5b72 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b54e6:	2800      	cmp	r0, #0
   b54e8:	f43f aeb0 	beq.w	b524c <loop+0x6c>
   b54ec:	4b83      	ldr	r3, [pc, #524]	; (b56fc <loop+0x51c>)
   b54ee:	8818      	ldrh	r0, [r3, #0]
   b54f0:	f008 fa4a 	bl	bd988 <digitalRead>
   b54f4:	2800      	cmp	r0, #0
   b54f6:	f43f aea9 	beq.w	b524c <loop+0x6c>
				if (current.get_stateOfCharge() > 65) {
   b54fa:	f000 fa7b 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b54fe:	f000 fd3f 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5502:	ed9f 8a7f 	vldr	s16, [pc, #508]	; b5700 <loop+0x520>
   b5506:	eeb4 0ac8 	vcmpe.f32	s0, s16
   b550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b550e:	dd10      	ble.n	b5532 <loop+0x352>
					Log.info("Sufficient battery power connecting");
   b5510:	497c      	ldr	r1, [pc, #496]	; (b5704 <loop+0x524>)
   b5512:	487d      	ldr	r0, [pc, #500]	; (b5708 <loop+0x528>)
   b5514:	f7ff fb47 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b5518:	e698      	b.n	b524c <loop+0x6c>
			else if (sysStatus.get_lowBatteryMode() && digitalRead(BUTTON_PIN)) {
   b551a:	4b78      	ldr	r3, [pc, #480]	; (b56fc <loop+0x51c>)
   b551c:	8818      	ldrh	r0, [r3, #0]
   b551e:	f008 fa33 	bl	bd988 <digitalRead>
   b5522:	2800      	cmp	r0, #0
   b5524:	d0db      	beq.n	b54de <loop+0x2fe>
				Log.info("Not connecting - low battery mode");
   b5526:	4979      	ldr	r1, [pc, #484]	; (b570c <loop+0x52c>)
					Log.info("Not connecting - 50-65%% charge - two hour schedule");
   b5528:	4877      	ldr	r0, [pc, #476]	; (b5708 <loop+0x528>)
   b552a:	f7ff fb3c 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
      			state = IDLE_STATE;
   b552e:	2302      	movs	r3, #2
   b5530:	e68b      	b.n	b524a <loop+0x6a>
				else if (current.get_stateOfCharge() <= 50 && (Time.hour() % 4)) {   // If the battery level is <50%, only connect every fourth hour
   b5532:	f000 fa5f 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5536:	f000 fd23 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b553a:	eddf 7a75 	vldr	s15, [pc, #468]	; b5710 <loop+0x530>
   b553e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5546:	d910      	bls.n	b556a <loop+0x38a>
				else if (current.get_stateOfCharge() <= 65 && (Time.hour() % 2)) {   // If the battery level is 50% -  65%, only connect every other hour
   b5548:	f000 fa54 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b554c:	f000 fd18 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5550:	eeb4 0ac8 	vcmpe.f32	s0, s16
   b5554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5558:	f63f ae78 	bhi.w	b524c <loop+0x6c>
   b555c:	f007 fff2 	bl	bd544 <_ZN9TimeClass4hourEv>
   b5560:	07c3      	lsls	r3, r0, #31
   b5562:	f57f ae73 	bpl.w	b524c <loop+0x6c>
					Log.info("Not connecting - 50-65%% charge - two hour schedule");
   b5566:	496b      	ldr	r1, [pc, #428]	; (b5714 <loop+0x534>)
   b5568:	e7de      	b.n	b5528 <loop+0x348>
				else if (current.get_stateOfCharge() <= 50 && (Time.hour() % 4)) {   // If the battery level is <50%, only connect every fourth hour
   b556a:	f007 ffeb 	bl	bd544 <_ZN9TimeClass4hourEv>
   b556e:	0782      	lsls	r2, r0, #30
   b5570:	d0ea      	beq.n	b5548 <loop+0x368>
					Log.info("Not connecting - <50%% charge - four hour schedule");
   b5572:	4969      	ldr	r1, [pc, #420]	; (b5718 <loop+0x538>)
   b5574:	e7d8      	b.n	b5528 <loop+0x348>
    		if (state != oldState) {
   b5576:	4b69      	ldr	r3, [pc, #420]	; (b571c <loop+0x53c>)
   b5578:	4d69      	ldr	r5, [pc, #420]	; (b5720 <loop+0x540>)
   b557a:	781b      	ldrb	r3, [r3, #0]
   b557c:	2b07      	cmp	r3, #7
   b557e:	d007      	beq.n	b5590 <loop+0x3b0>
   b5580:	f004 fe00 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
      			webhookTimeStamp = millis();                                     // We are connected and we have published, head to the response wait state
   b5584:	4b67      	ldr	r3, [pc, #412]	; (b5724 <loop+0x544>)
   b5586:	6018      	str	r0, [r3, #0]
      			dataInFlight = true;                                             // set the data inflight flag
   b5588:	2301      	movs	r3, #1
   b558a:	702b      	strb	r3, [r5, #0]
      			publishStateTransition();
   b558c:	f7ff fb24 	bl	b4bd8 <_Z22publishStateTransitionv>
    		if (!dataInFlight)  {                                              // Response received --> back to IDLE state
   b5590:	782b      	ldrb	r3, [r5, #0]
   b5592:	b93b      	cbnz	r3, b55a4 <loop+0x3c4>
				stayAwake = stayAwakeLong;
   b5594:	4b64      	ldr	r3, [pc, #400]	; (b5728 <loop+0x548>)
   b5596:	4a65      	ldr	r2, [pc, #404]	; (b572c <loop+0x54c>)
   b5598:	601a      	str	r2, [r3, #0]
   b559a:	f004 fdf3 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();
   b559e:	4b64      	ldr	r3, [pc, #400]	; (b5730 <loop+0x550>)
   b55a0:	6018      	str	r0, [r3, #0]
   b55a2:	e7c4      	b.n	b552e <loop+0x34e>
   b55a4:	f004 fdee 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
    		else if (millis() - webhookTimeStamp > webhookWait) {              // If it takes too long - will need to reset
   b55a8:	4b5e      	ldr	r3, [pc, #376]	; (b5724 <loop+0x544>)
   b55aa:	681b      	ldr	r3, [r3, #0]
   b55ac:	1ac0      	subs	r0, r0, r3
   b55ae:	f247 5330 	movw	r3, #30000	; 0x7530
   b55b2:	4298      	cmp	r0, r3
   b55b4:	f67f ae4a 	bls.w	b524c <loop+0x6c>
				Log.info("Webhook timeout - resetting");
   b55b8:	495e      	ldr	r1, [pc, #376]	; (b5734 <loop+0x554>)
   b55ba:	4853      	ldr	r0, [pc, #332]	; (b5708 <loop+0x528>)
   b55bc:	f7ff faf3 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
      			state = ERROR_STATE;                                             // Go to the ERROR state to decide our fate
   b55c0:	e670      	b.n	b52a4 <loop+0xc4>
			if (state != oldState) {                                           // Non-blocking function - these are first time items
   b55c2:	4b56      	ldr	r3, [pc, #344]	; (b571c <loop+0x53c>)
   b55c4:	4e5c      	ldr	r6, [pc, #368]	; (b5738 <loop+0x558>)
   b55c6:	781b      	ldrb	r3, [r3, #0]
   b55c8:	2b04      	cmp	r3, #4
   b55ca:	d014      	beq.n	b55f6 <loop+0x416>
			retainedOldState = oldState;                                     // Keep track for where to go next
   b55cc:	4a5b      	ldr	r2, [pc, #364]	; (b573c <loop+0x55c>)
   b55ce:	7013      	strb	r3, [r2, #0]
			sysStatus.set_lastConnectionDuration(0);                            // Will exit with 0 if we do not connect or are already connected.  If we need to connect, this will record connection time.
   b55d0:	f000 f9b2 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b55d4:	2100      	movs	r1, #0
   b55d6:	f000 fc25 	bl	b5e24 <_ZN13sysStatusData26set_lastConnectionDurationEt>
			publishStateTransition();
   b55da:	f7ff fafd 	bl	b4bd8 <_Z22publishStateTransitionv>
   b55de:	f004 fdd1 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b55e2:	4957      	ldr	r1, [pc, #348]	; (b5740 <loop+0x560>)
			connectionStartTimeStamp = millis();                             // Have to use millis as the clock may get reset on connect
   b55e4:	6030      	str	r0, [r6, #0]
   b55e6:	2300      	movs	r3, #0
   b55e8:	6849      	ldr	r1, [r1, #4]
   b55ea:	461a      	mov	r2, r3
   b55ec:	2006      	movs	r0, #6
   b55ee:	f005 f8bd 	bl	ba76c <spark_set_connection_property>
        spark_cloud_flag_connect();
   b55f2:	f005 f883 	bl	ba6fc <spark_cloud_flag_connect>
			sysStatus.set_lastConnectionDuration(int((millis() - connectionStartTimeStamp)/1000));
   b55f6:	f000 f99f 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b55fa:	4605      	mov	r5, r0
   b55fc:	f004 fdc2 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
   b5600:	6831      	ldr	r1, [r6, #0]
   b5602:	1a41      	subs	r1, r0, r1
   b5604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5608:	fbb1 f1f0 	udiv	r1, r1, r0
   b560c:	4628      	mov	r0, r5
   b560e:	b289      	uxth	r1, r1
   b5610:	f000 fc08 	bl	b5e24 <_ZN13sysStatusData26set_lastConnectionDurationEt>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5614:	f005 f87a 	bl	ba70c <spark_cloud_flag_connected>
			if (Particle.connected()) {
   b5618:	2800      	cmp	r0, #0
   b561a:	d038      	beq.n	b568e <loop+0x4ae>
				sysStatus.set_lastConnection(Time.now());                           // This is the last time we last connected
   b561c:	f000 f98c 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5620:	4605      	mov	r5, r0
   b5622:	f007 ff7e 	bl	bd522 <_ZN9TimeClass3nowEv>
   b5626:	4602      	mov	r2, r0
   b5628:	17c3      	asrs	r3, r0, #31
   b562a:	4628      	mov	r0, r5
   b562c:	f000 fb1f 	bl	b5c6e <_ZN13sysStatusData18set_lastConnectionEx>
				stayAwake = stayAwakeLong;                                       // Keeps device awake after reconnection - allows us some time to catch the device before it sleeps
   b5630:	4b3d      	ldr	r3, [pc, #244]	; (b5728 <loop+0x548>)
   b5632:	4a3e      	ldr	r2, [pc, #248]	; (b572c <loop+0x54c>)
   b5634:	601a      	str	r2, [r3, #0]
   b5636:	f004 fda5 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();                                   // Start the stay awake timer now
   b563a:	4b3d      	ldr	r3, [pc, #244]	; (b5730 <loop+0x550>)
   b563c:	6018      	str	r0, [r3, #0]
				getSignalStrength();                                             // Test signal strength since the cellular modem is on and ready
   b563e:	f001 fa67 	bl	b6b10 <_Z17getSignalStrengthv>
				snprintf(data, sizeof(data),"Connected in %i secs",sysStatus.get_lastConnectionDuration());  // Make up connection string and publish
   b5642:	f000 f979 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5646:	f000 fb59 	bl	b5cfc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b564a:	4a3e      	ldr	r2, [pc, #248]	; (b5744 <loop+0x564>)
   b564c:	4603      	mov	r3, r0
   b564e:	2140      	movs	r1, #64	; 0x40
   b5650:	a808      	add	r0, sp, #32
   b5652:	f005 f93b 	bl	ba8cc <snprintf>
				Log.info(data);
   b5656:	a908      	add	r1, sp, #32
   b5658:	482b      	ldr	r0, [pc, #172]	; (b5708 <loop+0x528>)
   b565a:	f7ff faa4 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
				if (sysStatus.get_verboseMode()) Particle.publish("Cellular",data,PRIVATE);
   b565e:	f000 f96b 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5662:	f000 fa7c 	bl	b5b5e <_ZNK13sysStatusData15get_verboseModeEv>
   b5666:	b160      	cbz	r0, b5682 <loop+0x4a2>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5668:	4b37      	ldr	r3, [pc, #220]	; (b5748 <loop+0x568>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b566a:	4938      	ldr	r1, [pc, #224]	; (b574c <loop+0x56c>)
   b566c:	781b      	ldrb	r3, [r3, #0]
   b566e:	f88d 3000 	strb.w	r3, [sp]
   b5672:	a805      	add	r0, sp, #20
   b5674:	233c      	movs	r3, #60	; 0x3c
   b5676:	aa08      	add	r2, sp, #32
   b5678:	f005 fd24 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b567c:	a806      	add	r0, sp, #24
   b567e:	f7ff fbab 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
				(retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE; // so, if we are connecting to report - next step is response wait - otherwise IDLE
   b5682:	4b2e      	ldr	r3, [pc, #184]	; (b573c <loop+0x55c>)
   b5684:	781b      	ldrb	r3, [r3, #0]
   b5686:	2b06      	cmp	r3, #6
   b5688:	f47f af51 	bne.w	b552e <loop+0x34e>
   b568c:	e6fc      	b.n	b5488 <loop+0x2a8>
			else if (sysStatus.get_lastConnectionDuration() > 600) { // What happens if we do not connect
   b568e:	f000 f953 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5692:	f000 fb33 	bl	b5cfc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b5696:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   b569a:	f67f add7 	bls.w	b524c <loop+0x6c>
   b569e:	e601      	b.n	b52a4 <loop+0xc4>
			if (state != oldState) {
   b56a0:	4b1e      	ldr	r3, [pc, #120]	; (b571c <loop+0x53c>)
   b56a2:	781b      	ldrb	r3, [r3, #0]
   b56a4:	2b01      	cmp	r3, #1
   b56a6:	d005      	beq.n	b56b4 <loop+0x4d4>
				publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b56a8:	f7ff fa96 	bl	b4bd8 <_Z22publishStateTransitionv>
				Log.info("Error state - resetting");
   b56ac:	4928      	ldr	r1, [pc, #160]	; (b5750 <loop+0x570>)
   b56ae:	4816      	ldr	r0, [pc, #88]	; (b5708 <loop+0x528>)
   b56b0:	f7ff fa79 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
			static unsigned long resetTimer = millis();
   b56b4:	4d27      	ldr	r5, [pc, #156]	; (b5754 <loop+0x574>)
   b56b6:	4e28      	ldr	r6, [pc, #160]	; (b5758 <loop+0x578>)
   b56b8:	782b      	ldrb	r3, [r5, #0]
   b56ba:	f3bf 8f5b 	dmb	ish
   b56be:	f013 0f01 	tst.w	r3, #1
   b56c2:	d109      	bne.n	b56d8 <loop+0x4f8>
   b56c4:	4628      	mov	r0, r5
   b56c6:	f7ff fa0f 	bl	b4ae8 <__cxa_guard_acquire>
   b56ca:	b128      	cbz	r0, b56d8 <loop+0x4f8>
   b56cc:	f004 fd5a 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
   b56d0:	6030      	str	r0, [r6, #0]
   b56d2:	4628      	mov	r0, r5
   b56d4:	f7ff fa0d 	bl	b4af2 <__cxa_guard_release>
   b56d8:	f004 fd54 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimer > resetWait) System.reset();
   b56dc:	6833      	ldr	r3, [r6, #0]
   b56de:	1ac0      	subs	r0, r0, r3
   b56e0:	f247 5330 	movw	r3, #30000	; 0x7530
   b56e4:	4298      	cmp	r0, r3
   b56e6:	f67f adb1 	bls.w	b524c <loop+0x6c>
   b56ea:	f007 fd26 	bl	bd13a <_ZN11SystemClass5resetEv>
   b56ee:	e5ad      	b.n	b524c <loop+0x6c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b56f0:	f8c3 900c 	str.w	r9, [r3, #12]
                return *this;
   b56f4:	e643      	b.n	b537e <loop+0x19e>
                valid_ = false;
   b56f6:	752f      	strb	r7, [r5, #20]
                return *this;
   b56f8:	e641      	b.n	b537e <loop+0x19e>
   b56fa:	bf00      	nop
   b56fc:	000bed64 	.word	0x000bed64
   b5700:	42820000 	.word	0x42820000
   b5704:	000be5f1 	.word	0x000be5f1
   b5708:	2003e64c 	.word	0x2003e64c
   b570c:	000be5cf 	.word	0x000be5cf
   b5710:	42480000 	.word	0x42480000
   b5714:	000be648 	.word	0x000be648
   b5718:	000be615 	.word	0x000be615
   b571c:	2003e599 	.word	0x2003e599
   b5720:	2003e598 	.word	0x2003e598
   b5724:	2003e468 	.word	0x2003e468
   b5728:	2003e59c 	.word	0x2003e59c
   b572c:	00015f90 	.word	0x00015f90
   b5730:	2003e5a0 	.word	0x2003e5a0
   b5734:	000be67c 	.word	0x000be67c
   b5738:	2003e46c 	.word	0x2003e46c
   b573c:	2003e464 	.word	0x2003e464
   b5740:	2003e678 	.word	0x2003e678
   b5744:	000be698 	.word	0x000be698
   b5748:	2003e45c 	.word	0x2003e45c
   b574c:	000be6ad 	.word	0x000be6ad
   b5750:	000be6b6 	.word	0x000be6b6
   b5754:	2003e458 	.word	0x2003e458
   b5758:	2003e460 	.word	0x2003e460

000b575c <_ZN15StorageHelperRK15FileSystemPosixD1Ev>:
         */
        FileSystemPosix() {
        }

        virtual ~FileSystemPosix() {
        }
   b575c:	4770      	bx	lr

000b575e <_ZN15StorageHelperRK15FileSystemPosixD0Ev>:
        virtual ~FileSystemPosix() {
   b575e:	b510      	push	{r4, lr}
        }
   b5760:	2108      	movs	r1, #8
        virtual ~FileSystemPosix() {
   b5762:	4604      	mov	r4, r0
        }
   b5764:	f7ff f9b1 	bl	b4aca <_ZdlPvj>
   b5768:	4620      	mov	r0, r4
   b576a:	bd10      	pop	{r4, pc}

000b576c <_ZN15StorageHelperRK15FileSystemPosix9getLengthEv>:
        }

        /**
         * @brief Get length of the file or a negative error code
         */
        virtual int getLength() {
   b576c:	b500      	push	{lr}
   b576e:	b097      	sub	sp, #92	; 0x5c
            struct stat sb;

            fstat(fd, &sb);
   b5770:	4669      	mov	r1, sp
   b5772:	6840      	ldr	r0, [r0, #4]
   b5774:	f008 fcf0 	bl	be158 <fstat>
            return sb.st_size;
        }
   b5778:	9804      	ldr	r0, [sp, #16]
   b577a:	b017      	add	sp, #92	; 0x5c
   b577c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5780 <_ZN15StorageHelperRK15FileSystemPosix5writeEPKhj>:
        virtual size_t write(const uint8_t *buffer, size_t length) {
   b5780:	b508      	push	{r3, lr}
            int count = ::write(fd, buffer, length);
   b5782:	6840      	ldr	r0, [r0, #4]
   b5784:	f008 fd20 	bl	be1c8 <write>
        }
   b5788:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b578c:	bd08      	pop	{r3, pc}

000b578e <_ZN15StorageHelperRK15FileSystemPosix4readEPhj>:
        virtual size_t read(uint8_t *buffer, size_t length) {
   b578e:	b508      	push	{r3, lr}
            int count = ::read(fd, buffer, length);
   b5790:	6840      	ldr	r0, [r0, #4]
   b5792:	f008 fd07 	bl	be1a4 <read>
        }
   b5796:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b579a:	bd08      	pop	{r3, pc}

000b579c <_ZN15StorageHelperRK15FileSystemPosix8truncateEj>:

        /**
         * @brief Truncate a file to a specified length in bytes
         *
         */
        virtual bool truncate(size_t size) {
   b579c:	b508      	push	{r3, lr}
            // Note: This requires Device OS 2.0.0-rc.3 or later!
            return ftruncate(fd, (int)size) == 0;
   b579e:	6840      	ldr	r0, [r0, #4]
   b57a0:	f004 fe48 	bl	ba434 <ftruncate>
        }
   b57a4:	fab0 f080 	clz	r0, r0
   b57a8:	0940      	lsrs	r0, r0, #5
   b57aa:	bd08      	pop	{r3, pc}

000b57ac <_ZN15StorageHelperRK15FileSystemPosix5closeEv>:
        virtual bool close() {
   b57ac:	b510      	push	{r4, lr}
   b57ae:	4604      	mov	r4, r0
            if (fd != -1) {
   b57b0:	6840      	ldr	r0, [r0, #4]
   b57b2:	1c43      	adds	r3, r0, #1
   b57b4:	d004      	beq.n	b57c0 <_ZN15StorageHelperRK15FileSystemPosix5closeEv+0x14>
                ::close(fd);
   b57b6:	f008 fcc7 	bl	be148 <close>
                fd = -1;
   b57ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b57be:	6063      	str	r3, [r4, #4]
        }
   b57c0:	2001      	movs	r0, #1
   b57c2:	bd10      	pop	{r4, pc}

000b57c4 <_ZN15StorageHelperRK15FileSystemPosix4openEPKci>:
        virtual bool open(const char *filename, int mode = O_RDWR | O_CREAT) {
   b57c4:	b510      	push	{r4, lr}
   b57c6:	4604      	mov	r4, r0
   b57c8:	4608      	mov	r0, r1
   b57ca:	4611      	mov	r1, r2
            fd = ::open(filename, mode, 0666);
   b57cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   b57d0:	f008 fcd4 	bl	be17c <open>
   b57d4:	6060      	str	r0, [r4, #4]
        }
   b57d6:	3001      	adds	r0, #1
   b57d8:	bf18      	it	ne
   b57da:	2001      	movne	r0, #1
   b57dc:	bd10      	pop	{r4, pc}

000b57de <_ZN15StorageHelperRK15FileSystemPosix4seekEi>:
        virtual bool seek(int seekTo) {
   b57de:	b508      	push	{r3, lr}
            if (seekTo >= 0) {
   b57e0:	2900      	cmp	r1, #0
                return lseek(fd, seekTo, SEEK_SET) >= 0;
   b57e2:	bfae      	itee	ge
   b57e4:	2200      	movge	r2, #0
                return lseek(fd, 0, SEEK_END) >= 0;
   b57e6:	2202      	movlt	r2, #2
   b57e8:	2100      	movlt	r1, #0
                return lseek(fd, seekTo, SEEK_SET) >= 0;
   b57ea:	6840      	ldr	r0, [r0, #4]
                return lseek(fd, 0, SEEK_END) >= 0;
   b57ec:	f008 fcbc 	bl	be168 <lseek>
   b57f0:	43c0      	mvns	r0, r0
   b57f2:	0fc0      	lsrs	r0, r0, #31
        }
   b57f4:	bd08      	pop	{r3, pc}

000b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b57f6:	b510      	push	{r4, lr}
            if (!handle_) {
   b57f8:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b57fa:	4604      	mov	r4, r0
            if (!handle_) {
   b57fc:	b90b      	cbnz	r3, b5802 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b57fe:	f004 fc71 	bl	ba0e4 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5802:	6820      	ldr	r0, [r4, #0]
        }
   b5804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5808:	f004 bc7c 	b.w	ba104 <os_mutex_recursive_lock>

000b580c <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev>:
         */
        PersistentDataFileSystem(FileSystemBase *fs, const char *filename, SavedDataHeader *savedDataHeader, size_t savedDataSize, uint32_t savedDataMagic, uint16_t savedDataVersion) : 
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
        };

        virtual ~PersistentDataFileSystem() {
   b580c:	b510      	push	{r4, lr}
   b580e:	4b0a      	ldr	r3, [pc, #40]	; (b5838 <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x2c>)
   b5810:	6003      	str	r3, [r0, #0]
   b5812:	4604      	mov	r4, r0
            delete fs;
   b5814:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5816:	b110      	cbz	r0, b581e <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x12>
   b5818:	6803      	ldr	r3, [r0, #0]
   b581a:	685b      	ldr	r3, [r3, #4]
   b581c:	4798      	blx	r3
        virtual ~PersistentDataFileSystem() {
   b581e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5822:	f007 faad 	bl	bcd80 <_ZN6StringD1Ev>
            if (handle_) {
   b5826:	6860      	ldr	r0, [r4, #4]
    class PersistentDataBase : public CustomRecursiveMutex {
   b5828:	4b04      	ldr	r3, [pc, #16]	; (b583c <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x30>)
   b582a:	6023      	str	r3, [r4, #0]
            if (handle_) {
   b582c:	b108      	cbz	r0, b5832 <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x26>
                os_mutex_recursive_destroy(handle_);
   b582e:	f004 fc61 	bl	ba0f4 <os_mutex_recursive_destroy>
        }
   b5832:	4620      	mov	r0, r4
   b5834:	bd10      	pop	{r4, pc}
   b5836:	bf00      	nop
   b5838:	000bf540 	.word	0x000bf540
   b583c:	000bf51c 	.word	0x000bf51c

000b5840 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>:
    #if HAL_PLATFORM_FILESYSTEM || defined(UNITTEST) || defined(DOXYGEN_BUILD)
    /**
     * @brief Class for persistent data stored in a file on the POSIX file system on Gen 3, P2, and Photon 2
     * 
     */
    class PersistentDataFile : public PersistentDataFileSystem {
   b5840:	b510      	push	{r4, lr}
   b5842:	4b03      	ldr	r3, [pc, #12]	; (b5850 <_ZN15StorageHelperRK18PersistentDataFileD1Ev+0x10>)
   b5844:	6003      	str	r3, [r0, #0]
   b5846:	4604      	mov	r4, r0
   b5848:	f7ff ffe0 	bl	b580c <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev>
   b584c:	4620      	mov	r0, r4
   b584e:	bd10      	pop	{r4, pc}
   b5850:	000be800 	.word	0x000be800

000b5854 <_ZN15StorageHelperRK18PersistentDataFileD0Ev>:
   b5854:	b510      	push	{r4, lr}
   b5856:	4604      	mov	r4, r0
   b5858:	f7ff fff2 	bl	b5840 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>
   b585c:	4620      	mov	r0, r4
   b585e:	2138      	movs	r1, #56	; 0x38
   b5860:	f7ff f933 	bl	b4aca <_ZdlPvj>
   b5864:	4620      	mov	r0, r4
   b5866:	bd10      	pop	{r4, pc}

000b5868 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathSystem, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5868:	b510      	push	{r4, lr}
   b586a:	4b03      	ldr	r3, [pc, #12]	; (b5878 <_ZN13sysStatusDataD1Ev+0x10>)
   b586c:	6003      	str	r3, [r0, #0]
   b586e:	4604      	mov	r4, r0
   b5870:	f7ff ffe6 	bl	b5840 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>
}
   b5874:	4620      	mov	r0, r4
   b5876:	bd10      	pop	{r4, pc}
   b5878:	000be850 	.word	0x000be850

000b587c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b587c:	b510      	push	{r4, lr}
   b587e:	4604      	mov	r4, r0
}
   b5880:	f7ff fff2 	bl	b5868 <_ZN13sysStatusDataD1Ev>
   b5884:	4620      	mov	r0, r4
   b5886:	2198      	movs	r1, #152	; 0x98
   b5888:	f7ff f91f 	bl	b4aca <_ZdlPvj>
   b588c:	4620      	mov	r0, r4
   b588e:	bd10      	pop	{r4, pc}

000b5890 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathCurrent, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5890:	b510      	push	{r4, lr}
   b5892:	4b03      	ldr	r3, [pc, #12]	; (b58a0 <_ZN17currentStatusDataD1Ev+0x10>)
   b5894:	6003      	str	r3, [r0, #0]
   b5896:	4604      	mov	r4, r0
   b5898:	f7ff ffd2 	bl	b5840 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>
}
   b589c:	4620      	mov	r0, r4
   b589e:	bd10      	pop	{r4, pc}
   b58a0:	000be87c 	.word	0x000be87c

000b58a4 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b58a4:	b510      	push	{r4, lr}
   b58a6:	4604      	mov	r4, r0
}
   b58a8:	f7ff fff2 	bl	b5890 <_ZN17currentStatusDataD1Ev>
   b58ac:	4620      	mov	r0, r4
   b58ae:	2178      	movs	r1, #120	; 0x78
   b58b0:	f7ff f90b 	bl	b4aca <_ZdlPvj>
   b58b4:	4620      	mov	r0, r4
   b58b6:	bd10      	pop	{r4, pc}

000b58b8 <_ZN15StorageHelperRK24PersistentDataFileSystemD0Ev>:
        virtual ~PersistentDataFileSystem() {
   b58b8:	b510      	push	{r4, lr}
   b58ba:	4604      	mov	r4, r0
        }
   b58bc:	f7ff ffa6 	bl	b580c <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev>
   b58c0:	4620      	mov	r0, r4
   b58c2:	2138      	movs	r1, #56	; 0x38
   b58c4:	f7ff f901 	bl	b4aca <_ZdlPvj>
   b58c8:	4620      	mov	r0, r4
   b58ca:	bd10      	pop	{r4, pc}

000b58cc <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathSystem, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b58cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58ce:	4b15      	ldr	r3, [pc, #84]	; (b5924 <_ZN13sysStatusDataC1Ev+0x58>)
   b58d0:	4604      	mov	r4, r0
   b58d2:	6819      	ldr	r1, [r3, #0]
   b58d4:	9101      	str	r1, [sp, #4]
   b58d6:	f100 0538 	add.w	r5, r0, #56	; 0x38
         * @param savedDataSize size of the whole structure, including the user data after it 
         * @param savedDataMagic Magic bytes to use for this data
         * @param savedDataVersion Version to use for this data
         */
        PersistentDataFile(const char *filename, SavedDataHeader *savedDataHeader, size_t savedDataSize, uint32_t savedDataMagic, uint16_t savedDataVersion) : 
            PersistentDataFileSystem(new FileSystemPosix(), filename, savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   b58da:	2008      	movs	r0, #8
   b58dc:	f7ff f8f1 	bl	b4ac2 <_Znwj>
   b58e0:	9901      	ldr	r1, [sp, #4]
   b58e2:	b120      	cbz	r0, b58ee <_ZN13sysStatusDataC1Ev+0x22>
        FileSystemPosix() {
   b58e4:	4b10      	ldr	r3, [pc, #64]	; (b5928 <_ZN13sysStatusDataC1Ev+0x5c>)
   b58e6:	6003      	str	r3, [r0, #0]
   b58e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b58ec:	6043      	str	r3, [r0, #4]
        CustomRecursiveMutex() : handle_(nullptr) {
   b58ee:	2300      	movs	r3, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b58f0:	4a0e      	ldr	r2, [pc, #56]	; (b592c <_ZN13sysStatusDataC1Ev+0x60>)
   b58f2:	61a3      	str	r3, [r4, #24]
   b58f4:	e9c4 3501 	strd	r3, r5, [r4, #4]
   b58f8:	2560      	movs	r5, #96	; 0x60
   b58fa:	e9c4 5203 	strd	r5, r2, [r4, #12]
   b58fe:	2202      	movs	r2, #2
   b5900:	82a2      	strh	r2, [r4, #20]
   b5902:	f884 3020 	strb.w	r3, [r4, #32]
   b5906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b590a:	4b09      	ldr	r3, [pc, #36]	; (b5930 <_ZN13sysStatusDataC1Ev+0x64>)
   b590c:	6023      	str	r3, [r4, #0]
   b590e:	6260      	str	r0, [r4, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5910:	61e2      	str	r2, [r4, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b5912:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5916:	f007 fa7e 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b591a:	4b06      	ldr	r3, [pc, #24]	; (b5934 <_ZN13sysStatusDataC1Ev+0x68>)
   b591c:	6023      	str	r3, [r4, #0]
};
   b591e:	4620      	mov	r0, r4
   b5920:	b003      	add	sp, #12
   b5922:	bd30      	pop	{r4, r5, pc}
   b5924:	2003e3c0 	.word	0x2003e3c0
   b5928:	000be7d4 	.word	0x000be7d4
   b592c:	20a99e75 	.word	0x20a99e75
   b5930:	000bf540 	.word	0x000bf540
   b5934:	000be850 	.word	0x000be850

000b5938 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5938:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b593a:	4d06      	ldr	r5, [pc, #24]	; (b5954 <_ZN13sysStatusData8instanceEv+0x1c>)
   b593c:	682b      	ldr	r3, [r5, #0]
   b593e:	b93b      	cbnz	r3, b5950 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5940:	2098      	movs	r0, #152	; 0x98
   b5942:	f7ff f8be 	bl	b4ac2 <_Znwj>
   b5946:	4604      	mov	r4, r0
   b5948:	b108      	cbz	r0, b594e <_ZN13sysStatusData8instanceEv+0x16>
   b594a:	f7ff ffbf 	bl	b58cc <_ZN13sysStatusDataC1Ev>
   b594e:	602c      	str	r4, [r5, #0]
}
   b5950:	6828      	ldr	r0, [r5, #0]
   b5952:	bd38      	pop	{r3, r4, r5, pc}
   b5954:	2003e5a8 	.word	0x2003e5a8

000b5958 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5958:	b510      	push	{r4, lr}
    sysStatus
   b595a:	f7ff ffed 	bl	b5938 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b595e:	2264      	movs	r2, #100	; 0x64
        .load();
   b5960:	6803      	ldr	r3, [r0, #0]
   b5962:	61c2      	str	r2, [r0, #28]
}
   b5964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5968:	685b      	ldr	r3, [r3, #4]
   b596a:	4718      	bx	r3

000b596c <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b596c:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b596e:	f7ff ffe3 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5972:	6803      	ldr	r3, [r0, #0]
}
   b5974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5978:	68db      	ldr	r3, [r3, #12]
   b597a:	2100      	movs	r1, #0
   b597c:	4718      	bx	r3

000b597e <_ZN13sysStatusData15set_timeZoneStrEPKc>:
bool sysStatusData::set_timeZoneStr(const char *str) {
   b597e:	460b      	mov	r3, r1
	return setValueString(offsetof(SysData, timeZoneStr), sizeof(SysData::timeZoneStr), str);
   b5980:	2227      	movs	r2, #39	; 0x27
   b5982:	2116      	movs	r1, #22
   b5984:	f004 ba78 	b.w	b9e78 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b5988 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathCurrent, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5988:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b598a:	4b15      	ldr	r3, [pc, #84]	; (b59e0 <_ZN17currentStatusDataC1Ev+0x58>)
   b598c:	4604      	mov	r4, r0
   b598e:	6819      	ldr	r1, [r3, #0]
   b5990:	9101      	str	r1, [sp, #4]
   b5992:	f100 0538 	add.w	r5, r0, #56	; 0x38
            PersistentDataFileSystem(new FileSystemPosix(), filename, savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   b5996:	2008      	movs	r0, #8
   b5998:	f7ff f893 	bl	b4ac2 <_Znwj>
   b599c:	9901      	ldr	r1, [sp, #4]
   b599e:	b120      	cbz	r0, b59aa <_ZN17currentStatusDataC1Ev+0x22>
        FileSystemPosix() {
   b59a0:	4b10      	ldr	r3, [pc, #64]	; (b59e4 <_ZN17currentStatusDataC1Ev+0x5c>)
   b59a2:	6003      	str	r3, [r0, #0]
   b59a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b59a8:	6043      	str	r3, [r0, #4]
        CustomRecursiveMutex() : handle_(nullptr) {
   b59aa:	2300      	movs	r3, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59ac:	4a0e      	ldr	r2, [pc, #56]	; (b59e8 <_ZN17currentStatusDataC1Ev+0x60>)
   b59ae:	61a3      	str	r3, [r4, #24]
   b59b0:	e9c4 3501 	strd	r3, r5, [r4, #4]
   b59b4:	2540      	movs	r5, #64	; 0x40
   b59b6:	e9c4 5203 	strd	r5, r2, [r4, #12]
   b59ba:	2202      	movs	r2, #2
   b59bc:	82a2      	strh	r2, [r4, #20]
   b59be:	f884 3020 	strb.w	r3, [r4, #32]
   b59c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b59c6:	4b09      	ldr	r3, [pc, #36]	; (b59ec <_ZN17currentStatusDataC1Ev+0x64>)
   b59c8:	6023      	str	r3, [r4, #0]
   b59ca:	6260      	str	r0, [r4, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59cc:	61e2      	str	r2, [r4, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b59ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b59d2:	f007 fa20 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b59d6:	4b06      	ldr	r3, [pc, #24]	; (b59f0 <_ZN17currentStatusDataC1Ev+0x68>)
   b59d8:	6023      	str	r3, [r4, #0]
};
   b59da:	4620      	mov	r0, r4
   b59dc:	b003      	add	sp, #12
   b59de:	bd30      	pop	{r4, r5, pc}
   b59e0:	2003e3bc 	.word	0x2003e3bc
   b59e4:	000be7d4 	.word	0x000be7d4
   b59e8:	20a99e74 	.word	0x20a99e74
   b59ec:	000bf540 	.word	0x000bf540
   b59f0:	000be87c 	.word	0x000be87c

000b59f4 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b59f4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b59f6:	4d06      	ldr	r5, [pc, #24]	; (b5a10 <_ZN17currentStatusData8instanceEv+0x1c>)
   b59f8:	682b      	ldr	r3, [r5, #0]
   b59fa:	b93b      	cbnz	r3, b5a0c <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b59fc:	2078      	movs	r0, #120	; 0x78
   b59fe:	f7ff f860 	bl	b4ac2 <_Znwj>
   b5a02:	4604      	mov	r4, r0
   b5a04:	b108      	cbz	r0, b5a0a <_ZN17currentStatusData8instanceEv+0x16>
   b5a06:	f7ff ffbf 	bl	b5988 <_ZN17currentStatusDataC1Ev>
   b5a0a:	602c      	str	r4, [r5, #0]
}
   b5a0c:	6828      	ldr	r0, [r5, #0]
   b5a0e:	bd38      	pop	{r3, r4, r5, pc}
   b5a10:	2003e5ac 	.word	0x2003e5ac

000b5a14 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5a14:	b510      	push	{r4, lr}
    current
   b5a16:	f7ff ffed 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b5a1a:	22fa      	movs	r2, #250	; 0xfa
    //    .withLogData(true)
        .withSaveDelayMs(250)
        .load();
   b5a1c:	6803      	ldr	r3, [r0, #0]
   b5a1e:	61c2      	str	r2, [r0, #28]
}
   b5a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5a24:	685b      	ldr	r3, [r3, #4]
   b5a26:	4718      	bx	r3

000b5a28 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5a28:	b510      	push	{r4, lr}
    current.flush(false);
   b5a2a:	f7ff ffe3 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5a2e:	6803      	ldr	r3, [r0, #0]
}
   b5a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b5a34:	68db      	ldr	r3, [r3, #12]
   b5a36:	2100      	movs	r1, #0
   b5a38:	4718      	bx	r3

000b5a3a <_ZN17currentStatusData13set_alertCodeEa>:

int8_t currentStatusData::get_alertCode() const {
    return getValue<int8_t>(offsetof(CurrentData, alertCode));
}

void currentStatusData::set_alertCode(int8_t value) {
   b5a3a:	b538      	push	{r3, r4, r5, lr}
   b5a3c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5a3e:	3004      	adds	r0, #4
   b5a40:	460d      	mov	r5, r1
   b5a42:	f7ff fed8 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a46:	68e3      	ldr	r3, [r4, #12]
   b5a48:	3b01      	subs	r3, #1
   b5a4a:	2b27      	cmp	r3, #39	; 0x27
   b5a4c:	d909      	bls.n	b5a62 <_ZN17currentStatusData13set_alertCodeEa+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5a4e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5a50:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   b5a54:	42aa      	cmp	r2, r5
   b5a56:	d004      	beq.n	b5a62 <_ZN17currentStatusData13set_alertCodeEa+0x28>
                        *(T *)p = value;
   b5a58:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
                        updateHash();
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f004 f9ff 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5a62:	6860      	ldr	r0, [r4, #4]
    setValue<int8_t>(offsetof(CurrentData, alertCode), value);
}
   b5a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a68:	f004 bb54 	b.w	ba114 <os_mutex_recursive_unlock>

000b5a6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5a6c:	b538      	push	{r3, r4, r5, lr}
   b5a6e:	4604      	mov	r4, r0
   b5a70:	3004      	adds	r0, #4
   b5a72:	460d      	mov	r5, r1
   b5a74:	f7ff febf 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a78:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5a7a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a7c:	3b01      	subs	r3, #1
   b5a7e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5a80:	bf26      	itte	cs
   b5a82:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5a84:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5a86:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5a88:	f004 fb44 	bl	ba114 <os_mutex_recursive_unlock>
        }
   b5a8c:	4628      	mov	r0, r5
   b5a8e:	bd38      	pop	{r3, r4, r5, pc}

000b5a90 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const  {
   b5a90:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,resetCount));
   b5a92:	2115      	movs	r1, #21
   b5a94:	f7ff ffea 	bl	b5a6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a98:	bd08      	pop	{r3, pc}

000b5a9a <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const  {
   b5a9a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,openTime));
   b5a9c:	213d      	movs	r1, #61	; 0x3d
   b5a9e:	f7ff ffe5 	bl	b5a6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5aa2:	bd08      	pop	{r3, pc}

000b5aa4 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const  {
   b5aa4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,closeTime));
   b5aa6:	213e      	movs	r1, #62	; 0x3e
   b5aa8:	f7ff ffe0 	bl	b5a6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5aac:	bd08      	pop	{r3, pc}

000b5aae <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const  {
   b5aae:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,sensorType));
   b5ab0:	215a      	movs	r1, #90	; 0x5a
   b5ab2:	f7ff ffdb 	bl	b5a6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ab6:	bd08      	pop	{r3, pc}

000b5ab8 <_ZNK17currentStatusData16get_batteryStateEv>:
}
void currentStatusData::set_stateOfCharge(float value) {
    setValue<float>(offsetof(CurrentData, stateOfCharge), value);
}

uint8_t currentStatusData::get_batteryState() const  {
   b5ab8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5aba:	213c      	movs	r1, #60	; 0x3c
   b5abc:	f7ff ffd6 	bl	b5a6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ac0:	bd08      	pop	{r3, pc}

000b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5ac2:	b570      	push	{r4, r5, r6, lr}
   b5ac4:	4604      	mov	r4, r0
   b5ac6:	3004      	adds	r0, #4
   b5ac8:	460d      	mov	r5, r1
   b5aca:	4616      	mov	r6, r2
   b5acc:	f7ff fe93 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ad0:	68e3      	ldr	r3, [r4, #12]
   b5ad2:	3b01      	subs	r3, #1
   b5ad4:	42ab      	cmp	r3, r5
   b5ad6:	d307      	bcc.n	b5ae8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5ad8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5ada:	5d5a      	ldrb	r2, [r3, r5]
   b5adc:	42b2      	cmp	r2, r6
   b5ade:	d003      	beq.n	b5ae8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b5ae0:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	f004 f9bc 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5ae8:	6860      	ldr	r0, [r4, #4]
        }
   b5aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5aee:	f004 bb11 	b.w	ba114 <os_mutex_recursive_unlock>

000b5af2 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5af2:	b508      	push	{r3, lr}
   b5af4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5af6:	2110      	movs	r1, #16
   b5af8:	f7ff ffe3 	bl	b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5afc:	bd08      	pop	{r3, pc}

000b5afe <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5afe:	b508      	push	{r3, lr}
   b5b00:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5b02:	2115      	movs	r1, #21
   b5b04:	f7ff ffdd 	bl	b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b08:	bd08      	pop	{r3, pc}

000b5b0a <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b5b0a:	b508      	push	{r3, lr}
   b5b0c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b5b0e:	213d      	movs	r1, #61	; 0x3d
   b5b10:	f7ff ffd7 	bl	b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b14:	bd08      	pop	{r3, pc}

000b5b16 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b5b16:	b508      	push	{r3, lr}
   b5b18:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b5b1a:	213e      	movs	r1, #62	; 0x3e
   b5b1c:	f7ff ffd1 	bl	b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b20:	bd08      	pop	{r3, pc}

000b5b22 <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b5b22:	b508      	push	{r3, lr}
   b5b24:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b5b26:	215a      	movs	r1, #90	; 0x5a
   b5b28:	f7ff ffcb 	bl	b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b2c:	bd08      	pop	{r3, pc}

000b5b2e <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5b2e:	b508      	push	{r3, lr}
   b5b30:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5b32:	213c      	movs	r1, #60	; 0x3c
   b5b34:	f7ff ffc5 	bl	b5ac2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b38:	bd08      	pop	{r3, pc}

000b5b3a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5b3a:	b538      	push	{r3, r4, r5, lr}
   b5b3c:	4604      	mov	r4, r0
   b5b3e:	3004      	adds	r0, #4
   b5b40:	460d      	mov	r5, r1
   b5b42:	f7ff fe58 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b46:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5b48:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b4a:	3b01      	subs	r3, #1
   b5b4c:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5b4e:	bf26      	itte	cs
   b5b50:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5b52:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5b54:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5b56:	f004 fadd 	bl	ba114 <os_mutex_recursive_unlock>
        }
   b5b5a:	4628      	mov	r0, r5
   b5b5c:	bd38      	pop	{r3, r4, r5, pc}

000b5b5e <_ZNK13sysStatusData15get_verboseModeEv>:
bool sysStatusData::get_verboseMode() const {
   b5b5e:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData,verboseMode));
   b5b60:	2111      	movs	r1, #17
   b5b62:	f7ff ffea 	bl	b5b3a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5b66:	bd08      	pop	{r3, pc}

000b5b68 <_ZNK13sysStatusData18get_solarPowerModeEv>:
bool sysStatusData::get_solarPowerMode() const  {
   b5b68:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData,solarPowerMode ));
   b5b6a:	2112      	movs	r1, #18
   b5b6c:	f7ff ffe5 	bl	b5b3a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5b70:	bd08      	pop	{r3, pc}

000b5b72 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const  {
   b5b72:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData,lowPowerMode ));
   b5b74:	2113      	movs	r1, #19
   b5b76:	f7ff ffe0 	bl	b5b3a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5b7a:	bd08      	pop	{r3, pc}

000b5b7c <_ZNK13sysStatusData18get_lowBatteryModeEv>:
bool sysStatusData::get_lowBatteryMode() const  {
   b5b7c:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowBatteryMode));
   b5b7e:	2114      	movs	r1, #20
   b5b80:	f7ff ffdb 	bl	b5b3a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5b84:	bd08      	pop	{r3, pc}

000b5b86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5b86:	b570      	push	{r4, r5, r6, lr}
   b5b88:	4604      	mov	r4, r0
   b5b8a:	3004      	adds	r0, #4
   b5b8c:	460d      	mov	r5, r1
   b5b8e:	4616      	mov	r6, r2
   b5b90:	f7ff fe31 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b94:	68e3      	ldr	r3, [r4, #12]
   b5b96:	3b01      	subs	r3, #1
   b5b98:	42ab      	cmp	r3, r5
   b5b9a:	d307      	bcc.n	b5bac <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5b9c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5b9e:	5d5a      	ldrb	r2, [r3, r5]
   b5ba0:	42b2      	cmp	r2, r6
   b5ba2:	d003      	beq.n	b5bac <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                        *(T *)p = value;
   b5ba4:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f004 f95a 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5bac:	6860      	ldr	r0, [r4, #4]
        }
   b5bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5bb2:	f004 baaf 	b.w	ba114 <os_mutex_recursive_unlock>

000b5bb6 <_ZN13sysStatusData15set_verboseModeEb>:
void sysStatusData::set_verboseMode(bool value) {
   b5bb6:	b508      	push	{r3, lr}
   b5bb8:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verboseMode), value);
   b5bba:	2111      	movs	r1, #17
   b5bbc:	f7ff ffe3 	bl	b5b86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5bc0:	bd08      	pop	{r3, pc}

000b5bc2 <_ZN13sysStatusData18set_solarPowerModeEb>:
void sysStatusData::set_solarPowerMode(bool value) {
   b5bc2:	b508      	push	{r3, lr}
   b5bc4:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, solarPowerMode), value);
   b5bc6:	2112      	movs	r1, #18
   b5bc8:	f7ff ffdd 	bl	b5b86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5bcc:	bd08      	pop	{r3, pc}

000b5bce <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5bce:	b508      	push	{r3, lr}
   b5bd0:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b5bd2:	2113      	movs	r1, #19
   b5bd4:	f7ff ffd7 	bl	b5b86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5bd8:	bd08      	pop	{r3, pc}

000b5bda <_ZN13sysStatusData18set_lowBatteryModeEb>:
void sysStatusData::set_lowBatteryMode(bool value) {
   b5bda:	b508      	push	{r3, lr}
   b5bdc:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowBatteryMode), value);
   b5bde:	2114      	movs	r1, #20
   b5be0:	f7ff ffd1 	bl	b5b86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5be4:	bd08      	pop	{r3, pc}

000b5be6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5be8:	4604      	mov	r4, r0
   b5bea:	3004      	adds	r0, #4
   b5bec:	460d      	mov	r5, r1
   b5bee:	f7ff fe02 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5bf2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5bf4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5bf6:	3b08      	subs	r3, #8
   b5bf8:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5bfa:	bf23      	ittte	cs
   b5bfc:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5bfe:	1949      	addcs	r1, r1, r5
   b5c00:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5c04:	2600      	movcc	r6, #0
   b5c06:	bf38      	it	cc
   b5c08:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5c0a:	f004 fa83 	bl	ba114 <os_mutex_recursive_unlock>
        }
   b5c0e:	4630      	mov	r0, r6
   b5c10:	4639      	mov	r1, r7
   b5c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c14 <_ZNK13sysStatusData14get_lastReportEv>:
time_t sysStatusData::get_lastReport() const  {
   b5c14:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData,lastReport));
   b5c16:	2140      	movs	r1, #64	; 0x40
   b5c18:	f7ff ffe5 	bl	b5be6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5c1c:	bd08      	pop	{r3, pc}

000b5c1e <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const  {
   b5c1e:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData,lastConnection));
   b5c20:	2148      	movs	r1, #72	; 0x48
   b5c22:	f7ff ffe0 	bl	b5be6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5c26:	bd08      	pop	{r3, pc}

000b5c28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c2a:	4604      	mov	r4, r0
   b5c2c:	3004      	adds	r0, #4
   b5c2e:	460d      	mov	r5, r1
   b5c30:	461e      	mov	r6, r3
   b5c32:	4617      	mov	r7, r2
   b5c34:	f7ff fddf 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c38:	68e3      	ldr	r3, [r4, #12]
   b5c3a:	3b08      	subs	r3, #8
   b5c3c:	42ab      	cmp	r3, r5
   b5c3e:	d30c      	bcc.n	b5c5a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c40:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5c42:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5c44:	5958      	ldr	r0, [r3, r5]
   b5c46:	6851      	ldr	r1, [r2, #4]
   b5c48:	42b1      	cmp	r1, r6
   b5c4a:	bf08      	it	eq
   b5c4c:	42b8      	cmpeq	r0, r7
   b5c4e:	d004      	beq.n	b5c5a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b5c50:	515f      	str	r7, [r3, r5]
                        updateHash();
   b5c52:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5c54:	6056      	str	r6, [r2, #4]
                        updateHash();
   b5c56:	f004 f903 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5c5a:	6860      	ldr	r0, [r4, #4]
        }
   b5c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5c60:	f004 ba58 	b.w	ba114 <os_mutex_recursive_unlock>

000b5c64 <_ZN13sysStatusData14set_lastReportEx>:
void sysStatusData::set_lastReport(time_t value) {
   b5c64:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastReport), value);
   b5c66:	2140      	movs	r1, #64	; 0x40
   b5c68:	f7ff ffde 	bl	b5c28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5c6c:	bd08      	pop	{r3, pc}

000b5c6e <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5c6e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5c70:	2148      	movs	r1, #72	; 0x48
   b5c72:	f7ff ffd9 	bl	b5c28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5c76:	bd08      	pop	{r3, pc}

000b5c78 <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b5c78:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b5c7a:	2150      	movs	r1, #80	; 0x50
   b5c7c:	f7ff ffd4 	bl	b5c28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5c80:	bd08      	pop	{r3, pc}

000b5c82 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5c82:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5c84:	2118      	movs	r1, #24
   b5c86:	f7ff ffcf 	bl	b5c28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5c8a:	bd08      	pop	{r3, pc}

000b5c8c <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b5c8c:	b510      	push	{r4, lr}
  current.set_lastCountTime(Time.now());
   b5c8e:	f7ff feb1 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5c92:	4604      	mov	r4, r0
   b5c94:	f007 fc45 	bl	bd522 <_ZN9TimeClass3nowEv>
   b5c98:	4602      	mov	r2, r0
   b5c9a:	17c3      	asrs	r3, r0, #31
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	f7ff fff0 	bl	b5c82 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5ca2:	f7ff fe49 	bl	b5938 <_ZN13sysStatusData8instanceEv>
}
   b5ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5caa:	2100      	movs	r1, #0
   b5cac:	f7ff bf27 	b.w	b5afe <_ZN13sysStatusData14set_resetCountEh>

000b5cb0 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b5cb0:	b510      	push	{r4, lr}
   b5cb2:	4604      	mov	r4, r0
    PersistentDataFile::initialize();
   b5cb4:	f004 f97c 	bl	b9fb0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b5cb8:	4905      	ldr	r1, [pc, #20]	; (b5cd0 <_ZN17currentStatusData10initializeEv+0x20>)
   b5cba:	4806      	ldr	r0, [pc, #24]	; (b5cd4 <_ZN17currentStatusData10initializeEv+0x24>)
   b5cbc:	f7fe ff73 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b5cc0:	4620      	mov	r0, r4
   b5cc2:	f7ff ffe3 	bl	b5c8c <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b5cc6:	4620      	mov	r0, r4
}
   b5cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b5ccc:	f004 b8c8 	b.w	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b5cd0:	000be6ea 	.word	0x000be6ea
   b5cd4:	2003e64c 	.word	0x2003e64c

000b5cd8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5cd8:	b538      	push	{r3, r4, r5, lr}
   b5cda:	4604      	mov	r4, r0
   b5cdc:	3004      	adds	r0, #4
   b5cde:	460d      	mov	r5, r1
   b5ce0:	f7ff fd89 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ce4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5ce6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ce8:	3b02      	subs	r3, #2
   b5cea:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5cec:	bf26      	itte	cs
   b5cee:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5cf0:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5cf2:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5cf4:	f004 fa0e 	bl	ba114 <os_mutex_recursive_unlock>
        }
   b5cf8:	4628      	mov	r0, r5
   b5cfa:	bd38      	pop	{r3, r4, r5, pc}

000b5cfc <_ZNK13sysStatusData26get_lastConnectionDurationEv>:
uint16_t sysStatusData::get_lastConnectionDuration() const  {
   b5cfc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,lastConnectionDuration));
   b5cfe:	2158      	movs	r1, #88	; 0x58
   b5d00:	f7ff ffea 	bl	b5cd8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5d04:	bd08      	pop	{r3, pc}
	...

000b5d08 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b5d08:	b510      	push	{r4, lr}
    bool valid = PersistentDataFile::validate(dataSize);
   b5d0a:	f004 f8e5 	bl	b9ed8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b5d0e:	4604      	mov	r4, r0
   b5d10:	b198      	cbz	r0, b5d3a <_ZN13sysStatusData8validateEj+0x32>
        if (sysStatus.get_openTime() < 0 || sysStatus.get_openTime() > 12) {
   b5d12:	f7ff fe11 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5d16:	f7ff fec0 	bl	b5a9a <_ZNK13sysStatusData12get_openTimeEv>
   b5d1a:	f7ff fe0d 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5d1e:	f7ff febc 	bl	b5a9a <_ZNK13sysStatusData12get_openTimeEv>
   b5d22:	280c      	cmp	r0, #12
   b5d24:	d90b      	bls.n	b5d3e <_ZN13sysStatusData8validateEj+0x36>
            Log.info("data not valid open time =%d", sysStatus.get_openTime());
   b5d26:	f7ff fe07 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5d2a:	f7ff feb6 	bl	b5a9a <_ZNK13sysStatusData12get_openTimeEv>
   b5d2e:	4911      	ldr	r1, [pc, #68]	; (b5d74 <_ZN13sysStatusData8validateEj+0x6c>)
   b5d30:	4602      	mov	r2, r0
            Log.info("data not valid last connection duration =%d", sysStatus.get_lastConnectionDuration());
   b5d32:	4811      	ldr	r0, [pc, #68]	; (b5d78 <_ZN13sysStatusData8validateEj+0x70>)
   b5d34:	f7fe ff37 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b5d38:	2400      	movs	r4, #0
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b5d3a:	4a10      	ldr	r2, [pc, #64]	; (b5d7c <_ZN13sysStatusData8validateEj+0x74>)
   b5d3c:	e014      	b.n	b5d68 <_ZN13sysStatusData8validateEj+0x60>
        else if (sysStatus.get_lastConnection() < 0 || sysStatus.get_lastConnectionDuration() > 900) {
   b5d3e:	f7ff fdfb 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5d42:	f7ff ff6c 	bl	b5c1e <_ZNK13sysStatusData18get_lastConnectionEv>
   b5d46:	2900      	cmp	r1, #0
   b5d48:	da06      	bge.n	b5d58 <_ZN13sysStatusData8validateEj+0x50>
            Log.info("data not valid last connection duration =%d", sysStatus.get_lastConnectionDuration());
   b5d4a:	f7ff fdf5 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5d4e:	f7ff ffd5 	bl	b5cfc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b5d52:	490b      	ldr	r1, [pc, #44]	; (b5d80 <_ZN13sysStatusData8validateEj+0x78>)
   b5d54:	4602      	mov	r2, r0
   b5d56:	e7ec      	b.n	b5d32 <_ZN13sysStatusData8validateEj+0x2a>
        else if (sysStatus.get_lastConnection() < 0 || sysStatus.get_lastConnectionDuration() > 900) {
   b5d58:	f7ff fdee 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5d5c:	f7ff ffce 	bl	b5cfc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b5d60:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
   b5d64:	d8f1      	bhi.n	b5d4a <_ZN13sysStatusData8validateEj+0x42>
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b5d66:	4a07      	ldr	r2, [pc, #28]	; (b5d84 <_ZN13sysStatusData8validateEj+0x7c>)
   b5d68:	4907      	ldr	r1, [pc, #28]	; (b5d88 <_ZN13sysStatusData8validateEj+0x80>)
   b5d6a:	4803      	ldr	r0, [pc, #12]	; (b5d78 <_ZN13sysStatusData8validateEj+0x70>)
   b5d6c:	f7fe ff1b 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
}
   b5d70:	4620      	mov	r0, r4
   b5d72:	bd10      	pop	{r4, pc}
   b5d74:	000be70d 	.word	0x000be70d
   b5d78:	2003e64c 	.word	0x2003e64c
   b5d7c:	000be703 	.word	0x000be703
   b5d80:	000be72a 	.word	0x000be72a
   b5d84:	000be707 	.word	0x000be707
   b5d88:	000be756 	.word	0x000be756

000b5d8c <_ZNK17currentStatusData12get_distanceEv>:
uint16_t currentStatusData::get_distance() const {
   b5d8c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, distance));
   b5d8e:	2110      	movs	r1, #16
   b5d90:	f7ff ffa2 	bl	b5cd8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5d94:	bd08      	pop	{r3, pc}
	...

000b5d98 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b5d98:	b510      	push	{r4, lr}
    bool valid = PersistentDataFile::validate(dataSize);
   b5d9a:	f004 f89d 	bl	b9ed8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b5d9e:	4604      	mov	r4, r0
   b5da0:	b1a0      	cbz	r0, b5dcc <_ZN17currentStatusData8validateEj+0x34>
        if (current.get_distance() < 0 || current.get_distance()  > 1024) {
   b5da2:	f7ff fe27 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5da6:	f7ff fff1 	bl	b5d8c <_ZNK17currentStatusData12get_distanceEv>
   b5daa:	f7ff fe23 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5dae:	f7ff ffed 	bl	b5d8c <_ZNK17currentStatusData12get_distanceEv>
   b5db2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b5db6:	d910      	bls.n	b5dda <_ZN17currentStatusData8validateEj+0x42>
            Log.info("current distance not valid =%d cm" , current.get_distance());
   b5db8:	f7ff fe1c 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b5dbc:	f7ff ffe6 	bl	b5d8c <_ZNK17currentStatusData12get_distanceEv>
   b5dc0:	4907      	ldr	r1, [pc, #28]	; (b5de0 <_ZN17currentStatusData8validateEj+0x48>)
   b5dc2:	4602      	mov	r2, r0
   b5dc4:	4807      	ldr	r0, [pc, #28]	; (b5de4 <_ZN17currentStatusData8validateEj+0x4c>)
   b5dc6:	f7fe feee 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b5dca:	2400      	movs	r4, #0
    Log.info("current distance is %s",(valid) ? "valid": "not valid");
   b5dcc:	4a06      	ldr	r2, [pc, #24]	; (b5de8 <_ZN17currentStatusData8validateEj+0x50>)
   b5dce:	4907      	ldr	r1, [pc, #28]	; (b5dec <_ZN17currentStatusData8validateEj+0x54>)
   b5dd0:	4804      	ldr	r0, [pc, #16]	; (b5de4 <_ZN17currentStatusData8validateEj+0x4c>)
   b5dd2:	f7fe fee8 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
}
   b5dd6:	4620      	mov	r0, r4
   b5dd8:	bd10      	pop	{r4, pc}
    Log.info("current distance is %s",(valid) ? "valid": "not valid");
   b5dda:	4a05      	ldr	r2, [pc, #20]	; (b5df0 <_ZN17currentStatusData8validateEj+0x58>)
   b5ddc:	e7f7      	b.n	b5dce <_ZN17currentStatusData8validateEj+0x36>
   b5dde:	bf00      	nop
   b5de0:	000be76b 	.word	0x000be76b
   b5de4:	2003e64c 	.word	0x2003e64c
   b5de8:	000be703 	.word	0x000be703
   b5dec:	000be78d 	.word	0x000be78d
   b5df0:	000be707 	.word	0x000be707

000b5df4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5df4:	b570      	push	{r4, r5, r6, lr}
   b5df6:	4604      	mov	r4, r0
   b5df8:	3004      	adds	r0, #4
   b5dfa:	460d      	mov	r5, r1
   b5dfc:	4616      	mov	r6, r2
   b5dfe:	f7ff fcfa 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e02:	68e3      	ldr	r3, [r4, #12]
   b5e04:	3b02      	subs	r3, #2
   b5e06:	42ab      	cmp	r3, r5
   b5e08:	d307      	bcc.n	b5e1a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e0a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5e0c:	5b5a      	ldrh	r2, [r3, r5]
   b5e0e:	42b2      	cmp	r2, r6
   b5e10:	d003      	beq.n	b5e1a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b5e12:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b5e14:	4620      	mov	r0, r4
   b5e16:	f004 f823 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5e1a:	6860      	ldr	r0, [r4, #4]
        }
   b5e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5e20:	f004 b978 	b.w	ba114 <os_mutex_recursive_unlock>

000b5e24 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b5e24:	b508      	push	{r3, lr}
   b5e26:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, lastConnectionDuration), value);
   b5e28:	2158      	movs	r1, #88	; 0x58
   b5e2a:	f7ff ffe3 	bl	b5df4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5e2e:	bd08      	pop	{r3, pc}

000b5e30 <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b5e30:	b570      	push	{r4, r5, r6, lr}
   b5e32:	b08c      	sub	sp, #48	; 0x30
    PersistentDataFile::initialize();
   b5e34:	f004 f8bc 	bl	b9fb0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    const char message[26] = "Loading System Defaults";
   b5e38:	4b35      	ldr	r3, [pc, #212]	; (b5f10 <_ZN13sysStatusData10initializeEv+0xe0>)
   b5e3a:	ac05      	add	r4, sp, #20
   b5e3c:	f103 0618 	add.w	r6, r3, #24
   b5e40:	4622      	mov	r2, r4
   b5e42:	6818      	ldr	r0, [r3, #0]
   b5e44:	6859      	ldr	r1, [r3, #4]
   b5e46:	4625      	mov	r5, r4
   b5e48:	c503      	stmia	r5!, {r0, r1}
   b5e4a:	3308      	adds	r3, #8
   b5e4c:	42b3      	cmp	r3, r6
   b5e4e:	462c      	mov	r4, r5
   b5e50:	d1f7      	bne.n	b5e42 <_ZN13sysStatusData10initializeEv+0x12>
   b5e52:	2300      	movs	r3, #0
    Log.info(message);
   b5e54:	4611      	mov	r1, r2
   b5e56:	482f      	ldr	r0, [pc, #188]	; (b5f14 <_ZN13sysStatusData10initializeEv+0xe4>)
    const char message[26] = "Loading System Defaults";
   b5e58:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    Log.info(message);
   b5e5c:	f7fe fea3 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e60:	f004 fc54 	bl	ba70c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode",message, PRIVATE);
   b5e64:	aa05      	add	r2, sp, #20
   b5e66:	b1d0      	cbz	r0, b5e9e <_ZN13sysStatusData10initializeEv+0x6e>
   b5e68:	4b2b      	ldr	r3, [pc, #172]	; (b5f18 <_ZN13sysStatusData10initializeEv+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5e6a:	492c      	ldr	r1, [pc, #176]	; (b5f1c <_ZN13sysStatusData10initializeEv+0xec>)
   b5e6c:	781b      	ldrb	r3, [r3, #0]
   b5e6e:	f88d 3000 	strb.w	r3, [sp]
   b5e72:	a803      	add	r0, sp, #12
   b5e74:	233c      	movs	r3, #60	; 0x3c
   b5e76:	f005 f925 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b5e7a:	9c04      	ldr	r4, [sp, #16]
   b5e7c:	b17c      	cbz	r4, b5e9e <_ZN13sysStatusData10initializeEv+0x6e>
      if (--_M_use_count == 0)
   b5e7e:	6863      	ldr	r3, [r4, #4]
   b5e80:	3b01      	subs	r3, #1
   b5e82:	6063      	str	r3, [r4, #4]
   b5e84:	b95b      	cbnz	r3, b5e9e <_ZN13sysStatusData10initializeEv+0x6e>
          _M_dispose();
   b5e86:	6823      	ldr	r3, [r4, #0]
   b5e88:	4620      	mov	r0, r4
   b5e8a:	689b      	ldr	r3, [r3, #8]
   b5e8c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5e8e:	68a3      	ldr	r3, [r4, #8]
   b5e90:	3b01      	subs	r3, #1
   b5e92:	60a3      	str	r3, [r4, #8]
   b5e94:	b91b      	cbnz	r3, b5e9e <_ZN13sysStatusData10initializeEv+0x6e>
            _M_destroy();
   b5e96:	6823      	ldr	r3, [r4, #0]
   b5e98:	4620      	mov	r0, r4
   b5e9a:	68db      	ldr	r3, [r3, #12]
   b5e9c:	4798      	blx	r3
    Log.info("Loading system defaults");
   b5e9e:	4920      	ldr	r1, [pc, #128]	; (b5f20 <_ZN13sysStatusData10initializeEv+0xf0>)
   b5ea0:	481c      	ldr	r0, [pc, #112]	; (b5f14 <_ZN13sysStatusData10initializeEv+0xe4>)
   b5ea2:	f7fe fe80 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_structuresVersion(1);
   b5ea6:	f7ff fd47 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5eaa:	2101      	movs	r1, #1
   b5eac:	f7ff fe21 	bl	b5af2 <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_verboseMode(false);
   b5eb0:	f7ff fd42 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5eb4:	2100      	movs	r1, #0
   b5eb6:	f7ff fe7e 	bl	b5bb6 <_ZN13sysStatusData15set_verboseModeEb>
    sysStatus.set_lowBatteryMode(false);
   b5eba:	f7ff fd3d 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5ebe:	2100      	movs	r1, #0
   b5ec0:	f7ff fe8b 	bl	b5bda <_ZN13sysStatusData18set_lowBatteryModeEb>
    sysStatus.set_solarPowerMode(true);
   b5ec4:	f7ff fd38 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5ec8:	2101      	movs	r1, #1
   b5eca:	f7ff fe7a 	bl	b5bc2 <_ZN13sysStatusData18set_solarPowerModeEb>
    sysStatus.set_lowPowerMode(false);          // This should be changed to true once we have tested
   b5ece:	f7ff fd33 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5ed2:	2100      	movs	r1, #0
   b5ed4:	f7ff fe7b 	bl	b5bce <_ZN13sysStatusData16set_lowPowerModeEb>
    sysStatus.set_timeZoneStr("ANAT-12");     // NZ Time
   b5ed8:	f7ff fd2e 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5edc:	4911      	ldr	r1, [pc, #68]	; (b5f24 <_ZN13sysStatusData10initializeEv+0xf4>)
   b5ede:	f7ff fd4e 	bl	b597e <_ZN13sysStatusData15set_timeZoneStrEPKc>
    sysStatus.set_sensorType(1);                // PIR sensor
   b5ee2:	f7ff fd29 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5ee6:	2101      	movs	r1, #1
   b5ee8:	f7ff fe1b 	bl	b5b22 <_ZN13sysStatusData14set_sensorTypeEh>
    sysStatus.set_openTime(0);
   b5eec:	f7ff fd24 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5ef0:	2100      	movs	r1, #0
   b5ef2:	f7ff fe0a 	bl	b5b0a <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(24);                                           // New standard with v20
   b5ef6:	f7ff fd1f 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5efa:	2118      	movs	r1, #24
   b5efc:	f7ff fe0b 	bl	b5b16 <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_lastConnectionDuration(0);                               // New measure
   b5f00:	f7ff fd1a 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b5f04:	2100      	movs	r1, #0
   b5f06:	f7ff ff8d 	bl	b5e24 <_ZN13sysStatusData26set_lastConnectionDurationEt>
}
   b5f0a:	b00c      	add	sp, #48	; 0x30
   b5f0c:	bd70      	pop	{r4, r5, r6, pc}
   b5f0e:	bf00      	nop
   b5f10:	000be39c 	.word	0x000be39c
   b5f14:	2003e64c 	.word	0x2003e64c
   b5f18:	2003e5a5 	.word	0x2003e5a5
   b5f1c:	000be7a4 	.word	0x000be7a4
   b5f20:	000be7a9 	.word	0x000be7a9
   b5f24:	000be7c1 	.word	0x000be7c1

000b5f28 <_ZN17currentStatusData12set_distanceEt>:
void currentStatusData::set_distance(uint16_t value) {
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, distance), value);
   b5f2c:	2110      	movs	r1, #16
   b5f2e:	f7ff ff61 	bl	b5df4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5f32:	bd08      	pop	{r3, pc}

000b5f34 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>:
        T getValue(size_t offset) const {
   b5f34:	b538      	push	{r3, r4, r5, lr}
   b5f36:	4604      	mov	r4, r0
   b5f38:	ed2d 8b02 	vpush	{d8}
   b5f3c:	3004      	adds	r0, #4
   b5f3e:	460d      	mov	r5, r1
   b5f40:	f7ff fc59 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f44:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5f46:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f48:	3b04      	subs	r3, #4
   b5f4a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5f4c:	bf29      	itett	cs
   b5f4e:	68a1      	ldrcs	r1, [r4, #8]
            T result = 0;
   b5f50:	ed9f 8a05 	vldrcc	s16, [pc, #20]	; b5f68 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j+0x34>
                    result = *(const T *)p;
   b5f54:	1949      	addcs	r1, r1, r5
   b5f56:	ed91 8a00 	vldrcs	s16, [r1]
            os_mutex_recursive_unlock(handle_); 
   b5f5a:	f004 f8db 	bl	ba114 <os_mutex_recursive_unlock>
        }
   b5f5e:	eeb0 0a48 	vmov.f32	s0, s16
   b5f62:	ecbd 8b02 	vpop	{d8}
   b5f66:	bd38      	pop	{r3, r4, r5, pc}
   b5f68:	00000000 	.word	0x00000000

000b5f6c <_ZNK17currentStatusData17get_internalTempCEv>:
float currentStatusData::get_internalTempC() const {
   b5f6c:	b508      	push	{r3, lr}
    return getValue<float>(offsetof(CurrentData, internalTempC));
   b5f6e:	2120      	movs	r1, #32
   b5f70:	f7ff ffe0 	bl	b5f34 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>
}
   b5f74:	bd08      	pop	{r3, pc}

000b5f76 <_ZNK17currentStatusData17get_externalTempCEv>:
float currentStatusData::get_externalTempC() const {
   b5f76:	b508      	push	{r3, lr}
    return getValue<float>(offsetof(CurrentData, externalTempC));
   b5f78:	2124      	movs	r1, #36	; 0x24
   b5f7a:	f7ff ffdb 	bl	b5f34 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>
}
   b5f7e:	bd08      	pop	{r3, pc}

000b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>:
float currentStatusData::get_stateOfCharge() const  {
   b5f80:	b508      	push	{r3, lr}
    return getValue<float>(offsetof(CurrentData,stateOfCharge));
   b5f82:	2138      	movs	r1, #56	; 0x38
   b5f84:	f7ff ffd6 	bl	b5f34 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>
}
   b5f88:	bd08      	pop	{r3, pc}

000b5f8a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5f8a:	b538      	push	{r3, r4, r5, lr}
   b5f8c:	4604      	mov	r4, r0
   b5f8e:	ed2d 8b02 	vpush	{d8}
   b5f92:	3004      	adds	r0, #4
   b5f94:	460d      	mov	r5, r1
   b5f96:	eeb0 8a40 	vmov.f32	s16, s0
   b5f9a:	f7ff fc2c 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f9e:	68e3      	ldr	r3, [r4, #12]
   b5fa0:	3b04      	subs	r3, #4
   b5fa2:	42ab      	cmp	r3, r5
   b5fa4:	d30d      	bcc.n	b5fc2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_+0x38>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5fa6:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5fa8:	1959      	adds	r1, r3, r5
                    if (oldValue != value) {
   b5faa:	edd1 7a00 	vldr	s15, [r1]
   b5fae:	eef4 7a48 	vcmp.f32	s15, s16
   b5fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5fb6:	d004      	beq.n	b5fc2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_+0x38>
                        *(T *)p = value;
   b5fb8:	ed81 8a00 	vstr	s16, [r1]
                        updateHash();
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	f003 ff4f 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
        }
   b5fc2:	ecbd 8b02 	vpop	{d8}
            os_mutex_recursive_unlock(handle_); 
   b5fc6:	6860      	ldr	r0, [r4, #4]
        }
   b5fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5fcc:	f004 b8a2 	b.w	ba114 <os_mutex_recursive_unlock>

000b5fd0 <_ZN17currentStatusData17set_internalTempCEf>:
void currentStatusData::set_internalTempC(float value) {
   b5fd0:	b508      	push	{r3, lr}
    setValue<float>(offsetof(CurrentData, internalTempC), value);
   b5fd2:	2120      	movs	r1, #32
   b5fd4:	f7ff ffd9 	bl	b5f8a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>
}
   b5fd8:	bd08      	pop	{r3, pc}

000b5fda <_ZN17currentStatusData17set_externalTempCEf>:
void currentStatusData::set_externalTempC(float value) {
   b5fda:	b508      	push	{r3, lr}
    setValue<float>(offsetof(CurrentData, externalTempC), value);
   b5fdc:	2124      	movs	r1, #36	; 0x24
   b5fde:	f7ff ffd4 	bl	b5f8a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>
}
   b5fe2:	bd08      	pop	{r3, pc}

000b5fe4 <_ZN17currentStatusData17set_stateOfChargeEf>:
void currentStatusData::set_stateOfCharge(float value) {
   b5fe4:	b508      	push	{r3, lr}
    setValue<float>(offsetof(CurrentData, stateOfCharge), value);
   b5fe6:	2138      	movs	r1, #56	; 0x38
   b5fe8:	f7ff ffcf 	bl	b5f8a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>
}
   b5fec:	bd08      	pop	{r3, pc}

000b5fee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIaEET_j>:
        T getValue(size_t offset) const {
   b5fee:	b538      	push	{r3, r4, r5, lr}
   b5ff0:	4604      	mov	r4, r0
   b5ff2:	3004      	adds	r0, #4
   b5ff4:	460d      	mov	r5, r1
   b5ff6:	f7ff fbfe 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ffa:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5ffc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ffe:	3b01      	subs	r3, #1
   b6000:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6002:	bf26      	itte	cs
   b6004:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6006:	575d      	ldrsbcs	r5, [r3, r5]
            T result = 0;
   b6008:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b600a:	f004 f883 	bl	ba114 <os_mutex_recursive_unlock>
        }
   b600e:	4628      	mov	r0, r5
   b6010:	bd38      	pop	{r3, r4, r5, pc}

000b6012 <_ZNK17currentStatusData13get_alertCodeEv>:
int8_t currentStatusData::get_alertCode() const {
   b6012:	b508      	push	{r3, lr}
    return getValue<int8_t>(offsetof(CurrentData, alertCode));
   b6014:	2128      	movs	r1, #40	; 0x28
   b6016:	f7ff ffea 	bl	b5fee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIaEET_j>
}
   b601a:	bd08      	pop	{r3, pc}

000b601c <_GLOBAL__sub_I_persistentDataPathSystem>:
        val_(val) {
   b601c:	4b01      	ldr	r3, [pc, #4]	; (b6024 <_GLOBAL__sub_I_persistentDataPathSystem+0x8>)
   b601e:	2201      	movs	r2, #1
   b6020:	701a      	strb	r2, [r3, #0]
}
   b6022:	4770      	bx	lr
   b6024:	2003e5a5 	.word	0x2003e5a5

000b6028 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6028:	4770      	bx	lr

000b602a <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b602a:	4770      	bx	lr

000b602c <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b602c:	b510      	push	{r4, lr}
}
   b602e:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6030:	4604      	mov	r4, r0
}
   b6032:	f7fe fd4a 	bl	b4aca <_ZdlPvj>
   b6036:	4620      	mov	r0, r4
   b6038:	bd10      	pop	{r4, pc}
	...

000b603c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b603c:	b510      	push	{r4, lr}
   b603e:	4b03      	ldr	r3, [pc, #12]	; (b604c <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6040:	6003      	str	r3, [r0, #0]
   b6042:	4604      	mov	r4, r0
   b6044:	f001 fdbe 	bl	b7bc4 <_ZN10JsonParserD1Ev>
   b6048:	4620      	mov	r0, r4
   b604a:	bd10      	pop	{r4, pc}
   b604c:	000becb4 	.word	0x000becb4

000b6050 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6050:	b510      	push	{r4, lr}
   b6052:	4604      	mov	r4, r0
   b6054:	f7ff fff2 	bl	b603c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6058:	4620      	mov	r0, r4
   b605a:	f640 112c 	movw	r1, #2348	; 0x92c
   b605e:	f7fe fd34 	bl	b4aca <_ZdlPvj>
   b6062:	4620      	mov	r0, r4
   b6064:	bd10      	pop	{r4, pc}

000b6066 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6066:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6068:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b606a:	6853      	ldr	r3, [r2, #4]
   b606c:	6890      	ldr	r0, [r2, #8]
   b606e:	6814      	ldr	r4, [r2, #0]
   b6070:	105e      	asrs	r6, r3, #1
   b6072:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6076:	07db      	lsls	r3, r3, #31
   b6078:	bf48      	it	mi
   b607a:	5983      	ldrmi	r3, [r0, r6]
   b607c:	4668      	mov	r0, sp
   b607e:	bf48      	it	mi
   b6080:	591c      	ldrmi	r4, [r3, r4]
   b6082:	f006 fefa 	bl	bce7a <_ZN6StringC1EOS_>
   b6086:	4669      	mov	r1, sp
   b6088:	4628      	mov	r0, r5
   b608a:	47a0      	blx	r4
   b608c:	4604      	mov	r4, r0
   b608e:	4668      	mov	r0, sp
   b6090:	f006 fe76 	bl	bcd80 <_ZN6StringD1Ev>
      }
   b6094:	4620      	mov	r0, r4
   b6096:	b004      	add	sp, #16
   b6098:	bd70      	pop	{r4, r5, r6, pc}

000b609a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b609a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b609c:	b538      	push	{r3, r4, r5, lr}
   b609e:	4604      	mov	r4, r0
	switch (__op)
   b60a0:	d102      	bne.n	b60a8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b60a2:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b60a4:	6023      	str	r3, [r4, #0]
	}
   b60a6:	e003      	b.n	b60b0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b60a8:	2a02      	cmp	r2, #2
   b60aa:	d003      	beq.n	b60b4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b60ac:	2a03      	cmp	r2, #3
   b60ae:	d00d      	beq.n	b60cc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b60b0:	2000      	movs	r0, #0
   b60b2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b60b4:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b60b6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b60b8:	f7fe fd03 	bl	b4ac2 <_Znwj>
   b60bc:	4603      	mov	r3, r0
   b60be:	2800      	cmp	r0, #0
   b60c0:	d0f0      	beq.n	b60a4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b60c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b60c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b60ca:	e7eb      	b.n	b60a4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b60cc:	6800      	ldr	r0, [r0, #0]
   b60ce:	2800      	cmp	r0, #0
   b60d0:	d0ee      	beq.n	b60b0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b60d2:	210c      	movs	r1, #12
   b60d4:	f7fe fcf9 	bl	b4aca <_ZdlPvj>
   b60d8:	e7ea      	b.n	b60b0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b60da <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b60da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b60dc:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b60de:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b60e0:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b60e2:	f001 ff07 	bl	b7ef4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b60e6:	b120      	cbz	r0, b60f2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b60e8:	9901      	ldr	r1, [sp, #4]
   b60ea:	462a      	mov	r2, r5
   b60ec:	4620      	mov	r0, r4
   b60ee:	f001 fee3 	bl	b7eb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b60f2:	b003      	add	sp, #12
   b60f4:	bd30      	pop	{r4, r5, pc}
	...

000b60f8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b60f8:	4b0a      	ldr	r3, [pc, #40]	; (b6124 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b60fa:	b510      	push	{r4, lr}
   b60fc:	4604      	mov	r4, r0
   b60fe:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6100:	f005 fe62 	bl	bbdc8 <_ZN5spark10LogManager8instanceEv>
   b6104:	4621      	mov	r1, r4
   b6106:	f006 f878 	bl	bc1fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b610a:	f007 fafb 	bl	bd704 <_Z16_fetch_usbserialv>
   b610e:	f007 faed 	bl	bd6ec <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6112:	4620      	mov	r0, r4
   b6114:	4b04      	ldr	r3, [pc, #16]	; (b6128 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6116:	f840 3b04 	str.w	r3, [r0], #4
   b611a:	f005 fef7 	bl	bbf0c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b611e:	4620      	mov	r0, r4
   b6120:	bd10      	pop	{r4, pc}
   b6122:	bf00      	nop
   b6124:	000bec9c 	.word	0x000bec9c
   b6128:	000bec84 	.word	0x000bec84

000b612c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b612c:	b510      	push	{r4, lr}
   b612e:	4604      	mov	r4, r0
    }
   b6130:	f7ff ffe2 	bl	b60f8 <_ZN5spark16SerialLogHandlerD1Ev>
   b6134:	4620      	mov	r0, r4
   b6136:	2124      	movs	r1, #36	; 0x24
   b6138:	f7fe fcc7 	bl	b4aca <_ZdlPvj>
   b613c:	4620      	mov	r0, r4
   b613e:	bd10      	pop	{r4, pc}

000b6140 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6140:	b510      	push	{r4, lr}
    if (!_instance) {
   b6142:	4c06      	ldr	r4, [pc, #24]	; (b615c <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6144:	6823      	ldr	r3, [r4, #0]
   b6146:	b933      	cbnz	r3, b6156 <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6148:	2004      	movs	r0, #4
   b614a:	f7fe fcba 	bl	b4ac2 <_Znwj>
   b614e:	b108      	cbz	r0, b6154 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6150:	4b03      	ldr	r3, [pc, #12]	; (b6160 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6152:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6154:	6020      	str	r0, [r4, #0]
}
   b6156:	6820      	ldr	r0, [r4, #0]
   b6158:	bd10      	pop	{r4, pc}
   b615a:	bf00      	nop
   b615c:	2003e5c0 	.word	0x2003e5c0
   b6160:	000bed00 	.word	0x000bed00

000b6164 <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6164:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6166:	4919      	ldr	r1, [pc, #100]	; (b61cc <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6168:	b085      	sub	sp, #20
   b616a:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b616c:	4818      	ldr	r0, [pc, #96]	; (b61d0 <_ZN18Particle_Functions5setupEv+0x6c>)
   b616e:	f7fe fd1a 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6172:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6174:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6176:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6178:	f7fe fca3 	bl	b4ac2 <_Znwj>
   b617c:	b118      	cbz	r0, b6186 <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b617e:	4b15      	ldr	r3, [pc, #84]	; (b61d4 <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6180:	6084      	str	r4, [r0, #8]
   b6182:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6186:	4b14      	ldr	r3, [pc, #80]	; (b61d8 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6188:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b618a:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b618c:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b618e:	4b13      	ldr	r3, [pc, #76]	; (b61dc <_ZN18Particle_Functions5setupEv+0x78>)
   b6190:	9302      	str	r3, [sp, #8]
   b6192:	f7fe fc96 	bl	b4ac2 <_Znwj>
   b6196:	4604      	mov	r4, r0
   b6198:	b178      	cbz	r0, b61ba <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b619a:	2300      	movs	r3, #0
   b619c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b619e:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b61a0:	b133      	cbz	r3, b61b0 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b61a2:	2202      	movs	r2, #2
   b61a4:	4669      	mov	r1, sp
   b61a6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b61a8:	9b03      	ldr	r3, [sp, #12]
   b61aa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b61ac:	9b02      	ldr	r3, [sp, #8]
   b61ae:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b61b0:	4a0b      	ldr	r2, [pc, #44]	; (b61e0 <_ZN18Particle_Functions5setupEv+0x7c>)
   b61b2:	480c      	ldr	r0, [pc, #48]	; (b61e4 <_ZN18Particle_Functions5setupEv+0x80>)
   b61b4:	4621      	mov	r1, r4
   b61b6:	f004 fe74 	bl	baea2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b61ba:	9b02      	ldr	r3, [sp, #8]
   b61bc:	b11b      	cbz	r3, b61c6 <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b61be:	4669      	mov	r1, sp
   b61c0:	2203      	movs	r2, #3
   b61c2:	4608      	mov	r0, r1
   b61c4:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b61c6:	b005      	add	sp, #20
   b61c8:	bd30      	pop	{r4, r5, pc}
   b61ca:	bf00      	nop
   b61cc:	000be8a0 	.word	0x000be8a0
   b61d0:	2003e64c 	.word	0x2003e64c
   b61d4:	000b62c9 	.word	0x000b62c9
   b61d8:	000b6067 	.word	0x000b6067
   b61dc:	000b609b 	.word	0x000b609b
   b61e0:	000be8ce 	.word	0x000be8ce
   b61e4:	000bae7b 	.word	0x000bae7b

000b61e8 <_ZN18Particle_Functions9sendEventEv>:
 * @details This idea is that this is called regardless of connected status.  We want to send regardless and connect if we can later
 * The time stamp is the time of the last count or the beginning of the hour if there is a zero hourly count for that period
 *
 *
 */
void Particle_Functions::sendEvent() {
   b61e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b61ec:	b0cd      	sub	sp, #308	; 0x134
  char data[256];                                                     // Store the date in this character array - not global
  unsigned long timeStampValue;                                       // Going to start sending timestamps - and will modify for midnight to fix reporting issue
  timeStampValue = Time.now();                                        // Set the timestamp (may need to adjust for midnight)
   b61ee:	f007 f998 	bl	bd522 <_ZN9TimeClass3nowEv>
   b61f2:	4680      	mov	r8, r0

  snprintf(data, sizeof(data), "{\"distance\":%i, \"battery\":%4.2f,\"key1\":\"%s\", \"temp\":%4.2f, \"resets\":%i, \"alerts\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.get_distance(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],current.get_internalTempC(), sysStatus.get_resetCount(), current.get_alertCode(), sysStatus.get_lastConnectionDuration(), timeStampValue);
   b61f4:	f7ff fbfe 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b61f8:	f7ff fdc8 	bl	b5d8c <_ZNK17currentStatusData12get_distanceEv>
   b61fc:	900b      	str	r0, [sp, #44]	; 0x2c
   b61fe:	f7ff fbf9 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6202:	f7ff febd 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6206:	ee10 4a10 	vmov	r4, s0
   b620a:	f7ff fbf3 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b620e:	f7ff fc53 	bl	b5ab8 <_ZNK17currentStatusData16get_batteryStateEv>
   b6212:	4a26      	ldr	r2, [pc, #152]	; (b62ac <_ZN18Particle_Functions9sendEventEv+0xc4>)
   b6214:	f852 9020 	ldr.w	r9, [r2, r0, lsl #2]
   b6218:	f7ff fbec 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b621c:	f7ff fea6 	bl	b5f6c <_ZNK17currentStatusData17get_internalTempCEv>
   b6220:	ee10 5a10 	vmov	r5, s0
   b6224:	f7ff fb88 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b6228:	f7ff fc32 	bl	b5a90 <_ZNK13sysStatusData14get_resetCountEv>
   b622c:	4606      	mov	r6, r0
   b622e:	f7ff fbe1 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6232:	f7ff feee 	bl	b6012 <_ZNK17currentStatusData13get_alertCodeEv>
   b6236:	4607      	mov	r7, r0
   b6238:	f7ff fb7e 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b623c:	f7ff fd5e 	bl	b5cfc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b6240:	e9cd 0808 	strd	r0, r8, [sp, #32]
   b6244:	4628      	mov	r0, r5
   b6246:	e9cd 6706 	strd	r6, r7, [sp, #24]
   b624a:	f7fe f84d 	bl	b42e8 <__aeabi_f2d>
   b624e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b6252:	4620      	mov	r0, r4
   b6254:	f8cd 9008 	str.w	r9, [sp, #8]
   b6258:	f7fe f846 	bl	b42e8 <__aeabi_f2d>
   b625c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b625e:	4a14      	ldr	r2, [pc, #80]	; (b62b0 <_ZN18Particle_Functions9sendEventEv+0xc8>)
   b6260:	e9cd 0100 	strd	r0, r1, [sp]
   b6264:	f44f 7180 	mov.w	r1, #256	; 0x100
   b6268:	a80c      	add	r0, sp, #48	; 0x30
   b626a:	f004 fb2f 	bl	ba8cc <snprintf>
  PublishQueuePosix::instance().publish("Ubidots_Level_Hook_v1", data, PRIVATE | WITH_ACK);
   b626e:	f002 fd59 	bl	b8d24 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b6272:	4b10      	ldr	r3, [pc, #64]	; (b62b4 <_ZN18Particle_Functions9sendEventEv+0xcc>)
   b6274:	4a10      	ldr	r2, [pc, #64]	; (b62b8 <_ZN18Particle_Functions9sendEventEv+0xd0>)
   b6276:	781b      	ldrb	r3, [r3, #0]
   b6278:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b627a:	4910      	ldr	r1, [pc, #64]	; (b62bc <_ZN18Particle_Functions9sendEventEv+0xd4>)
   b627c:	4313      	orrs	r3, r2
   b627e:	2400      	movs	r4, #0
   b6280:	6802      	ldr	r2, [r0, #0]
   b6282:	f88d 3000 	strb.w	r3, [sp]
   b6286:	f88d 4004 	strb.w	r4, [sp, #4]
   b628a:	233c      	movs	r3, #60	; 0x3c
   b628c:	6815      	ldr	r5, [r2, #0]
   b628e:	aa0c      	add	r2, sp, #48	; 0x30
   b6290:	47a8      	blx	r5
  Log.info("Ubidots Webhook: %s", data);                              // For monitoring via serial
   b6292:	aa0c      	add	r2, sp, #48	; 0x30
   b6294:	490a      	ldr	r1, [pc, #40]	; (b62c0 <_ZN18Particle_Functions9sendEventEv+0xd8>)
   b6296:	480b      	ldr	r0, [pc, #44]	; (b62c4 <_ZN18Particle_Functions9sendEventEv+0xdc>)
   b6298:	f7fe fc85 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
  current.set_alertCode(0);                                                 // Reset the alert after publish
   b629c:	f7ff fbaa 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b62a0:	4621      	mov	r1, r4
   b62a2:	f7ff fbca 	bl	b5a3a <_ZN17currentStatusData13set_alertCodeEa>
}
   b62a6:	b04d      	add	sp, #308	; 0x134
   b62a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b62ac:	2003e3c4 	.word	0x2003e3c4
   b62b0:	000be8d7 	.word	0x000be8d7
   b62b4:	2003e5bd 	.word	0x2003e5bd
   b62b8:	2003e5bc 	.word	0x2003e5bc
   b62bc:	000be950 	.word	0x000be950
   b62c0:	000be966 	.word	0x000be966
   b62c4:	2003e64c 	.word	0x2003e64c

000b62c8 <_ZN18Particle_Functions18jsonFunctionParserE6String>:
int Particle_Functions::jsonFunctionParser(String command) {
   b62c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62cc:	f6ad 2d4c 	subw	sp, sp, #2636	; 0xa4c
   b62d0:	460c      	mov	r4, r1
   b62d2:	4607      	mov	r7, r0
	String variable;
   b62d4:	49af      	ldr	r1, [pc, #700]	; (b6594 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b62d6:	a80b      	add	r0, sp, #44	; 0x2c
   b62d8:	f006 fd9d 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b62dc:	49ad      	ldr	r1, [pc, #692]	; (b6594 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b62de:	a80f      	add	r0, sp, #60	; 0x3c
   b62e0:	f006 fd99 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
  char messaging[64]=" ";
   b62e4:	2320      	movs	r3, #32
   b62e6:	223c      	movs	r2, #60	; 0x3c
   b62e8:	2100      	movs	r1, #0
   b62ea:	a818      	add	r0, sp, #96	; 0x60
   b62ec:	9317      	str	r3, [sp, #92]	; 0x5c
   b62ee:	f007 fdc5 	bl	bde7c <memset>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b62f2:	2350      	movs	r3, #80	; 0x50
   b62f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b62f8:	9300      	str	r3, [sp, #0]
   b62fa:	a952      	add	r1, sp, #328	; 0x148
   b62fc:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
   b6300:	a847      	add	r0, sp, #284	; 0x11c
   b6302:	f001 fcb7 	bl	b7c74 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6306:	4ba4      	ldr	r3, [pc, #656]	; (b6598 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
  Log.info(command.c_str());
   b6308:	6821      	ldr	r1, [r4, #0]
   b630a:	48a4      	ldr	r0, [pc, #656]	; (b659c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b630c:	9347      	str	r3, [sp, #284]	; 0x11c
   b630e:	f7fe fc4a 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();
   b6312:	a847      	add	r0, sp, #284	; 0x11c
   b6314:	f001 fca4 	bl	b7c60 <_ZN10JsonBuffer5clearEv>
   b6318:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b631a:	9107      	str	r1, [sp, #28]
   b631c:	4608      	mov	r0, r1
   b631e:	f7fe fb8d 	bl	b4a3c <strlen>
   b6322:	9907      	ldr	r1, [sp, #28]
   b6324:	4602      	mov	r2, r0
   b6326:	a847      	add	r0, sp, #284	; 0x11c
   b6328:	f001 fc7d 	bl	b7c26 <_ZN10JsonBuffer7addDataEPKcj>
	if (!jp.parse()) {
   b632c:	a847      	add	r0, sp, #284	; 0x11c
   b632e:	f001 ffeb 	bl	b8308 <_ZN10JsonParser5parseEv>
   b6332:	4604      	mov	r4, r0
   b6334:	b990      	cbnz	r0, b635c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x94>
		Log.info("Parsing failed - check syntax");
   b6336:	499a      	ldr	r1, [pc, #616]	; (b65a0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b6338:	4898      	ldr	r0, [pc, #608]	; (b659c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b633a:	f7fe fc34 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b633e:	4b99      	ldr	r3, [pc, #612]	; (b65a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6340:	4a97      	ldr	r2, [pc, #604]	; (b65a0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b6342:	781b      	ldrb	r3, [r3, #0]
   b6344:	f88d 3000 	strb.w	r3, [sp]
   b6348:	a827      	add	r0, sp, #156	; 0x9c
   b634a:	4997      	ldr	r1, [pc, #604]	; (b65a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b634c:	233c      	movs	r3, #60	; 0x3c
   b634e:	f004 feb9 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   b6352:	a828      	add	r0, sp, #160	; 0xa0
   b6354:	f7fe fd40 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return success;
   b6358:	4625      	mov	r5, r4
   b635a:	e016      	b.n	b638a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xc2>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b635c:	a847      	add	r0, sp, #284	; 0x11c
   b635e:	f001 fc99 	bl	b7c94 <_ZNK10JsonParser14getOuterObjectEv>
   b6362:	4a91      	ldr	r2, [pc, #580]	; (b65a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6364:	f8df 9298 	ldr.w	r9, [pc, #664]	; b6600 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x338>
   b6368:	f8df 8238 	ldr.w	r8, [pc, #568]	; b65a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b636c:	4601      	mov	r1, r0
   b636e:	ab0a      	add	r3, sp, #40	; 0x28
   b6370:	a847      	add	r0, sp, #284	; 0x11c
   b6372:	f001 fdbf 	bl	b7ef4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6376:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b6378:	990a      	ldr	r1, [sp, #40]	; 0x28
   b637a:	462a      	mov	r2, r5
   b637c:	a847      	add	r0, sp, #284	; 0x11c
   b637e:	f001 fcab 	bl	b7cd8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b6382:	4601      	mov	r1, r0
   b6384:	b978      	cbnz	r0, b63a6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xde>
      if (i == 0) return 0;                                       // No valid entries
   b6386:	2d00      	cmp	r5, #0
   b6388:	d1e6      	bne.n	b6358 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x90>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b638a:	a847      	add	r0, sp, #284	; 0x11c
   b638c:	f7ff fe56 	bl	b603c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b6390:	a80f      	add	r0, sp, #60	; 0x3c
   b6392:	f006 fcf5 	bl	bcd80 <_ZN6StringD1Ev>
	String variable;
   b6396:	a80b      	add	r0, sp, #44	; 0x2c
   b6398:	f006 fcf2 	bl	bcd80 <_ZN6StringD1Ev>
}
   b639c:	4628      	mov	r0, r5
   b639e:	f60d 2d4c 	addw	sp, sp, #2636	; 0xa4c
   b63a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b63a6:	ab0b      	add	r3, sp, #44	; 0x2c
   b63a8:	464a      	mov	r2, r9
   b63aa:	9007      	str	r0, [sp, #28]
   b63ac:	a847      	add	r0, sp, #284	; 0x11c
   b63ae:	f7ff fe94 	bl	b60da <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b63b2:	9907      	ldr	r1, [sp, #28]
   b63b4:	4a7d      	ldr	r2, [pc, #500]	; (b65ac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b63b6:	a847      	add	r0, sp, #284	; 0x11c
   b63b8:	ab0f      	add	r3, sp, #60	; 0x3c
   b63ba:	f7ff fe8e 	bl	b60da <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b63be:	497c      	ldr	r1, [pc, #496]	; (b65b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b63c0:	a80f      	add	r0, sp, #60	; 0x3c
   b63c2:	f006 fdf4 	bl	bcfae <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b63c6:	2800      	cmp	r0, #0
   b63c8:	d036      	beq.n	b6438 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x170>
   b63ca:	497a      	ldr	r1, [pc, #488]	; (b65b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b63cc:	a80b      	add	r0, sp, #44	; 0x2c
   b63ce:	f006 fdee 	bl	bcfae <_ZNK6String6equalsEPKc>
      if (variable == "all") {
   b63d2:	b360      	cbz	r0, b642e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x166>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b63d4:	4978      	ldr	r1, [pc, #480]	; (b65b8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b63d6:	a817      	add	r0, sp, #92	; 0x5c
   b63d8:	f007 fd9d 	bl	bdf16 <strcpy>
          sysStatus.initialize();                     // All will reset system values as well
   b63dc:	f7ff faac 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b63e0:	6803      	ldr	r3, [r0, #0]
   b63e2:	699b      	ldr	r3, [r3, #24]
   b63e4:	4798      	blx	r3
          current.resetEverything();
   b63e6:	f7ff fb05 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b63ea:	f7ff fc4f 	bl	b5c8c <_ZN17currentStatusData15resetEverythingEv>
      current.resetEverything();
   b63ee:	f7ff fb01 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b63f2:	f7ff fc4b 	bl	b5c8c <_ZN17currentStatusData15resetEverythingEv>
    if (!(strncmp(messaging," ",1) == 0)) {
   b63f6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   b63fa:	2b20      	cmp	r3, #32
   b63fc:	d013      	beq.n	b6426 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15e>
      Log.info(messaging);
   b63fe:	4867      	ldr	r0, [pc, #412]	; (b659c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b6400:	a917      	add	r1, sp, #92	; 0x5c
   b6402:	f7fe fbd0 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6406:	f004 f981 	bl	ba70c <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b640a:	b160      	cbz	r0, b6426 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15e>
   b640c:	f898 3000 	ldrb.w	r3, [r8]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6410:	f88d 3000 	strb.w	r3, [sp]
   b6414:	a827      	add	r0, sp, #156	; 0x9c
   b6416:	4964      	ldr	r1, [pc, #400]	; (b65a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b6418:	233c      	movs	r3, #60	; 0x3c
   b641a:	aa17      	add	r2, sp, #92	; 0x5c
   b641c:	f004 fe52 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6420:	a828      	add	r0, sp, #160	; 0xa0
   b6422:	f7fe fcd9 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6426:	3501      	adds	r5, #1
   b6428:	2d0a      	cmp	r5, #10
   b642a:	d1a5      	bne.n	b6378 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb0>
   b642c:	e794      	b.n	b6358 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x90>
      else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b642e:	4963      	ldr	r1, [pc, #396]	; (b65bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b6430:	a817      	add	r0, sp, #92	; 0x5c
   b6432:	f007 fd70 	bl	bdf16 <strcpy>
   b6436:	e7da      	b.n	b63ee <_ZN18Particle_Functions18jsonFunctionParserE6String+0x126>
   b6438:	4961      	ldr	r1, [pc, #388]	; (b65c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b643a:	a80f      	add	r0, sp, #60	; 0x3c
   b643c:	f006 fdb7 	bl	bcfae <_ZNK6String6equalsEPKc>
    else if (function == "status") {
   b6440:	2800      	cmp	r0, #0
   b6442:	d07d      	beq.n	b6540 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x278>
      takeMeasurements();
   b6444:	f000 fc24 	bl	b6c90 <_Z16takeMeasurementsv>
      snprintf(data, sizeof(data),"Distance: %d, Sensor: %s, Battery: %4.2f and %s",current.get_distance(), (sysStatus.get_sensorType()) ? "Level" : "Trail", current.get_stateOfCharge(), batteryContext[current.get_batteryState()]);
   b6448:	f7ff fad4 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b644c:	f7ff fc9e 	bl	b5d8c <_ZNK17currentStatusData12get_distanceEv>
   b6450:	9007      	str	r0, [sp, #28]
   b6452:	f7ff fa71 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b6456:	f7ff fb2a 	bl	b5aae <_ZNK13sysStatusData14get_sensorTypeEv>
   b645a:	4e5a      	ldr	r6, [pc, #360]	; (b65c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b645c:	4a5a      	ldr	r2, [pc, #360]	; (b65c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b645e:	2800      	cmp	r0, #0
   b6460:	bf08      	it	eq
   b6462:	4616      	moveq	r6, r2
   b6464:	f7ff fac6 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6468:	f7ff fd8a 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b646c:	ee10 aa10 	vmov	sl, s0
   b6470:	f7ff fac0 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6474:	f7ff fb20 	bl	b5ab8 <_ZNK17currentStatusData16get_batteryStateEv>
   b6478:	4a54      	ldr	r2, [pc, #336]	; (b65cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b647a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   b647e:	9204      	str	r2, [sp, #16]
   b6480:	4650      	mov	r0, sl
   b6482:	f7fd ff31 	bl	b42e8 <__aeabi_f2d>
   b6486:	9b07      	ldr	r3, [sp, #28]
   b6488:	4a51      	ldr	r2, [pc, #324]	; (b65d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b648a:	9600      	str	r6, [sp, #0]
   b648c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6490:	2180      	movs	r1, #128	; 0x80
   b6492:	a827      	add	r0, sp, #156	; 0x9c
   b6494:	f004 fa1a 	bl	ba8cc <snprintf>
      Log.info(data);
   b6498:	4840      	ldr	r0, [pc, #256]	; (b659c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b649a:	a927      	add	r1, sp, #156	; 0x9c
   b649c:	f7fe fb83 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b64a0:	f898 3000 	ldrb.w	r3, [r8]
   b64a4:	4946      	ldr	r1, [pc, #280]	; (b65c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b64a6:	f88d 3000 	strb.w	r3, [sp]
   b64aa:	aa27      	add	r2, sp, #156	; 0x9c
   b64ac:	233c      	movs	r3, #60	; 0x3c
   b64ae:	a813      	add	r0, sp, #76	; 0x4c
   b64b0:	f004 fe08 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b64b4:	a814      	add	r0, sp, #80	; 0x50
   b64b6:	f7fe fc8f 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64ba:	4946      	ldr	r1, [pc, #280]	; (b65d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>)
   b64bc:	a80b      	add	r0, sp, #44	; 0x2c
   b64be:	f006 fd76 	bl	bcfae <_ZNK6String6equalsEPKc>
      if (variable == "long") {
   b64c2:	2800      	cmp	r0, #0
   b64c4:	d097      	beq.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(data,sizeof(data),"Time: %s, open: %d, close: %d, mode %s", Time.format(Time.now(), "%T").c_str(), sysStatus.get_openTime(), sysStatus.get_closeTime(), (sysStatus.get_lowPowerMode()) ? "low power":"not low power");
   b64c6:	f007 f82c 	bl	bd522 <_ZN9TimeClass3nowEv>
   b64ca:	4b43      	ldr	r3, [pc, #268]	; (b65d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>)
   b64cc:	4943      	ldr	r1, [pc, #268]	; (b65dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>)
   b64ce:	9300      	str	r3, [sp, #0]
   b64d0:	4602      	mov	r2, r0
   b64d2:	17c3      	asrs	r3, r0, #31
   b64d4:	a813      	add	r0, sp, #76	; 0x4c
   b64d6:	f006 ffc5 	bl	bd464 <_ZN9TimeClass6formatExPKc>
    const char * c_str() const { return buffer; }
   b64da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b64dc:	9307      	str	r3, [sp, #28]
   b64de:	f7ff fa2b 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b64e2:	f7ff fada 	bl	b5a9a <_ZNK13sysStatusData12get_openTimeEv>
   b64e6:	4606      	mov	r6, r0
   b64e8:	f7ff fa26 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b64ec:	f7ff fada 	bl	b5aa4 <_ZNK13sysStatusData13get_closeTimeEv>
   b64f0:	4682      	mov	sl, r0
   b64f2:	f7ff fa21 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b64f6:	f7ff fb3c 	bl	b5b72 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b64fa:	4939      	ldr	r1, [pc, #228]	; (b65e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>)
   b64fc:	4a39      	ldr	r2, [pc, #228]	; (b65e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x31c>)
   b64fe:	9b07      	ldr	r3, [sp, #28]
   b6500:	9600      	str	r6, [sp, #0]
   b6502:	2800      	cmp	r0, #0
   b6504:	bf08      	it	eq
   b6506:	460a      	moveq	r2, r1
   b6508:	e9cd a201 	strd	sl, r2, [sp, #4]
   b650c:	2180      	movs	r1, #128	; 0x80
   b650e:	4a36      	ldr	r2, [pc, #216]	; (b65e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x320>)
   b6510:	a827      	add	r0, sp, #156	; 0x9c
   b6512:	f004 f9db 	bl	ba8cc <snprintf>
   b6516:	a813      	add	r0, sp, #76	; 0x4c
   b6518:	f006 fc32 	bl	bcd80 <_ZN6StringD1Ev>
        Log.info(data);
   b651c:	a927      	add	r1, sp, #156	; 0x9c
   b651e:	481f      	ldr	r0, [pc, #124]	; (b659c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b6520:	f7fe fb41 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b6524:	f898 3000 	ldrb.w	r3, [r8]
   b6528:	f88d 3000 	strb.w	r3, [sp]
   b652c:	a813      	add	r0, sp, #76	; 0x4c
   b652e:	4924      	ldr	r1, [pc, #144]	; (b65c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b6530:	233c      	movs	r3, #60	; 0x3c
   b6532:	aa27      	add	r2, sp, #156	; 0x9c
   b6534:	f004 fdc6 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6538:	a814      	add	r0, sp, #80	; 0x50
   b653a:	f7fe fc4d 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b653e:	e75a      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6540:	492a      	ldr	r1, [pc, #168]	; (b65ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x324>)
   b6542:	a80f      	add	r0, sp, #60	; 0x3c
   b6544:	f006 fd33 	bl	bcfae <_ZNK6String6equalsEPKc>
    else if (function == "send") {
   b6548:	4606      	mov	r6, r0
   b654a:	b128      	cbz	r0, b6558 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x290>
      takeMeasurements();
   b654c:	f000 fba0 	bl	b6c90 <_Z16takeMeasurementsv>
      Particle_Functions::sendEvent();
   b6550:	4638      	mov	r0, r7
   b6552:	f7ff fe49 	bl	b61e8 <_ZN18Particle_Functions9sendEventEv>
   b6556:	e74e      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b6558:	4925      	ldr	r1, [pc, #148]	; (b65f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x328>)
   b655a:	a80f      	add	r0, sp, #60	; 0x3c
   b655c:	f006 fd27 	bl	bcfae <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b6560:	4683      	mov	fp, r0
   b6562:	2800      	cmp	r0, #0
   b6564:	d04e      	beq.n	b6604 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x33c>
   b6566:	4923      	ldr	r1, [pc, #140]	; (b65f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x32c>)
   b6568:	a80b      	add	r0, sp, #44	; 0x2c
   b656a:	f006 fd20 	bl	bcfae <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b656e:	b148      	cbz	r0, b6584 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>
        snprintf(messaging,sizeof(messaging),"Going to keep the device online");
   b6570:	4921      	ldr	r1, [pc, #132]	; (b65f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x330>)
   b6572:	a817      	add	r0, sp, #92	; 0x5c
   b6574:	f007 fccf 	bl	bdf16 <strcpy>
        sysStatus.set_lowPowerMode(false);
   b6578:	f7ff f9de 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b657c:	4631      	mov	r1, r6
        sysStatus.set_lowPowerMode(true);
   b657e:	f7ff fb26 	bl	b5bce <_ZN13sysStatusData16set_lowPowerModeEb>
   b6582:	e738      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b6584:	491d      	ldr	r1, [pc, #116]	; (b65fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x334>)
   b6586:	a817      	add	r0, sp, #92	; 0x5c
   b6588:	f007 fcc5 	bl	bdf16 <strcpy>
        sysStatus.set_lowPowerMode(true);
   b658c:	f7ff f9d4 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b6590:	2101      	movs	r1, #1
   b6592:	e7f4      	b.n	b657e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b6>
   b6594:	000bf6ed 	.word	0x000bf6ed
   b6598:	000becb4 	.word	0x000becb4
   b659c:	2003e64c 	.word	0x2003e64c
   b65a0:	000be99f 	.word	0x000be99f
   b65a4:	2003e5bc 	.word	0x2003e5bc
   b65a8:	000be9bd 	.word	0x000be9bd
   b65ac:	000be9c5 	.word	0x000be9c5
   b65b0:	000be9c8 	.word	0x000be9c8
   b65b4:	000be9ce 	.word	0x000be9ce
   b65b8:	000be9d2 	.word	0x000be9d2
   b65bc:	000bea02 	.word	0x000bea02
   b65c0:	000bea27 	.word	0x000bea27
   b65c4:	000be97a 	.word	0x000be97a
   b65c8:	000be980 	.word	0x000be980
   b65cc:	2003e3c4 	.word	0x2003e3c4
   b65d0:	000bea2e 	.word	0x000bea2e
   b65d4:	000bea5e 	.word	0x000bea5e
   b65d8:	000be543 	.word	0x000be543
   b65dc:	2003e6a0 	.word	0x2003e6a0
   b65e0:	000be986 	.word	0x000be986
   b65e4:	000be98a 	.word	0x000be98a
   b65e8:	000bea63 	.word	0x000bea63
   b65ec:	000bea8a 	.word	0x000bea8a
   b65f0:	000bea8f 	.word	0x000bea8f
   b65f4:	000bea94 	.word	0x000bea94
   b65f8:	000bea99 	.word	0x000bea99
   b65fc:	000beab9 	.word	0x000beab9
   b6600:	000be9c1 	.word	0x000be9c1
   b6604:	4933      	ldr	r1, [pc, #204]	; (b66d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x40c>)
   b6606:	a80f      	add	r0, sp, #60	; 0x3c
   b6608:	f006 fcd1 	bl	bcfae <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b660c:	4682      	mov	sl, r0
   b660e:	b1c8      	cbz	r0, b6644 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x37c>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6610:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b6612:	220a      	movs	r2, #10
   b6614:	a909      	add	r1, sp, #36	; 0x24
   b6616:	f007 fd8d 	bl	be134 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b661a:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b661c:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b661e:	d80b      	bhi.n	b6638 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x370>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b6620:	4603      	mov	r3, r0
   b6622:	4a2d      	ldr	r2, [pc, #180]	; (b66d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x410>)
   b6624:	2140      	movs	r1, #64	; 0x40
   b6626:	a817      	add	r0, sp, #92	; 0x5c
   b6628:	f004 f950 	bl	ba8cc <snprintf>
        sysStatus.set_openTime(tempValue);
   b662c:	f7ff f984 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b6630:	b2f1      	uxtb	r1, r6
   b6632:	f7ff fa6a 	bl	b5b0a <_ZN13sysStatusData12set_openTimeEh>
   b6636:	e6de      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b6638:	4928      	ldr	r1, [pc, #160]	; (b66dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x414>)
        snprintf(messaging,sizeof(messaging),"Sensor number out of range (0-2)");
   b663a:	a817      	add	r0, sp, #92	; 0x5c
   b663c:	f007 fc6b 	bl	bdf16 <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b6640:	465c      	mov	r4, fp
   b6642:	e6d8      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b6644:	4926      	ldr	r1, [pc, #152]	; (b66e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x418>)
   b6646:	a80f      	add	r0, sp, #60	; 0x3c
   b6648:	f006 fcb1 	bl	bcfae <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b664c:	4683      	mov	fp, r0
   b664e:	b1d8      	cbz	r0, b6688 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3c0>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6650:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b6652:	220a      	movs	r2, #10
   b6654:	a909      	add	r1, sp, #36	; 0x24
   b6656:	f007 fd6d 	bl	be134 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b665a:	f1a0 030d 	sub.w	r3, r0, #13
   b665e:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6660:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b6662:	d80b      	bhi.n	b667c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3b4>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b6664:	4603      	mov	r3, r0
   b6666:	4a1f      	ldr	r2, [pc, #124]	; (b66e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x41c>)
   b6668:	2140      	movs	r1, #64	; 0x40
   b666a:	a817      	add	r0, sp, #92	; 0x5c
   b666c:	f004 f92e 	bl	ba8cc <snprintf>
        sysStatus.set_closeTime(tempValue);
   b6670:	f7ff f962 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b6674:	b2f1      	uxtb	r1, r6
   b6676:	f7ff fa4e 	bl	b5b16 <_ZN13sysStatusData13set_closeTimeEh>
   b667a:	e6bc      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b667c:	491a      	ldr	r1, [pc, #104]	; (b66e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x420>)
   b667e:	a817      	add	r0, sp, #92	; 0x5c
   b6680:	f007 fc49 	bl	bdf16 <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b6684:	4654      	mov	r4, sl
   b6686:	e6b6      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b6688:	4918      	ldr	r1, [pc, #96]	; (b66ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x424>)
   b668a:	a80f      	add	r0, sp, #60	; 0x3c
   b668c:	f006 fc8f 	bl	bcfae <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b6690:	4606      	mov	r6, r0
   b6692:	b1c8      	cbz	r0, b66c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x400>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6694:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b6696:	220a      	movs	r2, #10
   b6698:	a909      	add	r1, sp, #36	; 0x24
   b669a:	f007 fd4b 	bl	be134 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b669e:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b66a0:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b66a2:	d80f      	bhi.n	b66c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3fc>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %s counter", (tempValue ==0) ? "car":"person");
   b66a4:	4a12      	ldr	r2, [pc, #72]	; (b66f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x428>)
   b66a6:	4b13      	ldr	r3, [pc, #76]	; (b66f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x42c>)
   b66a8:	2140      	movs	r1, #64	; 0x40
   b66aa:	2800      	cmp	r0, #0
   b66ac:	bf08      	it	eq
   b66ae:	4613      	moveq	r3, r2
   b66b0:	4a11      	ldr	r2, [pc, #68]	; (b66f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x430>)
   b66b2:	a817      	add	r0, sp, #92	; 0x5c
   b66b4:	f004 f90a 	bl	ba8cc <snprintf>
        sysStatus.set_sensorType(tempValue);
   b66b8:	f7ff f93e 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b66bc:	b2f1      	uxtb	r1, r6
   b66be:	f7ff fa30 	bl	b5b22 <_ZN13sysStatusData14set_sensorTypeEh>
   b66c2:	e698      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Sensor number out of range (0-2)");
   b66c4:	490d      	ldr	r1, [pc, #52]	; (b66fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x434>)
   b66c6:	e7b8      	b.n	b663a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x372>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b66c8:	490d      	ldr	r1, [pc, #52]	; (b6700 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x438>)
   b66ca:	a817      	add	r0, sp, #92	; 0x5c
   b66cc:	f007 fc23 	bl	bdf16 <strcpy>
      success = false;
   b66d0:	4634      	mov	r4, r6
   b66d2:	e690      	b.n	b63f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b66d4:	000beadb 	.word	0x000beadb
   b66d8:	000beae0 	.word	0x000beae0
   b66dc:	000beafe 	.word	0x000beafe
   b66e0:	000beb17 	.word	0x000beb17
   b66e4:	000beb1d 	.word	0x000beb1d
   b66e8:	000beb3b 	.word	0x000beb3b
   b66ec:	000beb56 	.word	0x000beb56
   b66f0:	000be994 	.word	0x000be994
   b66f4:	000be998 	.word	0x000be998
   b66f8:	000beb5b 	.word	0x000beb5b
   b66fc:	000beb7d 	.word	0x000beb7d
   b6700:	000beb9e 	.word	0x000beb9e

000b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6704:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6706:	e9d0 5300 	ldrd	r5, r3, [r0]
   b670a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b670c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b670e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6712:	42ae      	cmp	r6, r5
   b6714:	d004      	beq.n	b6720 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6716:	4628      	mov	r0, r5
   b6718:	f006 fb32 	bl	bcd80 <_ZN6StringD1Ev>
   b671c:	3514      	adds	r5, #20
   b671e:	e7f8      	b.n	b6712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6720:	6820      	ldr	r0, [r4, #0]
   b6722:	f004 f8b3 	bl	ba88c <free>
    AllocatorT::free(data_);
}
   b6726:	4620      	mov	r0, r4
   b6728:	bd70      	pop	{r4, r5, r6, pc}

000b672a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b672a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b672e:	4604      	mov	r4, r0
   b6730:	460d      	mov	r5, r1
   b6732:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6734:	d916      	bls.n	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b6736:	4290      	cmp	r0, r2
   b6738:	d215      	bcs.n	b6766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b673a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b673e:	1a75      	subs	r5, r6, r1
   b6740:	f1a1 0714 	sub.w	r7, r1, #20
   b6744:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6746:	42b7      	cmp	r7, r6
   b6748:	d01c      	beq.n	b6784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b674a:	b12c      	cbz	r4, b6758 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b674c:	4631      	mov	r1, r6
   b674e:	4620      	mov	r0, r4
   b6750:	f006 fb93 	bl	bce7a <_ZN6StringC1EOS_>
   b6754:	7c33      	ldrb	r3, [r6, #16]
   b6756:	7423      	strb	r3, [r4, #16]
   b6758:	4630      	mov	r0, r6
   b675a:	f006 fb11 	bl	bcd80 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b675e:	3e14      	subs	r6, #20
   b6760:	3c14      	subs	r4, #20
   b6762:	e7f0      	b.n	b6746 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6764:	d00e      	beq.n	b6784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6766:	42b5      	cmp	r5, r6
   b6768:	d00c      	beq.n	b6784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b676a:	b12c      	cbz	r4, b6778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b676c:	4629      	mov	r1, r5
   b676e:	4620      	mov	r0, r4
   b6770:	f006 fb83 	bl	bce7a <_ZN6StringC1EOS_>
   b6774:	7c2b      	ldrb	r3, [r5, #16]
   b6776:	7423      	strb	r3, [r4, #16]
   b6778:	4628      	mov	r0, r5
   b677a:	f006 fb01 	bl	bcd80 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b677e:	3514      	adds	r5, #20
   b6780:	3414      	adds	r4, #20
   b6782:	e7f0      	b.n	b6766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b6784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b678a:	2300      	movs	r3, #0
   b678c:	e9c0 3300 	strd	r3, r3, [r0]
   b6790:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6792:	684f      	ldr	r7, [r1, #4]
   b6794:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6796:	4604      	mov	r4, r0
   b6798:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b679a:	dd23      	ble.n	b67e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b679c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b67a0:	fb08 f007 	mul.w	r0, r8, r7
   b67a4:	f004 f86a 	bl	ba87c <malloc>
            if (!d) {
   b67a8:	4605      	mov	r5, r0
   b67aa:	b1d8      	cbz	r0, b67e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b67ac:	e9d4 1200 	ldrd	r1, r2, [r4]
   b67b0:	fb08 1202 	mla	r2, r8, r2, r1
   b67b4:	f7ff ffb9 	bl	b672a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b67b8:	6820      	ldr	r0, [r4, #0]
   b67ba:	f004 f867 	bl	ba88c <free>
        data_ = d;
   b67be:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b67c0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b67c2:	e9d6 7300 	ldrd	r7, r3, [r6]
   b67c6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b67ca:	45b8      	cmp	r8, r7
   b67cc:	d008      	beq.n	b67e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b67ce:	4639      	mov	r1, r7
   b67d0:	4628      	mov	r0, r5
   b67d2:	f006 fb6c 	bl	bceae <_ZN6StringC1ERKS_>
   b67d6:	7c3b      	ldrb	r3, [r7, #16]
   b67d8:	742b      	strb	r3, [r5, #16]
   b67da:	3714      	adds	r7, #20
   b67dc:	3514      	adds	r5, #20
   b67de:	e7f4      	b.n	b67ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b67e0:	6873      	ldr	r3, [r6, #4]
   b67e2:	6063      	str	r3, [r4, #4]
}
   b67e4:	4620      	mov	r0, r4
   b67e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b67ec <_GLOBAL__sub_I_openTimeStr>:
        val_(val) {
   b67ec:	4b29      	ldr	r3, [pc, #164]	; (b6894 <_GLOBAL__sub_I_openTimeStr+0xa8>)
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
}
   b67ee:	b570      	push	{r4, r5, r6, lr}
   b67f0:	2501      	movs	r5, #1
   b67f2:	701d      	strb	r5, [r3, #0]
   b67f4:	4b28      	ldr	r3, [pc, #160]	; (b6898 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b67f6:	2208      	movs	r2, #8
   b67f8:	701a      	strb	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b67fa:	4b28      	ldr	r3, [pc, #160]	; (b689c <_GLOBAL__sub_I_openTimeStr+0xb0>)
    SleepResult() {}
   b67fc:	4a28      	ldr	r2, [pc, #160]	; (b68a0 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b67fe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6800:	2400      	movs	r4, #0
   b6802:	b08c      	sub	sp, #48	; 0x30
   b6804:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b6808:	2002      	movs	r0, #2
   b680a:	f003 fef5 	bl	ba5f8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b680e:	4621      	mov	r1, r4
   b6810:	4628      	mov	r0, r5
   b6812:	f003 ff09 	bl	ba628 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b6816:	4629      	mov	r1, r5
   b6818:	2004      	movs	r0, #4
   b681a:	f003 fc93 	bl	ba144 <HAL_Feature_Set>
        capacity_(0) {
   b681e:	e9cd 4400 	strd	r4, r4, [sp]
   b6822:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b6824:	f006 ff6e 	bl	bd704 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b6828:	4c1e      	ldr	r4, [pc, #120]	; (b68a4 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b682a:	4605      	mov	r5, r0
   b682c:	4669      	mov	r1, sp
   b682e:	a803      	add	r0, sp, #12
   b6830:	f7ff ffa9 	bl	b6786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6834:	4626      	mov	r6, r4
        stream_(&stream) {
   b6836:	a903      	add	r1, sp, #12
   b6838:	a806      	add	r0, sp, #24
   b683a:	f7ff ffa4 	bl	b6786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b683e:	4b1a      	ldr	r3, [pc, #104]	; (b68a8 <_GLOBAL__sub_I_openTimeStr+0xbc>)
   b6840:	f846 3b04 	str.w	r3, [r6], #4
   b6844:	a906      	add	r1, sp, #24
   b6846:	a809      	add	r0, sp, #36	; 0x24
   b6848:	f7ff ff9d 	bl	b6786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b684c:	aa09      	add	r2, sp, #36	; 0x24
   b684e:	211e      	movs	r1, #30
   b6850:	4630      	mov	r0, r6
   b6852:	f005 fd73 	bl	bc33c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6856:	a809      	add	r0, sp, #36	; 0x24
   b6858:	f7ff ff54 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b685c:	a806      	add	r0, sp, #24
   b685e:	f7ff ff51 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6862:	4b12      	ldr	r3, [pc, #72]	; (b68ac <_GLOBAL__sub_I_openTimeStr+0xc0>)
   b6864:	6023      	str	r3, [r4, #0]
   b6866:	6225      	str	r5, [r4, #32]
   b6868:	a803      	add	r0, sp, #12
   b686a:	f7ff ff4b 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b686e:	4b10      	ldr	r3, [pc, #64]	; (b68b0 <_GLOBAL__sub_I_openTimeStr+0xc4>)
   b6870:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6872:	f006 ff47 	bl	bd704 <_Z16_fetch_usbserialv>
   b6876:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b687a:	f006 ff33 	bl	bd6e4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b687e:	f005 faa3 	bl	bbdc8 <_ZN5spark10LogManager8instanceEv>
   b6882:	4621      	mov	r1, r4
   b6884:	f005 fc72 	bl	bc16c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b6888:	4668      	mov	r0, sp
   b688a:	f7ff ff3b 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b688e:	b00c      	add	sp, #48	; 0x30
   b6890:	bd70      	pop	{r4, r5, r6, pc}
   b6892:	bf00      	nop
   b6894:	2003e5bc 	.word	0x2003e5bc
   b6898:	2003e5bd 	.word	0x2003e5bd
   b689c:	2003e5b0 	.word	0x2003e5b0
   b68a0:	ffff0000 	.word	0xffff0000
   b68a4:	2003e5c4 	.word	0x2003e5c4
   b68a8:	000bec84 	.word	0x000bec84
   b68ac:	000bf720 	.word	0x000bf720
   b68b0:	000bec9c 	.word	0x000bec9c

000b68b4 <_ZN18Particle_Functions22disconnectFromParticleEv>:
bool Particle_Functions::disconnectFromParticle() {                    // Ensures we disconnect cleanly from Particle
   b68b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b68b8:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b68ba:	f006 fe32 	bl	bd522 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b68be:	4941      	ldr	r1, [pc, #260]	; (b69c4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b68c0:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b68c2:	4841      	ldr	r0, [pc, #260]	; (b69c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b68c4:	f7fe f96f 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b68c8:	2400      	movs	r4, #0
  Particle.disconnect();                                               		// Disconnect from Particle
   b68ca:	a801      	add	r0, sp, #4
   b68cc:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b68d0:	f8ad 400c 	strh.w	r4, [sp, #12]
   b68d4:	f004 faf6 	bl	baec4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b68d8:	4620      	mov	r0, r4
   b68da:	f003 fc63 	bl	ba1a4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b68de:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b68e2:	4604      	mov	r4, r0
   b68e4:	2000      	movs	r0, #0
   b68e6:	f003 fc5d 	bl	ba1a4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b68ea:	1b03      	subs	r3, r0, r4
   b68ec:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b68f0:	42b3      	cmp	r3, r6
   b68f2:	f171 0300 	sbcs.w	r3, r1, #0
   b68f6:	d205      	bcs.n	b6904 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b68f8:	f003 ff08 	bl	ba70c <spark_cloud_flag_connected>
   b68fc:	b110      	cbz	r0, b6904 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b68fe:	f003 fef5 	bl	ba6ec <spark_process>
        while (_while() && !_condition()) {
   b6902:	e7ef      	b.n	b68e4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b6904:	f003 ff02 	bl	ba70c <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   b6908:	f003 fc3c 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b690c:	4f2f      	ldr	r7, [pc, #188]	; (b69cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b690e:	6038      	str	r0, [r7, #0]
            return spark_process();
   b6910:	f003 feec 	bl	ba6ec <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6914:	f003 fefa 	bl	ba70c <spark_cloud_flag_connected>
  if (Particle.connected()) {                      							// As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b6918:	4604      	mov	r4, r0
   b691a:	b140      	cbz	r0, b692e <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b691c:	492c      	ldr	r1, [pc, #176]	; (b69d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b691e:	482a      	ldr	r0, [pc, #168]	; (b69c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b6920:	f7fe f941 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b6924:	2400      	movs	r4, #0
}
   b6926:	4620      	mov	r0, r4
   b6928:	b005      	add	sp, #20
   b692a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b692e:	f006 fdf8 	bl	bd522 <_ZN9TimeClass3nowEv>
   b6932:	4928      	ldr	r1, [pc, #160]	; (b69d4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
   b6934:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b69d8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b6938:	1b42      	subs	r2, r0, r5
   b693a:	4823      	ldr	r0, [pc, #140]	; (b69c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b693c:	f7fe f933 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6940:	f006 fdef 	bl	bd522 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6944:	4622      	mov	r2, r4
   b6946:	2102      	movs	r1, #2
   b6948:	4606      	mov	r6, r0
   b694a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b694e:	f003 ff35 	bl	ba7bc <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6952:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6956:	4623      	mov	r3, r4
   b6958:	4622      	mov	r2, r4
   b695a:	4621      	mov	r1, r4
   b695c:	f003 ff46 	bl	ba7ec <network_off>
        return hal_timer_millis(nullptr);
   b6960:	4620      	mov	r0, r4
   b6962:	f003 fc1f 	bl	ba1a4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6966:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b696a:	4605      	mov	r5, r0
   b696c:	2000      	movs	r0, #0
   b696e:	f003 fc19 	bl	ba1a4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6972:	1b43      	subs	r3, r0, r5
   b6974:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6978:	454b      	cmp	r3, r9
   b697a:	f171 0300 	sbcs.w	r3, r1, #0
   b697e:	d206      	bcs.n	b698e <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6980:	4640      	mov	r0, r8
   b6982:	f006 f815 	bl	bc9b0 <_ZN5spark12NetworkClass5isOffEv>
   b6986:	b910      	cbnz	r0, b698e <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b6988:	f003 feb0 	bl	ba6ec <spark_process>
        while (_while() && !_condition()) {
   b698c:	e7ee      	b.n	b696c <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b698e:	4812      	ldr	r0, [pc, #72]	; (b69d8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b6990:	f006 f80e 	bl	bc9b0 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b6994:	f003 fbf6 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6998:	6038      	str	r0, [r7, #0]
            return spark_process();
   b699a:	f003 fea7 	bl	ba6ec <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b699e:	480e      	ldr	r0, [pc, #56]	; (b69d8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b69a0:	f006 f802 	bl	bc9a8 <_ZN5spark12NetworkClass4isOnEv>
   b69a4:	b120      	cbz	r0, b69b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b69a6:	490d      	ldr	r1, [pc, #52]	; (b69dc <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b69a8:	4807      	ldr	r0, [pc, #28]	; (b69c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b69aa:	f7fe f8fc 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b69ae:	e7ba      	b.n	b6926 <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b69b0:	f006 fdb7 	bl	bd522 <_ZN9TimeClass3nowEv>
   b69b4:	490a      	ldr	r1, [pc, #40]	; (b69e0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b69b6:	1b82      	subs	r2, r0, r6
   b69b8:	4803      	ldr	r0, [pc, #12]	; (b69c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b69ba:	f7fe f8f4 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b69be:	2401      	movs	r4, #1
   b69c0:	e7b1      	b.n	b6926 <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b69c2:	bf00      	nop
   b69c4:	000bebb2 	.word	0x000bebb2
   b69c8:	2003e64c 	.word	0x2003e64c
   b69cc:	2003e714 	.word	0x2003e714
   b69d0:	000bebdb 	.word	0x000bebdb
   b69d4:	000bebfe 	.word	0x000bebfe
   b69d8:	2003e608 	.word	0x2003e608
   b69dc:	000bec27 	.word	0x000bec27
   b69e0:	000bec4d 	.word	0x000bec4d

000b69e4 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t DISTANCE_PIN = A1;                   // May need to change this
extern const pin_t EXTERNAL_TEMP_PIN = A2;          // External temp sensor
const pin_t LED_POWER_PIN = A3;                    // Not use for this sketch

bool initializePinModes() {
   b69e4:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b69e6:	490f      	ldr	r1, [pc, #60]	; (b6a24 <_Z18initializePinModesv+0x40>)
   b69e8:	480f      	ldr	r0, [pc, #60]	; (b6a28 <_Z18initializePinModesv+0x44>)
   b69ea:	f7fe f8dc 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b69ee:	2102      	movs	r1, #2
   b69f0:	2004      	movs	r0, #4
   b69f2:	f006 ff9f 	bl	bd934 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b69f6:	2100      	movs	r1, #0
   b69f8:	2008      	movs	r0, #8
   b69fa:	f006 ff9b 	bl	bd934 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b69fe:	2101      	movs	r1, #1
   b6a00:	2007      	movs	r0, #7
   b6a02:	f006 ff97 	bl	bd934 <pinMode>
    pinMode(DISTANCE_PIN, INPUT);
   b6a06:	2100      	movs	r1, #0
   b6a08:	2012      	movs	r0, #18
   b6a0a:	f006 ff93 	bl	bd934 <pinMode>
    pinMode(EXTERNAL_TEMP_PIN, INPUT);
   b6a0e:	2100      	movs	r1, #0
   b6a10:	2011      	movs	r0, #17
   b6a12:	f006 ff8f 	bl	bd934 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b6a16:	2101      	movs	r1, #1
   b6a18:	2010      	movs	r0, #16
   b6a1a:	f006 ff8b 	bl	bd934 <pinMode>

    return true;
}
   b6a1e:	2001      	movs	r0, #1
   b6a20:	bd08      	pop	{r3, pc}
   b6a22:	bf00      	nop
   b6a24:	000bed08 	.word	0x000bed08
   b6a28:	2003e64c 	.word	0x2003e64c

000b6a2c <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   b6a2c:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b6a2e:	491c      	ldr	r1, [pc, #112]	; (b6aa0 <_Z18initializePowerCfgv+0x74>)
   b6a30:	481c      	ldr	r0, [pc, #112]	; (b6aa4 <_Z18initializePowerCfgv+0x78>)
bool initializePowerCfg() {
   b6a32:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b6a34:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b6a36:	f7fe f8b6 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b6a3a:	4622      	mov	r2, r4
   b6a3c:	2100      	movs	r1, #0
   b6a3e:	4668      	mov	r0, sp
   b6a40:	f007 fa1c 	bl	bde7c <memset>
   b6a44:	4622      	mov	r2, r4
   b6a46:	2100      	movs	r1, #0
   b6a48:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6a4c:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b6a50:	f007 fa14 	bl	bde7c <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6a54:	2100      	movs	r1, #0
   b6a56:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6a5a:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b6a5e:	f003 fe1f 	bl	ba6a0 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b6a62:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b6a66:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b6a6a:	4b0f      	ldr	r3, [pc, #60]	; (b6aa8 <_Z18initializePowerCfgv+0x7c>)
   b6a6c:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b6a6e:	f241 0370 	movw	r3, #4208	; 0x1070
   b6a72:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b6a76:	9b00      	ldr	r3, [sp, #0]
   b6a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6a7c:	f043 0301 	orr.w	r3, r3, #1
   b6a80:	2100      	movs	r1, #0
   b6a82:	4668      	mov	r0, sp
   b6a84:	9300      	str	r3, [sp, #0]
   b6a86:	f003 fe0b 	bl	ba6a0 <system_power_management_set_config>
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST); // For the cases where the device is powered through VIN
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    if (res == 0) Log.info("Power configuration process succcesful");
   b6a8a:	4604      	mov	r4, r0
   b6a8c:	b918      	cbnz	r0, b6a96 <_Z18initializePowerCfgv+0x6a>
   b6a8e:	4907      	ldr	r1, [pc, #28]	; (b6aac <_Z18initializePowerCfgv+0x80>)
   b6a90:	4804      	ldr	r0, [pc, #16]	; (b6aa4 <_Z18initializePowerCfgv+0x78>)
   b6a92:	f7fe f888 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    return res;
}
   b6a96:	1e20      	subs	r0, r4, #0
   b6a98:	bf18      	it	ne
   b6a9a:	2001      	movne	r0, #1
   b6a9c:	b010      	add	sp, #64	; 0x40
   b6a9e:	bd10      	pop	{r4, pc}
   b6aa0:	000bed21 	.word	0x000bed21
   b6aa4:	2003e64c 	.word	0x2003e64c
   b6aa8:	03840384 	.word	0x03840384
   b6aac:	000bed3b 	.word	0x000bed3b

000b6ab0 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6ab0:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6ab2:	2101      	movs	r1, #1
   b6ab4:	a801      	add	r0, sp, #4
   b6ab6:	f006 f830 	bl	bcb1a <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6aba:	f7fe ff9b 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6abe:	f7ff fa55 	bl	b5f6c <_ZNK17currentStatusData17get_internalTempCEv>
   b6ac2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b6ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6aca:	d50e      	bpl.n	b6aea <_Z16isItSafeToChargev+0x3a>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6acc:	a801      	add	r0, sp, #4
   b6ace:	f006 f8b7 	bl	bcc40 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6ad2:	f7fe ff8f 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6ad6:	2101      	movs	r1, #1
   b6ad8:	f7ff f829 	bl	b5b2e <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6adc:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6ade:	a801      	add	r0, sp, #4
   b6ae0:	f006 f82a 	bl	bcb38 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	b002      	add	sp, #8
   b6ae8:	bd10      	pop	{r4, pc}
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6aea:	f7fe ff83 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6aee:	f7ff fa3d 	bl	b5f6c <_ZNK17currentStatusData17get_internalTempCEv>
   b6af2:	eddf 7a06 	vldr	s15, [pc, #24]	; b6b0c <_Z16isItSafeToChargev+0x5c>
   b6af6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6afe:	dce5      	bgt.n	b6acc <_Z16isItSafeToChargev+0x1c>
    pmic.enableCharging();                          // It is safe to charge the battery
   b6b00:	a801      	add	r0, sp, #4
   b6b02:	f006 f882 	bl	bcc0a <_ZN4PMIC14enableChargingEv>
    return true;
   b6b06:	2401      	movs	r4, #1
   b6b08:	e7e9      	b.n	b6ade <_Z16isItSafeToChargev+0x2e>
   b6b0a:	bf00      	nop
   b6b0c:	42140000 	.word	0x42140000

000b6b10 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b6b10:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6b12:	4d1b      	ldr	r5, [pc, #108]	; (b6b80 <_Z17getSignalStrengthv+0x70>)
   b6b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6b16:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6b18:	ac10      	add	r4, sp, #64	; 0x40
   b6b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b20:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b24:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6b28:	4916      	ldr	r1, [pc, #88]	; (b6b84 <_Z17getSignalStrengthv+0x74>)
   b6b2a:	a808      	add	r0, sp, #32
   b6b2c:	f003 ffa0 	bl	baa70 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6b30:	a808      	add	r0, sp, #32
   b6b32:	f003 ffe0 	bl	baaf6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6b36:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6b38:	a808      	add	r0, sp, #32
   b6b3a:	f003 fff7 	bl	bab2c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6b3e:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b6b40:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6b44:	f004 f822 	bl	bab8c <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6b48:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b6b4a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6b4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6b52:	f7fd fbc9 	bl	b42e8 <__aeabi_f2d>
   b6b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6b5a:	4628      	mov	r0, r5
   b6b5c:	f7fd fbc4 	bl	b42e8 <__aeabi_f2d>
   b6b60:	e9cd 0100 	strd	r0, r1, [sp]
   b6b64:	2110      	movs	r1, #16
   b6b66:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6b6a:	4a07      	ldr	r2, [pc, #28]	; (b6b88 <_Z17getSignalStrengthv+0x78>)
   b6b6c:	eb0d 0001 	add.w	r0, sp, r1
   b6b70:	f003 feac 	bl	ba8cc <snprintf>
  Log.info(signalStr);
   b6b74:	4805      	ldr	r0, [pc, #20]	; (b6b8c <_Z17getSignalStrengthv+0x7c>)
   b6b76:	a904      	add	r1, sp, #16
   b6b78:	f7fe f815 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
}
   b6b7c:	b01b      	add	sp, #108	; 0x6c
   b6b7e:	bd30      	pop	{r4, r5, pc}
   b6b80:	000be3b8 	.word	0x000be3b8
   b6b84:	2003e608 	.word	0x2003e608
   b6b88:	000bedaa 	.word	0x000bedaa
   b6b8c:	2003e64c 	.word	0x2003e64c

000b6b90 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6b90:	b530      	push	{r4, r5, lr}
   b6b92:	b085      	sub	sp, #20
   b6b94:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6b96:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6b98:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6b9a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6b9c:	f003 fd1a 	bl	ba5d4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6ba0:	b990      	cbnz	r0, b6bc8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6ba2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6ba4:	b10c      	cbz	r4, b6baa <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6ba6:	6923      	ldr	r3, [r4, #16]
   b6ba8:	b923      	cbnz	r3, b6bb4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6baa:	4a08      	ldr	r2, [pc, #32]	; (b6bcc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6bac:	4908      	ldr	r1, [pc, #32]	; (b6bd0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6bae:	200a      	movs	r0, #10
   b6bb0:	f003 fcd8 	bl	ba564 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6bb4:	230c      	movs	r3, #12
   b6bb6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6bba:	2304      	movs	r3, #4
   b6bbc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6bbe:	aa01      	add	r2, sp, #4
   b6bc0:	6923      	ldr	r3, [r4, #16]
   b6bc2:	2101      	movs	r1, #1
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	4798      	blx	r3
}
   b6bc8:	b005      	add	sp, #20
   b6bca:	bd30      	pop	{r4, r5, pc}
   b6bcc:	000ba175 	.word	0x000ba175
   b6bd0:	000bedc3 	.word	0x000bedc3

000b6bd4 <_Z12batteryStatev>:
bool batteryState() {
   b6bd4:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6bd6:	f7fe ff0d 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6bda:	a901      	add	r1, sp, #4
   b6bdc:	4604      	mov	r4, r0
   b6bde:	2007      	movs	r0, #7
   b6be0:	f7ff ffd6 	bl	b6b90 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6be4:	1e01      	subs	r1, r0, #0
        return val;
   b6be6:	bfa8      	it	ge
   b6be8:	9901      	ldrge	r1, [sp, #4]
   b6bea:	4620      	mov	r0, r4
   b6bec:	b2c9      	uxtb	r1, r1
   b6bee:	f7fe ff9e 	bl	b5b2e <_ZN17currentStatusData16set_batteryStateEh>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6bf2:	f7fe feff 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6bf6:	a901      	add	r1, sp, #4
   b6bf8:	4604      	mov	r4, r0
   b6bfa:	2003      	movs	r0, #3
   b6bfc:	f7ff ffc8 	bl	b6b90 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6c00:	bbb8      	cbnz	r0, b6c72 <_Z12batteryStatev+0x9e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6c02:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6c06:	ee00 3a10 	vmov	s0, r3
   b6c0a:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
   b6c0e:	4620      	mov	r0, r4
   b6c10:	f7ff f9e8 	bl	b5fe4 <_ZN17currentStatusData17set_stateOfChargeEf>
   b6c14:	a901      	add	r1, sp, #4
   b6c16:	2003      	movs	r0, #3
   b6c18:	f7ff ffba 	bl	b6b90 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   b6c1c:	bb60      	cbnz	r0, b6c78 <_Z12batteryStatev+0xa4>
   b6c1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6c22:	ee07 3a90 	vmov	s15, r3
   b6c26:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  Log.info("Battery state of charge %4.2f%%",System.batteryCharge());
   b6c2a:	ee17 0a90 	vmov	r0, s15
   b6c2e:	f7fd fb5b 	bl	b42e8 <__aeabi_f2d>
   b6c32:	4602      	mov	r2, r0
   b6c34:	460b      	mov	r3, r1
   b6c36:	4813      	ldr	r0, [pc, #76]	; (b6c84 <_Z12batteryStatev+0xb0>)
   b6c38:	4913      	ldr	r1, [pc, #76]	; (b6c88 <_Z12batteryStatev+0xb4>)
   b6c3a:	f7fd ffb4 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
  if (current.get_stateOfCharge() > 60 || current.get_stateOfCharge() == -1 ) return true;  // Bad battery reading should not put device in low power mode
   b6c3e:	f7fe fed9 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6c42:	f7ff f99d 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6c46:	eddf 7a11 	vldr	s15, [pc, #68]	; b6c8c <_Z12batteryStatev+0xb8>
   b6c4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c52:	dc14      	bgt.n	b6c7e <_Z12batteryStatev+0xaa>
   b6c54:	f7fe fece 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6c58:	f7ff f992 	bl	b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6c5c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6c60:	eeb4 0a67 	vcmp.f32	s0, s15
   b6c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c68:	bf0c      	ite	eq
   b6c6a:	2001      	moveq	r0, #1
   b6c6c:	2000      	movne	r0, #0
}
   b6c6e:	b002      	add	sp, #8
   b6c70:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6c72:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b6c76:	e7ca      	b.n	b6c0e <_Z12batteryStatev+0x3a>
   b6c78:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6c7c:	e7d5      	b.n	b6c2a <_Z12batteryStatev+0x56>
  if (current.get_stateOfCharge() > 60 || current.get_stateOfCharge() == -1 ) return true;  // Bad battery reading should not put device in low power mode
   b6c7e:	2001      	movs	r0, #1
   b6c80:	e7f5      	b.n	b6c6e <_Z12batteryStatev+0x9a>
   b6c82:	bf00      	nop
   b6c84:	2003e64c 	.word	0x2003e64c
   b6c88:	000bede9 	.word	0x000bede9
   b6c8c:	42700000 	.word	0x42700000

000b6c90 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!batteryState()) sysStatus.set_lowPowerMode(true);
   b6c94:	f7ff ff9e 	bl	b6bd4 <_Z12batteryStatev>
   b6c98:	b920      	cbnz	r0, b6ca4 <_Z16takeMeasurementsv+0x14>
   b6c9a:	f7fe fe4d 	bl	b5938 <_ZN13sysStatusData8instanceEv>
   b6c9e:	2101      	movs	r1, #1
   b6ca0:	f7fe ff95 	bl	b5bce <_ZN13sysStatusData16set_lowPowerModeEb>
    isItSafeToCharge();
   b6ca4:	f7ff ff04 	bl	b6ab0 <_Z16isItSafeToChargev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6ca8:	f003 fd30 	bl	ba70c <spark_cloud_flag_connected>
    if (Particle.connected()) getSignalStrength();
   b6cac:	b108      	cbz	r0, b6cb2 <_Z16takeMeasurementsv+0x22>
   b6cae:	f7ff ff2f 	bl	b6b10 <_Z17getSignalStrengthv>
    current.set_externalTempC((analogRead(EXTERNAL_TEMP_PIN) * 3.3 / 4096.0 - 0.5) * 100.0);  // 10mV/degC, 0.5V @ 0degC
   b6cb2:	f7fe fe9f 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6cb6:	4b66      	ldr	r3, [pc, #408]	; (b6e50 <_Z16takeMeasurementsv+0x1c0>)
   b6cb8:	4604      	mov	r4, r0
   b6cba:	8818      	ldrh	r0, [r3, #0]
   b6cbc:	f006 fe77 	bl	bd9ae <analogRead>
   b6cc0:	f7fd fb00 	bl	b42c4 <__aeabi_i2d>
   b6cc4:	a356      	add	r3, pc, #344	; (adr r3, b6e20 <_Z16takeMeasurementsv+0x190>)
   b6cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cca:	f7fd fb65 	bl	b4398 <__aeabi_dmul>
   b6cce:	4b61      	ldr	r3, [pc, #388]	; (b6e54 <_Z16takeMeasurementsv+0x1c4>)
   b6cd0:	2200      	movs	r2, #0
   b6cd2:	f7fd fb61 	bl	b4398 <__aeabi_dmul>
   b6cd6:	4b60      	ldr	r3, [pc, #384]	; (b6e58 <_Z16takeMeasurementsv+0x1c8>)
   b6cd8:	2200      	movs	r2, #0
   b6cda:	f7fd f9a5 	bl	b4028 <__aeabi_dsub>
   b6cde:	4b5f      	ldr	r3, [pc, #380]	; (b6e5c <_Z16takeMeasurementsv+0x1cc>)
   b6ce0:	2200      	movs	r2, #0
   b6ce2:	f7fd fb59 	bl	b4398 <__aeabi_dmul>
   b6ce6:	f7fd fe4f 	bl	b4988 <__aeabi_d2f>
   b6cea:	ee00 0a10 	vmov	s0, r0
   b6cee:	4620      	mov	r0, r4
   b6cf0:	f7ff f973 	bl	b5fda <_ZN17currentStatusData17set_externalTempCEf>
    Log.info("External Temp: %4.2fC",current.get_externalTempC());
   b6cf4:	f7fe fe7e 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6cf8:	f7ff f93d 	bl	b5f76 <_ZNK17currentStatusData17get_externalTempCEv>
   b6cfc:	ee10 0a10 	vmov	r0, s0
   b6d00:	f7fd faf2 	bl	b42e8 <__aeabi_f2d>
   b6d04:	4602      	mov	r2, r0
   b6d06:	460b      	mov	r3, r1
   b6d08:	4855      	ldr	r0, [pc, #340]	; (b6e60 <_Z16takeMeasurementsv+0x1d0>)
   b6d0a:	4956      	ldr	r1, [pc, #344]	; (b6e64 <_Z16takeMeasurementsv+0x1d4>)
   b6d0c:	f7fd ff4b 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    current.set_distance(((analogRead(DISTANCE_PIN)*(3.3/4096)/(3.3/2048)*(29e-6)) * (20.05*sqrt(current.get_externalTempC()+273.15)/2))*100.0);      // Distance in cm
   b6d10:	f7fe fe70 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6d14:	4b54      	ldr	r3, [pc, #336]	; (b6e68 <_Z16takeMeasurementsv+0x1d8>)
   b6d16:	4604      	mov	r4, r0
   b6d18:	8818      	ldrh	r0, [r3, #0]
   b6d1a:	f006 fe48 	bl	bd9ae <analogRead>
   b6d1e:	4605      	mov	r5, r0
   b6d20:	f7fe fe68 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6d24:	f7ff f927 	bl	b5f76 <_ZNK17currentStatusData17get_externalTempCEv>
   b6d28:	ee10 0a10 	vmov	r0, s0
   b6d2c:	f7fd fadc 	bl	b42e8 <__aeabi_f2d>
   b6d30:	a33d      	add	r3, pc, #244	; (adr r3, b6e28 <_Z16takeMeasurementsv+0x198>)
   b6d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d36:	f7fd f979 	bl	b402c <__adddf3>
   b6d3a:	ec41 0b10 	vmov	d0, r0, r1
   b6d3e:	f006 ff19 	bl	bdb74 <sqrt>
   b6d42:	4628      	mov	r0, r5
   b6d44:	ec59 8b10 	vmov	r8, r9, d0
   b6d48:	f7fd fabc 	bl	b42c4 <__aeabi_i2d>
   b6d4c:	a338      	add	r3, pc, #224	; (adr r3, b6e30 <_Z16takeMeasurementsv+0x1a0>)
   b6d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d52:	f7fd fb21 	bl	b4398 <__aeabi_dmul>
   b6d56:	a338      	add	r3, pc, #224	; (adr r3, b6e38 <_Z16takeMeasurementsv+0x1a8>)
   b6d58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d5c:	f7fd fc46 	bl	b45ec <__aeabi_ddiv>
   b6d60:	a337      	add	r3, pc, #220	; (adr r3, b6e40 <_Z16takeMeasurementsv+0x1b0>)
   b6d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d66:	f7fd fb17 	bl	b4398 <__aeabi_dmul>
   b6d6a:	a337      	add	r3, pc, #220	; (adr r3, b6e48 <_Z16takeMeasurementsv+0x1b8>)
   b6d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d70:	4606      	mov	r6, r0
   b6d72:	460f      	mov	r7, r1
   b6d74:	4640      	mov	r0, r8
   b6d76:	4649      	mov	r1, r9
   b6d78:	f7fd fb0e 	bl	b4398 <__aeabi_dmul>
   b6d7c:	4b36      	ldr	r3, [pc, #216]	; (b6e58 <_Z16takeMeasurementsv+0x1c8>)
   b6d7e:	2200      	movs	r2, #0
   b6d80:	f7fd fb0a 	bl	b4398 <__aeabi_dmul>
   b6d84:	4602      	mov	r2, r0
   b6d86:	460b      	mov	r3, r1
   b6d88:	4630      	mov	r0, r6
   b6d8a:	4639      	mov	r1, r7
   b6d8c:	f7fd fb04 	bl	b4398 <__aeabi_dmul>
   b6d90:	4b32      	ldr	r3, [pc, #200]	; (b6e5c <_Z16takeMeasurementsv+0x1cc>)
   b6d92:	2200      	movs	r2, #0
   b6d94:	f7fd fb00 	bl	b4398 <__aeabi_dmul>
   b6d98:	f7fd fdd6 	bl	b4948 <__aeabi_d2uiz>
   b6d9c:	b281      	uxth	r1, r0
   b6d9e:	4620      	mov	r0, r4
   b6da0:	f7ff f8c2 	bl	b5f28 <_ZN17currentStatusData12set_distanceEt>
    Log.info("Distance: %dcm",current.get_distance());
   b6da4:	f7fe fe26 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6da8:	f7fe fff0 	bl	b5d8c <_ZNK17currentStatusData12get_distanceEv>
   b6dac:	492f      	ldr	r1, [pc, #188]	; (b6e6c <_Z16takeMeasurementsv+0x1dc>)
   b6dae:	4602      	mov	r2, r0
   b6db0:	482b      	ldr	r0, [pc, #172]	; (b6e60 <_Z16takeMeasurementsv+0x1d0>)
   b6db2:	f7fd fef8 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    current.set_internalTempC((analogRead(INTERNAL_TEMP_PIN) * 3.3 / 4096.0 - 0.5) * 100.0);  // 10mV/degC, 0.5V @ 0degC
   b6db6:	f7fe fe1d 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6dba:	4b2d      	ldr	r3, [pc, #180]	; (b6e70 <_Z16takeMeasurementsv+0x1e0>)
   b6dbc:	4604      	mov	r4, r0
   b6dbe:	8818      	ldrh	r0, [r3, #0]
   b6dc0:	f006 fdf5 	bl	bd9ae <analogRead>
   b6dc4:	f7fd fa7e 	bl	b42c4 <__aeabi_i2d>
   b6dc8:	a315      	add	r3, pc, #84	; (adr r3, b6e20 <_Z16takeMeasurementsv+0x190>)
   b6dca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dce:	f7fd fae3 	bl	b4398 <__aeabi_dmul>
   b6dd2:	4b20      	ldr	r3, [pc, #128]	; (b6e54 <_Z16takeMeasurementsv+0x1c4>)
   b6dd4:	2200      	movs	r2, #0
   b6dd6:	f7fd fadf 	bl	b4398 <__aeabi_dmul>
   b6dda:	4b1f      	ldr	r3, [pc, #124]	; (b6e58 <_Z16takeMeasurementsv+0x1c8>)
   b6ddc:	2200      	movs	r2, #0
   b6dde:	f7fd f923 	bl	b4028 <__aeabi_dsub>
   b6de2:	4b1e      	ldr	r3, [pc, #120]	; (b6e5c <_Z16takeMeasurementsv+0x1cc>)
   b6de4:	2200      	movs	r2, #0
   b6de6:	f7fd fad7 	bl	b4398 <__aeabi_dmul>
   b6dea:	f7fd fdcd 	bl	b4988 <__aeabi_d2f>
   b6dee:	ee00 0a10 	vmov	s0, r0
   b6df2:	4620      	mov	r0, r4
   b6df4:	f7ff f8ec 	bl	b5fd0 <_ZN17currentStatusData17set_internalTempCEf>
    Log.info("Internal Temp: %4.2fC",current.get_internalTempC());
   b6df8:	f7fe fdfc 	bl	b59f4 <_ZN17currentStatusData8instanceEv>
   b6dfc:	f7ff f8b6 	bl	b5f6c <_ZNK17currentStatusData17get_internalTempCEv>
   b6e00:	ee10 0a10 	vmov	r0, s0
   b6e04:	f7fd fa70 	bl	b42e8 <__aeabi_f2d>
   b6e08:	4602      	mov	r2, r0
   b6e0a:	460b      	mov	r3, r1
   b6e0c:	4814      	ldr	r0, [pc, #80]	; (b6e60 <_Z16takeMeasurementsv+0x1d0>)
   b6e0e:	4919      	ldr	r1, [pc, #100]	; (b6e74 <_Z16takeMeasurementsv+0x1e4>)
   b6e10:	f7fd fec9 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
}
   b6e14:	2001      	movs	r0, #1
   b6e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6e1a:	bf00      	nop
   b6e1c:	f3af 8000 	nop.w
   b6e20:	66666666 	.word	0x66666666
   b6e24:	400a6666 	.word	0x400a6666
   b6e28:	66666666 	.word	0x66666666
   b6e2c:	40711266 	.word	0x40711266
   b6e30:	66666666 	.word	0x66666666
   b6e34:	3f4a6666 	.word	0x3f4a6666
   b6e38:	66666666 	.word	0x66666666
   b6e3c:	3f5a6666 	.word	0x3f5a6666
   b6e40:	d349be90 	.word	0xd349be90
   b6e44:	3efe68a0 	.word	0x3efe68a0
   b6e48:	cccccccd 	.word	0xcccccccd
   b6e4c:	40340ccc 	.word	0x40340ccc
   b6e50:	000bed68 	.word	0x000bed68
   b6e54:	3f300000 	.word	0x3f300000
   b6e58:	3fe00000 	.word	0x3fe00000
   b6e5c:	40590000 	.word	0x40590000
   b6e60:	2003e64c 	.word	0x2003e64c
   b6e64:	000bee09 	.word	0x000bee09
   b6e68:	000bed66 	.word	0x000bed66
   b6e6c:	000bee1f 	.word	0x000bee1f
   b6e70:	000bed6a 	.word	0x000bed6a
   b6e74:	000bee2e 	.word	0x000bee2e

000b6e78 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6e78:	4770      	bx	lr

000b6e7a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6e7a:	b510      	push	{r4, lr}
}
   b6e7c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6e7e:	4604      	mov	r4, r0
}
   b6e80:	f7fd fe23 	bl	b4aca <_ZdlPvj>
   b6e84:	4620      	mov	r0, r4
   b6e86:	bd10      	pop	{r4, pc}

000b6e88 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6e88:	b510      	push	{r4, lr}
   b6e8a:	4604      	mov	r4, r0
   b6e8c:	b08a      	sub	sp, #40	; 0x28
   b6e8e:	4608      	mov	r0, r1
    attr.flags = 0;
   b6e90:	f04f 0c20 	mov.w	ip, #32
   b6e94:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6e96:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6e9a:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6e9e:	460b      	mov	r3, r1
   b6ea0:	aa02      	add	r2, sp, #8
   b6ea2:	6821      	ldr	r1, [r4, #0]
   b6ea4:	f003 fb6e 	bl	ba584 <log_message_v>
}
   b6ea8:	b00a      	add	sp, #40	; 0x28
   b6eaa:	bd10      	pop	{r4, pc}

000b6eac <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6eac:	b40e      	push	{r1, r2, r3}
   b6eae:	b503      	push	{r0, r1, lr}
   b6eb0:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6eb2:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6eb4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6eb8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6eba:	f7ff ffe5 	bl	b6e88 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6ebe:	b002      	add	sp, #8
   b6ec0:	f85d eb04 	ldr.w	lr, [sp], #4
   b6ec4:	b003      	add	sp, #12
   b6ec6:	4770      	bx	lr

000b6ec8 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6ec8:	b40e      	push	{r1, r2, r3}
   b6eca:	b503      	push	{r0, r1, lr}
   b6ecc:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6ece:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6ed0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6ed4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6ed6:	f7ff ffd7 	bl	b6e88 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6eda:	b002      	add	sp, #8
   b6edc:	f85d eb04 	ldr.w	lr, [sp], #4
   b6ee0:	b003      	add	sp, #12
   b6ee2:	4770      	bx	lr

000b6ee4 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6ee4:	b510      	push	{r4, lr}
   b6ee6:	7202      	strb	r2, [r0, #8]
   b6ee8:	22ff      	movs	r2, #255	; 0xff
   b6eea:	8142      	strh	r2, [r0, #10]
   b6eec:	2200      	movs	r2, #0
   b6eee:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6ef2:	6142      	str	r2, [r0, #20]
   b6ef4:	7602      	strb	r2, [r0, #24]
   b6ef6:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6ef8:	4a02      	ldr	r2, [pc, #8]	; (b6f04 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6efa:	4c03      	ldr	r4, [pc, #12]	; (b6f08 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6efc:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6efe:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6f02:	bd10      	pop	{r4, pc}
   b6f04:	2003e5ec 	.word	0x2003e5ec
   b6f08:	000bf030 	.word	0x000bf030

000b6f0c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6f10:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6f14:	4604      	mov	r4, r0
   b6f16:	4689      	mov	r9, r1
   b6f18:	4616      	mov	r6, r2
   b6f1a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6f1c:	f1b8 0f00 	cmp.w	r8, #0
   b6f20:	d002      	beq.n	b6f28 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6f22:	6840      	ldr	r0, [r0, #4]
   b6f24:	f004 fb11 	bl	bb54a <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6f28:	7a21      	ldrb	r1, [r4, #8]
   b6f2a:	6860      	ldr	r0, [r4, #4]
   b6f2c:	f004 faed 	bl	bb50a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6f30:	6860      	ldr	r0, [r4, #4]
   b6f32:	6803      	ldr	r3, [r0, #0]
   b6f34:	4649      	mov	r1, r9
   b6f36:	689b      	ldr	r3, [r3, #8]
   b6f38:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6f3a:	6860      	ldr	r0, [r4, #4]
   b6f3c:	2100      	movs	r1, #0
   b6f3e:	f004 fb00 	bl	bb542 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6f42:	4605      	mov	r5, r0
   b6f44:	bb00      	cbnz	r0, b6f88 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6f46:	2301      	movs	r3, #1
   b6f48:	7a21      	ldrb	r1, [r4, #8]
   b6f4a:	6860      	ldr	r0, [r4, #4]
   b6f4c:	463a      	mov	r2, r7
   b6f4e:	f004 faca 	bl	bb4e6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6f52:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6f54:	4603      	mov	r3, r0
        if (count == num) {
   b6f56:	d109      	bne.n	b6f6c <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6f58:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6f5a:	42be      	cmp	r6, r7
   b6f5c:	d01c      	beq.n	b6f98 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6f5e:	6860      	ldr	r0, [r4, #4]
   b6f60:	6803      	ldr	r3, [r0, #0]
   b6f62:	695b      	ldr	r3, [r3, #20]
   b6f64:	4798      	blx	r3
   b6f66:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6f6a:	e7f6      	b.n	b6f5a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6f6c:	490b      	ldr	r1, [pc, #44]	; (b6f9c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6f6e:	480c      	ldr	r0, [pc, #48]	; (b6fa0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6f70:	464a      	mov	r2, r9
   b6f72:	f7ff ff9b 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6f76:	f1b8 0f00 	cmp.w	r8, #0
   b6f7a:	d002      	beq.n	b6f82 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6f7c:	6860      	ldr	r0, [r4, #4]
   b6f7e:	f004 faed 	bl	bb55c <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6f82:	4628      	mov	r0, r5
   b6f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6f88:	4603      	mov	r3, r0
   b6f8a:	4906      	ldr	r1, [pc, #24]	; (b6fa4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6f8c:	4804      	ldr	r0, [pc, #16]	; (b6fa0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6f8e:	464a      	mov	r2, r9
   b6f90:	f7ff ff8c 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6f94:	2500      	movs	r5, #0
   b6f96:	e7ee      	b.n	b6f76 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6f98:	2501      	movs	r5, #1
   b6f9a:	e7ec      	b.n	b6f76 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6f9c:	000bee44 	.word	0x000bee44
   b6fa0:	2003e5e8 	.word	0x2003e5e8
   b6fa4:	000bee69 	.word	0x000bee69

000b6fa8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6fa8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6faa:	9300      	str	r3, [sp, #0]
   b6fac:	2301      	movs	r3, #1
   b6fae:	f7ff ffad 	bl	b6f0c <_ZN6AB180513readRegistersEhPhjb>
}
   b6fb2:	b003      	add	sp, #12
   b6fb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fb8 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6fb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6fba:	8943      	ldrh	r3, [r0, #10]
   b6fbc:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6fbe:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6fc0:	d010      	beq.n	b6fe4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6fc2:	4e19      	ldr	r6, [pc, #100]	; (b7028 <_ZN6AB180510detectChipEv+0x70>)
   b6fc4:	4d19      	ldr	r5, [pc, #100]	; (b702c <_ZN6AB180510detectChipEv+0x74>)
   b6fc6:	f003 f8dd 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6fca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6fce:	d209      	bcs.n	b6fe4 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6fd0:	8960      	ldrh	r0, [r4, #10]
   b6fd2:	f006 fcd9 	bl	bd988 <digitalRead>
   b6fd6:	2801      	cmp	r0, #1
   b6fd8:	d004      	beq.n	b6fe4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6fda:	4631      	mov	r1, r6
   b6fdc:	4628      	mov	r0, r5
   b6fde:	f7fd fde2 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b6fe2:	e7f0      	b.n	b6fc6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6fe4:	2301      	movs	r3, #1
   b6fe6:	f10d 0207 	add.w	r2, sp, #7
   b6fea:	2128      	movs	r1, #40	; 0x28
   b6fec:	4620      	mov	r0, r4
   b6fee:	f7ff ffdb 	bl	b6fa8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6ff2:	b930      	cbnz	r0, b7002 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6ff4:	480d      	ldr	r0, [pc, #52]	; (b702c <_ZN6AB180510detectChipEv+0x74>)
   b6ff6:	490e      	ldr	r1, [pc, #56]	; (b7030 <_ZN6AB180510detectChipEv+0x78>)
   b6ff8:	f7fd fdd5 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b6ffc:	2000      	movs	r0, #0
}
   b6ffe:	b002      	add	sp, #8
   b7000:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7002:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7006:	2b18      	cmp	r3, #24
   b7008:	d1f4      	bne.n	b6ff4 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b700a:	2301      	movs	r3, #1
   b700c:	f10d 0207 	add.w	r2, sp, #7
   b7010:	2129      	movs	r1, #41	; 0x29
   b7012:	4620      	mov	r0, r4
   b7014:	f7ff ffc8 	bl	b6fa8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7018:	2800      	cmp	r0, #0
   b701a:	d0eb      	beq.n	b6ff4 <_ZN6AB180510detectChipEv+0x3c>
   b701c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7020:	2b05      	cmp	r3, #5
   b7022:	d1e7      	bne.n	b6ff4 <_ZN6AB180510detectChipEv+0x3c>
   b7024:	e7eb      	b.n	b6ffe <_ZN6AB180510detectChipEv+0x46>
   b7026:	bf00      	nop
   b7028:	000bee8d 	.word	0x000bee8d
   b702c:	2003e5e8 	.word	0x2003e5e8
   b7030:	000beea2 	.word	0x000beea2

000b7034 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7038:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b703c:	4604      	mov	r4, r0
   b703e:	460f      	mov	r7, r1
   b7040:	4615      	mov	r5, r2
   b7042:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b7044:	f1b8 0f00 	cmp.w	r8, #0
   b7048:	d002      	beq.n	b7050 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b704a:	6840      	ldr	r0, [r0, #4]
   b704c:	f004 fa7d 	bl	bb54a <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7050:	7a21      	ldrb	r1, [r4, #8]
   b7052:	6860      	ldr	r0, [r4, #4]
   b7054:	f004 fa59 	bl	bb50a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7058:	6860      	ldr	r0, [r4, #4]
   b705a:	6803      	ldr	r3, [r0, #0]
   b705c:	4639      	mov	r1, r7
   b705e:	689b      	ldr	r3, [r3, #8]
   b7060:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7062:	442e      	add	r6, r5
   b7064:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b7066:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7068:	d005      	beq.n	b7076 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b706a:	6803      	ldr	r3, [r0, #0]
   b706c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7070:	689b      	ldr	r3, [r3, #8]
   b7072:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7074:	e7f6      	b.n	b7064 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b7076:	2101      	movs	r1, #1
   b7078:	f004 fa63 	bl	bb542 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b707c:	4603      	mov	r3, r0
   b707e:	b170      	cbz	r0, b709e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7080:	4908      	ldr	r1, [pc, #32]	; (b70a4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b7082:	4809      	ldr	r0, [pc, #36]	; (b70a8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b7084:	463a      	mov	r2, r7
   b7086:	f7ff ff11 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b708a:	2500      	movs	r5, #0
    }

    if (lock) {
   b708c:	f1b8 0f00 	cmp.w	r8, #0
   b7090:	d002      	beq.n	b7098 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b7092:	6860      	ldr	r0, [r4, #4]
   b7094:	f004 fa62 	bl	bb55c <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7098:	4628      	mov	r0, r5
   b709a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b709e:	2501      	movs	r5, #1
   b70a0:	e7f4      	b.n	b708c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b70a2:	bf00      	nop
   b70a4:	000beeaf 	.word	0x000beeaf
   b70a8:	2003e5e8 	.word	0x2003e5e8

000b70ac <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b70ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b70ae:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b70b2:	9300      	str	r3, [sp, #0]
   b70b4:	f10d 020f 	add.w	r2, sp, #15
   b70b8:	2301      	movs	r3, #1
   b70ba:	f7ff ffbb 	bl	b7034 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b70be:	b005      	add	sp, #20
   b70c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b70c4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b70c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b70c6:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b70c8:	460c      	mov	r4, r1
   b70ca:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b70cc:	491a      	ldr	r1, [pc, #104]	; (b7138 <_ZN6AB18056setWDTEi+0x74>)
   b70ce:	481b      	ldr	r0, [pc, #108]	; (b713c <_ZN6AB18056setWDTEi+0x78>)
   b70d0:	f7fd fd69 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b70d4:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b70d6:	bfb8      	it	lt
   b70d8:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b70da:	b97c      	cbnz	r4, b70fc <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b70dc:	2301      	movs	r3, #1
   b70de:	4622      	mov	r2, r4
   b70e0:	211b      	movs	r1, #27
   b70e2:	4628      	mov	r0, r5
   b70e4:	f7ff ffe2 	bl	b70ac <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b70e8:	4915      	ldr	r1, [pc, #84]	; (b7140 <_ZN6AB18056setWDTEi+0x7c>)
   b70ea:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b70ec:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b70ee:	4813      	ldr	r0, [pc, #76]	; (b713c <_ZN6AB18056setWDTEi+0x78>)
   b70f0:	f7ff feea 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b70f4:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b70f6:	616c      	str	r4, [r5, #20]
}
   b70f8:	4630      	mov	r0, r6
   b70fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b70fc:	2c03      	cmp	r4, #3
   b70fe:	dd19      	ble.n	b7134 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7100:	10a7      	asrs	r7, r4, #2
   b7102:	2f1f      	cmp	r7, #31
   b7104:	bfa8      	it	ge
   b7106:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7108:	00ba      	lsls	r2, r7, #2
   b710a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b710e:	2301      	movs	r3, #1
   b7110:	b2d2      	uxtb	r2, r2
   b7112:	211b      	movs	r1, #27
   b7114:	4628      	mov	r0, r5
   b7116:	f7ff ffc9 	bl	b70ac <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b711a:	463a      	mov	r2, r7
   b711c:	4603      	mov	r3, r0
   b711e:	4909      	ldr	r1, [pc, #36]	; (b7144 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7120:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7122:	4806      	ldr	r0, [pc, #24]	; (b713c <_ZN6AB18056setWDTEi+0x78>)
   b7124:	f7ff fed0 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7128:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b712c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b712e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7130:	616f      	str	r7, [r5, #20]
   b7132:	e7e1      	b.n	b70f8 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7134:	2701      	movs	r7, #1
   b7136:	e7e7      	b.n	b7108 <_ZN6AB18056setWDTEi+0x44>
   b7138:	000beed4 	.word	0x000beed4
   b713c:	2003e5e8 	.word	0x2003e5e8
   b7140:	000beede 	.word	0x000beede
   b7144:	000beefa 	.word	0x000beefa

000b7148 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7148:	4b06      	ldr	r3, [pc, #24]	; (b7164 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b714a:	681a      	ldr	r2, [r3, #0]
   b714c:	b14a      	cbz	r2, b7162 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b714e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7152:	430b      	orrs	r3, r1
   b7154:	d105      	bne.n	b7162 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b7156:	68d3      	ldr	r3, [r2, #12]
   b7158:	b11b      	cbz	r3, b7162 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b715a:	2100      	movs	r1, #0
   b715c:	4610      	mov	r0, r2
   b715e:	f7ff bfb1 	b.w	b70c4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7162:	4770      	bx	lr
   b7164:	2003e5ec 	.word	0x2003e5ec

000b7168 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7168:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b716c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7170:	4605      	mov	r5, r0
   b7172:	4616      	mov	r6, r2
   b7174:	461f      	mov	r7, r3
    if (lock) {
   b7176:	f1b8 0f00 	cmp.w	r8, #0
   b717a:	d004      	beq.n	b7186 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b717c:	6840      	ldr	r0, [r0, #4]
   b717e:	9101      	str	r1, [sp, #4]
   b7180:	f004 f9e3 	bl	bb54a <_ZN7TwoWire4lockEv>
   b7184:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b7186:	9101      	str	r1, [sp, #4]
   b7188:	2300      	movs	r3, #0
   b718a:	f10d 020f 	add.w	r2, sp, #15
   b718e:	4628      	mov	r0, r5
   b7190:	f7ff ff0a 	bl	b6fa8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7194:	4604      	mov	r4, r0
   b7196:	b160      	cbz	r0, b71b2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7198:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b719c:	ea03 0206 	and.w	r2, r3, r6
   b71a0:	433a      	orrs	r2, r7
        if (newValue != value) {
   b71a2:	4293      	cmp	r3, r2
   b71a4:	d005      	beq.n	b71b2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b71a6:	9901      	ldr	r1, [sp, #4]
   b71a8:	2300      	movs	r3, #0
   b71aa:	4628      	mov	r0, r5
   b71ac:	f7ff ff7e 	bl	b70ac <_ZN6AB180513writeRegisterEhhb>
   b71b0:	4604      	mov	r4, r0
    if (lock) {
   b71b2:	f1b8 0f00 	cmp.w	r8, #0
   b71b6:	d002      	beq.n	b71be <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b71b8:	6868      	ldr	r0, [r5, #4]
   b71ba:	f004 f9cf 	bl	bb55c <_ZN7TwoWire6unlockEv>
}
   b71be:	4620      	mov	r0, r4
   b71c0:	b004      	add	sp, #16
   b71c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b71c6 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b71c6:	b513      	push	{r0, r1, r4, lr}
   b71c8:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b71ca:	f10d 0207 	add.w	r2, sp, #7
   b71ce:	f7ff feeb 	bl	b6fa8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b71d2:	b128      	cbz	r0, b71e0 <_ZN6AB180510isBitClearEhhb+0x1a>
   b71d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b71d8:	421c      	tst	r4, r3
   b71da:	bf0c      	ite	eq
   b71dc:	2001      	moveq	r0, #1
   b71de:	2000      	movne	r0, #0
}
   b71e0:	b002      	add	sp, #8
   b71e2:	bd10      	pop	{r4, pc}

000b71e4 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b71e4:	b513      	push	{r0, r1, r4, lr}
   b71e6:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b71e8:	f10d 0207 	add.w	r2, sp, #7
   b71ec:	f7ff fedc 	bl	b6fa8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b71f0:	b128      	cbz	r0, b71fe <_ZN6AB18058isBitSetEhhb+0x1a>
   b71f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b71f6:	421c      	tst	r4, r3
   b71f8:	bf14      	ite	ne
   b71fa:	2001      	movne	r0, #1
   b71fc:	2000      	moveq	r0, #0
}
   b71fe:	b002      	add	sp, #8
   b7200:	bd10      	pop	{r4, pc}

000b7202 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7202:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7204:	43d2      	mvns	r2, r2
   b7206:	9300      	str	r3, [sp, #0]
   b7208:	b2d2      	uxtb	r2, r2
   b720a:	2300      	movs	r3, #0
   b720c:	f7ff ffac 	bl	b7168 <_ZN6AB180512maskRegisterEhhhb>
}
   b7210:	b003      	add	sp, #12
   b7212:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7218 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7218:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b721a:	2301      	movs	r3, #1
   b721c:	f10d 0207 	add.w	r2, sp, #7
   b7220:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7222:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7224:	f7ff fec0 	bl	b6fa8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7228:	4605      	mov	r5, r0
   b722a:	b938      	cbnz	r0, b723c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b722c:	491e      	ldr	r1, [pc, #120]	; (b72a8 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b722e:	481f      	ldr	r0, [pc, #124]	; (b72ac <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7230:	22ad      	movs	r2, #173	; 0xad
   b7232:	f7ff fe3b 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
}
   b7236:	4628      	mov	r0, r5
   b7238:	b003      	add	sp, #12
   b723a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b723c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7240:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7244:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7248:	d00b      	beq.n	b7262 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b724a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b724c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b724e:	210f      	movs	r1, #15
   b7250:	4620      	mov	r0, r4
   b7252:	f7ff ffd6 	bl	b7202 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7256:	4a16      	ldr	r2, [pc, #88]	; (b72b0 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7258:	4916      	ldr	r1, [pc, #88]	; (b72b4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b725a:	4814      	ldr	r0, [pc, #80]	; (b72ac <_ZN6AB180516updateWakeReasonEv+0x94>)
   b725c:	f7fd fca3 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b7260:	e7e9      	b.n	b7236 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7262:	2208      	movs	r2, #8
   b7264:	2117      	movs	r1, #23
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff ffbc 	bl	b71e4 <_ZN6AB18058isBitSetEhhb>
   b726c:	b118      	cbz	r0, b7276 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b726e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7270:	4a11      	ldr	r2, [pc, #68]	; (b72b8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7272:	61e3      	str	r3, [r4, #28]
   b7274:	e7f0      	b.n	b7258 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7276:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b727a:	071a      	lsls	r2, r3, #28
   b727c:	d509      	bpl.n	b7292 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b727e:	2303      	movs	r3, #3
   b7280:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7282:	2208      	movs	r2, #8
   b7284:	2301      	movs	r3, #1
   b7286:	210f      	movs	r1, #15
   b7288:	4620      	mov	r0, r4
   b728a:	f7ff ffba 	bl	b7202 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b728e:	4a0b      	ldr	r2, [pc, #44]	; (b72bc <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7290:	e7e2      	b.n	b7258 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7292:	075b      	lsls	r3, r3, #29
   b7294:	d5cf      	bpl.n	b7236 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7296:	2204      	movs	r2, #4
   b7298:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b729a:	2301      	movs	r3, #1
   b729c:	210f      	movs	r1, #15
   b729e:	4620      	mov	r0, r4
   b72a0:	f7ff ffaf 	bl	b7202 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b72a4:	4a06      	ldr	r2, [pc, #24]	; (b72c0 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b72a6:	e7d7      	b.n	b7258 <_ZN6AB180516updateWakeReasonEv+0x40>
   b72a8:	000bef4d 	.word	0x000bef4d
   b72ac:	2003e5e8 	.word	0x2003e5e8
   b72b0:	000bef1e 	.word	0x000bef1e
   b72b4:	000bef6c 	.word	0x000bef6c
   b72b8:	000bef27 	.word	0x000bef27
   b72bc:	000bef37 	.word	0x000bef37
   b72c0:	000bef47 	.word	0x000bef47

000b72c4 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b72c4:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b72c6:	9300      	str	r3, [sp, #0]
   b72c8:	4613      	mov	r3, r2
   b72ca:	22ff      	movs	r2, #255	; 0xff
   b72cc:	f7ff ff4c 	bl	b7168 <_ZN6AB180512maskRegisterEhhhb>
}
   b72d0:	b003      	add	sp, #12
   b72d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b72d6 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b72d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b72da:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b72de:	4605      	mov	r5, r0
   b72e0:	460c      	mov	r4, r1
   b72e2:	4691      	mov	r9, r2
   b72e4:	461f      	mov	r7, r3
    if (lock) {
   b72e6:	f1ba 0f00 	cmp.w	sl, #0
   b72ea:	d002      	beq.n	b72f2 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b72ec:	6840      	ldr	r0, [r0, #4]
   b72ee:	f004 f92c 	bl	bb54a <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b72f2:	b307      	cbz	r7, b7336 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b72f4:	2f20      	cmp	r7, #32
   b72f6:	463e      	mov	r6, r7
   b72f8:	bf28      	it	cs
   b72fa:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b72fc:	2c7f      	cmp	r4, #127	; 0x7f
   b72fe:	d826      	bhi.n	b734e <_ZN6AB18057readRamEjPhjb+0x78>
   b7300:	1933      	adds	r3, r6, r4
   b7302:	2b80      	cmp	r3, #128	; 0x80
   b7304:	d901      	bls.n	b730a <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b7306:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b730a:	2301      	movs	r3, #1
   b730c:	2204      	movs	r2, #4
   b730e:	213f      	movs	r1, #63	; 0x3f
   b7310:	4628      	mov	r0, r5
   b7312:	f7ff ff76 	bl	b7202 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7316:	2300      	movs	r3, #0
   b7318:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b731c:	9300      	str	r3, [sp, #0]
   b731e:	464a      	mov	r2, r9
   b7320:	4633      	mov	r3, r6
   b7322:	b2c9      	uxtb	r1, r1
   b7324:	4628      	mov	r0, r5
   b7326:	f7ff fdf1 	bl	b6f0c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b732a:	4680      	mov	r8, r0
   b732c:	b128      	cbz	r0, b733a <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b732e:	4434      	add	r4, r6
        dataLen -= count;
   b7330:	1bbf      	subs	r7, r7, r6
        data += count;
   b7332:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7334:	e7dd      	b.n	b72f2 <_ZN6AB18057readRamEjPhjb+0x1c>
   b7336:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b733a:	f1ba 0f00 	cmp.w	sl, #0
   b733e:	d002      	beq.n	b7346 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b7340:	6868      	ldr	r0, [r5, #4]
   b7342:	f004 f90b 	bl	bb55c <_ZN7TwoWire6unlockEv>
}
   b7346:	4640      	mov	r0, r8
   b7348:	b002      	add	sp, #8
   b734a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b734e:	2301      	movs	r3, #1
   b7350:	2204      	movs	r2, #4
   b7352:	213f      	movs	r1, #63	; 0x3f
   b7354:	4628      	mov	r0, r5
   b7356:	f7ff ffb5 	bl	b72c4 <_ZN6AB180514setRegisterBitEhhb>
   b735a:	e7dc      	b.n	b7316 <_ZN6AB18057readRamEjPhjb+0x40>

000b735c <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b735c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7360:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7364:	4605      	mov	r5, r0
   b7366:	460c      	mov	r4, r1
   b7368:	4691      	mov	r9, r2
   b736a:	461f      	mov	r7, r3
    if (lock) {
   b736c:	f1ba 0f00 	cmp.w	sl, #0
   b7370:	d002      	beq.n	b7378 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7372:	6840      	ldr	r0, [r0, #4]
   b7374:	f004 f8e9 	bl	bb54a <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7378:	b307      	cbz	r7, b73bc <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b737a:	2f1f      	cmp	r7, #31
   b737c:	463e      	mov	r6, r7
   b737e:	bf28      	it	cs
   b7380:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7382:	2c7f      	cmp	r4, #127	; 0x7f
   b7384:	d826      	bhi.n	b73d4 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7386:	1933      	adds	r3, r6, r4
   b7388:	2b80      	cmp	r3, #128	; 0x80
   b738a:	d901      	bls.n	b7390 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b738c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7390:	2301      	movs	r3, #1
   b7392:	2204      	movs	r2, #4
   b7394:	213f      	movs	r1, #63	; 0x3f
   b7396:	4628      	mov	r0, r5
   b7398:	f7ff ff33 	bl	b7202 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b739c:	2300      	movs	r3, #0
   b739e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b73a2:	9300      	str	r3, [sp, #0]
   b73a4:	464a      	mov	r2, r9
   b73a6:	4633      	mov	r3, r6
   b73a8:	b2c9      	uxtb	r1, r1
   b73aa:	4628      	mov	r0, r5
   b73ac:	f7ff fe42 	bl	b7034 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b73b0:	4680      	mov	r8, r0
   b73b2:	b128      	cbz	r0, b73c0 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b73b4:	4434      	add	r4, r6
        dataLen -= count;
   b73b6:	1bbf      	subs	r7, r7, r6
        data += count;
   b73b8:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b73ba:	e7dd      	b.n	b7378 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b73bc:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b73c0:	f1ba 0f00 	cmp.w	sl, #0
   b73c4:	d002      	beq.n	b73cc <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b73c6:	6868      	ldr	r0, [r5, #4]
   b73c8:	f004 f8c8 	bl	bb55c <_ZN7TwoWire6unlockEv>
}
   b73cc:	4640      	mov	r0, r8
   b73ce:	b002      	add	sp, #8
   b73d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b73d4:	2301      	movs	r3, #1
   b73d6:	2204      	movs	r2, #4
   b73d8:	213f      	movs	r1, #63	; 0x3f
   b73da:	4628      	mov	r0, r5
   b73dc:	f7ff ff72 	bl	b72c4 <_ZN6AB180514setRegisterBitEhhb>
   b73e0:	e7dc      	b.n	b739c <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000b73e4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b73e4:	b530      	push	{r4, r5, lr}
   b73e6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b73e8:	680d      	ldr	r5, [r1, #0]
   b73ea:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b73ee:	9503      	str	r5, [sp, #12]
   b73f0:	684d      	ldr	r5, [r1, #4]
   b73f2:	9502      	str	r5, [sp, #8]
   b73f4:	688d      	ldr	r5, [r1, #8]
   b73f6:	9501      	str	r5, [sp, #4]
   b73f8:	68c9      	ldr	r1, [r1, #12]
   b73fa:	9100      	str	r1, [sp, #0]
   b73fc:	3301      	adds	r3, #1
   b73fe:	4904      	ldr	r1, [pc, #16]	; (b7410 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b7400:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b7404:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7406:	f005 fe31 	bl	bd06c <_ZN6String6formatEPKcz>
}
   b740a:	4620      	mov	r0, r4
   b740c:	b005      	add	sp, #20
   b740e:	bd30      	pop	{r4, r5, pc}
   b7410:	000bef7d 	.word	0x000bef7d

000b7414 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7414:	0903      	lsrs	r3, r0, #4
}
   b7416:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7418:	f000 000f 	and.w	r0, r0, #15
}
   b741c:	fb02 0003 	mla	r0, r2, r3, r0
   b7420:	4770      	bx	lr

000b7422 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7422:	b538      	push	{r3, r4, r5, lr}
   b7424:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b7426:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7428:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b742a:	f7ff fff3 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b742e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7430:	7860      	ldrb	r0, [r4, #1]
   b7432:	f7ff ffef 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b7436:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b7438:	78a0      	ldrb	r0, [r4, #2]
   b743a:	f7ff ffeb 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b743e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7440:	78e0      	ldrb	r0, [r4, #3]
   b7442:	f7ff ffe7 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b7446:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7448:	7920      	ldrb	r0, [r4, #4]
   b744a:	f7ff ffe3 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b744e:	3801      	subs	r0, #1
   b7450:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7452:	b92d      	cbnz	r5, b7460 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7454:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b7456:	7828      	ldrb	r0, [r5, #0]
   b7458:	f7ff ffdc 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b745c:	6188      	str	r0, [r1, #24]
}
   b745e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7460:	7960      	ldrb	r0, [r4, #5]
   b7462:	f7ff ffd7 	bl	b7414 <_ZN6AB180510bcdToValueEh>
   b7466:	3064      	adds	r0, #100	; 0x64
   b7468:	1da5      	adds	r5, r4, #6
   b746a:	6148      	str	r0, [r1, #20]
   b746c:	e7f3      	b.n	b7456 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7470 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7470:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7472:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7474:	b088      	sub	sp, #32
   b7476:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7478:	461a      	mov	r2, r3
   b747a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b747c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b747e:	f7ff fea2 	bl	b71c6 <_ZN6AB180510isBitClearEhhb>
   b7482:	b1f0      	cbz	r0, b74c2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7484:	2308      	movs	r3, #8
   b7486:	2601      	movs	r6, #1
   b7488:	4620      	mov	r0, r4
   b748a:	9600      	str	r6, [sp, #0]
   b748c:	eb0d 0203 	add.w	r2, sp, r3
   b7490:	2100      	movs	r1, #0
   b7492:	f7ff fd3b 	bl	b6f0c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b7496:	4604      	mov	r4, r0
   b7498:	b198      	cbz	r0, b74c2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b749a:	4632      	mov	r2, r6
   b749c:	4629      	mov	r1, r5
   b749e:	f10d 0009 	add.w	r0, sp, #9
   b74a2:	f7ff ffbe 	bl	b7422 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b74a6:	a804      	add	r0, sp, #16
   b74a8:	f7ff ff9c 	bl	b73e4 <_ZN6AB180510tmToStringEPK2tm>
   b74ac:	4808      	ldr	r0, [pc, #32]	; (b74d0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b74ae:	9a04      	ldr	r2, [sp, #16]
   b74b0:	4908      	ldr	r1, [pc, #32]	; (b74d4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b74b2:	f7fd fb78 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b74b6:	a804      	add	r0, sp, #16
   b74b8:	f005 fc62 	bl	bcd80 <_ZN6StringD1Ev>
}
   b74bc:	4620      	mov	r0, r4
   b74be:	b008      	add	sp, #32
   b74c0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b74c2:	2224      	movs	r2, #36	; 0x24
   b74c4:	2100      	movs	r1, #0
   b74c6:	4628      	mov	r0, r5
   b74c8:	f006 fcd8 	bl	bde7c <memset>
   b74cc:	2400      	movs	r4, #0
   b74ce:	e7f5      	b.n	b74bc <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b74d0:	2003e5e8 	.word	0x2003e5e8
   b74d4:	000bef9b 	.word	0x000bef9b

000b74d8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b74d8:	b530      	push	{r4, r5, lr}
   b74da:	b08b      	sub	sp, #44	; 0x2c
   b74dc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b74de:	a901      	add	r1, sp, #4
   b74e0:	f7ff ffc6 	bl	b7470 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b74e4:	4604      	mov	r4, r0
   b74e6:	b120      	cbz	r0, b74f2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b74e8:	a801      	add	r0, sp, #4
   b74ea:	f003 fa3f 	bl	ba96c <mktime>
   b74ee:	e9c5 0100 	strd	r0, r1, [r5]
}
   b74f2:	4620      	mov	r0, r4
   b74f4:	b00b      	add	sp, #44	; 0x2c
   b74f6:	bd30      	pop	{r4, r5, pc}

000b74f8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b74f8:	230a      	movs	r3, #10
   b74fa:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b74fe:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b7502:	fb91 f2f3 	sdiv	r2, r1, r3
   b7506:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b750a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b750e:	b2c0      	uxtb	r0, r0
   b7510:	4770      	bx	lr

000b7512 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7512:	b570      	push	{r4, r5, r6, lr}
   b7514:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b7516:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7518:	460c      	mov	r4, r1
   b751a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b751c:	f7ff ffec 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b7520:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b7522:	6868      	ldr	r0, [r5, #4]
   b7524:	f7ff ffe8 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b7528:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b752a:	68a8      	ldr	r0, [r5, #8]
   b752c:	f7ff ffe4 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b7530:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b7532:	68e8      	ldr	r0, [r5, #12]
   b7534:	f7ff ffe0 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b7538:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b753a:	6928      	ldr	r0, [r5, #16]
   b753c:	3001      	adds	r0, #1
   b753e:	f7ff ffdb 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b7542:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b7544:	b92e      	cbnz	r6, b7552 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b7546:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b7548:	69a8      	ldr	r0, [r5, #24]
   b754a:	f7ff ffd5 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b754e:	7030      	strb	r0, [r6, #0]
}
   b7550:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7552:	696a      	ldr	r2, [r5, #20]
   b7554:	2364      	movs	r3, #100	; 0x64
   b7556:	fb92 f0f3 	sdiv	r0, r2, r3
   b755a:	fb03 2010 	mls	r0, r3, r0, r2
   b755e:	f7ff ffcb 	bl	b74f8 <_ZN6AB180510valueToBcdEi>
   b7562:	1da6      	adds	r6, r4, #6
   b7564:	7160      	strb	r0, [r4, #5]
   b7566:	e7ef      	b.n	b7548 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7568 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7568:	b5f0      	push	{r4, r5, r6, r7, lr}
   b756a:	b087      	sub	sp, #28
   b756c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b756e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7570:	4616      	mov	r6, r2
   b7572:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7574:	f7ff ff36 	bl	b73e4 <_ZN6AB180510tmToStringEPK2tm>
   b7578:	481e      	ldr	r0, [pc, #120]	; (b75f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b757a:	9a02      	ldr	r2, [sp, #8]
   b757c:	491e      	ldr	r1, [pc, #120]	; (b75f8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b757e:	f7fd fb12 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b7582:	a802      	add	r0, sp, #8
   b7584:	f005 fbfc 	bl	bcd80 <_ZN6StringD1Ev>
    if (lock) {
   b7588:	b116      	cbz	r6, b7590 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b758a:	6868      	ldr	r0, [r5, #4]
   b758c:	f003 ffdd 	bl	bb54a <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7590:	4620      	mov	r0, r4
   b7592:	2201      	movs	r2, #1
   b7594:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7598:	2700      	movs	r7, #0
   b759a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b759e:	f7ff ffb8 	bl	b7512 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b75a2:	2301      	movs	r3, #1
   b75a4:	461a      	mov	r2, r3
   b75a6:	2110      	movs	r1, #16
   b75a8:	4628      	mov	r0, r5
   b75aa:	f7ff fe8b 	bl	b72c4 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b75ae:	4604      	mov	r4, r0
   b75b0:	b1e8      	cbz	r0, b75ee <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b75b2:	2308      	movs	r3, #8
   b75b4:	9700      	str	r7, [sp, #0]
   b75b6:	eb0d 0203 	add.w	r2, sp, r3
   b75ba:	4639      	mov	r1, r7
   b75bc:	4628      	mov	r0, r5
   b75be:	f7ff fd39 	bl	b7034 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b75c2:	4604      	mov	r4, r0
   b75c4:	b160      	cbz	r0, b75e0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b75c6:	2301      	movs	r3, #1
   b75c8:	461a      	mov	r2, r3
   b75ca:	2110      	movs	r1, #16
   b75cc:	4628      	mov	r0, r5
   b75ce:	f7ff fe18 	bl	b7202 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b75d2:	b116      	cbz	r6, b75da <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b75d4:	6868      	ldr	r0, [r5, #4]
   b75d6:	f003 ffc1 	bl	bb55c <_ZN7TwoWire6unlockEv>
}
   b75da:	4620      	mov	r0, r4
   b75dc:	b007      	add	sp, #28
   b75de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b75e0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b75e4:	4905      	ldr	r1, [pc, #20]	; (b75fc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b75e6:	4803      	ldr	r0, [pc, #12]	; (b75f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b75e8:	f7ff fc60 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
   b75ec:	e7f1      	b.n	b75d2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b75ee:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b75f2:	e7f7      	b.n	b75e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b75f4:	2003e5e8 	.word	0x2003e5e8
   b75f8:	000befa9 	.word	0x000befa9
   b75fc:	000befb7 	.word	0x000befb7

000b7600 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b7600:	b513      	push	{r0, r1, r4, lr}
   b7602:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b7604:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b7606:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b760a:	f006 fbe9 	bl	bdde0 <gmtime>
    return setRtcFromTm(tm, lock);
   b760e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b7612:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b7614:	4620      	mov	r0, r4
   b7616:	f7ff ffa7 	bl	b7568 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b761a:	b002      	add	sp, #8
   b761c:	bd10      	pop	{r4, pc}
	...

000b7620 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b7620:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7622:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b7624:	b089      	sub	sp, #36	; 0x24
   b7626:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7628:	bb75      	cbnz	r5, b7688 <_ZN6AB18054loopEv+0x68>
   b762a:	f005 ff5d 	bl	bd4e8 <_ZN9TimeClass7isValidEv>
   b762e:	b358      	cbz	r0, b7688 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b7630:	2600      	movs	r6, #0
   b7632:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b7634:	a904      	add	r1, sp, #16
   b7636:	4628      	mov	r0, r5
        tm = 0;
   b7638:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b763c:	f003 f88e 	bl	ba75c <spark_sync_time_last>
   b7640:	b310      	cbz	r0, b7688 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b7642:	2501      	movs	r5, #1
   b7644:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b7646:	f005 ff6c 	bl	bd522 <_ZN9TimeClass3nowEv>
   b764a:	17c3      	asrs	r3, r0, #31
   b764c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7650:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b7652:	9500      	str	r5, [sp, #0]
   b7654:	4620      	mov	r0, r4
   b7656:	f7ff ffd3 	bl	b7600 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b765a:	a902      	add	r1, sp, #8
   b765c:	4620      	mov	r0, r4
        time = 0;
   b765e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7662:	f7ff ff39 	bl	b74d8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b7666:	4b13      	ldr	r3, [pc, #76]	; (b76b4 <_ZN6AB18054loopEv+0x94>)
   b7668:	4913      	ldr	r1, [pc, #76]	; (b76b8 <_ZN6AB18054loopEv+0x98>)
   b766a:	681b      	ldr	r3, [r3, #0]
   b766c:	9300      	str	r3, [sp, #0]
   b766e:	a804      	add	r0, sp, #16
   b7670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7674:	f005 fef6 	bl	bd464 <_ZN9TimeClass6formatExPKc>
   b7678:	4810      	ldr	r0, [pc, #64]	; (b76bc <_ZN6AB18054loopEv+0x9c>)
   b767a:	9a04      	ldr	r2, [sp, #16]
   b767c:	4910      	ldr	r1, [pc, #64]	; (b76c0 <_ZN6AB18054loopEv+0xa0>)
   b767e:	f7fd fa92 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b7682:	a804      	add	r0, sp, #16
   b7684:	f005 fb7c 	bl	bcd80 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b7688:	6963      	ldr	r3, [r4, #20]
   b768a:	b18b      	cbz	r3, b76b0 <_ZN6AB18054loopEv+0x90>
   b768c:	f002 fd7a 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7690:	6923      	ldr	r3, [r4, #16]
   b7692:	1ac0      	subs	r0, r0, r3
   b7694:	6963      	ldr	r3, [r4, #20]
   b7696:	4298      	cmp	r0, r3
   b7698:	d30a      	bcc.n	b76b0 <_ZN6AB18054loopEv+0x90>
   b769a:	f002 fd73 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b769e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b76a2:	6120      	str	r0, [r4, #16]
            setWDT();
   b76a4:	4620      	mov	r0, r4
}
   b76a6:	b009      	add	sp, #36	; 0x24
   b76a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b76ac:	f7ff bd0a 	b.w	b70c4 <_ZN6AB18056setWDTEi>
}
   b76b0:	b009      	add	sp, #36	; 0x24
   b76b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b76b4:	2003e3e8 	.word	0x2003e3e8
   b76b8:	2003e6a0 	.word	0x2003e6a0
   b76bc:	2003e5e8 	.word	0x2003e5e8
   b76c0:	000befd2 	.word	0x000befd2

000b76c4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b76c4:	b530      	push	{r4, r5, lr}
   b76c6:	4604      	mov	r4, r0
   b76c8:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b76ca:	b111      	cbz	r1, b76d2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b76cc:	6840      	ldr	r0, [r0, #4]
   b76ce:	f003 feed 	bl	bb4ac <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b76d2:	4620      	mov	r0, r4
   b76d4:	f7ff fc70 	bl	b6fb8 <_ZN6AB180510detectChipEv>
   b76d8:	ad06      	add	r5, sp, #24
   b76da:	2800      	cmp	r0, #0
   b76dc:	d037      	beq.n	b774e <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b76de:	4620      	mov	r0, r4
   b76e0:	f7ff fd9a 	bl	b7218 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b76e4:	2301      	movs	r3, #1
   b76e6:	461a      	mov	r2, r3
   b76e8:	2110      	movs	r1, #16
   b76ea:	4620      	mov	r0, r4
   b76ec:	f7ff fd6b 	bl	b71c6 <_ZN6AB180510isBitClearEhhb>
   b76f0:	b1d8      	cbz	r0, b772a <_ZN6AB18055setupEb+0x66>
   b76f2:	f005 fef9 	bl	bd4e8 <_ZN9TimeClass7isValidEv>
   b76f6:	b9c0      	cbnz	r0, b772a <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b76f8:	a902      	add	r1, sp, #8
   b76fa:	4620      	mov	r0, r4
   b76fc:	f7ff feec 	bl	b74d8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b7700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b7704:	f005 fdf4 	bl	bd2f0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b7708:	4b13      	ldr	r3, [pc, #76]	; (b7758 <_ZN6AB18055setupEb+0x94>)
   b770a:	4914      	ldr	r1, [pc, #80]	; (b775c <_ZN6AB18055setupEb+0x98>)
   b770c:	681b      	ldr	r3, [r3, #0]
   b770e:	9300      	str	r3, [sp, #0]
   b7710:	4628      	mov	r0, r5
   b7712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7716:	f005 fea5 	bl	bd464 <_ZN9TimeClass6formatExPKc>
   b771a:	4811      	ldr	r0, [pc, #68]	; (b7760 <_ZN6AB18055setupEb+0x9c>)
   b771c:	9a06      	ldr	r2, [sp, #24]
   b771e:	4911      	ldr	r1, [pc, #68]	; (b7764 <_ZN6AB18055setupEb+0xa0>)
   b7720:	f7fd fa41 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b7724:	4628      	mov	r0, r5
   b7726:	f005 fb2b 	bl	bcd80 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b772a:	4b0f      	ldr	r3, [pc, #60]	; (b7768 <_ZN6AB18055setupEb+0xa4>)
   b772c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b772e:	4b0f      	ldr	r3, [pc, #60]	; (b776c <_ZN6AB18055setupEb+0xa8>)
   b7730:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b7732:	4b0f      	ldr	r3, [pc, #60]	; (b7770 <_ZN6AB18055setupEb+0xac>)
   b7734:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b7736:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b773a:	2300      	movs	r3, #0
   b773c:	a802      	add	r0, sp, #8
   b773e:	9500      	str	r5, [sp, #0]
   b7740:	f7fd faa2 	bl	b4c88 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b7744:	4628      	mov	r0, r5
   b7746:	f7fd fa19 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
}
   b774a:	b00b      	add	sp, #44	; 0x2c
   b774c:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b774e:	4909      	ldr	r1, [pc, #36]	; (b7774 <_ZN6AB18055setupEb+0xb0>)
   b7750:	4803      	ldr	r0, [pc, #12]	; (b7760 <_ZN6AB18055setupEb+0x9c>)
   b7752:	f7ff fbab 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
   b7756:	e7e8      	b.n	b772a <_ZN6AB18055setupEb+0x66>
   b7758:	2003e3e8 	.word	0x2003e3e8
   b775c:	2003e6a0 	.word	0x2003e6a0
   b7760:	2003e5e8 	.word	0x2003e5e8
   b7764:	000befe8 	.word	0x000befe8
   b7768:	000b7149 	.word	0x000b7149
   b776c:	000b4b73 	.word	0x000b4b73
   b7770:	000b4b5f 	.word	0x000b4b5f
   b7774:	000bf005 	.word	0x000bf005

000b7778 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7778:	4b01      	ldr	r3, [pc, #4]	; (b7780 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b777a:	4a02      	ldr	r2, [pc, #8]	; (b7784 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b777c:	601a      	str	r2, [r3, #0]
}
   b777e:	4770      	bx	lr
   b7780:	2003e5e8 	.word	0x2003e5e8
   b7784:	000bf01d 	.word	0x000bf01d

000b7788 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b7788:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b778a:	2301      	movs	r3, #1
   b778c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b778e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7790:	4604      	mov	r4, r0
        if (th->func) {
   b7792:	b143      	cbz	r3, b77a6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b7794:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7796:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b7798:	2301      	movs	r3, #1
   b779a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b779c:	2000      	movs	r0, #0
    }
   b779e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b77a2:	f002 bcbf 	b.w	ba124 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b77a6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b77a8:	2800      	cmp	r0, #0
   b77aa:	d0f5      	beq.n	b7798 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b77ac:	6883      	ldr	r3, [r0, #8]
   b77ae:	b90b      	cbnz	r3, b77b4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b77b0:	f006 f9dc 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b77b4:	68c3      	ldr	r3, [r0, #12]
   b77b6:	e7ee      	b.n	b7796 <_ZN6Thread3runEPv+0xe>

000b77b8 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b77b8:	2a01      	cmp	r2, #1
   b77ba:	d102      	bne.n	b77c2 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b77bc:	6001      	str	r1, [r0, #0]
      }
   b77be:	2000      	movs	r0, #0
   b77c0:	4770      	bx	lr
	  switch (__op)
   b77c2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b77c4:	bf04      	itt	eq
   b77c6:	680b      	ldreq	r3, [r1, #0]
   b77c8:	6003      	streq	r3, [r0, #0]
	      break;
   b77ca:	e7f8      	b.n	b77be <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b77cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b77cc:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b77ce:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b77d0:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b77d2:	b135      	cbz	r5, b77e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b77d4:	4628      	mov	r0, r5
   b77d6:	f7fd f9d1 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b77da:	2110      	movs	r1, #16
   b77dc:	4628      	mov	r0, r5
   b77de:	f7fd f974 	bl	b4aca <_ZdlPvj>
   b77e2:	4620      	mov	r0, r4
   b77e4:	2114      	movs	r1, #20
      }
   b77e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b77ea:	f7fd b96e 	b.w	b4aca <_ZdlPvj>

000b77ee <_ZN6Thread7disposeEv>:
    void dispose()
   b77ee:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b77f0:	6803      	ldr	r3, [r0, #0]
   b77f2:	4604      	mov	r4, r0
        if (!isValid())
   b77f4:	b1ab      	cbz	r3, b7822 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b77f6:	6858      	ldr	r0, [r3, #4]
   b77f8:	f002 fc44 	bl	ba084 <os_thread_is_current>
   b77fc:	b988      	cbnz	r0, b7822 <_ZN6Thread7disposeEv+0x34>
   b77fe:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b7800:	7c5a      	ldrb	r2, [r3, #17]
   b7802:	b912      	cbnz	r2, b780a <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b7804:	6858      	ldr	r0, [r3, #4]
   b7806:	f002 fc45 	bl	ba094 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b780a:	6823      	ldr	r3, [r4, #0]
   b780c:	6858      	ldr	r0, [r3, #4]
   b780e:	f002 fc49 	bl	ba0a4 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b7812:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b7814:	2300      	movs	r3, #0
   b7816:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b7818:	b118      	cbz	r0, b7822 <_ZN6Thread7disposeEv+0x34>
    }
   b781a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b781e:	f7ff bfd5 	b.w	b77cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7822:	bd10      	pop	{r4, pc}

000b7824 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b7824:	4a05      	ldr	r2, [pc, #20]	; (b783c <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b7826:	6002      	str	r2, [r0, #0]
   b7828:	2200      	movs	r2, #0
   b782a:	6042      	str	r2, [r0, #4]
   b782c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b782e:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b7832:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b7836:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b783a:	4770      	bx	lr
   b783c:	000bf05c 	.word	0x000bf05c

000b7840 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7840:	b510      	push	{r4, lr}
    if (!_instance) {
   b7842:	4c07      	ldr	r4, [pc, #28]	; (b7860 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7844:	6823      	ldr	r3, [r4, #0]
   b7846:	b943      	cbnz	r3, b785a <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b7848:	f240 4064 	movw	r0, #1124	; 0x464
   b784c:	f7fd f939 	bl	b4ac2 <_Znwj>
   b7850:	4603      	mov	r3, r0
   b7852:	b108      	cbz	r0, b7858 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7854:	f7ff ffe6 	bl	b7824 <_ZN19BackgroundPublishRKC1Ev>
   b7858:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b785a:	6820      	ldr	r0, [r4, #0]
   b785c:	bd10      	pop	{r4, pc}
   b785e:	bf00      	nop
   b7860:	2003e5f0 	.word	0x2003e5f0

000b7864 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7864:	b538      	push	{r3, r4, r5, lr}
   b7866:	4604      	mov	r4, r0
    if(thread)
   b7868:	6840      	ldr	r0, [r0, #4]
   b786a:	b190      	cbz	r0, b7892 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b786c:	2302      	movs	r3, #2
   b786e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7870:	f7ff ffbd 	bl	b77ee <_ZN6Thread7disposeEv>
        delete thread;
   b7874:	6865      	ldr	r5, [r4, #4]
   b7876:	b155      	cbz	r5, b788e <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7878:	4628      	mov	r0, r5
   b787a:	f7ff ffb8 	bl	b77ee <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b787e:	6828      	ldr	r0, [r5, #0]
   b7880:	b108      	cbz	r0, b7886 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7882:	f7ff ffa3 	bl	b77cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7886:	2104      	movs	r1, #4
   b7888:	4628      	mov	r0, r5
   b788a:	f7fd f91e 	bl	b4aca <_ZdlPvj>
        thread = NULL;
   b788e:	2300      	movs	r3, #0
   b7890:	6063      	str	r3, [r4, #4]
    }
}
   b7892:	bd38      	pop	{r3, r4, r5, pc}

000b7894 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7894:	b510      	push	{r4, lr}
   b7896:	4b05      	ldr	r3, [pc, #20]	; (b78ac <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7898:	6003      	str	r3, [r0, #0]
   b789a:	4604      	mov	r4, r0
    stop();
   b789c:	f7ff ffe2 	bl	b7864 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b78a0:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b78a4:	f7fd f96a 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
}
   b78a8:	4620      	mov	r0, r4
   b78aa:	bd10      	pop	{r4, pc}
   b78ac:	000bf05c 	.word	0x000bf05c

000b78b0 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b78b0:	b510      	push	{r4, lr}
   b78b2:	4604      	mov	r4, r0
}
   b78b4:	f7ff ffee 	bl	b7894 <_ZN19BackgroundPublishRKD1Ev>
   b78b8:	4620      	mov	r0, r4
   b78ba:	f240 4164 	movw	r1, #1124	; 0x464
   b78be:	f7fd f904 	bl	b4aca <_ZdlPvj>
   b78c2:	4620      	mov	r0, r4
   b78c4:	bd10      	pop	{r4, pc}

000b78c6 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b78c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b78c8:	4604      	mov	r4, r0
   b78ca:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b78cc:	f100 060d 	add.w	r6, r0, #13
   b78d0:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b78d4:	7b23      	ldrb	r3, [r4, #12]
   b78d6:	b91b      	cbnz	r3, b78e0 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b78d8:	2001      	movs	r0, #1
   b78da:	f003 f84f 	bl	ba97c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b78de:	e7f9      	b.n	b78d4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b78e0:	7b23      	ldrb	r3, [r4, #12]
   b78e2:	2b02      	cmp	r3, #2
   b78e4:	d064      	beq.n	b79b0 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b78e6:	68a0      	ldr	r0, [r4, #8]
   b78e8:	f002 fbec 	bl	ba0c4 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b78ec:	68a0      	ldr	r0, [r4, #8]
   b78ee:	f002 fbf1 	bl	ba0d4 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b78f2:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b78f6:	f88d 3000 	strb.w	r3, [sp]
   b78fa:	463a      	mov	r2, r7
   b78fc:	233c      	movs	r3, #60	; 0x3c
   b78fe:	4631      	mov	r1, r6
   b7900:	a806      	add	r0, sp, #24
   b7902:	f003 fbdf 	bl	bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b7906:	9d06      	ldr	r5, [sp, #24]
   b7908:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b790a:	b933      	cbnz	r3, b791a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b790c:	7b23      	ldrb	r3, [r4, #12]
   b790e:	2b02      	cmp	r3, #2
   b7910:	d003      	beq.n	b791a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b7912:	2001      	movs	r0, #1
   b7914:	f003 f832 	bl	ba97c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b7918:	e7f5      	b.n	b7906 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b791a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b791e:	b31b      	cbz	r3, b7968 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b7920:	2000      	movs	r0, #0
   b7922:	f002 fe89 	bl	ba638 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7926:	b120      	cbz	r0, b7932 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b7928:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b792a:	b913      	cbnz	r3, b7932 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b792c:	f002 fede 	bl	ba6ec <spark_process>
    }
   b7930:	e7fa      	b.n	b7928 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7932:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7934:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b7938:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b793a:	1e59      	subs	r1, r3, #1
   b793c:	424b      	negs	r3, r1
   b793e:	414b      	adcs	r3, r1
   b7940:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7944:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7948:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b794c:	b90b      	cbnz	r3, b7952 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b794e:	f006 f90d 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7952:	ab05      	add	r3, sp, #20
   b7954:	9300      	str	r3, [sp, #0]
   b7956:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b795a:	ab04      	add	r3, sp, #16
   b795c:	aa03      	add	r2, sp, #12
   b795e:	f10d 010b 	add.w	r1, sp, #11
   b7962:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7966:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7968:	68a0      	ldr	r0, [r4, #8]
   b796a:	f002 fbab 	bl	ba0c4 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b796e:	7b23      	ldrb	r3, [r4, #12]
   b7970:	2b02      	cmp	r3, #2
   b7972:	d017      	beq.n	b79a4 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7974:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7978:	2500      	movs	r5, #0
   b797a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b797e:	b143      	cbz	r3, b7992 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7980:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7984:	2203      	movs	r2, #3
   b7986:	4608      	mov	r0, r1
   b7988:	4798      	blx	r3
	    _M_manager = nullptr;
   b798a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b798e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7992:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7994:	68a0      	ldr	r0, [r4, #8]
   b7996:	7323      	strb	r3, [r4, #12]
   b7998:	f002 fb9c 	bl	ba0d4 <os_mutex_unlock>
   b799c:	a807      	add	r0, sp, #28
   b799e:	f7fd fa1b 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79a2:	e797      	b.n	b78d4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b79a4:	68a0      	ldr	r0, [r4, #8]
   b79a6:	f002 fb95 	bl	ba0d4 <os_mutex_unlock>
   b79aa:	a807      	add	r0, sp, #28
   b79ac:	f7fd fa14 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b79b0:	b009      	add	sp, #36	; 0x24
   b79b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79b4 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b79b4:	6800      	ldr	r0, [r0, #0]
   b79b6:	f7ff bf86 	b.w	b78c6 <_ZN19BackgroundPublishRK8thread_fEv>

000b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b79ba:	b513      	push	{r0, r1, r4, lr}
   b79bc:	460b      	mov	r3, r1
   b79be:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b79c0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b79c4:	466c      	mov	r4, sp
   b79c6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b79ca:	e893 0003 	ldmia.w	r3, {r0, r1}
   b79ce:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b79d2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b79d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b79da:	b002      	add	sp, #8
   b79dc:	bd10      	pop	{r4, pc}
	...

000b79e0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b79e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b79e4:	4606      	mov	r6, r0
   b79e6:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b79e8:	2014      	movs	r0, #20
   b79ea:	4926      	ldr	r1, [pc, #152]	; (b7a84 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b79ec:	4617      	mov	r7, r2
   b79ee:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b79f0:	f006 f8b2 	bl	bdb58 <_ZnwjRKSt9nothrow_t>
   b79f4:	4604      	mov	r4, r0
   b79f6:	b130      	cbz	r0, b7a06 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b79f8:	2000      	movs	r0, #0
            exited(false) {
   b79fa:	e9c4 0000 	strd	r0, r0, [r4]
   b79fe:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b7a02:	7420      	strb	r0, [r4, #16]
   b7a04:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7a06:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b7a08:	2c00      	cmp	r4, #0
   b7a0a:	d031      	beq.n	b7a70 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7a0c:	491d      	ldr	r1, [pc, #116]	; (b7a84 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b7a0e:	2010      	movs	r0, #16
   b7a10:	f006 f8a2 	bl	bdb58 <_ZnwjRKSt9nothrow_t>
   b7a14:	4605      	mov	r5, r0
   b7a16:	b168      	cbz	r0, b7a34 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b7a18:	2300      	movs	r3, #0
   b7a1a:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7a1c:	4601      	mov	r1, r0
   b7a1e:	4638      	mov	r0, r7
   b7a20:	f7ff ffcb 	bl	b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a24:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a26:	68aa      	ldr	r2, [r5, #8]
   b7a28:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a2a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a2c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a2e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a30:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a32:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7a34:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7a36:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7a38:	b137      	cbz	r7, b7a48 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b7a3a:	4638      	mov	r0, r7
   b7a3c:	f7fd f89e 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7a40:	2110      	movs	r1, #16
   b7a42:	4638      	mov	r0, r7
   b7a44:	f7fd f841 	bl	b4aca <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7a48:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b7a4a:	6803      	ldr	r3, [r0, #0]
   b7a4c:	b183      	cbz	r3, b7a70 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b7a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7a50:	464a      	mov	r2, r9
   b7a52:	e9cd 0300 	strd	r0, r3, [sp]
   b7a56:	4641      	mov	r1, r8
   b7a58:	4b0b      	ldr	r3, [pc, #44]	; (b7a88 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b7a5a:	3004      	adds	r0, #4
   b7a5c:	f002 fb0a 	bl	ba074 <os_thread_create>
   b7a60:	b930      	cbnz	r0, b7a70 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7a62:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7a64:	7c1b      	ldrb	r3, [r3, #16]
   b7a66:	b94b      	cbnz	r3, b7a7c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7a68:	2001      	movs	r0, #1
   b7a6a:	f002 fb7b 	bl	ba164 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b7a6e:	e7f8      	b.n	b7a62 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7a70:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7a72:	2300      	movs	r3, #0
   b7a74:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7a76:	b108      	cbz	r0, b7a7c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7a78:	f7ff fea8 	bl	b77cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7a7c:	4630      	mov	r0, r6
   b7a7e:	b003      	add	sp, #12
   b7a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7a84:	000bf87c 	.word	0x000bf87c
   b7a88:	000b7789 	.word	0x000b7789

000b7a8c <_ZN19BackgroundPublishRK5startEv>:
{
   b7a8c:	b530      	push	{r4, r5, lr}
    if(!thread)
   b7a8e:	6843      	ldr	r3, [r0, #4]
{
   b7a90:	b087      	sub	sp, #28
   b7a92:	4604      	mov	r4, r0
    if(!thread)
   b7a94:	b9c3      	cbnz	r3, b7ac8 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7a96:	3008      	adds	r0, #8
   b7a98:	f002 fb0c 	bl	ba0b4 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7a9c:	4b0b      	ldr	r3, [pc, #44]	; (b7acc <_ZN19BackgroundPublishRK5startEv+0x40>)
   b7a9e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7aa0:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7aa2:	4b0b      	ldr	r3, [pc, #44]	; (b7ad0 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7aa4:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7aa6:	9304      	str	r3, [sp, #16]
   b7aa8:	f7fd f80b 	bl	b4ac2 <_Znwj>
   b7aac:	4605      	mov	r5, r0
   b7aae:	b138      	cbz	r0, b7ac0 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7ab0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7ab4:	9300      	str	r3, [sp, #0]
   b7ab6:	4907      	ldr	r1, [pc, #28]	; (b7ad4 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7ab8:	2302      	movs	r3, #2
   b7aba:	aa02      	add	r2, sp, #8
   b7abc:	f7ff ff90 	bl	b79e0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b7ac0:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b7ac2:	a802      	add	r0, sp, #8
   b7ac4:	f7fd f85a 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
}
   b7ac8:	b007      	add	sp, #28
   b7aca:	bd30      	pop	{r4, r5, pc}
   b7acc:	000b79b5 	.word	0x000b79b5
   b7ad0:	000b77b9 	.word	0x000b77b9
   b7ad4:	000bf040 	.word	0x000bf040

000b7ad8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7adc:	4604      	mov	r4, r0
   b7ade:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7ae0:	6880      	ldr	r0, [r0, #8]
   b7ae2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7ae4:	4698      	mov	r8, r3
   b7ae6:	460d      	mov	r5, r1
   b7ae8:	4616      	mov	r6, r2
   b7aea:	f002 faeb 	bl	ba0c4 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7aee:	6863      	ldr	r3, [r4, #4]
   b7af0:	b11b      	cbz	r3, b7afa <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7af2:	7b23      	ldrb	r3, [r4, #12]
   b7af4:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7af8:	b133      	cbz	r3, b7b08 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7afa:	68a0      	ldr	r0, [r4, #8]
   b7afc:	f002 faea 	bl	ba0d4 <os_mutex_unlock>
    {
        return false;
   b7b00:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7b02:	b005      	add	sp, #20
   b7b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7b08:	68a0      	ldr	r0, [r4, #8]
   b7b0a:	f002 fae3 	bl	ba0d4 <os_mutex_unlock>
    if(!name)
   b7b0e:	2d00      	cmp	r5, #0
   b7b10:	d03d      	beq.n	b7b8e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7b12:	2240      	movs	r2, #64	; 0x40
   b7b14:	4629      	mov	r1, r5
   b7b16:	f104 000d 	add.w	r0, r4, #13
   b7b1a:	f006 fa36 	bl	bdf8a <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7b1e:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7b22:	b38e      	cbz	r6, b7b88 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7b24:	f240 4201 	movw	r2, #1025	; 0x401
   b7b28:	4631      	mov	r1, r6
   b7b2a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7b2e:	f006 fa2c 	bl	bdf8a <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7b32:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7b36:	2300      	movs	r3, #0
   b7b38:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7b3a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7b3c:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7b40:	b13b      	cbz	r3, b7b52 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7b42:	2202      	movs	r2, #2
   b7b44:	4639      	mov	r1, r7
   b7b46:	4668      	mov	r0, sp
   b7b48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7b4a:	68fb      	ldr	r3, [r7, #12]
   b7b4c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7b4e:	68bb      	ldr	r3, [r7, #8]
   b7b50:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7b52:	4629      	mov	r1, r5
   b7b54:	4668      	mov	r0, sp
   b7b56:	f7ff ff30 	bl	b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7b5a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7b5c:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7b60:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7b64:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7b66:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7b68:	4668      	mov	r0, sp
   b7b6a:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b7b6e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7b72:	9203      	str	r2, [sp, #12]
   b7b74:	f7fd f802 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7b7a:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7b7e:	2001      	movs	r0, #1
    event_flags = flags;
   b7b80:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7b84:	7320      	strb	r0, [r4, #12]
    return true;
   b7b86:	e7bc      	b.n	b7b02 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7b88:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7b8c:	e7d3      	b.n	b7b36 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b7b8e:	4628      	mov	r0, r5
   b7b90:	e7b7      	b.n	b7b02 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b7b94 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b7b94:	b510      	push	{r4, lr}
   b7b96:	4b05      	ldr	r3, [pc, #20]	; (b7bac <_ZN10JsonBufferD1Ev+0x18>)
   b7b98:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7b9a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7b9c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7b9e:	b91b      	cbnz	r3, b7ba8 <_ZN10JsonBufferD1Ev+0x14>
   b7ba0:	6840      	ldr	r0, [r0, #4]
   b7ba2:	b108      	cbz	r0, b7ba8 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7ba4:	f002 fe72 	bl	ba88c <free>
	}
}
   b7ba8:	4620      	mov	r0, r4
   b7baa:	bd10      	pop	{r4, pc}
   b7bac:	000bf06c 	.word	0x000bf06c

000b7bb0 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7bb0:	b510      	push	{r4, lr}
   b7bb2:	4604      	mov	r4, r0
}
   b7bb4:	f7ff ffee 	bl	b7b94 <_ZN10JsonBufferD1Ev>
   b7bb8:	4620      	mov	r0, r4
   b7bba:	2114      	movs	r1, #20
   b7bbc:	f7fc ff85 	bl	b4aca <_ZdlPvj>
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	bd10      	pop	{r4, pc}

000b7bc4 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   b7bc4:	b510      	push	{r4, lr}
   b7bc6:	4b07      	ldr	r3, [pc, #28]	; (b7be4 <_ZN10JsonParserD1Ev+0x20>)
   b7bc8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7bca:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7bcc:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7bce:	b91b      	cbnz	r3, b7bd8 <_ZN10JsonParserD1Ev+0x14>
   b7bd0:	6940      	ldr	r0, [r0, #20]
   b7bd2:	b108      	cbz	r0, b7bd8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7bd4:	f002 fe5a 	bl	ba88c <free>
JsonParser::~JsonParser() {
   b7bd8:	4620      	mov	r0, r4
   b7bda:	f7ff ffdb 	bl	b7b94 <_ZN10JsonBufferD1Ev>
	}
}
   b7bde:	4620      	mov	r0, r4
   b7be0:	bd10      	pop	{r4, pc}
   b7be2:	bf00      	nop
   b7be4:	000bf07c 	.word	0x000bf07c

000b7be8 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7be8:	b510      	push	{r4, lr}
   b7bea:	4604      	mov	r4, r0
}
   b7bec:	f7ff ffea 	bl	b7bc4 <_ZN10JsonParserD1Ev>
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	212c      	movs	r1, #44	; 0x2c
   b7bf4:	f7fc ff69 	bl	b4aca <_ZdlPvj>
   b7bf8:	4620      	mov	r0, r4
   b7bfa:	bd10      	pop	{r4, pc}

000b7bfc <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7bfc:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7bfe:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7c00:	4604      	mov	r4, r0
   b7c02:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7c04:	b10b      	cbz	r3, b7c0a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7c06:	2000      	movs	r0, #0
}
   b7c08:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7c0a:	6840      	ldr	r0, [r0, #4]
   b7c0c:	b138      	cbz	r0, b7c1e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7c0e:	f002 fe45 	bl	ba89c <realloc>
		if (newBuffer) {
   b7c12:	2800      	cmp	r0, #0
   b7c14:	d0f7      	beq.n	b7c06 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7c16:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7c1a:	2001      	movs	r0, #1
   b7c1c:	e7f4      	b.n	b7c08 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7c1e:	4608      	mov	r0, r1
   b7c20:	f002 fe2c 	bl	ba87c <malloc>
   b7c24:	e7f5      	b.n	b7c12 <_ZN10JsonBuffer8allocateEj+0x16>

000b7c26 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c26:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c28:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c2a:	460e      	mov	r6, r1
   b7c2c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c2e:	18d1      	adds	r1, r2, r3
   b7c30:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c32:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c34:	b172      	cbz	r2, b7c54 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7c36:	6882      	ldr	r2, [r0, #8]
   b7c38:	428a      	cmp	r2, r1
   b7c3a:	d30b      	bcc.n	b7c54 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7c3c:	6860      	ldr	r0, [r4, #4]
   b7c3e:	68e3      	ldr	r3, [r4, #12]
   b7c40:	462a      	mov	r2, r5
   b7c42:	4631      	mov	r1, r6
   b7c44:	4418      	add	r0, r3
   b7c46:	f006 f8f1 	bl	bde2c <memcpy>
	offset += dataLen;
   b7c4a:	68e2      	ldr	r2, [r4, #12]
   b7c4c:	442a      	add	r2, r5
   b7c4e:	60e2      	str	r2, [r4, #12]
	return true;
   b7c50:	2001      	movs	r0, #1
}
   b7c52:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7c54:	4620      	mov	r0, r4
   b7c56:	f7ff ffd1 	bl	b7bfc <_ZN10JsonBuffer8allocateEj>
   b7c5a:	2800      	cmp	r0, #0
   b7c5c:	d1ee      	bne.n	b7c3c <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7c5e:	e7f8      	b.n	b7c52 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7c60 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7c60:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7c62:	2100      	movs	r1, #0
   b7c64:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7c66:	b123      	cbz	r3, b7c72 <_ZN10JsonBuffer5clearEv+0x12>
   b7c68:	6882      	ldr	r2, [r0, #8]
   b7c6a:	b112      	cbz	r2, b7c72 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7c6c:	4618      	mov	r0, r3
   b7c6e:	f006 b905 	b.w	bde7c <memset>
}
   b7c72:	4770      	bx	lr

000b7c74 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7c74:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7c76:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7c7a:	2200      	movs	r2, #0
   b7c7c:	60c2      	str	r2, [r0, #12]
   b7c7e:	2201      	movs	r2, #1
   b7c80:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7c82:	6143      	str	r3, [r0, #20]
   b7c84:	4a02      	ldr	r2, [pc, #8]	; (b7c90 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7c86:	9b02      	ldr	r3, [sp, #8]
   b7c88:	6002      	str	r2, [r0, #0]
   b7c8a:	61c3      	str	r3, [r0, #28]
}
   b7c8c:	bd10      	pop	{r4, pc}
   b7c8e:	bf00      	nop
   b7c90:	000bf07c 	.word	0x000bf07c

000b7c94 <_ZNK10JsonParser14getOuterObjectEv>:
	return 0;
}


const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b7c94:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7c98:	4298      	cmp	r0, r3
   b7c9a:	d204      	bcs.n	b7ca6 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b7c9c:	7803      	ldrb	r3, [r0, #0]
		return &tokens[0];
	}
	else {
		return 0;
   b7c9e:	2b01      	cmp	r3, #1
   b7ca0:	bf18      	it	ne
   b7ca2:	2000      	movne	r0, #0
   b7ca4:	4770      	bx	lr
   b7ca6:	2000      	movs	r0, #0
	}
}
   b7ca8:	4770      	bx	lr

000b7caa <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7caa:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7cac:	6813      	ldr	r3, [r2, #0]
   b7cae:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7cb0:	6813      	ldr	r3, [r2, #0]
   b7cb2:	f103 0410 	add.w	r4, r3, #16
   b7cb6:	6014      	str	r4, [r2, #0]
   b7cb8:	6986      	ldr	r6, [r0, #24]
   b7cba:	42b4      	cmp	r4, r6
   b7cbc:	d20a      	bcs.n	b7cd4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7cbe:	699b      	ldr	r3, [r3, #24]
   b7cc0:	688c      	ldr	r4, [r1, #8]
   b7cc2:	42a3      	cmp	r3, r4
   b7cc4:	da01      	bge.n	b7cca <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7cc6:	42ab      	cmp	r3, r5
   b7cc8:	ddf2      	ble.n	b7cb0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   b7cca:	42a3      	cmp	r3, r4
   b7ccc:	bfcc      	ite	gt
   b7cce:	2000      	movgt	r0, #0
   b7cd0:	2001      	movle	r0, #1
   b7cd2:	e000      	b.n	b7cd6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		// No object after index
		return false;
   b7cd4:	2000      	movs	r0, #0
	}
	return true;
}
   b7cd6:	bd70      	pop	{r4, r5, r6, pc}

000b7cd8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7cda:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7cde:	4604      	mov	r4, r0
   b7ce0:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7ce2:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7ce4:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7ce6:	9801      	ldr	r0, [sp, #4]
   b7ce8:	69a3      	ldr	r3, [r4, #24]
   b7cea:	4283      	cmp	r3, r0
   b7cec:	d90b      	bls.n	b7d06 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b7cee:	6882      	ldr	r2, [r0, #8]
   b7cf0:	688b      	ldr	r3, [r1, #8]
   b7cf2:	429a      	cmp	r2, r3
   b7cf4:	da07      	bge.n	b7d06 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b7cf6:	42b5      	cmp	r5, r6
   b7cf8:	d006      	beq.n	b7d08 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b7cfa:	aa01      	add	r2, sp, #4
   b7cfc:	4620      	mov	r0, r4
		index++;
   b7cfe:	3501      	adds	r5, #1
		skipObject(container, token);
   b7d00:	f7ff ffd3 	bl	b7caa <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7d04:	e7ef      	b.n	b7ce6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b7d06:	2000      	movs	r0, #0
}
   b7d08:	b002      	add	sp, #8
   b7d0a:	bd70      	pop	{r4, r5, r6, pc}

000b7d0c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7d10:	9d08      	ldr	r5, [sp, #32]
   b7d12:	4698      	mov	r8, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d14:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7d18:	4604      	mov	r4, r0
   b7d1a:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d1c:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7d1e:	2600      	movs	r6, #0

	while(token < tokensEnd && token->end < container->end) {
   b7d20:	9801      	ldr	r0, [sp, #4]
   b7d22:	69a3      	ldr	r3, [r4, #24]
   b7d24:	4283      	cmp	r3, r0
   b7d26:	d91a      	bls.n	b7d5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7d28:	6882      	ldr	r2, [r0, #8]
   b7d2a:	688b      	ldr	r3, [r1, #8]
   b7d2c:	429a      	cmp	r2, r3
   b7d2e:	da16      	bge.n	b7d5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7d30:	42ae      	cmp	r6, r5
   b7d32:	d10b      	bne.n	b7d4c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7d34:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7d36:	aa01      	add	r2, sp, #4
   b7d38:	4620      	mov	r0, r4
   b7d3a:	f7ff ffb6 	bl	b7caa <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7d3e:	b128      	cbz	r0, b7d4c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7d40:	9b01      	ldr	r3, [sp, #4]
   b7d42:	f8c8 3000 	str.w	r3, [r8]
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
}
   b7d46:	b002      	add	sp, #8
   b7d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7d4c:	aa01      	add	r2, sp, #4
   b7d4e:	4620      	mov	r0, r4
   b7d50:	f7ff ffab 	bl	b7caa <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7d54:	4620      	mov	r0, r4
		index++;
   b7d56:	3601      	adds	r6, #1
		skipObject(container, token);
   b7d58:	f7ff ffa7 	bl	b7caa <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7d5c:	e7e0      	b.n	b7d20 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7d5e:	2000      	movs	r0, #0
   b7d60:	e7f1      	b.n	b7d46 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7d62 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7d62:	b510      	push	{r4, lr}
   b7d64:	4604      	mov	r4, r0
	if (str) {
   b7d66:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7d68:	460b      	mov	r3, r1
	if (str) {
   b7d6a:	b128      	cbz	r0, b7d78 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7d6c:	f005 f8f1 	bl	bcf52 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7d70:	68e3      	ldr	r3, [r4, #12]
   b7d72:	3301      	adds	r3, #1
   b7d74:	60e3      	str	r3, [r4, #12]
	}
}
   b7d76:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7d78:	6860      	ldr	r0, [r4, #4]
   b7d7a:	2800      	cmp	r0, #0
   b7d7c:	d0f8      	beq.n	b7d70 <_ZN16JsonParserString6appendEc+0xe>
   b7d7e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7d82:	3a01      	subs	r2, #1
   b7d84:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7d86:	bf88      	it	hi
   b7d88:	5443      	strbhi	r3, [r0, r1]
   b7d8a:	e7f1      	b.n	b7d70 <_ZN16JsonParserString6appendEc+0xe>

000b7d8c <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7d8c:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7d8e:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7d92:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7d94:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7d96:	d804      	bhi.n	b7da2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7d98:	b003      	add	sp, #12
   b7d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7d9e:	f7ff bfe0 	b.w	b7d62 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7da2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7daa:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7dae:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7db2:	d207      	bcs.n	b7dc4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7db4:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7db8:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7dba:	f7ff ffd2 	bl	b7d62 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7dbe:	9801      	ldr	r0, [sp, #4]
   b7dc0:	4621      	mov	r1, r4
   b7dc2:	e7e9      	b.n	b7d98 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7dc4:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7dc6:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7dca:	9001      	str	r0, [sp, #4]
   b7dcc:	f7ff ffc9 	bl	b7d62 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b7dd0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7dd4:	9801      	ldr	r0, [sp, #4]
   b7dd6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7dda:	e7ee      	b.n	b7dba <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b7ddc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7de0:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7de2:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7de4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7eb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7de8:	4680      	mov	r8, r0
   b7dea:	460f      	mov	r7, r1
   b7dec:	4615      	mov	r5, r2
			escape = false;
   b7dee:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7df0:	68b8      	ldr	r0, [r7, #8]
   b7df2:	42b0      	cmp	r0, r6
   b7df4:	dd5a      	ble.n	b7eac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7df6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7dfa:	5d99      	ldrb	r1, [r3, r6]
   b7dfc:	199a      	adds	r2, r3, r6
		if (escape) {
   b7dfe:	2c00      	cmp	r4, #0
   b7e00:	d04b      	beq.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7e02:	2975      	cmp	r1, #117	; 0x75
   b7e04:	d805      	bhi.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7e06:	296d      	cmp	r1, #109	; 0x6d
   b7e08:	d807      	bhi.n	b7e1a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7e0a:	2962      	cmp	r1, #98	; 0x62
   b7e0c:	d01e      	beq.n	b7e4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7e0e:	2966      	cmp	r1, #102	; 0x66
   b7e10:	d01e      	beq.n	b7e50 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7e12:	4628      	mov	r0, r5
   b7e14:	f7ff ffa5 	bl	b7d62 <_ZN16JsonParserString6appendEc>
				break;
   b7e18:	e03d      	b.n	b7e96 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7e1a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7e1e:	2c07      	cmp	r4, #7
   b7e20:	d8f7      	bhi.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7e22:	f20f 0c08 	addw	ip, pc, #8
   b7e26:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7e2a:	bf00      	nop
   b7e2c:	000b7e55 	.word	0x000b7e55
   b7e30:	000b7e13 	.word	0x000b7e13
   b7e34:	000b7e13 	.word	0x000b7e13
   b7e38:	000b7e13 	.word	0x000b7e13
   b7e3c:	000b7e59 	.word	0x000b7e59
   b7e40:	000b7e13 	.word	0x000b7e13
   b7e44:	000b7e5d 	.word	0x000b7e5d
   b7e48:	000b7e61 	.word	0x000b7e61
				str.append('\b');
   b7e4c:	2108      	movs	r1, #8
   b7e4e:	e7e0      	b.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7e50:	210c      	movs	r1, #12
   b7e52:	e7de      	b.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b7e54:	210a      	movs	r1, #10
   b7e56:	e7dc      	b.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7e58:	210d      	movs	r1, #13
   b7e5a:	e7da      	b.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7e5c:	2109      	movs	r1, #9
   b7e5e:	e7d8      	b.n	b7e12 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7e60:	1d31      	adds	r1, r6, #4
   b7e62:	4288      	cmp	r0, r1
   b7e64:	dd17      	ble.n	b7e96 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7e66:	a902      	add	r1, sp, #8
   b7e68:	3304      	adds	r3, #4
   b7e6a:	4433      	add	r3, r6
   b7e6c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7e6e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b7e72:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7e76:	429a      	cmp	r2, r3
   b7e78:	d1f9      	bne.n	b7e6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7e7a:	aa01      	add	r2, sp, #4
   b7e7c:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7e7e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7e82:	f002 fd1b 	bl	ba8bc <sscanf>
   b7e86:	2801      	cmp	r0, #1
   b7e88:	d105      	bne.n	b7e96 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7e8a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7e8e:	4629      	mov	r1, r5
   b7e90:	f7ff ff7c 	bl	b7d8c <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7e94:	3605      	adds	r6, #5
			escape = false;
   b7e96:	2400      	movs	r4, #0
   b7e98:	e004      	b.n	b7ea4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7e9a:	295c      	cmp	r1, #92	; 0x5c
   b7e9c:	d004      	beq.n	b7ea8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b7e9e:	4628      	mov	r0, r5
   b7ea0:	f7ff ff5f 	bl	b7d62 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7ea4:	3601      	adds	r6, #1
   b7ea6:	e7a3      	b.n	b7df0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7ea8:	2401      	movs	r4, #1
   b7eaa:	e7fb      	b.n	b7ea4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b7eac:	2001      	movs	r0, #1
   b7eae:	b004      	add	sp, #16
   b7eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7eb4:	000bf691 	.word	0x000bf691

000b7eb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7eba:	460c      	mov	r4, r1
   b7ebc:	4606      	mov	r6, r0
	result = "";
   b7ebe:	490c      	ldr	r1, [pc, #48]	; (b7ef0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b7ec0:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7ec2:	4615      	mov	r5, r2
	result = "";
   b7ec4:	f005 f806 	bl	bced4 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7ec8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b7ecc:	1ac9      	subs	r1, r1, r3
   b7ece:	3101      	adds	r1, #1
   b7ed0:	4628      	mov	r0, r5
   b7ed2:	f004 ff73 	bl	bcdbc <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7ed6:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7ed8:	466a      	mov	r2, sp
   b7eda:	4621      	mov	r1, r4
   b7edc:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7ede:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b7ee2:	9500      	str	r5, [sp, #0]
   b7ee4:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7ee6:	f7ff ff79 	bl	b7ddc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b7eea:	b004      	add	sp, #16
   b7eec:	bd70      	pop	{r4, r5, r6, pc}
   b7eee:	bf00      	nop
   b7ef0:	000bf6ed 	.word	0x000bf6ed

000b7ef4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ef8:	b089      	sub	sp, #36	; 0x24
   b7efa:	4605      	mov	r5, r0
   b7efc:	4688      	mov	r8, r1
	String keyName;
   b7efe:	a804      	add	r0, sp, #16
   b7f00:	4912      	ldr	r1, [pc, #72]	; (b7f4c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7f02:	4616      	mov	r6, r2
   b7f04:	4699      	mov	r9, r3
	String keyName;
   b7f06:	f004 ff86 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7f0a:	2700      	movs	r7, #0
   b7f0c:	9700      	str	r7, [sp, #0]
   b7f0e:	464b      	mov	r3, r9
   b7f10:	aa03      	add	r2, sp, #12
   b7f12:	4641      	mov	r1, r8
   b7f14:	4628      	mov	r0, r5
   b7f16:	f7ff fef9 	bl	b7d0c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7f1a:	4604      	mov	r4, r0
   b7f1c:	b170      	cbz	r0, b7f3c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7f1e:	9903      	ldr	r1, [sp, #12]
   b7f20:	aa04      	add	r2, sp, #16
   b7f22:	4628      	mov	r0, r5
   b7f24:	f7ff ffc8 	bl	b7eb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7f28:	4604      	mov	r4, r0
   b7f2a:	b908      	cbnz	r0, b7f30 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7f2c:	3701      	adds	r7, #1
   b7f2e:	e7ed      	b.n	b7f0c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b7f30:	4631      	mov	r1, r6
   b7f32:	a804      	add	r0, sp, #16
   b7f34:	f005 f83b 	bl	bcfae <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7f38:	2800      	cmp	r0, #0
   b7f3a:	d0f7      	beq.n	b7f2c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7f3c:	a804      	add	r0, sp, #16
   b7f3e:	f004 ff1f 	bl	bcd80 <_ZN6StringD1Ev>
}
   b7f42:	4620      	mov	r0, r4
   b7f44:	b009      	add	sp, #36	; 0x24
   b7f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7f4a:	bf00      	nop
   b7f4c:	000bf6ed 	.word	0x000bf6ed

000b7f50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b7f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b7f54:	6844      	ldr	r4, [r0, #4]
   b7f56:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b7f5a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7f5e:	f8d0 e000 	ldr.w	lr, [r0]
   b7f62:	4596      	cmp	lr, r2
   b7f64:	f080 81b9 	bcs.w	b82da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b7f68:	f811 800e 	ldrb.w	r8, [r1, lr]
   b7f6c:	f1b8 0f00 	cmp.w	r8, #0
   b7f70:	f000 81b3 	beq.w	b82da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b7f74:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b7f78:	f000 8098 	beq.w	b80ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b7f7c:	d833      	bhi.n	b7fe6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b7f7e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b7f82:	f000 80a6 	beq.w	b80d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b7f86:	d810      	bhi.n	b7faa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b7f88:	f1a8 0809 	sub.w	r8, r8, #9
   b7f8c:	fa5f f888 	uxtb.w	r8, r8
   b7f90:	f1b8 0f17 	cmp.w	r8, #23
   b7f94:	d80d      	bhi.n	b7fb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b7f96:	4d9f      	ldr	r5, [pc, #636]	; (b8214 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b7f98:	fa0c f808 	lsl.w	r8, ip, r8
   b7f9c:	ea18 0f05 	tst.w	r8, r5
   b7fa0:	d007      	beq.n	b7fb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7fa2:	6805      	ldr	r5, [r0, #0]
   b7fa4:	3501      	adds	r5, #1
   b7fa6:	6005      	str	r5, [r0, #0]
   b7fa8:	e7d9      	b.n	b7f5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b7faa:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b7fae:	f000 8133 	beq.w	b8218 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7fb2:	f8d0 8000 	ldr.w	r8, [r0]
   b7fb6:	4542      	cmp	r2, r8
   b7fb8:	d90e      	bls.n	b7fd8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7fba:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7fbe:	b15d      	cbz	r5, b7fd8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7fc0:	2d3a      	cmp	r5, #58	; 0x3a
   b7fc2:	f200 8169 	bhi.w	b8298 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7fc6:	2d1f      	cmp	r5, #31
   b7fc8:	f200 8151 	bhi.w	b826e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b7fcc:	2d0a      	cmp	r5, #10
   b7fce:	f200 8160 	bhi.w	b8292 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b7fd2:	2d08      	cmp	r5, #8
   b7fd4:	f240 8156 	bls.w	b8284 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7fd8:	2b00      	cmp	r3, #0
   b7fda:	f040 8162 	bne.w	b82a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b7fde:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b7fe2:	6005      	str	r5, [r0, #0]
   b7fe4:	e0a5      	b.n	b8132 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7fe6:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7fea:	d037      	beq.n	b805c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7fec:	d82e      	bhi.n	b804c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b7fee:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b7ff2:	d033      	beq.n	b805c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7ff4:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7ff8:	d1db      	bne.n	b7fb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b7ffa:	2b00      	cmp	r3, #0
   b7ffc:	d0d1      	beq.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b7ffe:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8002:	6845      	ldr	r5, [r0, #4]
   b8004:	3d01      	subs	r5, #1
   b8006:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b800a:	2d00      	cmp	r5, #0
   b800c:	db55      	blt.n	b80ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b800e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8012:	3701      	adds	r7, #1
   b8014:	d04d      	beq.n	b80b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b8016:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b801a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b801e:	d148      	bne.n	b80b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8020:	f898 b000 	ldrb.w	fp, [r8]
   b8024:	45cb      	cmp	fp, r9
   b8026:	d14b      	bne.n	b80c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b8028:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b802c:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8030:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8034:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8038:	f8de 7004 	ldr.w	r7, [lr, #4]
   b803c:	3701      	adds	r7, #1
   b803e:	d042      	beq.n	b80c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b8040:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8044:	3701      	adds	r7, #1
   b8046:	d13e      	bne.n	b80c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b8048:	6085      	str	r5, [r0, #8]
				break;
   b804a:	e7aa      	b.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b804c:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8050:	d1af      	bne.n	b7fb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8052:	2b00      	cmp	r3, #0
   b8054:	d0a5      	beq.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8056:	f04f 0901 	mov.w	r9, #1
   b805a:	e7d2      	b.n	b8002 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b805c:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b805e:	2b00      	cmp	r3, #0
   b8060:	d09f      	beq.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8062:	6845      	ldr	r5, [r0, #4]
   b8064:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8066:	42af      	cmp	r7, r5
   b8068:	d94a      	bls.n	b8100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b806a:	f105 0e01 	add.w	lr, r5, #1
   b806e:	f8c0 e004 	str.w	lr, [r0, #4]
   b8072:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b8076:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b807a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b807e:	2500      	movs	r5, #0
   b8080:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8084:	6885      	ldr	r5, [r0, #8]
   b8086:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8088:	bf1f      	itttt	ne
   b808a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b808e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8092:	3501      	addne	r5, #1
   b8094:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8098:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b809c:	bf0c      	ite	eq
   b809e:	2501      	moveq	r5, #1
   b80a0:	2502      	movne	r5, #2
   b80a2:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b80a6:	6805      	ldr	r5, [r0, #0]
   b80a8:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b80ac:	6845      	ldr	r5, [r0, #4]
   b80ae:	3d01      	subs	r5, #1
   b80b0:	e7ca      	b.n	b8048 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b80b2:	3d01      	subs	r5, #1
   b80b4:	f1a8 0810 	sub.w	r8, r8, #16
   b80b8:	e7a7      	b.n	b800a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b80ba:	3501      	adds	r5, #1
   b80bc:	f47f af71 	bne.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b80c0:	f06f 0401 	mvn.w	r4, #1
   b80c4:	e01e      	b.n	b8104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b80c6:	3d01      	subs	r5, #1
   b80c8:	1c6f      	adds	r7, r5, #1
   b80ca:	f1ae 0e10 	sub.w	lr, lr, #16
   b80ce:	d1b3      	bne.n	b8038 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b80d0:	e767      	b.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b80d2:	f10e 0901 	add.w	r9, lr, #1
   b80d6:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b80da:	f8d0 8000 	ldr.w	r8, [r0]
   b80de:	4542      	cmp	r2, r8
   b80e0:	f240 8093 	bls.w	b820a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b80e4:	f811 5008 	ldrb.w	r5, [r1, r8]
   b80e8:	2d00      	cmp	r5, #0
   b80ea:	f000 808e 	beq.w	b820a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b80ee:	2d22      	cmp	r5, #34	; 0x22
   b80f0:	d130      	bne.n	b8154 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b80f2:	b1f3      	cbz	r3, b8132 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b80f4:	6845      	ldr	r5, [r0, #4]
   b80f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b80f8:	42af      	cmp	r7, r5
   b80fa:	d806      	bhi.n	b810a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b80fc:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8100:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8104:	4620      	mov	r0, r4
   b8106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b810a:	f105 0e01 	add.w	lr, r5, #1
   b810e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8112:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8116:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b811a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b811e:	2700      	movs	r7, #0
   b8120:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b8122:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b8126:	f04f 0a03 	mov.w	sl, #3
   b812a:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b812e:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b8132:	6885      	ldr	r5, [r0, #8]
   b8134:	1c6f      	adds	r7, r5, #1
				count++;
   b8136:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b813a:	f43f af32 	beq.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b813e:	2b00      	cmp	r3, #0
   b8140:	f43f af2f 	beq.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b8144:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8148:	f8de 500c 	ldr.w	r5, [lr, #12]
   b814c:	3501      	adds	r5, #1
   b814e:	f8ce 500c 	str.w	r5, [lr, #12]
   b8152:	e726      	b.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8154:	2d5c      	cmp	r5, #92	; 0x5c
   b8156:	d111      	bne.n	b817c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8158:	f108 0501 	add.w	r5, r8, #1
   b815c:	42aa      	cmp	r2, r5
   b815e:	d90d      	bls.n	b817c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8160:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b8162:	5d4d      	ldrb	r5, [r1, r5]
   b8164:	2d75      	cmp	r5, #117	; 0x75
   b8166:	d82b      	bhi.n	b81c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8168:	2d6d      	cmp	r5, #109	; 0x6d
   b816a:	d80b      	bhi.n	b8184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b816c:	2d66      	cmp	r5, #102	; 0x66
   b816e:	d827      	bhi.n	b81c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8170:	2d5b      	cmp	r5, #91	; 0x5b
   b8172:	d81d      	bhi.n	b81b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b8174:	2d22      	cmp	r5, #34	; 0x22
   b8176:	d001      	beq.n	b817c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8178:	2d2f      	cmp	r5, #47	; 0x2f
   b817a:	d121      	bne.n	b81c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b817c:	6805      	ldr	r5, [r0, #0]
   b817e:	3501      	adds	r5, #1
   b8180:	6005      	str	r5, [r0, #0]
   b8182:	e7aa      	b.n	b80da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b8184:	3d6e      	subs	r5, #110	; 0x6e
   b8186:	2d07      	cmp	r5, #7
   b8188:	d81a      	bhi.n	b81c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b818a:	a701      	add	r7, pc, #4	; (adr r7, b8190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b818c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8190:	000b817d 	.word	0x000b817d
   b8194:	000b81c1 	.word	0x000b81c1
   b8198:	000b81c1 	.word	0x000b81c1
   b819c:	000b81c1 	.word	0x000b81c1
   b81a0:	000b817d 	.word	0x000b817d
   b81a4:	000b81c1 	.word	0x000b81c1
   b81a8:	000b817d 	.word	0x000b817d
   b81ac:	000b81c7 	.word	0x000b81c7
   b81b0:	3d5c      	subs	r5, #92	; 0x5c
   b81b2:	b2ed      	uxtb	r5, r5
   b81b4:	fa0c f505 	lsl.w	r5, ip, r5
   b81b8:	f240 4741 	movw	r7, #1089	; 0x441
   b81bc:	423d      	tst	r5, r7
   b81be:	d1dd      	bne.n	b817c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b81c0:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b81c4:	e77c      	b.n	b80c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b81c6:	f108 0502 	add.w	r5, r8, #2
   b81ca:	6005      	str	r5, [r0, #0]
   b81cc:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b81d0:	f8d0 8000 	ldr.w	r8, [r0]
   b81d4:	4542      	cmp	r2, r8
   b81d6:	d803      	bhi.n	b81e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b81d8:	6805      	ldr	r5, [r0, #0]
   b81da:	3d01      	subs	r5, #1
   b81dc:	6005      	str	r5, [r0, #0]
					break;
   b81de:	e7cd      	b.n	b817c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b81e0:	f811 5008 	ldrb.w	r5, [r1, r8]
   b81e4:	2d00      	cmp	r5, #0
   b81e6:	d0f7      	beq.n	b81d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b81e8:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b81ec:	f1bb 0f09 	cmp.w	fp, #9
   b81f0:	d904      	bls.n	b81fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b81f2:	f025 0520 	bic.w	r5, r5, #32
   b81f6:	3d41      	subs	r5, #65	; 0x41
   b81f8:	2d05      	cmp	r5, #5
   b81fa:	d8e1      	bhi.n	b81c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b81fc:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8200:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b8204:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8206:	d1e3      	bne.n	b81d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b8208:	e7e6      	b.n	b81d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b820a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b820e:	f06f 0402 	mvn.w	r4, #2
   b8212:	e777      	b.n	b8104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8214:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b8218:	2b00      	cmp	r3, #0
   b821a:	f43f aec2 	beq.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b821e:	6885      	ldr	r5, [r0, #8]
   b8220:	1c6f      	adds	r7, r5, #1
   b8222:	f43f aebe 	beq.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b8226:	012d      	lsls	r5, r5, #4
   b8228:	5d5d      	ldrb	r5, [r3, r5]
   b822a:	3d01      	subs	r5, #1
   b822c:	2d01      	cmp	r5, #1
   b822e:	f67f aeb8 	bls.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8232:	6845      	ldr	r5, [r0, #4]
   b8234:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b8238:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b823c:	f1b8 0f00 	cmp.w	r8, #0
   b8240:	f6ff aeaf 	blt.w	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b8244:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b8248:	3d01      	subs	r5, #1
   b824a:	2d01      	cmp	r5, #1
   b824c:	d80a      	bhi.n	b8264 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b824e:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b8252:	3501      	adds	r5, #1
   b8254:	d006      	beq.n	b8264 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b8256:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b825a:	3501      	adds	r5, #1
   b825c:	d102      	bne.n	b8264 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b825e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b8262:	e69e      	b.n	b7fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8264:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8268:	f1ae 0e10 	sub.w	lr, lr, #16
   b826c:	e7e6      	b.n	b823c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b826e:	f1a5 0920 	sub.w	r9, r5, #32
   b8272:	4f24      	ldr	r7, [pc, #144]	; (b8304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b8274:	fa5f f989 	uxtb.w	r9, r9
   b8278:	fa0c f909 	lsl.w	r9, ip, r9
   b827c:	ea19 0f07 	tst.w	r9, r7
   b8280:	f47f aeaa 	bne.w	b7fd8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b8284:	3d20      	subs	r5, #32
   b8286:	2d5e      	cmp	r5, #94	; 0x5e
   b8288:	d89a      	bhi.n	b81c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b828a:	f108 0501 	add.w	r5, r8, #1
   b828e:	6005      	str	r5, [r0, #0]
   b8290:	e68f      	b.n	b7fb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b8292:	2d0d      	cmp	r5, #13
   b8294:	d1f6      	bne.n	b8284 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b8296:	e69f      	b.n	b7fd8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8298:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b829c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b82a0:	e7f8      	b.n	b8294 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b82a2:	6845      	ldr	r5, [r0, #4]
   b82a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b82a6:	42af      	cmp	r7, r5
   b82a8:	f67f af28 	bls.w	b80fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b82ac:	f105 0801 	add.w	r8, r5, #1
   b82b0:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b82b4:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b82b8:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b82bc:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b82c0:	2700      	movs	r7, #0
   b82c2:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b82c4:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b82c8:	f04f 0a04 	mov.w	sl, #4
   b82cc:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b82d0:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b82d4:	6805      	ldr	r5, [r0, #0]
   b82d6:	3d01      	subs	r5, #1
   b82d8:	e683      	b.n	b7fe2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b82da:	2b00      	cmp	r3, #0
   b82dc:	f43f af12 	beq.w	b8104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b82e0:	6842      	ldr	r2, [r0, #4]
   b82e2:	1e51      	subs	r1, r2, #1
   b82e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b82e8:	2900      	cmp	r1, #0
   b82ea:	f6ff af0b 	blt.w	b8104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b82ee:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b82f2:	3201      	adds	r2, #1
   b82f4:	d003      	beq.n	b82fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b82f6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b82fa:	3201      	adds	r2, #1
   b82fc:	d087      	beq.n	b820e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b82fe:	3901      	subs	r1, #1
   b8300:	3b10      	subs	r3, #16
   b8302:	e7f1      	b.n	b82e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b8304:	04001001 	.word	0x04001001

000b8308 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b8308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b830a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b830c:	4604      	mov	r4, r0
	if (offset == 0) {
   b830e:	b912      	cbnz	r2, b8316 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8310:	2000      	movs	r0, #0
}
   b8312:	b003      	add	sp, #12
   b8314:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b8316:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b8318:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b831c:	b1ab      	cbz	r3, b834a <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b831e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b8320:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b8324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8328:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b832a:	69c1      	ldr	r1, [r0, #28]
   b832c:	9100      	str	r1, [sp, #0]
   b832e:	6841      	ldr	r1, [r0, #4]
   b8330:	4630      	mov	r0, r6
   b8332:	f7ff fe0d 	bl	b7f50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b8336:	1c43      	adds	r3, r0, #1
   b8338:	d128      	bne.n	b838c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b833a:	7c25      	ldrb	r5, [r4, #16]
   b833c:	2d00      	cmp	r5, #0
   b833e:	d1e7      	bne.n	b8310 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b8340:	6960      	ldr	r0, [r4, #20]
   b8342:	f002 faa3 	bl	ba88c <free>
			tokens = 0;
   b8346:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b8348:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b834a:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b834c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b8350:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8354:	68e2      	ldr	r2, [r4, #12]
   b8356:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8358:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b835a:	9500      	str	r5, [sp, #0]
   b835c:	462b      	mov	r3, r5
   b835e:	4630      	mov	r0, r6
   b8360:	f7ff fdf6 	bl	b7f50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b8364:	2800      	cmp	r0, #0
   b8366:	dbd3      	blt.n	b8310 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b8368:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b836a:	d017      	beq.n	b839c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b836c:	0100      	lsls	r0, r0, #4
   b836e:	f002 fa85 	bl	ba87c <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8372:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8374:	6160      	str	r0, [r4, #20]
   b8376:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8378:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b837a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b837e:	68e2      	ldr	r2, [r4, #12]
   b8380:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8382:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8384:	4630      	mov	r0, r6
   b8386:	f7ff fde3 	bl	b7f50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b838a:	e001      	b.n	b8390 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b838c:	2800      	cmp	r0, #0
   b838e:	dbbf      	blt.n	b8310 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8390:	6963      	ldr	r3, [r4, #20]
   b8392:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b8396:	61a0      	str	r0, [r4, #24]
	return true;
   b8398:	2001      	movs	r0, #1
   b839a:	e7ba      	b.n	b8312 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b839c:	6963      	ldr	r3, [r4, #20]
   b839e:	61a3      	str	r3, [r4, #24]
   b83a0:	e7fa      	b.n	b8398 <_ZN10JsonParser5parseEv+0x90>

000b83a2 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b83a2:	4770      	bx	lr

000b83a4 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b83a4:	4770      	bx	lr

000b83a6 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b83a6:	b510      	push	{r4, lr}
}
   b83a8:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b83aa:	4604      	mov	r4, r0
}
   b83ac:	f7fc fb8d 	bl	b4aca <_ZdlPvj>
   b83b0:	4620      	mov	r0, r4
   b83b2:	bd10      	pop	{r4, pc}

000b83b4 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b83b4:	b510      	push	{r4, lr}
}
   b83b6:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b83b8:	4604      	mov	r4, r0
}
   b83ba:	f7fc fb86 	bl	b4aca <_ZdlPvj>
   b83be:	4620      	mov	r0, r4
   b83c0:	bd10      	pop	{r4, pc}
	...

000b83c4 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b83c4:	b510      	push	{r4, lr}
   b83c6:	4b05      	ldr	r3, [pc, #20]	; (b83dc <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b83c8:	4604      	mov	r4, r0
   b83ca:	f840 3b1c 	str.w	r3, [r0], #28
   b83ce:	f004 fcd7 	bl	bcd80 <_ZN6StringD1Ev>
   b83d2:	1d20      	adds	r0, r4, #4
   b83d4:	f004 fcd4 	bl	bcd80 <_ZN6StringD1Ev>
}
   b83d8:	4620      	mov	r0, r4
   b83da:	bd10      	pop	{r4, pc}
   b83dc:	000bf0e4 	.word	0x000bf0e4

000b83e0 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b83e0:	b510      	push	{r4, lr}
   b83e2:	4604      	mov	r4, r0
}
   b83e4:	f7ff ffee 	bl	b83c4 <_ZN22LocalTimePosixTimezoneD1Ev>
   b83e8:	4620      	mov	r0, r4
   b83ea:	2158      	movs	r1, #88	; 0x58
   b83ec:	f7fc fb6d 	bl	b4aca <_ZdlPvj>
   b83f0:	4620      	mov	r0, r4
   b83f2:	bd10      	pop	{r4, pc}

000b83f4 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b83f4:	b510      	push	{r4, lr}
   b83f6:	4b04      	ldr	r3, [pc, #16]	; (b8408 <_ZN9LocalTimeD1Ev+0x14>)
   b83f8:	4604      	mov	r4, r0
   b83fa:	f840 3b04 	str.w	r3, [r0], #4
   b83fe:	f7ff ffe1 	bl	b83c4 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8402:	4620      	mov	r0, r4
   b8404:	bd10      	pop	{r4, pc}
   b8406:	bf00      	nop
   b8408:	000bf0b4 	.word	0x000bf0b4

000b840c <_ZN9LocalTimeD0Ev>:
   b840c:	b510      	push	{r4, lr}
   b840e:	4604      	mov	r4, r0
   b8410:	f7ff fff0 	bl	b83f4 <_ZN9LocalTimeD1Ev>
   b8414:	4620      	mov	r0, r4
   b8416:	2160      	movs	r1, #96	; 0x60
   b8418:	f7fc fb57 	bl	b4aca <_ZdlPvj>
   b841c:	4620      	mov	r0, r4
   b841e:	bd10      	pop	{r4, pc}

000b8420 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b8420:	f020 0302 	bic.w	r3, r0, #2
   b8424:	2b01      	cmp	r3, #1
   b8426:	d003      	beq.n	b8430 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b8428:	1f43      	subs	r3, r0, #5
   b842a:	4258      	negs	r0, r3
   b842c:	4158      	adcs	r0, r3
   b842e:	4770      	bx	lr
   b8430:	4618      	mov	r0, r3
   b8432:	4770      	bx	lr

000b8434 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b8434:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b8438:	7103      	strb	r3, [r0, #4]
   b843a:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b843e:	7143      	strb	r3, [r0, #5]
   b8440:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b8444:	7183      	strb	r3, [r0, #6]
   b8446:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b844a:	71c3      	strb	r3, [r0, #7]
   b844c:	4770      	bx	lr

000b844e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b844e:	b538      	push	{r3, r4, r5, lr}
   b8450:	4604      	mov	r4, r0
   b8452:	460d      	mov	r5, r1
   b8454:	3004      	adds	r0, #4
   b8456:	3104      	adds	r1, #4
   b8458:	f004 fd1a 	bl	bce90 <_ZN6StringaSERKS_>
   b845c:	f105 0114 	add.w	r1, r5, #20
   b8460:	f104 0014 	add.w	r0, r4, #20
   b8464:	f7ff ffe6 	bl	b8434 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b8468:	f105 011c 	add.w	r1, r5, #28
   b846c:	f104 001c 	add.w	r0, r4, #28
   b8470:	f004 fd0e 	bl	bce90 <_ZN6StringaSERKS_>
   b8474:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b8478:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b847c:	f7ff ffda 	bl	b8434 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b8480:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b8484:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b8488:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b848c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b8490:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b8494:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b8498:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b849c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b84a0:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b84a4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b84a8:	f7ff ffc4 	bl	b8434 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b84ac:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b84b0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b84b4:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b84b8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b84bc:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b84c0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b84c4:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b84c8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b84cc:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b84d0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b84d4:	f7ff ffae 	bl	b8434 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b84d8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b84dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b84e0:	bd38      	pop	{r3, r4, r5, pc}

000b84e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b84e2:	680b      	ldr	r3, [r1, #0]
   b84e4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b84e6:	684b      	ldr	r3, [r1, #4]
   b84e8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b84ea:	b113      	cbz	r3, b84f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b84ec:	685a      	ldr	r2, [r3, #4]
   b84ee:	3201      	adds	r2, #1
   b84f0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b84f2:	4770      	bx	lr

000b84f4 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b84f4:	4a02      	ldr	r2, [pc, #8]	; (b8500 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b84f6:	6002      	str	r2, [r0, #0]
   b84f8:	684a      	ldr	r2, [r1, #4]
   b84fa:	6042      	str	r2, [r0, #4]
   b84fc:	4770      	bx	lr
   b84fe:	bf00      	nop
   b8500:	000bf0c4 	.word	0x000bf0c4

000b8504 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b8504:	4a02      	ldr	r2, [pc, #8]	; (b8510 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b8506:	6002      	str	r2, [r0, #0]
   b8508:	2200      	movs	r2, #0
   b850a:	6042      	str	r2, [r0, #4]
}
   b850c:	4770      	bx	lr
   b850e:	bf00      	nop
   b8510:	000bf0c4 	.word	0x000bf0c4

000b8514 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b8514:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b8516:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b8518:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b851a:	8083      	strh	r3, [r0, #4]
   b851c:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b851e:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8520:	ab05      	add	r3, sp, #20
   b8522:	9300      	str	r3, [sp, #0]
   b8524:	4913      	ldr	r1, [pc, #76]	; (b8574 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b8526:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8528:	ab04      	add	r3, sp, #16
   b852a:	aa03      	add	r2, sp, #12
   b852c:	4628      	mov	r0, r5
   b852e:	f002 f9c5 	bl	ba8bc <sscanf>
   b8532:	2803      	cmp	r0, #3
   b8534:	d107      	bne.n	b8546 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b8536:	9b03      	ldr	r3, [sp, #12]
   b8538:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b853a:	9b04      	ldr	r3, [sp, #16]
   b853c:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b853e:	9b05      	ldr	r3, [sp, #20]
   b8540:	71a3      	strb	r3, [r4, #6]
}
   b8542:	b007      	add	sp, #28
   b8544:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b8546:	490c      	ldr	r1, [pc, #48]	; (b8578 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b8548:	ab04      	add	r3, sp, #16
   b854a:	aa03      	add	r2, sp, #12
   b854c:	4628      	mov	r0, r5
   b854e:	f002 f9b5 	bl	ba8bc <sscanf>
   b8552:	2802      	cmp	r0, #2
   b8554:	d104      	bne.n	b8560 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b8556:	9b03      	ldr	r3, [sp, #12]
   b8558:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b855a:	9b04      	ldr	r3, [sp, #16]
   b855c:	7163      	strb	r3, [r4, #5]
   b855e:	e7f0      	b.n	b8542 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b8560:	4906      	ldr	r1, [pc, #24]	; (b857c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b8562:	aa03      	add	r2, sp, #12
   b8564:	4628      	mov	r0, r5
   b8566:	f002 f9a9 	bl	ba8bc <sscanf>
   b856a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b856c:	bf04      	itt	eq
   b856e:	9b03      	ldreq	r3, [sp, #12]
   b8570:	7123      	strbeq	r3, [r4, #4]
}
   b8572:	e7e6      	b.n	b8542 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b8574:	000bf084 	.word	0x000bf084
   b8578:	000bf087 	.word	0x000bf087
   b857c:	000beedb 	.word	0x000beedb

000b8580 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b8580:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8584:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8588:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b858c:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b858e:	bfb8      	it	lt
   b8590:	4808      	ldrlt	r0, [pc, #32]	; (b85b4 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b8592:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b8596:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b859a:	bfbd      	ittte	lt
   b859c:	fb00 3002 	mlalt	r0, r0, r2, r3
   b85a0:	1840      	addlt	r0, r0, r1
   b85a2:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b85a4:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b85a8:	bfa4      	itt	ge
   b85aa:	fb00 3002 	mlage	r0, r0, r2, r3
   b85ae:	1840      	addge	r0, r0, r1
}
   b85b0:	4770      	bx	lr
   b85b2:	bf00      	nop
   b85b4:	fffff1f0 	.word	0xfffff1f0

000b85b8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b85b8:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b85bc:	b943      	cbnz	r3, b85d0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b85be:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b85c2:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b85c4:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b85c8:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b85ca:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b85ce:	600b      	str	r3, [r1, #0]
}
   b85d0:	4770      	bx	lr

000b85d2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b85d2:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b85d6:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b85d8:	b9b3      	cbnz	r3, b8608 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b85da:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b85de:	688c      	ldr	r4, [r1, #8]
   b85e0:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b85e2:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b85e6:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b85e8:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b85ec:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b85ee:	bfb5      	itete	lt
   b85f0:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b85f2:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b85f4:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b85f6:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b85f8:	bfb5      	itete	lt
   b85fa:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b85fe:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b8602:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b8604:	189b      	addge	r3, r3, r2
   b8606:	600b      	str	r3, [r1, #0]
}
   b8608:	bd30      	pop	{r4, r5, pc}
	...

000b860c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b860c:	b508      	push	{r3, lr}
   b860e:	4a05      	ldr	r2, [pc, #20]	; (b8624 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b8610:	6002      	str	r2, [r0, #0]
   b8612:	2200      	movs	r2, #0
   b8614:	4603      	mov	r3, r0
   b8616:	6042      	str	r2, [r0, #4]
   b8618:	3008      	adds	r0, #8
   b861a:	f7ff ff73 	bl	b8504 <_ZN12LocalTimeHMSC1Ev>
}
   b861e:	4618      	mov	r0, r3
   b8620:	bd08      	pop	{r3, pc}
   b8622:	bf00      	nop
   b8624:	000bf0d4 	.word	0x000bf0d4

000b8628 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b8628:	2300      	movs	r3, #0
   b862a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b862c:	8183      	strh	r3, [r0, #12]
   b862e:	7383      	strb	r3, [r0, #14]
}
   b8630:	4770      	bx	lr
	...

000b8634 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b8634:	b530      	push	{r4, r5, lr}
   b8636:	4604      	mov	r4, r0
   b8638:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b863a:	460d      	mov	r5, r1
   b863c:	b111      	cbz	r1, b8644 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b863e:	780b      	ldrb	r3, [r1, #0]
   b8640:	2b4d      	cmp	r3, #77	; 0x4d
   b8642:	d005      	beq.n	b8650 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b8644:	4620      	mov	r0, r4
}
   b8646:	b007      	add	sp, #28
   b8648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b864c:	f7ff bfec 	b.w	b8628 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b8650:	ab05      	add	r3, sp, #20
   b8652:	9300      	str	r3, [sp, #0]
   b8654:	4911      	ldr	r1, [pc, #68]	; (b869c <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b8656:	ab04      	add	r3, sp, #16
   b8658:	aa03      	add	r2, sp, #12
   b865a:	4628      	mov	r0, r5
   b865c:	f002 f92e 	bl	ba8bc <sscanf>
   b8660:	2803      	cmp	r0, #3
   b8662:	d116      	bne.n	b8692 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b8664:	9b03      	ldr	r3, [sp, #12]
   b8666:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b8668:	9b04      	ldr	r3, [sp, #16]
   b866a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b866c:	9b05      	ldr	r3, [sp, #20]
   b866e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b8670:	212f      	movs	r1, #47	; 0x2f
   b8672:	4628      	mov	r0, r5
   b8674:	f005 fc38 	bl	bdee8 <strchr>
        if (cp) {
   b8678:	b140      	cbz	r0, b868c <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b867a:	1c41      	adds	r1, r0, #1
   b867c:	f104 0008 	add.w	r0, r4, #8
   b8680:	f7ff ff48 	bl	b8514 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b8684:	2301      	movs	r3, #1
   b8686:	71e3      	strb	r3, [r4, #7]
}
   b8688:	b007      	add	sp, #28
   b868a:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b868c:	81a0      	strh	r0, [r4, #12]
   b868e:	73a0      	strb	r0, [r4, #14]
}
   b8690:	e7f8      	b.n	b8684 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b8692:	4620      	mov	r0, r4
   b8694:	f7ff ffc8 	bl	b8628 <_ZN15LocalTimeChange5clearEv>
   b8698:	e7f6      	b.n	b8688 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b869a:	bf00      	nop
   b869c:	000bf09f 	.word	0x000bf09f

000b86a0 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b86a0:	4b10      	ldr	r3, [pc, #64]	; (b86e4 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b86a2:	4911      	ldr	r1, [pc, #68]	; (b86e8 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b86a4:	b510      	push	{r4, lr}
   b86a6:	4604      	mov	r4, r0
   b86a8:	f840 3b04 	str.w	r3, [r0], #4
   b86ac:	f004 fbb3 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b86b0:	f104 0014 	add.w	r0, r4, #20
   b86b4:	f7ff ff26 	bl	b8504 <_ZN12LocalTimeHMSC1Ev>
   b86b8:	490b      	ldr	r1, [pc, #44]	; (b86e8 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b86ba:	f104 001c 	add.w	r0, r4, #28
   b86be:	f004 fbaa 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b86c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b86c6:	f7ff ff1d 	bl	b8504 <_ZN12LocalTimeHMSC1Ev>
   b86ca:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b86ce:	f7ff ff9d 	bl	b860c <_ZN15LocalTimeChangeC1Ev>
   b86d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b86d6:	f7ff ff99 	bl	b860c <_ZN15LocalTimeChangeC1Ev>
   b86da:	2300      	movs	r3, #0
   b86dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b86e0:	4620      	mov	r0, r4
   b86e2:	bd10      	pop	{r4, pc}
   b86e4:	000bf0e4 	.word	0x000bf0e4
   b86e8:	000bf6ed 	.word	0x000bf6ed

000b86ec <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b86ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86f0:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b86f2:	4608      	mov	r0, r1
   b86f4:	f005 fc18 	bl	bdf28 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b86f8:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b86fa:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b86fc:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b86fe:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b8702:	493f      	ldr	r1, [pc, #252]	; (b8800 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b8704:	9801      	ldr	r0, [sp, #4]
   b8706:	aa01      	add	r2, sp, #4
   b8708:	f005 fc8e 	bl	be028 <strtok_r>
   b870c:	4601      	mov	r1, r0
   b870e:	2800      	cmp	r0, #0
   b8710:	d062      	beq.n	b87d8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b8712:	2d01      	cmp	r5, #1
   b8714:	f105 0301 	add.w	r3, r5, #1
   b8718:	d053      	beq.n	b87c2 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b871a:	2d02      	cmp	r5, #2
   b871c:	d056      	beq.n	b87cc <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b871e:	2d00      	cmp	r5, #0
   b8720:	d146      	bne.n	b87b0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b8722:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b8724:	f892 9000 	ldrb.w	r9, [r2]
   b8728:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b872c:	4615      	mov	r5, r2
   b872e:	4617      	mov	r7, r2
   b8730:	f102 0201 	add.w	r2, r2, #1
   b8734:	d8f6      	bhi.n	b8724 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b8736:	2200      	movs	r2, #0
   b8738:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b873a:	f104 001c 	add.w	r0, r4, #28
   b873e:	f004 fbc9 	bl	bced4 <_ZN6StringaSEPKc>
                valid = true;
   b8742:	2201      	movs	r2, #1
                *cp = save2;
   b8744:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b8748:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b874c:	782a      	ldrb	r2, [r5, #0]
   b874e:	b36a      	cbz	r2, b87ac <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b8750:	f897 a000 	ldrb.w	sl, [r7]
   b8754:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b8758:	2a3f      	cmp	r2, #63	; 0x3f
   b875a:	46b9      	mov	r9, r7
   b875c:	46bb      	mov	fp, r7
   b875e:	f107 0701 	add.w	r7, r7, #1
   b8762:	d9f5      	bls.n	b8750 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b8764:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b8766:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b876a:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b876e:	4629      	mov	r1, r5
   b8770:	4638      	mov	r0, r7
   b8772:	f7ff fecf 	bl	b8514 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b8776:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b877a:	f1ba 0f00 	cmp.w	sl, #0
   b877e:	d015      	beq.n	b87ac <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b8780:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b8782:	f81b ab01 	ldrb.w	sl, [fp], #1
   b8786:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b878a:	d8f9      	bhi.n	b8780 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b878c:	2200      	movs	r2, #0
   b878e:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b8790:	4649      	mov	r1, r9
   b8792:	1d20      	adds	r0, r4, #4
   b8794:	f004 fb9e 	bl	bced4 <_ZN6StringaSEPKc>
                        *cp = save2;
   b8798:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b879c:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b87a0:	f1ba 0f00 	cmp.w	sl, #0
   b87a4:	d006      	beq.n	b87b4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b87a6:	4629      	mov	r1, r5
   b87a8:	f7ff feb4 	bl	b8514 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b87ac:	2501      	movs	r5, #1
   b87ae:	e7a8      	b.n	b8702 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b87b0:	461d      	mov	r5, r3
   b87b2:	e7a6      	b.n	b8702 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b87b4:	4639      	mov	r1, r7
   b87b6:	f7ff fe3d 	bl	b8434 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b87ba:	7e23      	ldrb	r3, [r4, #24]
   b87bc:	3b01      	subs	r3, #1
   b87be:	7623      	strb	r3, [r4, #24]
   b87c0:	e7f4      	b.n	b87ac <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b87c2:	4640      	mov	r0, r8
   b87c4:	f7ff ff36 	bl	b8634 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b87c8:	2502      	movs	r5, #2
   b87ca:	e79a      	b.n	b8702 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b87cc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b87d0:	f7ff ff30 	bl	b8634 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b87d4:	2503      	movs	r5, #3
   b87d6:	e794      	b.n	b8702 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b87d8:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b87dc:	b143      	cbz	r3, b87f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b87de:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b87e2:	b92a      	cbnz	r2, b87f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b87e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b87e8:	f7ff ff1e 	bl	b8628 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b87ec:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b87f0:	4630      	mov	r0, r6
   b87f2:	f002 f84b 	bl	ba88c <free>

    return valid;
}
   b87f6:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b87fa:	b003      	add	sp, #12
   b87fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8800:	000bf0a9 	.word	0x000bf0a9

000b8804 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b8804:	b538      	push	{r3, r4, r5, lr}
   b8806:	4b13      	ldr	r3, [pc, #76]	; (b8854 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b8808:	4604      	mov	r4, r0
   b880a:	460d      	mov	r5, r1
   b880c:	f840 3b04 	str.w	r3, [r0], #4
   b8810:	4911      	ldr	r1, [pc, #68]	; (b8858 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8812:	f004 fb00 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b8816:	f104 0014 	add.w	r0, r4, #20
   b881a:	f7ff fe73 	bl	b8504 <_ZN12LocalTimeHMSC1Ev>
   b881e:	490e      	ldr	r1, [pc, #56]	; (b8858 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8820:	f104 001c 	add.w	r0, r4, #28
   b8824:	f004 faf7 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b8828:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b882c:	f7ff fe6a 	bl	b8504 <_ZN12LocalTimeHMSC1Ev>
   b8830:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8834:	f7ff feea 	bl	b860c <_ZN15LocalTimeChangeC1Ev>
   b8838:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b883c:	f7ff fee6 	bl	b860c <_ZN15LocalTimeChangeC1Ev>
   b8840:	2300      	movs	r3, #0
   b8842:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b8846:	4629      	mov	r1, r5
   b8848:	4620      	mov	r0, r4
   b884a:	f7ff ff4f 	bl	b86ec <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b884e:	4620      	mov	r0, r4
   b8850:	bd38      	pop	{r3, r4, r5, pc}
   b8852:	bf00      	nop
   b8854:	000bf0e4 	.word	0x000bf0e4
   b8858:	000bf6ed 	.word	0x000bf6ed

000b885c <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b885c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b885e:	4d09      	ldr	r5, [pc, #36]	; (b8884 <_ZN9LocalTime8instanceEv+0x28>)
   b8860:	682b      	ldr	r3, [r5, #0]
   b8862:	b963      	cbnz	r3, b887e <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b8864:	2060      	movs	r0, #96	; 0x60
   b8866:	f7fc f92c 	bl	b4ac2 <_Znwj>
   b886a:	4604      	mov	r4, r0
   b886c:	b130      	cbz	r0, b887c <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b886e:	4b06      	ldr	r3, [pc, #24]	; (b8888 <_ZN9LocalTime8instanceEv+0x2c>)
   b8870:	f840 3b04 	str.w	r3, [r0], #4
   b8874:	f7ff ff14 	bl	b86a0 <_ZN22LocalTimePosixTimezoneC1Ev>
   b8878:	2364      	movs	r3, #100	; 0x64
   b887a:	65e3      	str	r3, [r4, #92]	; 0x5c
   b887c:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b887e:	6828      	ldr	r0, [r5, #0]
   b8880:	bd38      	pop	{r3, r4, r5, pc}
   b8882:	bf00      	nop
   b8884:	2003e5f4 	.word	0x2003e5f4
   b8888:	000bf0b4 	.word	0x000bf0b4

000b888c <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b888c:	f002 b86e 	b.w	ba96c <mktime>

000b8890 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b8890:	3901      	subs	r1, #1
   b8892:	290b      	cmp	r1, #11
   b8894:	d815      	bhi.n	b88c2 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b8896:	e8df f001 	tbb	[pc, r1]
   b889a:	0816      	.short	0x0816
   b889c:	06160616 	.word	0x06160616
   b88a0:	16061616 	.word	0x16061616
   b88a4:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b88a6:	201e      	movs	r0, #30
   b88a8:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b88aa:	0783      	lsls	r3, r0, #30
   b88ac:	d10d      	bne.n	b88ca <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b88ae:	2364      	movs	r3, #100	; 0x64
   b88b0:	fb90 f2f3 	sdiv	r2, r0, r3
   b88b4:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b88b8:	2800      	cmp	r0, #0
   b88ba:	bf0c      	ite	eq
   b88bc:	201c      	moveq	r0, #28
   b88be:	201d      	movne	r0, #29
   b88c0:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b88c2:	2000      	movs	r0, #0
   b88c4:	4770      	bx	lr
            return 31;
   b88c6:	201f      	movs	r0, #31
   b88c8:	4770      	bx	lr
                return 28;
   b88ca:	201c      	movs	r0, #28
}
   b88cc:	4770      	bx	lr

000b88ce <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b88ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b88d0:	2301      	movs	r3, #1
   b88d2:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b88d4:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b88d8:	3b01      	subs	r3, #1
   b88da:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b88dc:	2300      	movs	r3, #0
   b88de:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b88e2:	4606      	mov	r6, r0
   b88e4:	460c      	mov	r4, r1
   b88e6:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b88e8:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b88ea:	4620      	mov	r0, r4
   b88ec:	f7ff ffce 	bl	b888c <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b88f0:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b88f4:	69a2      	ldr	r2, [r4, #24]
   b88f6:	429a      	cmp	r2, r3
   b88f8:	d003      	beq.n	b8902 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b88fa:	68e3      	ldr	r3, [r4, #12]
   b88fc:	3301      	adds	r3, #1
   b88fe:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b8900:	e7f3      	b.n	b88ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b8902:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b8906:	2d01      	cmp	r5, #1
   b8908:	d013      	beq.n	b8932 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b890a:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b890c:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b890e:	3d01      	subs	r5, #1
   b8910:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b8914:	441d      	add	r5, r3
   b8916:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b8918:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b891c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b8920:	f7ff ffb6 	bl	b8890 <_ZN9LocalTime14lastDayOfMonthEii>
   b8924:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b8926:	bfc4      	itt	gt
   b8928:	3d07      	subgt	r5, #7
   b892a:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b892c:	4620      	mov	r0, r4
   b892e:	f7ff ffad 	bl	b888c <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b8932:	4621      	mov	r1, r4
   b8934:	f106 0008 	add.w	r0, r6, #8
   b8938:	f7ff fe3e 	bl	b85b8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b893c:	4638      	mov	r0, r7
   b893e:	f7ff fe48 	bl	b85d2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b8942:	4620      	mov	r0, r4
}
   b8944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b8948:	f002 b810 	b.w	ba96c <mktime>

000b894c <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b894c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b894e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b8952:	b085      	sub	sp, #20
   b8954:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b8956:	b92b      	cbnz	r3, b8964 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b8958:	f7ff ff80 	bl	b885c <_ZN9LocalTime8instanceEv>
   b895c:	1d01      	adds	r1, r0, #4
   b895e:	1d20      	adds	r0, r4, #4
   b8960:	f7ff fd75 	bl	b844e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b8964:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b8968:	2b00      	cmp	r3, #0
   b896a:	d065      	beq.n	b8a38 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b896c:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b8970:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b8974:	4639      	mov	r1, r7
   b8976:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b8978:	463e      	mov	r6, r7
   b897a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b897e:	f001 ffe5 	bl	ba94c <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b8982:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8984:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b8988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b898a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b898c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b898e:	6833      	ldr	r3, [r6, #0]
   b8990:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b8992:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b8996:	a802      	add	r0, sp, #8
   b8998:	f7ff fdac 	bl	b84f4 <_ZN12LocalTimeHMSC1ERKS_>
   b899c:	aa02      	add	r2, sp, #8
   b899e:	4639      	mov	r1, r7
   b89a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b89a4:	f7ff ff93 	bl	b88ce <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b89a8:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b89ac:	f104 0118 	add.w	r1, r4, #24
   b89b0:	a802      	add	r0, sp, #8
   b89b2:	f7ff fd9f 	bl	b84f4 <_ZN12LocalTimeHMSC1ERKS_>
   b89b6:	aa02      	add	r2, sp, #8
   b89b8:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b89bc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b89c0:	f7ff ff85 	bl	b88ce <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b89c4:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b89c8:	4286      	cmp	r6, r0
   b89ca:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b89ce:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b89d2:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b89d6:	da23      	bge.n	b8a20 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b89d8:	42b2      	cmp	r2, r6
   b89da:	eb73 0505 	sbcs.w	r5, r3, r5
   b89de:	da19      	bge.n	b8a14 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b89e0:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b89e2:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b89e4:	6820      	ldr	r0, [r4, #0]
   b89e6:	f7ff fd1b 	bl	b8420 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b89ea:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b89ee:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b89f2:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b89f4:	bb10      	cbnz	r0, b8a3c <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b89f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b89fa:	f7ff fdc1 	bl	b8580 <_ZNK12LocalTimeHMS9toSecondsEv>
   b89fe:	1a2d      	subs	r5, r5, r0
   b8a00:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b8a04:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b8a08:	9901      	ldr	r1, [sp, #4]
   b8a0a:	a802      	add	r0, sp, #8
   b8a0c:	f001 ff9e 	bl	ba94c <localtime_r>
}
   b8a10:	b005      	add	sp, #20
   b8a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b8a14:	4282      	cmp	r2, r0
   b8a16:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b8a18:	bfb4      	ite	lt
   b8a1a:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b8a1c:	2302      	movge	r3, #2
   b8a1e:	e7e0      	b.n	b89e2 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b8a20:	4282      	cmp	r2, r0
   b8a22:	eb73 0101 	sbcs.w	r1, r3, r1
   b8a26:	da01      	bge.n	b8a2c <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b8a28:	2303      	movs	r3, #3
   b8a2a:	e7da      	b.n	b89e2 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b8a2c:	42b2      	cmp	r2, r6
   b8a2e:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b8a30:	bfb4      	ite	lt
   b8a32:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b8a34:	2305      	movge	r3, #5
   b8a36:	e7d4      	b.n	b89e2 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b8a38:	2306      	movs	r3, #6
   b8a3a:	e7d2      	b.n	b89e2 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b8a3c:	f104 0018 	add.w	r0, r4, #24
   b8a40:	e7db      	b.n	b89fa <_ZN16LocalTimeConvert7convertEv+0xae>

000b8a42 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8a42:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8a44:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8a46:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8a48:	4668      	mov	r0, sp
   b8a4a:	f7ff fd4a 	bl	b84e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8a4e:	466a      	mov	r2, sp
   b8a50:	4629      	mov	r1, r5
   b8a52:	4620      	mov	r0, r4
   b8a54:	f002 ff16 	bl	bb884 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8a58:	a801      	add	r0, sp, #4
   b8a5a:	f7fc f9bd 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8a5e:	4620      	mov	r0, r4
   b8a60:	b003      	add	sp, #12
   b8a62:	bd30      	pop	{r4, r5, pc}

000b8a64 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8a66:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8a68:	4604      	mov	r4, r0
   b8a6a:	4668      	mov	r0, sp
   b8a6c:	f7ff fd39 	bl	b84e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b8a70:	466a      	mov	r2, sp
   b8a72:	4629      	mov	r1, r5
   b8a74:	4620      	mov	r0, r4
   b8a76:	f002 fee1 	bl	bb83c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8a7a:	a801      	add	r0, sp, #4
   b8a7c:	f7fc f9ac 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8a80:	4620      	mov	r0, r4
   b8a82:	b003      	add	sp, #12
   b8a84:	bd30      	pop	{r4, r5, pc}

000b8a86 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8a88:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8a8a:	4604      	mov	r4, r0
   b8a8c:	4668      	mov	r0, sp
   b8a8e:	f7ff fd28 	bl	b84e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b8a92:	466a      	mov	r2, sp
   b8a94:	4629      	mov	r1, r5
   b8a96:	4620      	mov	r0, r4
   b8a98:	f002 fe79 	bl	bb78e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8a9c:	a801      	add	r0, sp, #4
   b8a9e:	f7fc f99b 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8aa2:	4620      	mov	r0, r4
   b8aa4:	b003      	add	sp, #12
   b8aa6:	bd30      	pop	{r4, r5, pc}

000b8aa8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b8aa8:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8aaa:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b8aac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b8ab0:	2101      	movs	r1, #1
   b8ab2:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b8ab6:	4770      	bx	lr

000b8ab8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8ab8:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b8aba:	6842      	ldr	r2, [r0, #4]
   b8abc:	4603      	mov	r3, r0
   b8abe:	1054      	asrs	r4, r2, #1
   b8ac0:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b8ac4:	07d2      	lsls	r2, r2, #31
   b8ac6:	bf48      	it	mi
   b8ac8:	590a      	ldrmi	r2, [r1, r4]
   b8aca:	681b      	ldr	r3, [r3, #0]
      }
   b8acc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8ad0:	bf48      	it	mi
   b8ad2:	58d3      	ldrmi	r3, [r2, r3]
   b8ad4:	4718      	bx	r3

000b8ad6 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b8ad6:	2a01      	cmp	r2, #1
   b8ad8:	d102      	bne.n	b8ae0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8ada:	6001      	str	r1, [r0, #0]
      }
   b8adc:	2000      	movs	r0, #0
   b8ade:	4770      	bx	lr
	  switch (__op)
   b8ae0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b8ae2:	bf04      	itt	eq
   b8ae4:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b8ae8:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b8aec:	e7f6      	b.n	b8adc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b8aee <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b8aee:	2a01      	cmp	r2, #1
   b8af0:	d102      	bne.n	b8af8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8af2:	6001      	str	r1, [r0, #0]
      }
   b8af4:	2000      	movs	r0, #0
   b8af6:	4770      	bx	lr
	  switch (__op)
   b8af8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b8afa:	bf04      	itt	eq
   b8afc:	680b      	ldreq	r3, [r1, #0]
   b8afe:	6003      	streq	r3, [r0, #0]
	      break;
   b8b00:	e7f8      	b.n	b8af4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b8b02 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b8b02:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8b04:	f001 bafe 	b.w	ba104 <os_mutex_recursive_lock>

000b8b08 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b8b08:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b8b0c:	4601      	mov	r1, r0
    if (stateHandler) {
   b8b0e:	b11b      	cbz	r3, b8b18 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8b10:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b8b14:	30c0      	adds	r0, #192	; 0xc0
   b8b16:	4718      	bx	r3
}
   b8b18:	4770      	bx	lr
	...

000b8b1c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b8b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b8b1e:	4d12      	ldr	r5, [pc, #72]	; (b8b68 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8b20:	4608      	mov	r0, r1
        eventData = "";
   b8b22:	2a00      	cmp	r2, #0
   b8b24:	bf18      	it	ne
   b8b26:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b8b28:	460e      	mov	r6, r1
   b8b2a:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8b2c:	f7fb ff86 	bl	b4a3c <strlen>
   b8b30:	2840      	cmp	r0, #64	; 0x40
   b8b32:	d816      	bhi.n	b8b62 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b8b34:	4628      	mov	r0, r5
   b8b36:	f7fb ff81 	bl	b4a3c <strlen>
   b8b3a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b8b3e:	d810      	bhi.n	b8b62 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b8b40:	3043      	adds	r0, #67	; 0x43
   b8b42:	f7fb ffc0 	bl	b4ac6 <_Znaj>
    if (event) {
   b8b46:	4604      	mov	r4, r0
   b8b48:	b148      	cbz	r0, b8b5e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b8b4a:	4631      	mov	r1, r6
        event->flags = flags;
   b8b4c:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b8b50:	f005 f9e1 	bl	bdf16 <strcpy>
        strcpy(event->eventData, eventData);
   b8b54:	4629      	mov	r1, r5
   b8b56:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b8b5a:	f005 f9dc 	bl	bdf16 <strcpy>
}
   b8b5e:	4620      	mov	r0, r4
   b8b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b8b62:	2400      	movs	r4, #0
   b8b64:	e7fb      	b.n	b8b5e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b8b66:	bf00      	nop
   b8b68:	000bf6ed 	.word	0x000bf6ed

000b8b6c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8b6e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8b70:	460a      	mov	r2, r1
   b8b72:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8b74:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8b76:	1d01      	adds	r1, r0, #4
   b8b78:	a808      	add	r0, sp, #32
   b8b7a:	f000 fe41 	bl	b9800 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b8b7e:	9808      	ldr	r0, [sp, #32]
   b8b80:	2100      	movs	r1, #0
   b8b82:	f005 fafb 	bl	be17c <open>
   b8b86:	4605      	mov	r5, r0
   b8b88:	a808      	add	r0, sp, #32
   b8b8a:	f004 f8f9 	bl	bcd80 <_ZN6StringD1Ev>
    if (fd) {
   b8b8e:	2d00      	cmp	r5, #0
   b8b90:	d060      	beq.n	b8c54 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b8b92:	a908      	add	r1, sp, #32
   b8b94:	4628      	mov	r0, r5
   b8b96:	f005 fadf 	bl	be158 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b8b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8b9c:	492e      	ldr	r1, [pc, #184]	; (b8c58 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b8b9e:	482f      	ldr	r0, [pc, #188]	; (b8c5c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8ba0:	4632      	mov	r2, r6
   b8ba2:	f7fe f991 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b8ba6:	2200      	movs	r2, #0
   b8ba8:	4611      	mov	r1, r2
   b8baa:	4628      	mov	r0, r5
   b8bac:	f005 fadc 	bl	be168 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b8bb0:	2208      	movs	r2, #8
   b8bb2:	a906      	add	r1, sp, #24
   b8bb4:	4628      	mov	r0, r5
   b8bb6:	f005 faf5 	bl	be1a4 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b8bba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b8bbc:	2f4a      	cmp	r7, #74	; 0x4a
   b8bbe:	dd39      	ble.n	b8c34 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b8bc0:	4b27      	ldr	r3, [pc, #156]	; (b8c60 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b8bc2:	9a06      	ldr	r2, [sp, #24]
   b8bc4:	429a      	cmp	r2, r3
   b8bc6:	d135      	bne.n	b8c34 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b8bc8:	4b26      	ldr	r3, [pc, #152]	; (b8c64 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b8bca:	9a07      	ldr	r2, [sp, #28]
   b8bcc:	429a      	cmp	r2, r3
   b8bce:	d131      	bne.n	b8c34 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b8bd0:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b8bd4:	4610      	mov	r0, r2
   b8bd6:	9205      	str	r2, [sp, #20]
   b8bd8:	f7fb ff75 	bl	b4ac6 <_Znaj>
            if (result) {
   b8bdc:	4604      	mov	r4, r0
   b8bde:	b1c0      	cbz	r0, b8c12 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b8be0:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b8be2:	4601      	mov	r1, r0
   b8be4:	9a05      	ldr	r2, [sp, #20]
   b8be6:	4628      	mov	r0, r5
   b8be8:	f005 fadc 	bl	be1a4 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b8bec:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b8bf0:	b9ab      	cbnz	r3, b8c1e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b8bf2:	1c63      	adds	r3, r4, #1
   b8bf4:	4618      	mov	r0, r3
   b8bf6:	9305      	str	r3, [sp, #20]
   b8bf8:	f7fb ff20 	bl	b4a3c <strlen>
   b8bfc:	283f      	cmp	r0, #63	; 0x3f
   b8bfe:	9b05      	ldr	r3, [sp, #20]
   b8c00:	d80d      	bhi.n	b8c1e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b8c02:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b8c06:	9200      	str	r2, [sp, #0]
   b8c08:	4917      	ldr	r1, [pc, #92]	; (b8c68 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b8c0a:	4814      	ldr	r0, [pc, #80]	; (b8c5c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8c0c:	4632      	mov	r2, r6
   b8c0e:	f7fe f95b 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b8c12:	4628      	mov	r0, r5
   b8c14:	f005 fa98 	bl	be148 <close>
}
   b8c18:	4620      	mov	r0, r4
   b8c1a:	b01f      	add	sp, #124	; 0x7c
   b8c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b8c1e:	4913      	ldr	r1, [pc, #76]	; (b8c6c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b8c20:	480e      	ldr	r0, [pc, #56]	; (b8c5c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8c22:	4632      	mov	r2, r6
   b8c24:	f7fe f950 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b8c28:	2143      	movs	r1, #67	; 0x43
   b8c2a:	4620      	mov	r0, r4
   b8c2c:	f7fb ff4d 	bl	b4aca <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b8c30:	2400      	movs	r4, #0
   b8c32:	e7ee      	b.n	b8c12 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b8c34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b8c38:	9302      	str	r3, [sp, #8]
   b8c3a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b8c3e:	9301      	str	r3, [sp, #4]
   b8c40:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b8c44:	9300      	str	r3, [sp, #0]
   b8c46:	490a      	ldr	r1, [pc, #40]	; (b8c70 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b8c48:	9b06      	ldr	r3, [sp, #24]
   b8c4a:	4804      	ldr	r0, [pc, #16]	; (b8c5c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8c4c:	4632      	mov	r2, r6
   b8c4e:	f7fe f93b 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
   b8c52:	e7ed      	b.n	b8c30 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b8c54:	462c      	mov	r4, r5
    return result;
   b8c56:	e7df      	b.n	b8c18 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b8c58:	000bf0ec 	.word	0x000bf0ec
   b8c5c:	2003e5f8 	.word	0x2003e5f8
   b8c60:	31b67663 	.word	0x31b67663
   b8c64:	00410801 	.word	0x00410801
   b8c68:	000bf100 	.word	0x000bf100
   b8c6c:	000bf122 	.word	0x000bf122
   b8c70:	000bf150 	.word	0x000bf150

000b8c74 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b8c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c78:	4680      	mov	r8, r0
   b8c7a:	4b28      	ldr	r3, [pc, #160]	; (b8d1c <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b8c7c:	f848 3b04 	str.w	r3, [r8], #4
   b8c80:	4604      	mov	r4, r0
   b8c82:	4640      	mov	r0, r8
   b8c84:	f000 fcd4 	bl	b9630 <_ZN14SequentialFileC1Ev>
   b8c88:	2202      	movs	r2, #2
   b8c8a:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b8c8c:	2500      	movs	r5, #0
   b8c8e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b8c92:	2308      	movs	r3, #8
   b8c94:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b8c96:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b8c9a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b8c9e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b8ca2:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b8ca6:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8ca8:	2020      	movs	r0, #32
   b8caa:	f7fb ff0a 	bl	b4ac2 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8cae:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b8cb0:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8cb2:	3e01      	subs	r6, #1
   b8cb4:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b8cb6:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b8cba:	4607      	mov	r7, r0
   b8cbc:	f44f 7000 	mov.w	r0, #512	; 0x200
   b8cc0:	f7fb feff 	bl	b4ac2 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8cc4:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b8cc8:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b8ccc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8cd0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8cd8:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b8cdc:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b8ce0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b8ce4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b8ce8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b8cec:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b8cf0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b8cf4:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b8cf8:	4909      	ldr	r1, [pc, #36]	; (b8d20 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b8cfa:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b8cfe:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b8d02:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b8d06:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b8d0a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b8d0e:	4640      	mov	r0, r8
   b8d10:	f000 fcd4 	bl	b96bc <_ZN14SequentialFile11withDirPathEPKc>
}
   b8d14:	4620      	mov	r0, r4
   b8d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8d1a:	bf00      	nop
   b8d1c:	000bf36c 	.word	0x000bf36c
   b8d20:	000bf195 	.word	0x000bf195

000b8d24 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b8d24:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b8d26:	4d06      	ldr	r5, [pc, #24]	; (b8d40 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b8d28:	682b      	ldr	r3, [r5, #0]
   b8d2a:	b93b      	cbnz	r3, b8d3c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b8d2c:	20d0      	movs	r0, #208	; 0xd0
   b8d2e:	f7fb fec8 	bl	b4ac2 <_Znwj>
   b8d32:	4604      	mov	r4, r0
   b8d34:	b108      	cbz	r0, b8d3a <_ZN17PublishQueuePosix8instanceEv+0x16>
   b8d36:	f7ff ff9d 	bl	b8c74 <_ZN17PublishQueuePosixC1Ev>
   b8d3a:	602c      	str	r4, [r5, #0]
}
   b8d3c:	6828      	ldr	r0, [r5, #0]
   b8d3e:	bd38      	pop	{r3, r4, r5, pc}
   b8d40:	2003e5fc 	.word	0x2003e5fc

000b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b8d44:	6942      	ldr	r2, [r0, #20]
   b8d46:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8d48:	1a9b      	subs	r3, r3, r2
   b8d4a:	109b      	asrs	r3, r3, #2
   b8d4c:	1e5a      	subs	r2, r3, #1
   b8d4e:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b8d52:	1a5b      	subs	r3, r3, r1
   b8d54:	109b      	asrs	r3, r3, #2
   b8d56:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b8d5a:	6902      	ldr	r2, [r0, #16]
   b8d5c:	6880      	ldr	r0, [r0, #8]
   b8d5e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b8d60:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b8d64:	4770      	bx	lr

000b8d66 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b8d66:	b538      	push	{r3, r4, r5, lr}
   b8d68:	4605      	mov	r5, r0
   b8d6a:	f7ff feca 	bl	b8b02 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b8d6e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b8d72:	f7ff ffe7 	bl	b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b8d76:	4604      	mov	r4, r0
   b8d78:	b950      	cbnz	r0, b8d90 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b8d7a:	1d28      	adds	r0, r5, #4
   b8d7c:	f000 ff94 	bl	b9ca8 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b8d80:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b8d84:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b8d86:	b11b      	cbz	r3, b8d90 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b8d88:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b8d8c:	b903      	cbnz	r3, b8d90 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b8d8e:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b8d90:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b8d92:	f001 f9bf 	bl	ba114 <os_mutex_recursive_unlock>
}
   b8d96:	4620      	mov	r0, r4
   b8d98:	bd38      	pop	{r3, r4, r5, pc}

000b8d9a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b8d9a:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b8d9c:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b8d9e:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b8da0:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b8da2:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b8da4:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b8da6:	d002      	beq.n	b8dae <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b8da8:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b8daa:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b8dac:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8dae:	68c0      	ldr	r0, [r0, #12]
   b8db0:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8db4:	f7fb fe89 	bl	b4aca <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b8db8:	6963      	ldr	r3, [r4, #20]
   b8dba:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8dbc:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b8dbe:	685b      	ldr	r3, [r3, #4]
   b8dc0:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8dc2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8dc6:	6122      	str	r2, [r4, #16]
   b8dc8:	e7ef      	b.n	b8daa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b8dcc <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b8dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8dd0:	b085      	sub	sp, #20
   b8dd2:	4604      	mov	r4, r0
   b8dd4:	f7ff fe95 	bl	b8b02 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b8dd8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8e80 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b8ddc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b8e84 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b8de0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b8e88 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b8de4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b8de8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b8dec:	4293      	cmp	r3, r2
   b8dee:	d105      	bne.n	b8dfc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b8df0:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b8df2:	b005      	add	sp, #20
   b8df4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8df8:	f001 b98c 	b.w	ba114 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b8dfc:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b8e00:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b8e04:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b8e06:	f7ff ffc8 	bl	b8d9a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b8e0a:	4640      	mov	r0, r8
   b8e0c:	f000 fef0 	bl	b9bf0 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8e10:	2300      	movs	r3, #0
   b8e12:	4602      	mov	r2, r0
   b8e14:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b8e16:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8e18:	4668      	mov	r0, sp
   b8e1a:	f000 fcf1 	bl	b9800 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b8e1e:	9800      	ldr	r0, [sp, #0]
   b8e20:	f240 2102 	movw	r1, #514	; 0x202
   b8e24:	f005 f9aa 	bl	be17c <open>
   b8e28:	4605      	mov	r5, r0
   b8e2a:	4668      	mov	r0, sp
   b8e2c:	f003 ffa8 	bl	bcd80 <_ZN6StringD1Ev>
            if (fd) {
   b8e30:	b1c5      	cbz	r5, b8e64 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b8e32:	2208      	movs	r2, #8
   b8e34:	4669      	mov	r1, sp
   b8e36:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b8e38:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b8e3c:	f005 f9c4 	bl	be1c8 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b8e40:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b8e44:	f7fb fdfa 	bl	b4a3c <strlen>
   b8e48:	4639      	mov	r1, r7
   b8e4a:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b8e4e:	4628      	mov	r0, r5
   b8e50:	f005 f9ba 	bl	be1c8 <write>
                close(fd);
   b8e54:	4628      	mov	r0, r5
   b8e56:	f005 f977 	bl	be148 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b8e5a:	4808      	ldr	r0, [pc, #32]	; (b8e7c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b8e5c:	4632      	mov	r2, r6
   b8e5e:	4659      	mov	r1, fp
   b8e60:	f7fe f832 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b8e64:	4631      	mov	r1, r6
   b8e66:	4640      	mov	r0, r8
   b8e68:	f000 ff04 	bl	b9c74 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b8e6c:	2f00      	cmp	r7, #0
   b8e6e:	d0b9      	beq.n	b8de4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b8e70:	2143      	movs	r1, #67	; 0x43
   b8e72:	4638      	mov	r0, r7
   b8e74:	f7fb fe29 	bl	b4aca <_ZdlPvj>
   b8e78:	e7b2      	b.n	b8de0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b8e7a:	bf00      	nop
   b8e7c:	2003e5f8 	.word	0x2003e5f8
   b8e80:	31b67663 	.word	0x31b67663
   b8e84:	00410801 	.word	0x00410801
   b8e88:	000bf1a3 	.word	0x000bf1a3

000b8e8c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b8e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e90:	4604      	mov	r4, r0
   b8e92:	f7ff fe36 	bl	b8b02 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b8e96:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8e9a:	f7ff ff53 	bl	b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8e9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8ea0:	4298      	cmp	r0, r3
   b8ea2:	d902      	bls.n	b8eaa <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b8ea4:	4620      	mov	r0, r4
   b8ea6:	f7ff ff91 	bl	b8dcc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b8eaa:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8ef0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b8eae:	4f0f      	ldr	r7, [pc, #60]	; (b8eec <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b8eb0:	1d26      	adds	r6, r4, #4
   b8eb2:	4630      	mov	r0, r6
   b8eb4:	f000 fef8 	bl	b9ca8 <_ZNK14SequentialFile11getQueueLenEv>
   b8eb8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b8eba:	4298      	cmp	r0, r3
   b8ebc:	dc04      	bgt.n	b8ec8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b8ebe:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b8ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8ec4:	f001 b926 	b.w	ba114 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b8ec8:	2101      	movs	r1, #1
   b8eca:	4630      	mov	r0, r6
   b8ecc:	f000 fe9c 	bl	b9c08 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b8ed0:	4605      	mov	r5, r0
   b8ed2:	2800      	cmp	r0, #0
   b8ed4:	d0ed      	beq.n	b8eb2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b8ed6:	4601      	mov	r1, r0
   b8ed8:	2200      	movs	r2, #0
   b8eda:	4630      	mov	r0, r6
   b8edc:	f000 fccc 	bl	b9878 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b8ee0:	462a      	mov	r2, r5
   b8ee2:	4641      	mov	r1, r8
   b8ee4:	4638      	mov	r0, r7
   b8ee6:	f7fb fe5e 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
   b8eea:	e7e2      	b.n	b8eb2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b8eec:	2003e5f8 	.word	0x2003e5f8
   b8ef0:	000bf1c0 	.word	0x000bf1c0

000b8ef4 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b8ef4:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b8ef6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8efa:	430b      	orrs	r3, r1
   b8efc:	d005      	beq.n	b8f0a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b8efe:	3840      	subs	r0, #64	; 0x40
   b8f00:	ea50 0301 	orrs.w	r3, r0, r1
   b8f04:	d10b      	bne.n	b8f1e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b8f06:	2a09      	cmp	r2, #9
   b8f08:	d109      	bne.n	b8f1e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b8f0a:	4905      	ldr	r1, [pc, #20]	; (b8f20 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b8f0c:	4805      	ldr	r0, [pc, #20]	; (b8f24 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b8f0e:	f7fd ffdb 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b8f12:	f7ff ff07 	bl	b8d24 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b8f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b8f1a:	f7ff bf57 	b.w	b8dcc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b8f1e:	bd08      	pop	{r3, pc}
   b8f20:	000bf1d3 	.word	0x000bf1d3
   b8f24:	2003e5f8 	.word	0x2003e5f8

000b8f28 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8f28:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b8f2a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8f2c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b8f2e:	b183      	cbz	r3, b8f52 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b8f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8f32:	6945      	ldr	r5, [r0, #20]
   b8f34:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b8f36:	42ae      	cmp	r6, r5
   b8f38:	d906      	bls.n	b8f48 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b8f3a:	f855 0b04 	ldr.w	r0, [r5], #4
   b8f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8f42:	f7fb fdc2 	bl	b4aca <_ZdlPvj>
   b8f46:	e7f6      	b.n	b8f36 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b8f48:	6861      	ldr	r1, [r4, #4]
   b8f4a:	6820      	ldr	r0, [r4, #0]
   b8f4c:	0089      	lsls	r1, r1, #2
   b8f4e:	f7fb fdbc 	bl	b4aca <_ZdlPvj>
    }
   b8f52:	4620      	mov	r0, r4
   b8f54:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8f58 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b8f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8f5a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b8f5e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b8f60:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8f62:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8f64:	b90a      	cbnz	r2, b8f6a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b8f66:	07d9      	lsls	r1, r3, #31
   b8f68:	d505      	bpl.n	b8f76 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8f6a:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b8f6e:	4b0a      	ldr	r3, [pc, #40]	; (b8f98 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b8f70:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8f72:	4b0a      	ldr	r3, [pc, #40]	; (b8f9c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8f74:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b8f76:	4621      	mov	r1, r4
   b8f78:	4668      	mov	r0, sp
   b8f7a:	f7fe fd1e 	bl	b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f7e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8f80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f82:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f84:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8f86:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8f88:	4668      	mov	r0, sp
   b8f8a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f8c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8f8e:	9203      	str	r2, [sp, #12]
   b8f90:	f7fb fdf4 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	}
   b8f94:	b004      	add	sp, #16
   b8f96:	bd10      	pop	{r4, pc}
   b8f98:	000b8ab9 	.word	0x000b8ab9
   b8f9c:	000b8ad7 	.word	0x000b8ad7

000b8fa0 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b8fa0:	b570      	push	{r4, r5, r6, lr}
   b8fa2:	b086      	sub	sp, #24
   b8fa4:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8fa6:	f001 fbb1 	bl	ba70c <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b8faa:	b948      	cbnz	r0, b8fc0 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b8fac:	4b48      	ldr	r3, [pc, #288]	; (b90d0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b8fae:	a902      	add	r1, sp, #8
   b8fb0:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b8fb4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8fb8:	f7ff ffce 	bl	b8f58 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8fbc:	b006      	add	sp, #24
   b8fbe:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b8fc0:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b8fc4:	b11d      	cbz	r5, b8fce <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b8fc6:	2301      	movs	r3, #1
   b8fc8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b8fcc:	e7f6      	b.n	b8fbc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b8fce:	f001 f8d9 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b8fd2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8fd6:	1ac0      	subs	r0, r0, r3
   b8fd8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8fdc:	4298      	cmp	r0, r3
   b8fde:	d208      	bcs.n	b8ff2 <_ZN17PublishQueuePosix9stateWaitEv+0x52>
        canSleep = (getNumEvents() == 0);
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	f7ff fec0 	bl	b8d66 <_ZN17PublishQueuePosix12getNumEventsEv>
   b8fe6:	fab0 f080 	clz	r0, r0
   b8fea:	0940      	lsrs	r0, r0, #5
   b8fec:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        return;
   b8ff0:	e7e4      	b.n	b8fbc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b8ff2:	1d26      	adds	r6, r4, #4
   b8ff4:	4629      	mov	r1, r5
   b8ff6:	4630      	mov	r0, r6
   b8ff8:	f000 fe06 	bl	b9c08 <_ZN14SequentialFile16getFileFromQueueEb>
   b8ffc:	4601      	mov	r1, r0
   b8ffe:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b9002:	2800      	cmp	r0, #0
   b9004:	d052      	beq.n	b90ac <_ZN17PublishQueuePosix9stateWaitEv+0x10c>
        curEvent = readQueueFile(curFileNum);
   b9006:	4620      	mov	r0, r4
   b9008:	f7ff fdb0 	bl	b8b6c <_ZN17PublishQueuePosix13readQueueFileEi>
   b900c:	4605      	mov	r5, r0
   b900e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b9012:	2800      	cmp	r0, #0
   b9014:	d035      	beq.n	b9082 <_ZN17PublishQueuePosix9stateWaitEv+0xe2>
   b9016:	f001 f8b5 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b901a:	ae02      	add	r6, sp, #8
   b901c:	2500      	movs	r5, #0
   b901e:	4b2d      	ldr	r3, [pc, #180]	; (b90d4 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
        stateTime = millis();
   b9020:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b9024:	4631      	mov	r1, r6
   b9026:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b902a:	9302      	str	r3, [sp, #8]
   b902c:	9503      	str	r5, [sp, #12]
   b902e:	f7ff ff93 	bl	b8f58 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9032:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b9036:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b903a:	9200      	str	r2, [sp, #0]
   b903c:	4926      	ldr	r1, [pc, #152]	; (b90d8 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
   b903e:	4a27      	ldr	r2, [pc, #156]	; (b90dc <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
        publishComplete = false;
   b9040:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9044:	42a8      	cmp	r0, r5
   b9046:	bf08      	it	eq
   b9048:	460a      	moveq	r2, r1
   b904a:	3301      	adds	r3, #1
   b904c:	4924      	ldr	r1, [pc, #144]	; (b90e0 <_ZN17PublishQueuePosix9stateWaitEv+0x140>)
   b904e:	4825      	ldr	r0, [pc, #148]	; (b90e4 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
        canSleep = false;
   b9050:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9054:	f7fd ff38 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b9058:	f7fe fbf2 	bl	b7840 <_ZN19BackgroundPublishRK8instanceEv>
   b905c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b9060:	4b21      	ldr	r3, [pc, #132]	; (b90e8 <_ZN17PublishQueuePosix9stateWaitEv+0x148>)
   b9062:	9305      	str	r3, [sp, #20]
   b9064:	e9cd 6500 	strd	r6, r5, [sp]
   b9068:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b906a:	4b20      	ldr	r3, [pc, #128]	; (b90ec <_ZN17PublishQueuePosix9stateWaitEv+0x14c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b906c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b906e:	9304      	str	r3, [sp, #16]
   b9070:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9074:	3242      	adds	r2, #66	; 0x42
   b9076:	f7fe fd2f 	bl	b7ad8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b907a:	4630      	mov	r0, r6
   b907c:	f7fb fd7e 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b9080:	e79c      	b.n	b8fbc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b9082:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b9086:	491a      	ldr	r1, [pc, #104]	; (b90f0 <_ZN17PublishQueuePosix9stateWaitEv+0x150>)
   b9088:	4816      	ldr	r0, [pc, #88]	; (b90e4 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
   b908a:	f7fb fd8c 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b908e:	2101      	movs	r1, #1
   b9090:	4630      	mov	r0, r6
   b9092:	f000 fdb9 	bl	b9c08 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b9096:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b909a:	462a      	mov	r2, r5
   b909c:	4630      	mov	r0, r6
   b909e:	f000 fbeb 	bl	b9878 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b90a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b90a6:	2b00      	cmp	r3, #0
   b90a8:	d1b5      	bne.n	b9016 <_ZN17PublishQueuePosix9stateWaitEv+0x76>
   b90aa:	e78c      	b.n	b8fc6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b90ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b90b0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b90b4:	429a      	cmp	r2, r3
   b90b6:	d007      	beq.n	b90c8 <_ZN17PublishQueuePosix9stateWaitEv+0x128>
            curEvent = ramQueue.front();
   b90b8:	681b      	ldr	r3, [r3, #0]
   b90ba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b90be:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b90c2:	f7ff fe6a 	bl	b8d9a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b90c6:	e7ec      	b.n	b90a2 <_ZN17PublishQueuePosix9stateWaitEv+0x102>
            curEvent = NULL;
   b90c8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b90cc:	e77b      	b.n	b8fc6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b90ce:	bf00      	nop
   b90d0:	000b90f5 	.word	0x000b90f5
   b90d4:	000b946d 	.word	0x000b946d
   b90d8:	000bf202 	.word	0x000bf202
   b90dc:	000bf468 	.word	0x000bf468
   b90e0:	000bf223 	.word	0x000bf223
   b90e4:	2003e5f8 	.word	0x2003e5f8
   b90e8:	000b8aa9 	.word	0x000b8aa9
   b90ec:	000b8aef 	.word	0x000b8aef
   b90f0:	000bf206 	.word	0x000bf206

000b90f4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b90f4:	b513      	push	{r0, r1, r4, lr}
    canSleep = (pausePublishing || getNumEvents() == 0);
   b90f6:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
void PublishQueuePosix::stateConnectWait() {
   b90fa:	4604      	mov	r4, r0
    canSleep = (pausePublishing || getNumEvents() == 0);
   b90fc:	b923      	cbnz	r3, b9108 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x14>
   b90fe:	f7ff fe32 	bl	b8d66 <_ZN17PublishQueuePosix12getNumEventsEv>
   b9102:	fab0 f380 	clz	r3, r0
   b9106:	095b      	lsrs	r3, r3, #5
   b9108:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b910c:	f001 fafe 	bl	ba70c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b9110:	b180      	cbz	r0, b9134 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x40>
   b9112:	f001 f837 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b9116:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b911a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b911e:	4b06      	ldr	r3, [pc, #24]	; (b9138 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x44>)
        stateTime = millis();
   b9120:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b9124:	9300      	str	r3, [sp, #0]
   b9126:	4669      	mov	r1, sp
   b9128:	2300      	movs	r3, #0
   b912a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b912e:	9301      	str	r3, [sp, #4]
   b9130:	f7ff ff12 	bl	b8f58 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9134:	b002      	add	sp, #8
   b9136:	bd10      	pop	{r4, pc}
   b9138:	000b8fa1 	.word	0x000b8fa1

000b913c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b913c:	b570      	push	{r4, r5, r6, lr}
   b913e:	4605      	mov	r5, r0
   b9140:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b9142:	2000      	movs	r0, #0
   b9144:	f001 fa88 	bl	ba658 <system_thread_get_state>
   b9148:	2801      	cmp	r0, #1
   b914a:	d005      	beq.n	b9158 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b914c:	493e      	ldr	r1, [pc, #248]	; (b9248 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b914e:	483f      	ldr	r0, [pc, #252]	; (b924c <_ZN17PublishQueuePosix5setupEv+0x110>)
   b9150:	f7fd feac 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
}
   b9154:	b018      	add	sp, #96	; 0x60
   b9156:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b9158:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b915c:	f000 ffc2 	bl	ba0e4 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9160:	4b3b      	ldr	r3, [pc, #236]	; (b9250 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b9162:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b9164:	4b3b      	ldr	r3, [pc, #236]	; (b9254 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b9166:	9307      	str	r3, [sp, #28]
        };
   b9168:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b916a:	4b3b      	ldr	r3, [pc, #236]	; (b9258 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b916c:	9306      	str	r3, [sp, #24]
   b916e:	a808      	add	r0, sp, #32
   b9170:	f7fb fd7a 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b9174:	a908      	add	r1, sp, #32
   b9176:	a80c      	add	r0, sp, #48	; 0x30
   b9178:	f7fb fd76 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b917c:	a90c      	add	r1, sp, #48	; 0x30
   b917e:	a810      	add	r0, sp, #64	; 0x40
   b9180:	f7fb fd72 	bl	b4c68 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b9184:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9186:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b9188:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b918a:	f7fb fc9a 	bl	b4ac2 <_Znwj>
   b918e:	4604      	mov	r4, r0
   b9190:	b160      	cbz	r0, b91ac <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b9192:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9194:	4601      	mov	r1, r0
   b9196:	a810      	add	r0, sp, #64	; 0x40
   b9198:	f7fe fc0f 	bl	b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b919c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b919e:	68a2      	ldr	r2, [r4, #8]
   b91a0:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b91a2:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b91a4:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b91a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b91a8:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b91aa:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b91ac:	4b2b      	ldr	r3, [pc, #172]	; (b925c <_ZN17PublishQueuePosix5setupEv+0x120>)
   b91ae:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b91b0:	4b2b      	ldr	r3, [pc, #172]	; (b9260 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b91b2:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b91b4:	4b2b      	ldr	r3, [pc, #172]	; (b9264 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b91b6:	9414      	str	r4, [sp, #80]	; 0x50
   b91b8:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b91ba:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b91bc:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b91c0:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b91c2:	f7fb fc7e 	bl	b4ac2 <_Znwj>
   b91c6:	4604      	mov	r4, r0
   b91c8:	b1d8      	cbz	r0, b9202 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b91ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b91cc:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b91ce:	b133      	cbz	r3, b91de <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b91d0:	2202      	movs	r2, #2
   b91d2:	a914      	add	r1, sp, #80	; 0x50
   b91d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b91d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b91d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b91da:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b91dc:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b91de:	4b22      	ldr	r3, [pc, #136]	; (b9268 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b91e0:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b91e2:	4a22      	ldr	r2, [pc, #136]	; (b926c <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b91e4:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b91e6:	ab01      	add	r3, sp, #4
   b91e8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b91ec:	2100      	movs	r1, #0
   b91ee:	f001 fa13 	bl	ba618 <system_subscribe_event>
        if (r) {
   b91f2:	b130      	cbz	r0, b9202 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b91f4:	4620      	mov	r0, r4
   b91f6:	f7fb fcc1 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b91fa:	2110      	movs	r1, #16
   b91fc:	4620      	mov	r0, r4
   b91fe:	f7fb fc64 	bl	b4aca <_ZdlPvj>
   b9202:	a814      	add	r0, sp, #80	; 0x50
   b9204:	f7fb fcba 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b9208:	a810      	add	r0, sp, #64	; 0x40
   b920a:	f7fb fcb7 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b920e:	a80c      	add	r0, sp, #48	; 0x30
   b9210:	f7fb fcb4 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b9214:	a808      	add	r0, sp, #32
   b9216:	f7fb fcb1 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   b921a:	a804      	add	r0, sp, #16
   b921c:	f7fb fcae 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b9220:	f7fe fb0e 	bl	b7840 <_ZN19BackgroundPublishRK8instanceEv>
   b9224:	f7fe fc32 	bl	b7a8c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b9228:	1d28      	adds	r0, r5, #4
   b922a:	f000 fc69 	bl	b9b00 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b922e:	4628      	mov	r0, r5
   b9230:	f7ff fe2c 	bl	b8e8c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b9234:	4b0e      	ldr	r3, [pc, #56]	; (b9270 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b9236:	9314      	str	r3, [sp, #80]	; 0x50
   b9238:	a914      	add	r1, sp, #80	; 0x50
   b923a:	2300      	movs	r3, #0
   b923c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b9240:	9315      	str	r3, [sp, #84]	; 0x54
   b9242:	f7ff fe89 	bl	b8f58 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9246:	e785      	b.n	b9154 <_ZN17PublishQueuePosix5setupEv+0x18>
   b9248:	000bf242 	.word	0x000bf242
   b924c:	2003e5f8 	.word	0x2003e5f8
   b9250:	000b8ef5 	.word	0x000b8ef5
   b9254:	000b4b73 	.word	0x000b4b73
   b9258:	000b4b5f 	.word	0x000b4b5f
   b925c:	000b4b39 	.word	0x000b4b39
   b9260:	000b4d91 	.word	0x000b4d91
   b9264:	000c0002 	.word	0x000c0002
   b9268:	000b4b8f 	.word	0x000b4b8f
   b926c:	000b4b11 	.word	0x000b4b11
   b9270:	000b90f5 	.word	0x000b90f5

000b9274 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b9274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9278:	4606      	mov	r6, r0
   b927a:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b927c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b927e:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9280:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9282:	1a47      	subs	r7, r0, r1
   b9284:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b9288:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b928a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b928e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9290:	d927      	bls.n	b92e2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b9292:	1b5d      	subs	r5, r3, r5
   b9294:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9296:	6832      	ldr	r2, [r6, #0]
   b9298:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b929a:	b10c      	cbz	r4, b92a0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b929c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b92a0:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b92a2:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b92a4:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b92a6:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b92a8:	eba3 0201 	sub.w	r2, r3, r1
   b92ac:	d913      	bls.n	b92d6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b92ae:	4299      	cmp	r1, r3
   b92b0:	d002      	beq.n	b92b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b92b2:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b92b4:	f004 fdc8 	bl	bde48 <memmove>
	_M_node = __new_node;
   b92b8:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b92ba:	6823      	ldr	r3, [r4, #0]
   b92bc:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b92be:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b92c2:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b92c4:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b92c6:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b92c8:	59e3      	ldr	r3, [r4, r7]
   b92ca:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b92cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b92d0:	6233      	str	r3, [r6, #32]
    }
   b92d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b92d6:	4299      	cmp	r1, r3
   b92d8:	d0ee      	beq.n	b92b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b92da:	1d38      	adds	r0, r7, #4
   b92dc:	1a80      	subs	r0, r0, r2
   b92de:	4420      	add	r0, r4
   b92e0:	e7e8      	b.n	b92b4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b92e2:	f103 0802 	add.w	r8, r3, #2
   b92e6:	454b      	cmp	r3, r9
   b92e8:	bf2c      	ite	cs
   b92ea:	4498      	addcs	r8, r3
   b92ec:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b92ee:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b92f2:	d301      	bcc.n	b92f8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b92f4:	f004 fc34 	bl	bdb60 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b92f8:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b92fc:	f7fb fbe1 	bl	b4ac2 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9300:	eba8 0505 	sub.w	r5, r8, r5
   b9304:	086d      	lsrs	r5, r5, #1
   b9306:	4682      	mov	sl, r0
   b9308:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b930a:	b10c      	cbz	r4, b9310 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b930c:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b9310:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b9312:	6971      	ldr	r1, [r6, #20]
   b9314:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b9316:	442c      	add	r4, r5
	  if (_Num)
   b9318:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b931a:	4454      	add	r4, sl
   b931c:	d003      	beq.n	b9326 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b931e:	1a52      	subs	r2, r2, r1
   b9320:	4620      	mov	r0, r4
   b9322:	f004 fd91 	bl	bde48 <memmove>
	::operator delete(__p
   b9326:	6871      	ldr	r1, [r6, #4]
   b9328:	6830      	ldr	r0, [r6, #0]
   b932a:	0089      	lsls	r1, r1, #2
   b932c:	f7fb fbcd 	bl	b4aca <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b9330:	e9c6 a800 	strd	sl, r8, [r6]
   b9334:	e7c0      	b.n	b92b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b9338 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9338:	b5f0      	push	{r4, r5, r6, r7, lr}
   b933a:	b085      	sub	sp, #20
   b933c:	4604      	mov	r4, r0
   b933e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b9342:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9346:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9348:	460f      	mov	r7, r1
   b934a:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b934c:	f7ff fbe6 	bl	b8b1c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b9350:	4605      	mov	r5, r0
   b9352:	2800      	cmp	r0, #0
   b9354:	d03c      	beq.n	b93d0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b9356:	4b3f      	ldr	r3, [pc, #252]	; (b9454 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b9358:	493f      	ldr	r1, [pc, #252]	; (b9458 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b935a:	4840      	ldr	r0, [pc, #256]	; (b945c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b935c:	2e00      	cmp	r6, #0
   b935e:	bf18      	it	ne
   b9360:	4633      	movne	r3, r6
   b9362:	463a      	mov	r2, r7
   b9364:	f7fd fdb0 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
   b9368:	4620      	mov	r0, r4
   b936a:	f7ff fbca 	bl	b8b02 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b936e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b9372:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b9376:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b9378:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b937a:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b937e:	d029      	beq.n	b93d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9380:	b103      	cbz	r3, b9384 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b9382:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b9384:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b9388:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b938a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b938c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b9390:	4628      	mov	r0, r5
   b9392:	f000 fc89 	bl	b9ca8 <_ZNK14SequentialFile11getQueueLenEv>
   b9396:	9003      	str	r0, [sp, #12]
   b9398:	4630      	mov	r0, r6
   b939a:	f7ff fcd3 	bl	b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b939e:	9002      	str	r0, [sp, #8]
   b93a0:	f001 f9b4 	bl	ba70c <spark_cloud_flag_connected>
   b93a4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b93a8:	9000      	str	r0, [sp, #0]
   b93aa:	492d      	ldr	r1, [pc, #180]	; (b9460 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b93ac:	482b      	ldr	r0, [pc, #172]	; (b945c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b93ae:	f7fd fd8b 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b93b2:	4628      	mov	r0, r5
   b93b4:	f000 fc78 	bl	b9ca8 <_ZNK14SequentialFile11getQueueLenEv>
   b93b8:	2800      	cmp	r0, #0
   b93ba:	d03b      	beq.n	b9434 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b93bc:	4620      	mov	r0, r4
   b93be:	f7ff fd05 	bl	b8dcc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b93c2:	4620      	mov	r0, r4
   b93c4:	f7ff fd62 	bl	b8e8c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b93c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b93ca:	f000 fea3 	bl	ba114 <os_mutex_recursive_unlock>
    return true;
   b93ce:	2001      	movs	r0, #1
}
   b93d0:	b005      	add	sp, #20
   b93d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b93d4:	4630      	mov	r0, r6
   b93d6:	f7ff fcb5 	bl	b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b93da:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b93de:	4298      	cmp	r0, r3
   b93e0:	d102      	bne.n	b93e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b93e2:	4820      	ldr	r0, [pc, #128]	; (b9464 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b93e4:	f004 fbbf 	bl	bdb66 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b93e8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b93ec:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b93ee:	1a9a      	subs	r2, r3, r2
   b93f0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b93f2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b93f6:	2b01      	cmp	r3, #1
   b93f8:	d804      	bhi.n	b9404 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b93fa:	2200      	movs	r2, #0
   b93fc:	2101      	movs	r1, #1
   b93fe:	4630      	mov	r0, r6
   b9400:	f7ff ff38 	bl	b9274 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9404:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b9408:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b940c:	f7fb fb59 	bl	b4ac2 <_Znwj>
   b9410:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b9412:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9416:	b103      	cbz	r3, b941a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b9418:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b941a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b941e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9420:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b9424:	685b      	ldr	r3, [r3, #4]
   b9426:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b942a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b942e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b9432:	e7aa      	b.n	b938a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9434:	4630      	mov	r0, r6
   b9436:	f7ff fc85 	bl	b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b943a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b943c:	4298      	cmp	r0, r3
   b943e:	d8bd      	bhi.n	b93bc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b9440:	f001 f964 	bl	ba70c <spark_cloud_flag_connected>
   b9444:	2800      	cmp	r0, #0
   b9446:	d0b9      	beq.n	b93bc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b9448:	4907      	ldr	r1, [pc, #28]	; (b9468 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b944a:	4804      	ldr	r0, [pc, #16]	; (b945c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b944c:	f7fd fd3c 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
   b9450:	e7b7      	b.n	b93c2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b9452:	bf00      	nop
   b9454:	000bf6ed 	.word	0x000bf6ed
   b9458:	000bf265 	.word	0x000bf265
   b945c:	2003e5f8 	.word	0x2003e5f8
   b9460:	000bf2bd 	.word	0x000bf2bd
   b9464:	000bf28d 	.word	0x000bf28d
   b9468:	000bf2e9 	.word	0x000bf2e9

000b946c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b946c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b946e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b9472:	4604      	mov	r4, r0
    if (!publishComplete) {
   b9474:	2b00      	cmp	r3, #0
   b9476:	d041      	beq.n	b94fc <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b9478:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b947c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b9480:	2b00      	cmp	r3, #0
   b9482:	d03d      	beq.n	b9500 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b9484:	4950      	ldr	r1, [pc, #320]	; (b95c8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b9486:	4851      	ldr	r0, [pc, #324]	; (b95cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9488:	f7fd fd1e 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b948c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9490:	b1d3      	cbz	r3, b94c8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b9492:	1d26      	adds	r6, r4, #4
   b9494:	2100      	movs	r1, #0
   b9496:	4630      	mov	r0, r6
   b9498:	f000 fbb6 	bl	b9c08 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b949c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b94a0:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b94a2:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b94a4:	d10d      	bne.n	b94c2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b94a6:	2101      	movs	r1, #1
   b94a8:	4630      	mov	r0, r6
   b94aa:	f000 fbad 	bl	b9c08 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b94ae:	2200      	movs	r2, #0
   b94b0:	4629      	mov	r1, r5
   b94b2:	4630      	mov	r0, r6
   b94b4:	f000 f9e0 	bl	b9878 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b94b8:	4945      	ldr	r1, [pc, #276]	; (b95d0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b94ba:	4844      	ldr	r0, [pc, #272]	; (b95cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b94bc:	462a      	mov	r2, r5
   b94be:	f7fd fd03 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b94c2:	2300      	movs	r3, #0
   b94c4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b94c8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b94cc:	b110      	cbz	r0, b94d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b94ce:	2143      	movs	r1, #67	; 0x43
   b94d0:	f7fb fafb 	bl	b4aca <_ZdlPvj>
        curEvent = NULL;
   b94d4:	2300      	movs	r3, #0
   b94d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b94da:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b94de:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b94e2:	4b3c      	ldr	r3, [pc, #240]	; (b95d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b94e4:	9300      	str	r3, [sp, #0]
   b94e6:	4669      	mov	r1, sp
   b94e8:	2300      	movs	r3, #0
   b94ea:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b94ee:	9301      	str	r3, [sp, #4]
   b94f0:	f7ff fd32 	bl	b8f58 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b94f4:	f000 fe46 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b94f8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b94fc:	b002      	add	sp, #8
   b94fe:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b9500:	4935      	ldr	r1, [pc, #212]	; (b95d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b9502:	4832      	ldr	r0, [pc, #200]	; (b95cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9504:	f7fd fce0 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b9508:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b950c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b9510:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9514:	b14b      	cbz	r3, b952a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b9516:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b951a:	b110      	cbz	r0, b9522 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b951c:	2143      	movs	r1, #67	; 0x43
   b951e:	f7fb fad4 	bl	b4aca <_ZdlPvj>
            curEvent = NULL;
   b9522:	2300      	movs	r3, #0
   b9524:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b9528:	e7db      	b.n	b94e2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b952a:	4620      	mov	r0, r4
   b952c:	f7ff fae9 	bl	b8b02 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b9530:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b9534:	4293      	cmp	r3, r2
   b9536:	d013      	beq.n	b9560 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b9538:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b953c:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b9540:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b9544:	3b04      	subs	r3, #4
   b9546:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b954a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b954c:	f000 fde2 	bl	ba114 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b9550:	4922      	ldr	r1, [pc, #136]	; (b95dc <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b9552:	481e      	ldr	r0, [pc, #120]	; (b95cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9554:	f7fd fcb8 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b9558:	4620      	mov	r0, r4
   b955a:	f7ff fc37 	bl	b8dcc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b955e:	e7c0      	b.n	b94e2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b9560:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b9564:	4628      	mov	r0, r5
   b9566:	f7ff fbed 	bl	b8d44 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b956a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b956e:	4298      	cmp	r0, r3
   b9570:	d102      	bne.n	b9578 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b9572:	481b      	ldr	r0, [pc, #108]	; (b95e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b9574:	f004 faf7 	bl	bdb66 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b9578:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b957c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b957e:	429a      	cmp	r2, r3
   b9580:	d104      	bne.n	b958c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b9582:	2201      	movs	r2, #1
   b9584:	4611      	mov	r1, r2
   b9586:	4628      	mov	r0, r5
   b9588:	f7ff fe74 	bl	b9274 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b958c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b9590:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b9594:	f7fb fa95 	bl	b4ac2 <_Znwj>
   b9598:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b959c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b95a0:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b95a2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b95a6:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b95aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b95ae:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b95b2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b95b6:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b95ba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b95be:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b95c2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b95c6:	e7c0      	b.n	b954a <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b95c8:	000bf2fc 	.word	0x000bf2fc
   b95cc:	2003e5f8 	.word	0x2003e5f8
   b95d0:	000bf30f 	.word	0x000bf30f
   b95d4:	000b8fa1 	.word	0x000b8fa1
   b95d8:	000bf31f 	.word	0x000bf31f
   b95dc:	000bf331 	.word	0x000bf331
   b95e0:	000bf28d 	.word	0x000bf28d

000b95e4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b95e4:	4b01      	ldr	r3, [pc, #4]	; (b95ec <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b95e6:	4a02      	ldr	r2, [pc, #8]	; (b95f0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b95e8:	601a      	str	r2, [r3, #0]
}
   b95ea:	4770      	bx	lr
   b95ec:	2003e5f8 	.word	0x2003e5f8
   b95f0:	000bf358 	.word	0x000bf358

000b95f4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b95f4:	b510      	push	{r4, lr}
   b95f6:	4b07      	ldr	r3, [pc, #28]	; (b9614 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b95f8:	4604      	mov	r4, r0
   b95fa:	f840 3bc0 	str.w	r3, [r0], #192
   b95fe:	f7fb fabd 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b9602:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9606:	f7ff fc8f 	bl	b8f28 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b960a:	1d20      	adds	r0, r4, #4
   b960c:	f000 f9b8 	bl	b9980 <_ZN14SequentialFileD1Ev>
}
   b9610:	4620      	mov	r0, r4
   b9612:	bd10      	pop	{r4, pc}
   b9614:	000bf36c 	.word	0x000bf36c

000b9618 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9618:	b510      	push	{r4, lr}
   b961a:	4604      	mov	r4, r0
}
   b961c:	f7ff ffea 	bl	b95f4 <_ZN17PublishQueuePosixD1Ev>
   b9620:	4620      	mov	r0, r4
   b9622:	21d0      	movs	r1, #208	; 0xd0
   b9624:	f7fb fa51 	bl	b4aca <_ZdlPvj>
   b9628:	4620      	mov	r0, r4
   b962a:	bd10      	pop	{r4, pc}

000b962c <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b962c:	2001      	movs	r0, #1
   b962e:	4770      	bx	lr

000b9630 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b9630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9632:	4d1f      	ldr	r5, [pc, #124]	; (b96b0 <_ZN14SequentialFileC1Ev+0x80>)
   b9634:	4b1f      	ldr	r3, [pc, #124]	; (b96b4 <_ZN14SequentialFileC1Ev+0x84>)
   b9636:	4604      	mov	r4, r0
   b9638:	4629      	mov	r1, r5
   b963a:	f840 3b04 	str.w	r3, [r0], #4
   b963e:	f003 fbea 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b9642:	491d      	ldr	r1, [pc, #116]	; (b96b8 <_ZN14SequentialFileC1Ev+0x88>)
   b9644:	f104 0014 	add.w	r0, r4, #20
   b9648:	f003 fbe5 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b964c:	4629      	mov	r1, r5
   b964e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9652:	f003 fbe0 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b9656:	2300      	movs	r3, #0
   b9658:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b965c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b9660:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b9664:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b9668:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b966c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9670:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9672:	2308      	movs	r3, #8
   b9674:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9676:	2020      	movs	r0, #32
   b9678:	f7fb fa23 	bl	b4ac2 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b967c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b967e:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9680:	3d01      	subs	r5, #1
   b9682:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b9684:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b9688:	4606      	mov	r6, r0
   b968a:	f44f 7000 	mov.w	r0, #512	; 0x200
   b968e:	f7fb fa18 	bl	b4ac2 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9692:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b9696:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b969a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b969e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b96a0:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b96a2:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b96a4:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b96a6:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b96a8:	6667      	str	r7, [r4, #100]	; 0x64

}
   b96aa:	4620      	mov	r0, r4
   b96ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b96ae:	bf00      	nop
   b96b0:	000bf6ed 	.word	0x000bf6ed
   b96b4:	000bf478 	.word	0x000bf478
   b96b8:	000bf378 	.word	0x000bf378

000b96bc <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b96bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b96be:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b96c0:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b96c2:	4628      	mov	r0, r5
   b96c4:	f003 fc06 	bl	bced4 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b96c8:	490e      	ldr	r1, [pc, #56]	; (b9704 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b96ca:	4668      	mov	r0, sp
   b96cc:	f003 fba3 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b96d0:	4669      	mov	r1, sp
   b96d2:	4628      	mov	r0, r5
   b96d4:	f003 fc7d 	bl	bcfd2 <_ZNK6String8endsWithERKS_>
   b96d8:	4606      	mov	r6, r0
   b96da:	4668      	mov	r0, sp
   b96dc:	f003 fb50 	bl	bcd80 <_ZN6StringD1Ev>
   b96e0:	b16e      	cbz	r6, b96fe <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b96e2:	68e3      	ldr	r3, [r4, #12]
   b96e4:	2200      	movs	r2, #0
   b96e6:	3b01      	subs	r3, #1
   b96e8:	4629      	mov	r1, r5
   b96ea:	4668      	mov	r0, sp
   b96ec:	f003 fc9e 	bl	bd02c <_ZNK6String9substringEjj>
   b96f0:	4669      	mov	r1, sp
   b96f2:	4628      	mov	r0, r5
   b96f4:	f003 fbe6 	bl	bcec4 <_ZN6StringaSEOS_>
   b96f8:	4668      	mov	r0, sp
   b96fa:	f003 fb41 	bl	bcd80 <_ZN6StringD1Ev>
    }
    return *this; 
};
   b96fe:	4620      	mov	r0, r4
   b9700:	b004      	add	sp, #16
   b9702:	bd70      	pop	{r4, r5, r6, pc}
   b9704:	000bf37d 	.word	0x000bf37d

000b9708 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b9708:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b970a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b970c:	4604      	mov	r4, r0
    if (!queueMutex) {
   b970e:	b913      	cbnz	r3, b9716 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b9710:	303c      	adds	r0, #60	; 0x3c
   b9712:	f000 fccf 	bl	ba0b4 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b9716:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b9718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b971c:	f000 bcd2 	b.w	ba0c4 <os_mutex_lock>

000b9720 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b9720:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9722:	f000 bcd7 	b.w	ba0d4 <os_mutex_unlock>
	...

000b9728 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9728:	b510      	push	{r4, lr}
   b972a:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b972c:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b972e:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b9730:	f000 fe50 	bl	ba3d4 <stat>
    if (result == 0) {
   b9734:	b9d0      	cbnz	r0, b976c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9736:	9b01      	ldr	r3, [sp, #4]
   b9738:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b973a:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b973c:	d506      	bpl.n	b974c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b973e:	4915      	ldr	r1, [pc, #84]	; (b9794 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b9740:	4815      	ldr	r0, [pc, #84]	; (b9798 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9742:	f7fb fa30 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b9746:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b9748:	b016      	add	sp, #88	; 0x58
   b974a:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b974c:	4812      	ldr	r0, [pc, #72]	; (b9798 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b974e:	4913      	ldr	r1, [pc, #76]	; (b979c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b9750:	f7fd fbac 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b9754:	4620      	mov	r0, r4
   b9756:	f004 fd2f 	bl	be1b8 <unlink>
    result = mkdir(path, 0777);
   b975a:	f240 11ff 	movw	r1, #511	; 0x1ff
   b975e:	4620      	mov	r0, r4
   b9760:	f000 fe40 	bl	ba3e4 <mkdir>
    if (result == 0) {
   b9764:	b980      	cbnz	r0, b9788 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b9766:	490e      	ldr	r1, [pc, #56]	; (b97a0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b9768:	4622      	mov	r2, r4
   b976a:	e7e9      	b.n	b9740 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b976c:	f001 f8ce 	bl	ba90c <__errno>
   b9770:	6803      	ldr	r3, [r0, #0]
   b9772:	2b02      	cmp	r3, #2
   b9774:	d0f1      	beq.n	b975a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b9776:	f001 f8c9 	bl	ba90c <__errno>
   b977a:	490a      	ldr	r1, [pc, #40]	; (b97a4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b977c:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b977e:	4806      	ldr	r0, [pc, #24]	; (b9798 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9780:	f7fd fb94 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b9784:	2000      	movs	r0, #0
   b9786:	e7df      	b.n	b9748 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b9788:	f001 f8c0 	bl	ba90c <__errno>
   b978c:	4906      	ldr	r1, [pc, #24]	; (b97a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b978e:	6802      	ldr	r2, [r0, #0]
   b9790:	e7f5      	b.n	b977e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b9792:	bf00      	nop
   b9794:	000bf38a 	.word	0x000bf38a
   b9798:	2003e600 	.word	0x2003e600
   b979c:	000bf3a7 	.word	0x000bf3a7
   b97a0:	000bf3d8 	.word	0x000bf3d8
   b97a4:	000bf3c4 	.word	0x000bf3c4
   b97a8:	000bf3e7 	.word	0x000bf3e7

000b97ac <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b97ac:	b538      	push	{r3, r4, r5, lr}
   b97ae:	4615      	mov	r5, r2
   b97b0:	4604      	mov	r4, r0
    String result = name;
   b97b2:	f003 fb30 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b97b6:	b14d      	cbz	r5, b97cc <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b97b8:	782b      	ldrb	r3, [r5, #0]
   b97ba:	b13b      	cbz	r3, b97cc <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
   b97bc:	4904      	ldr	r1, [pc, #16]	; (b97d0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b97be:	4620      	mov	r0, r4
   b97c0:	f003 fbb6 	bl	bcf30 <_ZN6String6concatEPKc>
   b97c4:	4629      	mov	r1, r5
   b97c6:	4620      	mov	r0, r4
   b97c8:	f003 fbb2 	bl	bcf30 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b97cc:	4620      	mov	r0, r4
   b97ce:	bd38      	pop	{r3, r4, r5, pc}
   b97d0:	000bf7e8 	.word	0x000bf7e8

000b97d4 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b97d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b97d6:	4605      	mov	r5, r0
   b97d8:	460e      	mov	r6, r1
   b97da:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b97dc:	6949      	ldr	r1, [r1, #20]
   b97de:	4668      	mov	r0, sp
   b97e0:	f003 fc44 	bl	bd06c <_ZN6String6formatEPKcz>
    const char * c_str() const { return buffer; }
   b97e4:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b97e6:	b904      	cbnz	r4, b97ea <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b97e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b97ea:	4622      	mov	r2, r4
   b97ec:	4628      	mov	r0, r5
   b97ee:	f7ff ffdd 	bl	b97ac <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b97f2:	4668      	mov	r0, sp
   b97f4:	f003 fac4 	bl	bcd80 <_ZN6StringD1Ev>
}
   b97f8:	4628      	mov	r0, r5
   b97fa:	b004      	add	sp, #16
   b97fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9800 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9800:	b570      	push	{r4, r5, r6, lr}
   b9802:	460c      	mov	r4, r1
   b9804:	b08e      	sub	sp, #56	; 0x38
    String result;
   b9806:	491a      	ldr	r1, [pc, #104]	; (b9870 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9808:	e9cd 3200 	strd	r3, r2, [sp]
   b980c:	4605      	mov	r5, r0
    String result;
   b980e:	f003 fb02 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b9812:	68e0      	ldr	r0, [r4, #12]
   b9814:	69e1      	ldr	r1, [r4, #28]
   b9816:	4401      	add	r1, r0
   b9818:	3104      	adds	r1, #4
   b981a:	4628      	mov	r0, r5
   b981c:	f003 face 	bl	bcdbc <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
    StringSumHelper(const String &s) : String(s) {}
   b9820:	1d21      	adds	r1, r4, #4
   b9822:	a806      	add	r0, sp, #24
   b9824:	f003 fb43 	bl	bceae <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b9828:	4912      	ldr	r1, [pc, #72]	; (b9874 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b982a:	a802      	add	r0, sp, #8
   b982c:	f003 faf3 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b9830:	a902      	add	r1, sp, #8
   b9832:	a806      	add	r0, sp, #24
   b9834:	f003 fb9a 	bl	bcf6c <_ZplRK15StringSumHelperRK6String>
   b9838:	e9dd 3200 	ldrd	r3, r2, [sp]
   b983c:	4606      	mov	r6, r0
   b983e:	4621      	mov	r1, r4
   b9840:	a80a      	add	r0, sp, #40	; 0x28
   b9842:	f7ff ffc7 	bl	b97d4 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b9846:	a90a      	add	r1, sp, #40	; 0x28
   b9848:	4630      	mov	r0, r6
   b984a:	f003 fb8f 	bl	bcf6c <_ZplRK15StringSumHelperRK6String>
   b984e:	4601      	mov	r1, r0
   b9850:	4628      	mov	r0, r5
   b9852:	f003 fb1d 	bl	bce90 <_ZN6StringaSERKS_>
   b9856:	a80a      	add	r0, sp, #40	; 0x28
   b9858:	f003 fa92 	bl	bcd80 <_ZN6StringD1Ev>
   b985c:	a802      	add	r0, sp, #8
   b985e:	f003 fa8f 	bl	bcd80 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b9862:	a806      	add	r0, sp, #24
   b9864:	f003 fa8c 	bl	bcd80 <_ZN6StringD1Ev>
}
   b9868:	4628      	mov	r0, r5
   b986a:	b00e      	add	sp, #56	; 0x38
   b986c:	bd70      	pop	{r4, r5, r6, pc}
   b986e:	bf00      	nop
   b9870:	000bf6ed 	.word	0x000bf6ed
   b9874:	000bf37d 	.word	0x000bf37d

000b9878 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b987c:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b987e:	b08e      	sub	sp, #56	; 0x38
   b9880:	4605      	mov	r5, r0
   b9882:	460f      	mov	r7, r1
    if (allExtensions) {
   b9884:	2a00      	cmp	r2, #0
   b9886:	d04a      	beq.n	b991e <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b9888:	6840      	ldr	r0, [r0, #4]
   b988a:	f000 fdbb 	bl	ba404 <opendir>
        if (dir) {
   b988e:	4606      	mov	r6, r0
   b9890:	2800      	cmp	r0, #0
   b9892:	d054      	beq.n	b993e <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b9894:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b994c <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b9898:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b9948 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b989c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9944 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b98a0:	4630      	mov	r0, r6
   b98a2:	f000 fdb7 	bl	ba414 <readdir>
                if (!ent) {
   b98a6:	2800      	cmp	r0, #0
   b98a8:	d033      	beq.n	b9912 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b98aa:	7a82      	ldrb	r2, [r0, #10]
   b98ac:	2a08      	cmp	r2, #8
   b98ae:	d1f7      	bne.n	b98a0 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b98b0:	f100 040b 	add.w	r4, r0, #11
   b98b4:	6969      	ldr	r1, [r5, #20]
   b98b6:	aa01      	add	r2, sp, #4
   b98b8:	4620      	mov	r0, r4
   b98ba:	f000 ffff 	bl	ba8bc <sscanf>
   b98be:	2801      	cmp	r0, #1
   b98c0:	d1ee      	bne.n	b98a0 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b98c2:	9b01      	ldr	r3, [sp, #4]
   b98c4:	42bb      	cmp	r3, r7
   b98c6:	d1eb      	bne.n	b98a0 <_ZN14SequentialFile13removeFileNumEib+0x28>
    StringSumHelper(const String &s) : String(s) {}
   b98c8:	1d29      	adds	r1, r5, #4
   b98ca:	a80a      	add	r0, sp, #40	; 0x28
   b98cc:	f003 faef 	bl	bceae <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b98d0:	4651      	mov	r1, sl
   b98d2:	a806      	add	r0, sp, #24
   b98d4:	f003 fa9f 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b98d8:	a906      	add	r1, sp, #24
   b98da:	a80a      	add	r0, sp, #40	; 0x28
   b98dc:	f003 fb46 	bl	bcf6c <_ZplRK15StringSumHelperRK6String>
   b98e0:	4621      	mov	r1, r4
   b98e2:	f003 fb4f 	bl	bcf84 <_ZplRK15StringSumHelperPKc>
   b98e6:	4601      	mov	r1, r0
   b98e8:	a802      	add	r0, sp, #8
   b98ea:	f003 fae0 	bl	bceae <_ZN6StringC1ERKS_>
   b98ee:	a806      	add	r0, sp, #24
   b98f0:	f003 fa46 	bl	bcd80 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b98f4:	a80a      	add	r0, sp, #40	; 0x28
   b98f6:	f003 fa43 	bl	bcd80 <_ZN6StringD1Ev>
                        unlink(path);
   b98fa:	9802      	ldr	r0, [sp, #8]
   b98fc:	f004 fc5c 	bl	be1b8 <unlink>
                        _log.trace("removed %s", path.c_str());
   b9900:	4640      	mov	r0, r8
   b9902:	9a02      	ldr	r2, [sp, #8]
   b9904:	4649      	mov	r1, r9
   b9906:	f7fd fadf 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   b990a:	a802      	add	r0, sp, #8
   b990c:	f003 fa38 	bl	bcd80 <_ZN6StringD1Ev>
                    continue;
   b9910:	e7c6      	b.n	b98a0 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   b9912:	4630      	mov	r0, r6
}
   b9914:	b00e      	add	sp, #56	; 0x38
   b9916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   b991a:	f000 bd83 	b.w	ba424 <closedir>
        String path = getPathForFileNum(fileNum); 
   b991e:	460a      	mov	r2, r1
   b9920:	4601      	mov	r1, r0
   b9922:	a80a      	add	r0, sp, #40	; 0x28
   b9924:	f7ff ff6c 	bl	b9800 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   b9928:	980a      	ldr	r0, [sp, #40]	; 0x28
   b992a:	f004 fc45 	bl	be1b8 <unlink>
        _log.trace("removed %s", path.c_str());
   b992e:	4805      	ldr	r0, [pc, #20]	; (b9944 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   b9930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b9932:	4905      	ldr	r1, [pc, #20]	; (b9948 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   b9934:	f7fd fac8 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   b9938:	a80a      	add	r0, sp, #40	; 0x28
   b993a:	f003 fa21 	bl	bcd80 <_ZN6StringD1Ev>
}
   b993e:	b00e      	add	sp, #56	; 0x38
   b9940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9944:	2003e600 	.word	0x2003e600
   b9948:	000bf37f 	.word	0x000bf37f
   b994c:	000bf37d 	.word	0x000bf37d

000b9950 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b9950:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b9952:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b9954:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b9956:	b183      	cbz	r3, b997a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b9958:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b995a:	6945      	ldr	r5, [r0, #20]
   b995c:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b995e:	42ae      	cmp	r6, r5
   b9960:	d906      	bls.n	b9970 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   b9962:	f855 0b04 	ldr.w	r0, [r5], #4
   b9966:	f44f 7100 	mov.w	r1, #512	; 0x200
   b996a:	f7fb f8ae 	bl	b4aca <_ZdlPvj>
   b996e:	e7f6      	b.n	b995e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   b9970:	6861      	ldr	r1, [r4, #4]
   b9972:	6820      	ldr	r0, [r4, #0]
   b9974:	0089      	lsls	r1, r1, #2
   b9976:	f7fb f8a8 	bl	b4aca <_ZdlPvj>
    }
   b997a:	4620      	mov	r0, r4
   b997c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9980 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   b9980:	b510      	push	{r4, lr}
   b9982:	4b09      	ldr	r3, [pc, #36]	; (b99a8 <_ZN14SequentialFileD1Ev+0x28>)
   b9984:	4604      	mov	r4, r0
   b9986:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b998a:	f7ff ffe1 	bl	b9950 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   b998e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9992:	f003 f9f5 	bl	bcd80 <_ZN6StringD1Ev>
   b9996:	f104 0014 	add.w	r0, r4, #20
   b999a:	f003 f9f1 	bl	bcd80 <_ZN6StringD1Ev>
   b999e:	1d20      	adds	r0, r4, #4
   b99a0:	f003 f9ee 	bl	bcd80 <_ZN6StringD1Ev>
}
   b99a4:	4620      	mov	r0, r4
   b99a6:	bd10      	pop	{r4, pc}
   b99a8:	000bf478 	.word	0x000bf478

000b99ac <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   b99ac:	b510      	push	{r4, lr}
   b99ae:	4604      	mov	r4, r0
}
   b99b0:	f7ff ffe6 	bl	b9980 <_ZN14SequentialFileD1Ev>
   b99b4:	4620      	mov	r0, r4
   b99b6:	2168      	movs	r1, #104	; 0x68
   b99b8:	f7fb f887 	bl	b4aca <_ZdlPvj>
   b99bc:	4620      	mov	r0, r4
   b99be:	bd10      	pop	{r4, pc}

000b99c0 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b99c0:	68c3      	ldr	r3, [r0, #12]
   b99c2:	68ca      	ldr	r2, [r1, #12]
   b99c4:	1a9b      	subs	r3, r3, r2
   b99c6:	109b      	asrs	r3, r3, #2
   b99c8:	1e5a      	subs	r2, r3, #1
   b99ca:	e9d0 3000 	ldrd	r3, r0, [r0]
   b99ce:	1a1b      	subs	r3, r3, r0
   b99d0:	109b      	asrs	r3, r3, #2
   b99d2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b99d6:	6888      	ldr	r0, [r1, #8]
   b99d8:	680a      	ldr	r2, [r1, #0]
   b99da:	1a80      	subs	r0, r0, r2
      }
   b99dc:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b99e0:	4770      	bx	lr
	...

000b99e4 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   b99e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   b99e8:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   b99ea:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   b99ec:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b99ee:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   b99f0:	4604      	mov	r4, r0
   b99f2:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   b99f4:	d007      	beq.n	b9a06 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b99f6:	b10b      	cbz	r3, b99fc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   b99f8:	680a      	ldr	r2, [r1, #0]
   b99fa:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b99fc:	69a3      	ldr	r3, [r4, #24]
   b99fe:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b9a00:	61a3      	str	r3, [r4, #24]
      }
   b9a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b9a06:	f100 0108 	add.w	r1, r0, #8
   b9a0a:	3018      	adds	r0, #24
   b9a0c:	f7ff ffd8 	bl	b99c0 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   b9a10:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9a14:	4298      	cmp	r0, r3
   b9a16:	d102      	bne.n	b9a1e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   b9a18:	4838      	ldr	r0, [pc, #224]	; (b9afc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   b9a1a:	f004 f8a4 	bl	bdb66 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b9a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9a20:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b9a22:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b9a24:	1a11      	subs	r1, r2, r0
   b9a26:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b9a2a:	2901      	cmp	r1, #1
   b9a2c:	d825      	bhi.n	b9a7a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9a2e:	6961      	ldr	r1, [r4, #20]
   b9a30:	eba2 0801 	sub.w	r8, r2, r1
   b9a34:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b9a38:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9a3a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   b9a3e:	d936      	bls.n	b9aae <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   b9a40:	1b5d      	subs	r5, r3, r5
   b9a42:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9a44:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   b9a48:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b9a4a:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   b9a4c:	eba3 0201 	sub.w	r2, r3, r1
   b9a50:	d926      	bls.n	b9aa0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   b9a52:	428b      	cmp	r3, r1
   b9a54:	d002      	beq.n	b9a5c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9a56:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9a58:	f004 f9f6 	bl	bde48 <memmove>
	_M_node = __new_node;
   b9a5c:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   b9a5e:	682b      	ldr	r3, [r5, #0]
   b9a60:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9a62:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9a66:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b9a68:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   b9a6c:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b9a6e:	f855 3008 	ldr.w	r3, [r5, r8]
   b9a72:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9a74:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9a78:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9a7a:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b9a7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b9a80:	f7fb f81f 	bl	b4ac2 <_Znwj>
   b9a84:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b9a86:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9a88:	b10b      	cbz	r3, b9a8e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   b9a8a:	683a      	ldr	r2, [r7, #0]
   b9a8c:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b9a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a90:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9a92:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b9a94:	685b      	ldr	r3, [r3, #4]
   b9a96:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9a98:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9a9c:	6222      	str	r2, [r4, #32]
   b9a9e:	e7af      	b.n	b9a00 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   b9aa0:	428b      	cmp	r3, r1
   b9aa2:	d0db      	beq.n	b9a5c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9aa4:	f108 0004 	add.w	r0, r8, #4
   b9aa8:	1a80      	subs	r0, r0, r2
   b9aaa:	4428      	add	r0, r5
   b9aac:	e7d4      	b.n	b9a58 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b9aae:	f103 0902 	add.w	r9, r3, #2
   b9ab2:	2b01      	cmp	r3, #1
   b9ab4:	bf2c      	ite	cs
   b9ab6:	4499      	addcs	r9, r3
   b9ab8:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   b9abc:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   b9ac0:	d301      	bcc.n	b9ac6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   b9ac2:	f004 f84d 	bl	bdb60 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9ac6:	ea4f 0089 	mov.w	r0, r9, lsl #2
   b9aca:	f7fa fffa 	bl	b4ac2 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   b9ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9ad0:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9ad2:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   b9ad6:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9ad8:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   b9ada:	4291      	cmp	r1, r2
   b9adc:	4682      	mov	sl, r0
   b9ade:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   b9ae2:	d003      	beq.n	b9aec <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9ae4:	1a52      	subs	r2, r2, r1
   b9ae6:	4628      	mov	r0, r5
   b9ae8:	f004 f9ae 	bl	bde48 <memmove>
	::operator delete(__p
   b9aec:	6861      	ldr	r1, [r4, #4]
   b9aee:	6820      	ldr	r0, [r4, #0]
   b9af0:	0089      	lsls	r1, r1, #2
   b9af2:	f7fa ffea 	bl	b4aca <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b9af6:	e9c4 a900 	strd	sl, r9, [r4]
   b9afa:	e7af      	b.n	b9a5c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   b9afc:	000bf28d 	.word	0x000bf28d

000b9b00 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   b9b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   b9b04:	68c3      	ldr	r3, [r0, #12]
   b9b06:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   b9b08:	b086      	sub	sp, #24
   b9b0a:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   b9b0c:	d808      	bhi.n	b9b20 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   b9b0e:	4934      	ldr	r1, [pc, #208]	; (b9be0 <_ZN14SequentialFile7scanDirEv+0xe0>)
   b9b10:	4834      	ldr	r0, [pc, #208]	; (b9be4 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b9b12:	f7fd f9cb 	bl	b6eac <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b9b16:	2600      	movs	r6, #0
}
   b9b18:	4630      	mov	r0, r6
   b9b1a:	b006      	add	sp, #24
   b9b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   b9b20:	6840      	ldr	r0, [r0, #4]
   b9b22:	f7ff fe01 	bl	b9728 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   b9b26:	4606      	mov	r6, r0
   b9b28:	2800      	cmp	r0, #0
   b9b2a:	d0f4      	beq.n	b9b16 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   b9b2c:	6963      	ldr	r3, [r4, #20]
   b9b2e:	6862      	ldr	r2, [r4, #4]
   b9b30:	492d      	ldr	r1, [pc, #180]	; (b9be8 <_ZN14SequentialFile7scanDirEv+0xe8>)
   b9b32:	482c      	ldr	r0, [pc, #176]	; (b9be4 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b9b34:	f7fd f9c8 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   b9b38:	6860      	ldr	r0, [r4, #4]
   b9b3a:	f000 fc63 	bl	ba404 <opendir>
    if (!dir) {
   b9b3e:	4607      	mov	r7, r0
   b9b40:	2800      	cmp	r0, #0
   b9b42:	d0e8      	beq.n	b9b16 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   b9b44:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b9b46:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9bec <_ZN14SequentialFile7scanDirEv+0xec>
   b9b4a:	f8df 8098 	ldr.w	r8, [pc, #152]	; b9be4 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   b9b4e:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   b9b50:	4638      	mov	r0, r7
   b9b52:	f000 fc5f 	bl	ba414 <readdir>
        if (!ent) {
   b9b56:	4605      	mov	r5, r0
   b9b58:	2800      	cmp	r0, #0
   b9b5a:	d039      	beq.n	b9bd0 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   b9b5c:	7a83      	ldrb	r3, [r0, #10]
   b9b5e:	2b08      	cmp	r3, #8
   b9b60:	d1f6      	bne.n	b9b50 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   b9b62:	350b      	adds	r5, #11
   b9b64:	6961      	ldr	r1, [r4, #20]
   b9b66:	aa01      	add	r2, sp, #4
   b9b68:	4628      	mov	r0, r5
   b9b6a:	f000 fea7 	bl	ba8bc <sscanf>
   b9b6e:	2801      	cmp	r0, #1
   b9b70:	d1ee      	bne.n	b9b50 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   b9b72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9b74:	b17b      	cbz	r3, b9b96 <_ZN14SequentialFile7scanDirEv+0x96>
   b9b76:	4629      	mov	r1, r5
   b9b78:	a802      	add	r0, sp, #8
   b9b7a:	f003 f94c 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
   b9b7e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   b9b82:	a802      	add	r0, sp, #8
   b9b84:	f003 fa25 	bl	bcfd2 <_ZNK6String8endsWithERKS_>
   b9b88:	4682      	mov	sl, r0
   b9b8a:	a802      	add	r0, sp, #8
   b9b8c:	f003 f8f8 	bl	bcd80 <_ZN6StringD1Ev>
   b9b90:	f1ba 0f00 	cmp.w	sl, #0
   b9b94:	d0dc      	beq.n	b9b50 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   b9b96:	6823      	ldr	r3, [r4, #0]
   b9b98:	4629      	mov	r1, r5
   b9b9a:	689b      	ldr	r3, [r3, #8]
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	4798      	blx	r3
   b9ba0:	2800      	cmp	r0, #0
   b9ba2:	d0d5      	beq.n	b9b50 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   b9ba4:	9a01      	ldr	r2, [sp, #4]
   b9ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9ba8:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   b9baa:	bfb8      	it	lt
   b9bac:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b9bae:	462b      	mov	r3, r5
   b9bb0:	4649      	mov	r1, r9
   b9bb2:	4640      	mov	r0, r8
   b9bb4:	f7fd f988 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   b9bb8:	4620      	mov	r0, r4
   b9bba:	f7ff fda5 	bl	b9708 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   b9bbe:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b9bc2:	a901      	add	r1, sp, #4
   b9bc4:	f7ff ff0e 	bl	b99e4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   b9bc8:	4620      	mov	r0, r4
   b9bca:	f7ff fda9 	bl	b9720 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   b9bce:	e7bf      	b.n	b9b50 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   b9bd0:	4638      	mov	r0, r7
   b9bd2:	f000 fc27 	bl	ba424 <closedir>
    scanDirCompleted = true;
   b9bd6:	2301      	movs	r3, #1
   b9bd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   b9bdc:	e79c      	b.n	b9b18 <_ZN14SequentialFile7scanDirEv+0x18>
   b9bde:	bf00      	nop
   b9be0:	000bf3fd 	.word	0x000bf3fd
   b9be4:	2003e600 	.word	0x2003e600
   b9be8:	000bf412 	.word	0x000bf412
   b9bec:	000bf42e 	.word	0x000bf42e

000b9bf0 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   b9bf0:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   b9bf2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   b9bf6:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b9bf8:	b90b      	cbnz	r3, b9bfe <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   b9bfa:	f7ff ff81 	bl	b9b00 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   b9bfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b9c00:	3001      	adds	r0, #1
   b9c02:	63a0      	str	r0, [r4, #56]	; 0x38
}
   b9c04:	bd10      	pop	{r4, pc}
	...

000b9c08 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   b9c08:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   b9c0a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   b9c0e:	4604      	mov	r4, r0
   b9c10:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   b9c12:	b90b      	cbnz	r3, b9c18 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   b9c14:	f7ff ff74 	bl	b9b00 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   b9c18:	4620      	mov	r0, r4
   b9c1a:	f7ff fd75 	bl	b9708 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   b9c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   b9c20:	6da2      	ldr	r2, [r4, #88]	; 0x58
   b9c22:	429a      	cmp	r2, r3
   b9c24:	d020      	beq.n	b9c68 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   b9c26:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   b9c2a:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   b9c2c:	b126      	cbz	r6, b9c38 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   b9c2e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b9c30:	4293      	cmp	r3, r2
   b9c32:	d00c      	beq.n	b9c4e <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   b9c34:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b9c36:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   b9c38:	4620      	mov	r0, r4
   b9c3a:	f7ff fd71 	bl	b9720 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   b9c3e:	b125      	cbz	r5, b9c4a <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   b9c40:	490a      	ldr	r1, [pc, #40]	; (b9c6c <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   b9c42:	480b      	ldr	r0, [pc, #44]	; (b9c70 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   b9c44:	462a      	mov	r2, r5
   b9c46:	f7fd f93f 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
}
   b9c4a:	4628      	mov	r0, r5
   b9c4c:	bd70      	pop	{r4, r5, r6, pc}
   b9c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9c52:	f7fa ff3a 	bl	b4aca <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b9c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b9c58:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9c5a:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   b9c5c:	685b      	ldr	r3, [r3, #4]
   b9c5e:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9c60:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9c64:	6522      	str	r2, [r4, #80]	; 0x50
   b9c66:	e7e6      	b.n	b9c36 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   b9c68:	2500      	movs	r5, #0
   b9c6a:	e7e5      	b.n	b9c38 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   b9c6c:	000bf444 	.word	0x000bf444
   b9c70:	2003e600 	.word	0x2003e600

000b9c74 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   b9c74:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   b9c76:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   b9c7a:	9101      	str	r1, [sp, #4]
   b9c7c:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b9c7e:	b90b      	cbnz	r3, b9c84 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   b9c80:	f7ff ff3e 	bl	b9b00 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   b9c84:	9b01      	ldr	r3, [sp, #4]
   b9c86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9c88:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   b9c8a:	bfb8      	it	lt
   b9c8c:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   b9c8e:	4620      	mov	r0, r4
   b9c90:	f7ff fd3a 	bl	b9708 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   b9c94:	a901      	add	r1, sp, #4
   b9c96:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b9c9a:	f7ff fea3 	bl	b99e4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   b9c9e:	4620      	mov	r0, r4
   b9ca0:	f7ff fd3e 	bl	b9720 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b9ca4:	b002      	add	sp, #8
   b9ca6:	bd10      	pop	{r4, pc}

000b9ca8 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   b9ca8:	b538      	push	{r3, r4, r5, lr}
   b9caa:	4604      	mov	r4, r0
    queueMutexLock();
   b9cac:	f7ff fd2c 	bl	b9708 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b9cb0:	f104 0148 	add.w	r1, r4, #72	; 0x48
   b9cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b9cb8:	f7ff fe82 	bl	b99c0 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   b9cbc:	4605      	mov	r5, r0
    queueMutexUnlock();
   b9cbe:	4620      	mov	r0, r4
   b9cc0:	f7ff fd2e 	bl	b9720 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b9cc4:	4628      	mov	r0, r5
   b9cc6:	bd38      	pop	{r3, r4, r5, pc}

000b9cc8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   b9cc8:	4b01      	ldr	r3, [pc, #4]	; (b9cd0 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   b9cca:	4a02      	ldr	r2, [pc, #8]	; (b9cd4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   b9ccc:	601a      	str	r2, [r3, #0]
}
   b9cce:	4770      	bx	lr
   b9cd0:	2003e600 	.word	0x2003e600
   b9cd4:	000bf461 	.word	0x000bf461

000b9cd8 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b9cd8:	6803      	ldr	r3, [r0, #0]
   b9cda:	685b      	ldr	r3, [r3, #4]
   b9cdc:	4718      	bx	r3

000b9cde <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b9cde:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b9ce0:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b9ce2:	4604      	mov	r4, r0
    if (lastUpdate) {
   b9ce4:	b133      	cbz	r3, b9cf4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b9ce6:	b131      	cbz	r1, b9cf6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b9ce8:	6823      	ldr	r3, [r4, #0]
   b9cea:	4620      	mov	r0, r4
   b9cec:	689b      	ldr	r3, [r3, #8]
   b9cee:	4798      	blx	r3
            lastUpdate = 0;
   b9cf0:	2300      	movs	r3, #0
   b9cf2:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b9cf4:	bd10      	pop	{r4, pc}
   b9cf6:	f000 fa45 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b9cfa:	69a3      	ldr	r3, [r4, #24]
   b9cfc:	1ac0      	subs	r0, r0, r3
   b9cfe:	69e3      	ldr	r3, [r4, #28]
   b9d00:	4298      	cmp	r0, r3
   b9d02:	d2f1      	bcs.n	b9ce8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b9d04:	e7f6      	b.n	b9cf4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b9d06 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b9d06:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b9d08:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b9d0a:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b9d0c:	b11b      	cbz	r3, b9d16 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b9d0e:	f000 fa39 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b9d12:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b9d14:	bd10      	pop	{r4, pc}
        save();
   b9d16:	6803      	ldr	r3, [r0, #0]
}
   b9d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b9d1c:	689b      	ldr	r3, [r3, #8]
   b9d1e:	4718      	bx	r3

000b9d20 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b9d20:	f000 b9f8 	b.w	ba114 <os_mutex_recursive_unlock>

000b9d24 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b9d24:	b507      	push	{r0, r1, r2, lr}
   b9d26:	4613      	mov	r3, r2
    if (data) {
   b9d28:	b139      	cbz	r1, b9d3a <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b9d2a:	2200      	movs	r2, #0
   b9d2c:	e9cd 2200 	strd	r2, r2, [sp]
   b9d30:	460a      	mov	r2, r1
   b9d32:	6801      	ldr	r1, [r0, #0]
   b9d34:	201e      	movs	r0, #30
   b9d36:	f000 fc35 	bl	ba5a4 <log_dump>
}
   b9d3a:	b003      	add	sp, #12
   b9d3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9d40 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b9d40:	b510      	push	{r4, lr}
   b9d42:	4604      	mov	r4, r0
   b9d44:	3004      	adds	r0, #4
   b9d46:	f7fb fd56 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b9d4a:	6823      	ldr	r3, [r4, #0]
   b9d4c:	68e1      	ldr	r1, [r4, #12]
   b9d4e:	695b      	ldr	r3, [r3, #20]
   b9d50:	4620      	mov	r0, r4
   b9d52:	4798      	blx	r3
   b9d54:	b918      	cbnz	r0, b9d5e <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b9d56:	6823      	ldr	r3, [r4, #0]
   b9d58:	4620      	mov	r0, r4
   b9d5a:	699b      	ldr	r3, [r3, #24]
   b9d5c:	4798      	blx	r3

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b9d5e:	6860      	ldr	r0, [r4, #4]
   b9d60:	f7ff ffde 	bl	b9d20 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b9d64:	2001      	movs	r0, #1
   b9d66:	bd10      	pop	{r4, pc}

000b9d68 <_ZN15StorageHelperRK24PersistentDataFileSystem4loadEv>:
    }
    PersistentDataBase::save();
}
#endif // UNITTEST

bool StorageHelperRK::PersistentDataFileSystem::load() {
   b9d68:	b538      	push	{r3, r4, r5, lr}
   b9d6a:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b9d6c:	3004      	adds	r0, #4
   b9d6e:	f7fb fd42 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    WITH_LOCK(*this) {
        bool loaded = false;

        int dataSize = 0;

        int fd = fs->open(filename, O_RDONLY);
   b9d72:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b9d76:	6803      	ldr	r3, [r0, #0]
   b9d78:	2200      	movs	r2, #0
   b9d7a:	689b      	ldr	r3, [r3, #8]
   b9d7c:	4798      	blx	r3
        if (fd != -1) {
            dataSize = fs->read((uint8_t *)savedDataHeader, savedDataSize);
   b9d7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d80:	6803      	ldr	r3, [r0, #0]
   b9d82:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   b9d86:	699b      	ldr	r3, [r3, #24]
   b9d88:	4798      	blx	r3

            // Log.info("request to read %d, got %d bytes", (int)savedDataSize, (int) dataSize);
            // Log.dump((const uint8_t *)savedDataHeader, dataSize);

            if (validate(dataSize)) {
   b9d8a:	6823      	ldr	r3, [r4, #0]
            dataSize = fs->read((uint8_t *)savedDataHeader, savedDataSize);
   b9d8c:	4601      	mov	r1, r0
            if (validate(dataSize)) {
   b9d8e:	695b      	ldr	r3, [r3, #20]
   b9d90:	4620      	mov	r0, r4
   b9d92:	4798      	blx	r3
   b9d94:	4605      	mov	r5, r0
                loaded = true;
            }
            fs->close();
   b9d96:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d98:	6803      	ldr	r3, [r0, #0]
   b9d9a:	68db      	ldr	r3, [r3, #12]
   b9d9c:	4798      	blx	r3
        }
        else {
            Log.trace("did not open file %s", filename.c_str());
        }
        
        if (!loaded) {
   b9d9e:	b91d      	cbnz	r5, b9da8 <_ZN15StorageHelperRK24PersistentDataFileSystem4loadEv+0x40>
            initialize();
   b9da0:	6823      	ldr	r3, [r4, #0]
   b9da2:	4620      	mov	r0, r4
   b9da4:	699b      	ldr	r3, [r3, #24]
   b9da6:	4798      	blx	r3
      { _M_device.unlock(); }
   b9da8:	6860      	ldr	r0, [r4, #4]
   b9daa:	f7ff ffb9 	bl	b9d20 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }

    return true;
}
   b9dae:	2001      	movs	r0, #1
   b9db0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9db4 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b9db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9db6:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b9dba:	4f18      	ldr	r7, [pc, #96]	; (b9e1c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b9dbc:	4e18      	ldr	r6, [pc, #96]	; (b9e20 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b9dbe:	4d19      	ldr	r5, [pc, #100]	; (b9e24 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b9dc0:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b9dc2:	42a0      	cmp	r0, r4
   b9dc4:	d00c      	beq.n	b9de0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b9dc6:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b9dca:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b9dcc:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b9dd0:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b9dd2:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b9dd4:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b9dd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b9ddc:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b9dde:	e7f0      	b.n	b9dc2 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b9de0:	f001 0403 	and.w	r4, r1, #3
   b9de4:	4404      	add	r4, r0
    k = 0;
   b9de6:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b9de8:	42a0      	cmp	r0, r4
   b9dea:	d004      	beq.n	b9df6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b9dec:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b9df0:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b9df4:	e7f8      	b.n	b9de8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b9df6:	4809      	ldr	r0, [pc, #36]	; (b9e1c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b9df8:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b9dfa:	4809      	ldr	r0, [pc, #36]	; (b9e20 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b9dfc:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b9e00:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b9e02:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b9e04:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b9e06:	4b08      	ldr	r3, [pc, #32]	; (b9e28 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b9e08:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b9e0c:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b9e0e:	4b07      	ldr	r3, [pc, #28]	; (b9e2c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b9e10:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b9e14:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b9e16:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b9e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9e1c:	cc9e2d51 	.word	0xcc9e2d51
   b9e20:	1b873593 	.word	0x1b873593
   b9e24:	e6546b64 	.word	0xe6546b64
   b9e28:	85ebca6b 	.word	0x85ebca6b
   b9e2c:	c2b2ae35 	.word	0xc2b2ae35

000b9e30 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b9e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9e32:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b9e34:	3004      	adds	r0, #4
   b9e36:	f7fb fcde 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b9e3a:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b9e3c:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b9e3e:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b9e40:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b9e42:	68a6      	ldr	r6, [r4, #8]
   b9e44:	4a05      	ldr	r2, [pc, #20]	; (b9e5c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b9e46:	88f1      	ldrh	r1, [r6, #6]
   b9e48:	4630      	mov	r0, r6
   b9e4a:	f7ff ffb3 	bl	b9db4 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b9e4e:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b9e50:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b9e52:	6860      	ldr	r0, [r4, #4]
   b9e54:	f7ff ff64 	bl	b9d20 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b9e58:	4628      	mov	r0, r5
   b9e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9e5c:	851c2a3f 	.word	0x851c2a3f

000b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b9e60:	b570      	push	{r4, r5, r6, lr}
   b9e62:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b9e64:	6885      	ldr	r5, [r0, #8]
   b9e66:	f7ff ffe3 	bl	b9e30 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b9e6a:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b9e6c:	6823      	ldr	r3, [r4, #0]
   b9e6e:	4620      	mov	r0, r4
   b9e70:	691b      	ldr	r3, [r3, #16]
}
   b9e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b9e76:	4718      	bx	r3

000b9e78 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b9e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9e7c:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b9e7e:	3004      	adds	r0, #4
   b9e80:	4690      	mov	r8, r2
   b9e82:	460d      	mov	r5, r1
   b9e84:	461f      	mov	r7, r3
   b9e86:	f7fb fcb6 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b9e8a:	68e2      	ldr	r2, [r4, #12]
   b9e8c:	f1c8 0301 	rsb	r3, r8, #1
   b9e90:	4413      	add	r3, r2
   b9e92:	42ab      	cmp	r3, r5
   b9e94:	d319      	bcc.n	b9eca <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b9e96:	4638      	mov	r0, r7
   b9e98:	f7fa fdd0 	bl	b4a3c <strlen>
   b9e9c:	4540      	cmp	r0, r8
   b9e9e:	d214      	bcs.n	b9eca <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b9ea0:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b9ea2:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b9ea4:	4629      	mov	r1, r5
   b9ea6:	4638      	mov	r0, r7
   b9ea8:	f7fa fdbe 	bl	b4a28 <strcmp>
   b9eac:	b158      	cbz	r0, b9ec6 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b9eae:	4642      	mov	r2, r8
   b9eb0:	2100      	movs	r1, #0
   b9eb2:	4628      	mov	r0, r5
   b9eb4:	f003 ffe2 	bl	bde7c <memset>
                strcpy(p, value);
   b9eb8:	4639      	mov	r1, r7
   b9eba:	4628      	mov	r0, r5
   b9ebc:	f004 f82b 	bl	bdf16 <strcpy>
                updateHash();
   b9ec0:	4620      	mov	r0, r4
   b9ec2:	f7ff ffcd 	bl	b9e60 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b9ec6:	2501      	movs	r5, #1
   b9ec8:	e000      	b.n	b9ecc <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b9eca:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b9ecc:	6860      	ldr	r0, [r4, #4]
   b9ece:	f7ff ff27 	bl	b9d20 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b9ed2:	4628      	mov	r0, r5
   b9ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9ed8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b9ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (logData && dataSize < 4096) {
   b9eda:	f890 3020 	ldrb.w	r3, [r0, #32]
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b9ede:	4604      	mov	r4, r0
   b9ee0:	460d      	mov	r5, r1
    if (logData && dataSize < 4096) {
   b9ee2:	b1ab      	cbz	r3, b9f10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
   b9ee4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   b9ee8:	d217      	bcs.n	b9f1a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
        Log.info("validating data size=%d", (int)dataSize);
   b9eea:	4e2c      	ldr	r6, [pc, #176]	; (b9f9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b9eec:	460a      	mov	r2, r1
   b9eee:	4630      	mov	r0, r6
   b9ef0:	492b      	ldr	r1, [pc, #172]	; (b9fa0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b9ef2:	f7fa fe58 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b9ef6:	68a1      	ldr	r1, [r4, #8]
   b9ef8:	462a      	mov	r2, r5
   b9efa:	4630      	mov	r0, r6
   b9efc:	f7ff ff12 	bl	b9d24 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b9f00:	2300      	movs	r3, #0
   b9f02:	9300      	str	r3, [sp, #0]
   b9f04:	4a27      	ldr	r2, [pc, #156]	; (b9fa4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xcc>)
   b9f06:	6831      	ldr	r1, [r6, #0]
   b9f08:	2301      	movs	r3, #1
   b9f0a:	201e      	movs	r0, #30
   b9f0c:	f000 fb42 	bl	ba594 <log_write>
    if (dataSize >= 12 && 
   b9f10:	2d0b      	cmp	r5, #11
   b9f12:	d802      	bhi.n	b9f1a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b9f14:	bb55      	cbnz	r5, b9f6c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
   b9f16:	2000      	movs	r0, #0
   b9f18:	e026      	b.n	b9f68 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>
        savedDataHeader->magic == savedDataMagic && 
   b9f1a:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b9f1c:	6922      	ldr	r2, [r4, #16]
   b9f1e:	6819      	ldr	r1, [r3, #0]
   b9f20:	4291      	cmp	r1, r2
   b9f22:	d123      	bne.n	b9f6c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->magic == savedDataMagic && 
   b9f24:	8899      	ldrh	r1, [r3, #4]
   b9f26:	8aa2      	ldrh	r2, [r4, #20]
   b9f28:	4291      	cmp	r1, r2
   b9f2a:	d11f      	bne.n	b9f6c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->version == savedDataVersion &&
   b9f2c:	88da      	ldrh	r2, [r3, #6]
   b9f2e:	b2ab      	uxth	r3, r5
   b9f30:	429a      	cmp	r2, r3
   b9f32:	d81b      	bhi.n	b9f6c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        hash = getHash();
   b9f34:	4620      	mov	r0, r4
   b9f36:	f7ff ff7b 	bl	b9e30 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
        if (savedDataHeader->hash == hash) {                
   b9f3a:	68a3      	ldr	r3, [r4, #8]
   b9f3c:	689a      	ldr	r2, [r3, #8]
   b9f3e:	4282      	cmp	r2, r0
        hash = getHash();
   b9f40:	4606      	mov	r6, r0
        if (savedDataHeader->hash == hash) {                
   b9f42:	d114      	bne.n	b9f6e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x96>
            if ((size_t)dataSize < savedDataSize) {
   b9f44:	68e2      	ldr	r2, [r4, #12]
   b9f46:	42aa      	cmp	r2, r5
   b9f48:	d905      	bls.n	b9f56 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x7e>
                    p[ii] = 0;
   b9f4a:	2100      	movs	r1, #0
   b9f4c:	5559      	strb	r1, [r3, r5]
                for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b9f4e:	68e2      	ldr	r2, [r4, #12]
   b9f50:	3501      	adds	r5, #1
   b9f52:	42aa      	cmp	r2, r5
   b9f54:	d8fa      	bhi.n	b9f4c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x74>
            savedDataHeader->size = (uint16_t) savedDataSize;
   b9f56:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            savedDataHeader->hash = getHash();
   b9f5a:	4620      	mov	r0, r4
            savedDataHeader->size = (uint16_t) savedDataSize;
   b9f5c:	80da      	strh	r2, [r3, #6]
            savedDataHeader->hash = getHash();
   b9f5e:	68a5      	ldr	r5, [r4, #8]
   b9f60:	f7ff ff66 	bl	b9e30 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b9f64:	60a8      	str	r0, [r5, #8]
            isValid = true;
   b9f66:	2001      	movs	r0, #1
}
   b9f68:	b002      	add	sp, #8
   b9f6a:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t hash = 0;
   b9f6c:	2600      	movs	r6, #0
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b9f6e:	68a1      	ldr	r1, [r4, #8]
   b9f70:	680a      	ldr	r2, [r1, #0]
   b9f72:	2a00      	cmp	r2, #0
   b9f74:	d0cf      	beq.n	b9f16 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b9f76:	6888      	ldr	r0, [r1, #8]
   b9f78:	888b      	ldrh	r3, [r1, #4]
   b9f7a:	9001      	str	r0, [sp, #4]
   b9f7c:	88c9      	ldrh	r1, [r1, #6]
   b9f7e:	9100      	str	r1, [sp, #0]
   b9f80:	4806      	ldr	r0, [pc, #24]	; (b9f9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b9f82:	4909      	ldr	r1, [pc, #36]	; (b9fa8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd0>)
   b9f84:	f7fc ffa0 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b9f88:	e9cd 5600 	strd	r5, r6, [sp]
   b9f8c:	8aa3      	ldrh	r3, [r4, #20]
   b9f8e:	6922      	ldr	r2, [r4, #16]
   b9f90:	4906      	ldr	r1, [pc, #24]	; (b9fac <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd4>)
   b9f92:	4802      	ldr	r0, [pc, #8]	; (b9f9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b9f94:	f7fc ff98 	bl	b6ec8 <_ZNK5spark6Logger5traceEPKcz>
   b9f98:	e7bd      	b.n	b9f16 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
   b9f9a:	bf00      	nop
   b9f9c:	2003e64c 	.word	0x2003e64c
   b9fa0:	000bf484 	.word	0x000bf484
   b9fa4:	000bf6ec 	.word	0x000bf6ec
   b9fa8:	000bf49c 	.word	0x000bf49c
   b9fac:	000bf4cd 	.word	0x000bf4cd

000b9fb0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b9fb0:	b538      	push	{r3, r4, r5, lr}
   b9fb2:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b9fb4:	68c2      	ldr	r2, [r0, #12]
   b9fb6:	6880      	ldr	r0, [r0, #8]
   b9fb8:	2100      	movs	r1, #0
   b9fba:	f003 ff5f 	bl	bde7c <memset>
    savedDataHeader->magic = savedDataMagic;
   b9fbe:	68a3      	ldr	r3, [r4, #8]
   b9fc0:	6922      	ldr	r2, [r4, #16]
   b9fc2:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b9fc4:	68a3      	ldr	r3, [r4, #8]
   b9fc6:	8aa2      	ldrh	r2, [r4, #20]
   b9fc8:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b9fca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b9fce:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b9fd0:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b9fd2:	68a5      	ldr	r5, [r4, #8]
   b9fd4:	f7ff ff2c 	bl	b9e30 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b9fd8:	60a8      	str	r0, [r5, #8]
}
   b9fda:	bd38      	pop	{r3, r4, r5, pc}

000b9fdc <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
void StorageHelperRK::PersistentDataBase::save() {
   b9fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9fde:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b9fe0:	6885      	ldr	r5, [r0, #8]
   b9fe2:	f7ff ff25 	bl	b9e30 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b9fe6:	60a8      	str	r0, [r5, #8]
    if (logData) {
   b9fe8:	f894 3020 	ldrb.w	r3, [r4, #32]
   b9fec:	b19b      	cbz	r3, ba016 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3a>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b9fee:	68a3      	ldr	r3, [r4, #8]
   b9ff0:	4d0a      	ldr	r5, [pc, #40]	; (ba01c <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b9ff2:	88da      	ldrh	r2, [r3, #6]
   b9ff4:	490a      	ldr	r1, [pc, #40]	; (ba020 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x44>)
   b9ff6:	4628      	mov	r0, r5
   b9ff8:	f7fa fdd5 	bl	b4ba6 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b9ffc:	68a1      	ldr	r1, [r4, #8]
   b9ffe:	4628      	mov	r0, r5
   ba000:	88ca      	ldrh	r2, [r1, #6]
   ba002:	f7ff fe8f 	bl	b9d24 <_ZNK5spark6Logger4dumpEPKvj>
   ba006:	2300      	movs	r3, #0
   ba008:	9300      	str	r3, [sp, #0]
   ba00a:	4a06      	ldr	r2, [pc, #24]	; (ba024 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x48>)
   ba00c:	6829      	ldr	r1, [r5, #0]
   ba00e:	2301      	movs	r3, #1
   ba010:	201e      	movs	r0, #30
   ba012:	f000 fabf 	bl	ba594 <log_write>
}
   ba016:	b003      	add	sp, #12
   ba018:	bd30      	pop	{r4, r5, pc}
   ba01a:	bf00      	nop
   ba01c:	2003e64c 	.word	0x2003e64c
   ba020:	000bf4fe 	.word	0x000bf4fe
   ba024:	000bf6ec 	.word	0x000bf6ec

000ba028 <_ZN15StorageHelperRK24PersistentDataFileSystem4saveEv>:
void StorageHelperRK::PersistentDataFileSystem::save() {
   ba028:	b510      	push	{r4, lr}
   ba02a:	4604      	mov	r4, r0
      { _M_device.lock(); }
   ba02c:	3004      	adds	r0, #4
   ba02e:	f7fb fbe2 	bl	b57f6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        int fd = fs->open(filename, O_RDWR | O_CREAT | O_TRUNC);
   ba032:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba034:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   ba036:	6803      	ldr	r3, [r0, #0]
   ba038:	f240 6202 	movw	r2, #1538	; 0x602
   ba03c:	689b      	ldr	r3, [r3, #8]
   ba03e:	4798      	blx	r3
            /* size_t count = */fs->write((const uint8_t *)savedDataHeader, savedDataSize);
   ba040:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba042:	6803      	ldr	r3, [r0, #0]
   ba044:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   ba048:	69db      	ldr	r3, [r3, #28]
   ba04a:	4798      	blx	r3
            fs->close();
   ba04c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba04e:	6803      	ldr	r3, [r0, #0]
   ba050:	68db      	ldr	r3, [r3, #12]
   ba052:	4798      	blx	r3
      { _M_device.unlock(); }
   ba054:	6860      	ldr	r0, [r4, #4]
   ba056:	f7ff fe63 	bl	b9d20 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
    PersistentDataBase::save();
   ba05a:	4620      	mov	r0, r4
}
   ba05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PersistentDataBase::save();
   ba060:	f7ff bfbc 	b.w	b9fdc <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000ba064 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   ba064:	b508      	push	{r3, lr}
   ba066:	4b02      	ldr	r3, [pc, #8]	; (ba070 <cellular_signal+0xc>)
   ba068:	681b      	ldr	r3, [r3, #0]
   ba06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba06c:	9301      	str	r3, [sp, #4]
   ba06e:	bd08      	pop	{r3, pc}
   ba070:	00030274 	.word	0x00030274

000ba074 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   ba074:	b508      	push	{r3, lr}
   ba076:	4b02      	ldr	r3, [pc, #8]	; (ba080 <os_thread_create+0xc>)
   ba078:	681b      	ldr	r3, [r3, #0]
   ba07a:	685b      	ldr	r3, [r3, #4]
   ba07c:	9301      	str	r3, [sp, #4]
   ba07e:	bd08      	pop	{r3, pc}
   ba080:	00030248 	.word	0x00030248

000ba084 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   ba084:	b508      	push	{r3, lr}
   ba086:	4b02      	ldr	r3, [pc, #8]	; (ba090 <os_thread_is_current+0xc>)
   ba088:	681b      	ldr	r3, [r3, #0]
   ba08a:	689b      	ldr	r3, [r3, #8]
   ba08c:	9301      	str	r3, [sp, #4]
   ba08e:	bd08      	pop	{r3, pc}
   ba090:	00030248 	.word	0x00030248

000ba094 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   ba094:	b508      	push	{r3, lr}
   ba096:	4b02      	ldr	r3, [pc, #8]	; (ba0a0 <os_thread_join+0xc>)
   ba098:	681b      	ldr	r3, [r3, #0]
   ba09a:	691b      	ldr	r3, [r3, #16]
   ba09c:	9301      	str	r3, [sp, #4]
   ba09e:	bd08      	pop	{r3, pc}
   ba0a0:	00030248 	.word	0x00030248

000ba0a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   ba0a4:	b508      	push	{r3, lr}
   ba0a6:	4b02      	ldr	r3, [pc, #8]	; (ba0b0 <os_thread_cleanup+0xc>)
   ba0a8:	681b      	ldr	r3, [r3, #0]
   ba0aa:	695b      	ldr	r3, [r3, #20]
   ba0ac:	9301      	str	r3, [sp, #4]
   ba0ae:	bd08      	pop	{r3, pc}
   ba0b0:	00030248 	.word	0x00030248

000ba0b4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   ba0b4:	b508      	push	{r3, lr}
   ba0b6:	4b02      	ldr	r3, [pc, #8]	; (ba0c0 <os_mutex_create+0xc>)
   ba0b8:	681b      	ldr	r3, [r3, #0]
   ba0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba0bc:	9301      	str	r3, [sp, #4]
   ba0be:	bd08      	pop	{r3, pc}
   ba0c0:	00030248 	.word	0x00030248

000ba0c4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   ba0c4:	b508      	push	{r3, lr}
   ba0c6:	4b02      	ldr	r3, [pc, #8]	; (ba0d0 <os_mutex_lock+0xc>)
   ba0c8:	681b      	ldr	r3, [r3, #0]
   ba0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba0cc:	9301      	str	r3, [sp, #4]
   ba0ce:	bd08      	pop	{r3, pc}
   ba0d0:	00030248 	.word	0x00030248

000ba0d4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   ba0d4:	b508      	push	{r3, lr}
   ba0d6:	4b02      	ldr	r3, [pc, #8]	; (ba0e0 <os_mutex_unlock+0xc>)
   ba0d8:	681b      	ldr	r3, [r3, #0]
   ba0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba0dc:	9301      	str	r3, [sp, #4]
   ba0de:	bd08      	pop	{r3, pc}
   ba0e0:	00030248 	.word	0x00030248

000ba0e4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba0e4:	b508      	push	{r3, lr}
   ba0e6:	4b02      	ldr	r3, [pc, #8]	; (ba0f0 <os_mutex_recursive_create+0xc>)
   ba0e8:	681b      	ldr	r3, [r3, #0]
   ba0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba0ec:	9301      	str	r3, [sp, #4]
   ba0ee:	bd08      	pop	{r3, pc}
   ba0f0:	00030248 	.word	0x00030248

000ba0f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   ba0f4:	b508      	push	{r3, lr}
   ba0f6:	4b02      	ldr	r3, [pc, #8]	; (ba100 <os_mutex_recursive_destroy+0xc>)
   ba0f8:	681b      	ldr	r3, [r3, #0]
   ba0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba0fc:	9301      	str	r3, [sp, #4]
   ba0fe:	bd08      	pop	{r3, pc}
   ba100:	00030248 	.word	0x00030248

000ba104 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   ba104:	b508      	push	{r3, lr}
   ba106:	4b02      	ldr	r3, [pc, #8]	; (ba110 <os_mutex_recursive_lock+0xc>)
   ba108:	681b      	ldr	r3, [r3, #0]
   ba10a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba10c:	9301      	str	r3, [sp, #4]
   ba10e:	bd08      	pop	{r3, pc}
   ba110:	00030248 	.word	0x00030248

000ba114 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   ba114:	b508      	push	{r3, lr}
   ba116:	4b02      	ldr	r3, [pc, #8]	; (ba120 <os_mutex_recursive_unlock+0xc>)
   ba118:	681b      	ldr	r3, [r3, #0]
   ba11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba11c:	9301      	str	r3, [sp, #4]
   ba11e:	bd08      	pop	{r3, pc}
   ba120:	00030248 	.word	0x00030248

000ba124 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   ba124:	b508      	push	{r3, lr}
   ba126:	4b02      	ldr	r3, [pc, #8]	; (ba130 <os_thread_exit+0xc>)
   ba128:	681b      	ldr	r3, [r3, #0]
   ba12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   ba12c:	9301      	str	r3, [sp, #4]
   ba12e:	bd08      	pop	{r3, pc}
   ba130:	00030248 	.word	0x00030248

000ba134 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   ba134:	b508      	push	{r3, lr}
   ba136:	4b02      	ldr	r3, [pc, #8]	; (ba140 <HAL_Core_Runtime_Info+0xc>)
   ba138:	681b      	ldr	r3, [r3, #0]
   ba13a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba13c:	9301      	str	r3, [sp, #4]
   ba13e:	bd08      	pop	{r3, pc}
   ba140:	00030234 	.word	0x00030234

000ba144 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   ba144:	b508      	push	{r3, lr}
   ba146:	4b02      	ldr	r3, [pc, #8]	; (ba150 <HAL_Feature_Set+0xc>)
   ba148:	681b      	ldr	r3, [r3, #0]
   ba14a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba14c:	9301      	str	r3, [sp, #4]
   ba14e:	bd08      	pop	{r3, pc}
   ba150:	00030234 	.word	0x00030234

000ba154 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba154:	b508      	push	{r3, lr}
   ba156:	4b02      	ldr	r3, [pc, #8]	; (ba160 <HAL_RNG_GetRandomNumber+0xc>)
   ba158:	681b      	ldr	r3, [r3, #0]
   ba15a:	685b      	ldr	r3, [r3, #4]
   ba15c:	9301      	str	r3, [sp, #4]
   ba15e:	bd08      	pop	{r3, pc}
   ba160:	00030218 	.word	0x00030218

000ba164 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   ba164:	b508      	push	{r3, lr}
   ba166:	4b02      	ldr	r3, [pc, #8]	; (ba170 <HAL_Delay_Milliseconds+0xc>)
   ba168:	681b      	ldr	r3, [r3, #0]
   ba16a:	689b      	ldr	r3, [r3, #8]
   ba16c:	9301      	str	r3, [sp, #4]
   ba16e:	bd08      	pop	{r3, pc}
   ba170:	00030218 	.word	0x00030218

000ba174 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba174:	b508      	push	{r3, lr}
   ba176:	4b02      	ldr	r3, [pc, #8]	; (ba180 <HAL_Delay_Microseconds+0xc>)
   ba178:	681b      	ldr	r3, [r3, #0]
   ba17a:	68db      	ldr	r3, [r3, #12]
   ba17c:	9301      	str	r3, [sp, #4]
   ba17e:	bd08      	pop	{r3, pc}
   ba180:	00030218 	.word	0x00030218

000ba184 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba184:	b508      	push	{r3, lr}
   ba186:	4b02      	ldr	r3, [pc, #8]	; (ba190 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba188:	681b      	ldr	r3, [r3, #0]
   ba18a:	695b      	ldr	r3, [r3, #20]
   ba18c:	9301      	str	r3, [sp, #4]
   ba18e:	bd08      	pop	{r3, pc}
   ba190:	00030218 	.word	0x00030218

000ba194 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   ba194:	b508      	push	{r3, lr}
   ba196:	4b02      	ldr	r3, [pc, #8]	; (ba1a0 <hal_rtc_time_is_valid+0xc>)
   ba198:	681b      	ldr	r3, [r3, #0]
   ba19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba19c:	9301      	str	r3, [sp, #4]
   ba19e:	bd08      	pop	{r3, pc}
   ba1a0:	00030218 	.word	0x00030218

000ba1a4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   ba1a4:	b508      	push	{r3, lr}
   ba1a6:	4b02      	ldr	r3, [pc, #8]	; (ba1b0 <hal_timer_millis+0xc>)
   ba1a8:	681b      	ldr	r3, [r3, #0]
   ba1aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   ba1ac:	9301      	str	r3, [sp, #4]
   ba1ae:	bd08      	pop	{r3, pc}
   ba1b0:	00030218 	.word	0x00030218

000ba1b4 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   ba1b4:	b508      	push	{r3, lr}
   ba1b6:	4b02      	ldr	r3, [pc, #8]	; (ba1c0 <hal_rtc_get_time+0xc>)
   ba1b8:	681b      	ldr	r3, [r3, #0]
   ba1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba1bc:	9301      	str	r3, [sp, #4]
   ba1be:	bd08      	pop	{r3, pc}
   ba1c0:	00030218 	.word	0x00030218

000ba1c4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   ba1c4:	b508      	push	{r3, lr}
   ba1c6:	4b02      	ldr	r3, [pc, #8]	; (ba1d0 <hal_rtc_set_time+0xc>)
   ba1c8:	681b      	ldr	r3, [r3, #0]
   ba1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   ba1cc:	9301      	str	r3, [sp, #4]
   ba1ce:	bd08      	pop	{r3, pc}
   ba1d0:	00030218 	.word	0x00030218

000ba1d4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   ba1d4:	b508      	push	{r3, lr}
   ba1d6:	4b02      	ldr	r3, [pc, #8]	; (ba1e0 <hal_pin_validate_function+0xc>)
   ba1d8:	681b      	ldr	r3, [r3, #0]
   ba1da:	685b      	ldr	r3, [r3, #4]
   ba1dc:	9301      	str	r3, [sp, #4]
   ba1de:	bd08      	pop	{r3, pc}
   ba1e0:	0003022c 	.word	0x0003022c

000ba1e4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   ba1e4:	b508      	push	{r3, lr}
   ba1e6:	4b02      	ldr	r3, [pc, #8]	; (ba1f0 <hal_gpio_mode+0xc>)
   ba1e8:	681b      	ldr	r3, [r3, #0]
   ba1ea:	689b      	ldr	r3, [r3, #8]
   ba1ec:	9301      	str	r3, [sp, #4]
   ba1ee:	bd08      	pop	{r3, pc}
   ba1f0:	0003022c 	.word	0x0003022c

000ba1f4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   ba1f4:	b508      	push	{r3, lr}
   ba1f6:	4b02      	ldr	r3, [pc, #8]	; (ba200 <hal_gpio_get_mode+0xc>)
   ba1f8:	681b      	ldr	r3, [r3, #0]
   ba1fa:	68db      	ldr	r3, [r3, #12]
   ba1fc:	9301      	str	r3, [sp, #4]
   ba1fe:	bd08      	pop	{r3, pc}
   ba200:	0003022c 	.word	0x0003022c

000ba204 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   ba204:	b508      	push	{r3, lr}
   ba206:	4b02      	ldr	r3, [pc, #8]	; (ba210 <hal_gpio_write+0xc>)
   ba208:	681b      	ldr	r3, [r3, #0]
   ba20a:	691b      	ldr	r3, [r3, #16]
   ba20c:	9301      	str	r3, [sp, #4]
   ba20e:	bd08      	pop	{r3, pc}
   ba210:	0003022c 	.word	0x0003022c

000ba214 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   ba214:	b508      	push	{r3, lr}
   ba216:	4b02      	ldr	r3, [pc, #8]	; (ba220 <hal_gpio_read+0xc>)
   ba218:	681b      	ldr	r3, [r3, #0]
   ba21a:	695b      	ldr	r3, [r3, #20]
   ba21c:	9301      	str	r3, [sp, #4]
   ba21e:	bd08      	pop	{r3, pc}
   ba220:	0003022c 	.word	0x0003022c

000ba224 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   ba224:	b508      	push	{r3, lr}
   ba226:	4b02      	ldr	r3, [pc, #8]	; (ba230 <hal_interrupt_attach+0xc>)
   ba228:	681b      	ldr	r3, [r3, #0]
   ba22a:	699b      	ldr	r3, [r3, #24]
   ba22c:	9301      	str	r3, [sp, #4]
   ba22e:	bd08      	pop	{r3, pc}
   ba230:	0003022c 	.word	0x0003022c

000ba234 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   ba234:	b508      	push	{r3, lr}
   ba236:	4b02      	ldr	r3, [pc, #8]	; (ba240 <hal_interrupt_detach+0xc>)
   ba238:	681b      	ldr	r3, [r3, #0]
   ba23a:	69db      	ldr	r3, [r3, #28]
   ba23c:	9301      	str	r3, [sp, #4]
   ba23e:	bd08      	pop	{r3, pc}
   ba240:	0003022c 	.word	0x0003022c

000ba244 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   ba244:	b508      	push	{r3, lr}
   ba246:	4b02      	ldr	r3, [pc, #8]	; (ba250 <hal_adc_read+0xc>)
   ba248:	681b      	ldr	r3, [r3, #0]
   ba24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba24c:	9301      	str	r3, [sp, #4]
   ba24e:	bd08      	pop	{r3, pc}
   ba250:	0003022c 	.word	0x0003022c

000ba254 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba254:	b508      	push	{r3, lr}
   ba256:	4b02      	ldr	r3, [pc, #8]	; (ba260 <hal_i2c_begin+0xc>)
   ba258:	681b      	ldr	r3, [r3, #0]
   ba25a:	68db      	ldr	r3, [r3, #12]
   ba25c:	9301      	str	r3, [sp, #4]
   ba25e:	bd08      	pop	{r3, pc}
   ba260:	00030228 	.word	0x00030228

000ba264 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba264:	b508      	push	{r3, lr}
   ba266:	4b02      	ldr	r3, [pc, #8]	; (ba270 <hal_i2c_begin_transmission+0xc>)
   ba268:	681b      	ldr	r3, [r3, #0]
   ba26a:	699b      	ldr	r3, [r3, #24]
   ba26c:	9301      	str	r3, [sp, #4]
   ba26e:	bd08      	pop	{r3, pc}
   ba270:	00030228 	.word	0x00030228

000ba274 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba274:	b508      	push	{r3, lr}
   ba276:	4b02      	ldr	r3, [pc, #8]	; (ba280 <hal_i2c_end_transmission+0xc>)
   ba278:	681b      	ldr	r3, [r3, #0]
   ba27a:	69db      	ldr	r3, [r3, #28]
   ba27c:	9301      	str	r3, [sp, #4]
   ba27e:	bd08      	pop	{r3, pc}
   ba280:	00030228 	.word	0x00030228

000ba284 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba284:	b508      	push	{r3, lr}
   ba286:	4b02      	ldr	r3, [pc, #8]	; (ba290 <hal_i2c_write+0xc>)
   ba288:	681b      	ldr	r3, [r3, #0]
   ba28a:	6a1b      	ldr	r3, [r3, #32]
   ba28c:	9301      	str	r3, [sp, #4]
   ba28e:	bd08      	pop	{r3, pc}
   ba290:	00030228 	.word	0x00030228

000ba294 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba294:	b508      	push	{r3, lr}
   ba296:	4b02      	ldr	r3, [pc, #8]	; (ba2a0 <hal_i2c_available+0xc>)
   ba298:	681b      	ldr	r3, [r3, #0]
   ba29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba29c:	9301      	str	r3, [sp, #4]
   ba29e:	bd08      	pop	{r3, pc}
   ba2a0:	00030228 	.word	0x00030228

000ba2a4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba2a4:	b508      	push	{r3, lr}
   ba2a6:	4b02      	ldr	r3, [pc, #8]	; (ba2b0 <hal_i2c_read+0xc>)
   ba2a8:	681b      	ldr	r3, [r3, #0]
   ba2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba2ac:	9301      	str	r3, [sp, #4]
   ba2ae:	bd08      	pop	{r3, pc}
   ba2b0:	00030228 	.word	0x00030228

000ba2b4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba2b4:	b508      	push	{r3, lr}
   ba2b6:	4b02      	ldr	r3, [pc, #8]	; (ba2c0 <hal_i2c_peek+0xc>)
   ba2b8:	681b      	ldr	r3, [r3, #0]
   ba2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba2bc:	9301      	str	r3, [sp, #4]
   ba2be:	bd08      	pop	{r3, pc}
   ba2c0:	00030228 	.word	0x00030228

000ba2c4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba2c4:	b508      	push	{r3, lr}
   ba2c6:	4b02      	ldr	r3, [pc, #8]	; (ba2d0 <hal_i2c_flush+0xc>)
   ba2c8:	681b      	ldr	r3, [r3, #0]
   ba2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba2cc:	9301      	str	r3, [sp, #4]
   ba2ce:	bd08      	pop	{r3, pc}
   ba2d0:	00030228 	.word	0x00030228

000ba2d4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba2d4:	b508      	push	{r3, lr}
   ba2d6:	4b02      	ldr	r3, [pc, #8]	; (ba2e0 <hal_i2c_is_enabled+0xc>)
   ba2d8:	681b      	ldr	r3, [r3, #0]
   ba2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba2dc:	9301      	str	r3, [sp, #4]
   ba2de:	bd08      	pop	{r3, pc}
   ba2e0:	00030228 	.word	0x00030228

000ba2e4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba2e4:	b508      	push	{r3, lr}
   ba2e6:	4b02      	ldr	r3, [pc, #8]	; (ba2f0 <hal_i2c_init+0xc>)
   ba2e8:	681b      	ldr	r3, [r3, #0]
   ba2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba2ec:	9301      	str	r3, [sp, #4]
   ba2ee:	bd08      	pop	{r3, pc}
   ba2f0:	00030228 	.word	0x00030228

000ba2f4 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   ba2f4:	b508      	push	{r3, lr}
   ba2f6:	4b02      	ldr	r3, [pc, #8]	; (ba300 <hal_i2c_lock+0xc>)
   ba2f8:	681b      	ldr	r3, [r3, #0]
   ba2fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba2fc:	9301      	str	r3, [sp, #4]
   ba2fe:	bd08      	pop	{r3, pc}
   ba300:	00030228 	.word	0x00030228

000ba304 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   ba304:	b508      	push	{r3, lr}
   ba306:	4b02      	ldr	r3, [pc, #8]	; (ba310 <hal_i2c_unlock+0xc>)
   ba308:	681b      	ldr	r3, [r3, #0]
   ba30a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba30c:	9301      	str	r3, [sp, #4]
   ba30e:	bd08      	pop	{r3, pc}
   ba310:	00030228 	.word	0x00030228

000ba314 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   ba314:	b508      	push	{r3, lr}
   ba316:	4b02      	ldr	r3, [pc, #8]	; (ba320 <hal_i2c_request_ex+0xc>)
   ba318:	681b      	ldr	r3, [r3, #0]
   ba31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba31c:	9301      	str	r3, [sp, #4]
   ba31e:	bd08      	pop	{r3, pc}
   ba320:	00030228 	.word	0x00030228

000ba324 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba324:	b508      	push	{r3, lr}
   ba326:	4b02      	ldr	r3, [pc, #8]	; (ba330 <inet_inet_ntop+0xc>)
   ba328:	681b      	ldr	r3, [r3, #0]
   ba32a:	695b      	ldr	r3, [r3, #20]
   ba32c:	9301      	str	r3, [sp, #4]
   ba32e:	bd08      	pop	{r3, pc}
   ba330:	00030264 	.word	0x00030264

000ba334 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba334:	b508      	push	{r3, lr}
   ba336:	4b02      	ldr	r3, [pc, #8]	; (ba340 <netdb_freeaddrinfo+0xc>)
   ba338:	681b      	ldr	r3, [r3, #0]
   ba33a:	689b      	ldr	r3, [r3, #8]
   ba33c:	9301      	str	r3, [sp, #4]
   ba33e:	bd08      	pop	{r3, pc}
   ba340:	00030268 	.word	0x00030268

000ba344 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba344:	b508      	push	{r3, lr}
   ba346:	4b02      	ldr	r3, [pc, #8]	; (ba350 <netdb_getaddrinfo+0xc>)
   ba348:	681b      	ldr	r3, [r3, #0]
   ba34a:	68db      	ldr	r3, [r3, #12]
   ba34c:	9301      	str	r3, [sp, #4]
   ba34e:	bd08      	pop	{r3, pc}
   ba350:	00030268 	.word	0x00030268

000ba354 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba354:	b508      	push	{r3, lr}
   ba356:	4b02      	ldr	r3, [pc, #8]	; (ba360 <hal_spi_init+0xc>)
   ba358:	681b      	ldr	r3, [r3, #0]
   ba35a:	69db      	ldr	r3, [r3, #28]
   ba35c:	9301      	str	r3, [sp, #4]
   ba35e:	bd08      	pop	{r3, pc}
   ba360:	00030230 	.word	0x00030230

000ba364 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba364:	b508      	push	{r3, lr}
   ba366:	4b02      	ldr	r3, [pc, #8]	; (ba370 <hal_spi_is_enabled+0xc>)
   ba368:	681b      	ldr	r3, [r3, #0]
   ba36a:	6a1b      	ldr	r3, [r3, #32]
   ba36c:	9301      	str	r3, [sp, #4]
   ba36e:	bd08      	pop	{r3, pc}
   ba370:	00030230 	.word	0x00030230

000ba374 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   ba374:	b508      	push	{r3, lr}
   ba376:	4b02      	ldr	r3, [pc, #8]	; (ba380 <_open+0xc>)
   ba378:	681b      	ldr	r3, [r3, #0]
   ba37a:	681b      	ldr	r3, [r3, #0]
   ba37c:	9301      	str	r3, [sp, #4]
   ba37e:	bd08      	pop	{r3, pc}
   ba380:	00030284 	.word	0x00030284

000ba384 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   ba384:	b508      	push	{r3, lr}
   ba386:	4b02      	ldr	r3, [pc, #8]	; (ba390 <_write+0xc>)
   ba388:	681b      	ldr	r3, [r3, #0]
   ba38a:	685b      	ldr	r3, [r3, #4]
   ba38c:	9301      	str	r3, [sp, #4]
   ba38e:	bd08      	pop	{r3, pc}
   ba390:	00030284 	.word	0x00030284

000ba394 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   ba394:	b508      	push	{r3, lr}
   ba396:	4b02      	ldr	r3, [pc, #8]	; (ba3a0 <_read+0xc>)
   ba398:	681b      	ldr	r3, [r3, #0]
   ba39a:	689b      	ldr	r3, [r3, #8]
   ba39c:	9301      	str	r3, [sp, #4]
   ba39e:	bd08      	pop	{r3, pc}
   ba3a0:	00030284 	.word	0x00030284

000ba3a4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   ba3a4:	b508      	push	{r3, lr}
   ba3a6:	4b02      	ldr	r3, [pc, #8]	; (ba3b0 <_close+0xc>)
   ba3a8:	681b      	ldr	r3, [r3, #0]
   ba3aa:	68db      	ldr	r3, [r3, #12]
   ba3ac:	9301      	str	r3, [sp, #4]
   ba3ae:	bd08      	pop	{r3, pc}
   ba3b0:	00030284 	.word	0x00030284

000ba3b4 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   ba3b4:	b508      	push	{r3, lr}
   ba3b6:	4b02      	ldr	r3, [pc, #8]	; (ba3c0 <_fstat+0xc>)
   ba3b8:	681b      	ldr	r3, [r3, #0]
   ba3ba:	695b      	ldr	r3, [r3, #20]
   ba3bc:	9301      	str	r3, [sp, #4]
   ba3be:	bd08      	pop	{r3, pc}
   ba3c0:	00030284 	.word	0x00030284

000ba3c4 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   ba3c4:	b508      	push	{r3, lr}
   ba3c6:	4b02      	ldr	r3, [pc, #8]	; (ba3d0 <_lseek+0xc>)
   ba3c8:	681b      	ldr	r3, [r3, #0]
   ba3ca:	6a1b      	ldr	r3, [r3, #32]
   ba3cc:	9301      	str	r3, [sp, #4]
   ba3ce:	bd08      	pop	{r3, pc}
   ba3d0:	00030284 	.word	0x00030284

000ba3d4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   ba3d4:	b508      	push	{r3, lr}
   ba3d6:	4b02      	ldr	r3, [pc, #8]	; (ba3e0 <stat+0xc>)
   ba3d8:	681b      	ldr	r3, [r3, #0]
   ba3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba3dc:	9301      	str	r3, [sp, #4]
   ba3de:	bd08      	pop	{r3, pc}
   ba3e0:	00030284 	.word	0x00030284

000ba3e4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   ba3e4:	b508      	push	{r3, lr}
   ba3e6:	4b02      	ldr	r3, [pc, #8]	; (ba3f0 <mkdir+0xc>)
   ba3e8:	681b      	ldr	r3, [r3, #0]
   ba3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba3ec:	9301      	str	r3, [sp, #4]
   ba3ee:	bd08      	pop	{r3, pc}
   ba3f0:	00030284 	.word	0x00030284

000ba3f4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   ba3f4:	b508      	push	{r3, lr}
   ba3f6:	4b02      	ldr	r3, [pc, #8]	; (ba400 <_unlink+0xc>)
   ba3f8:	681b      	ldr	r3, [r3, #0]
   ba3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba3fc:	9301      	str	r3, [sp, #4]
   ba3fe:	bd08      	pop	{r3, pc}
   ba400:	00030284 	.word	0x00030284

000ba404 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   ba404:	b508      	push	{r3, lr}
   ba406:	4b02      	ldr	r3, [pc, #8]	; (ba410 <opendir+0xc>)
   ba408:	681b      	ldr	r3, [r3, #0]
   ba40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba40c:	9301      	str	r3, [sp, #4]
   ba40e:	bd08      	pop	{r3, pc}
   ba410:	00030284 	.word	0x00030284

000ba414 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   ba414:	b508      	push	{r3, lr}
   ba416:	4b02      	ldr	r3, [pc, #8]	; (ba420 <readdir+0xc>)
   ba418:	681b      	ldr	r3, [r3, #0]
   ba41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba41c:	9301      	str	r3, [sp, #4]
   ba41e:	bd08      	pop	{r3, pc}
   ba420:	00030284 	.word	0x00030284

000ba424 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   ba424:	b508      	push	{r3, lr}
   ba426:	4b02      	ldr	r3, [pc, #8]	; (ba430 <closedir+0xc>)
   ba428:	681b      	ldr	r3, [r3, #0]
   ba42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba42c:	9301      	str	r3, [sp, #4]
   ba42e:	bd08      	pop	{r3, pc}
   ba430:	00030284 	.word	0x00030284

000ba434 <ftruncate>:
DYNALIB_FN(22, hal_posix_syscall, chdir, int(const char* path))
DYNALIB_FN(23, hal_posix_syscall, fchdir, int(int fd))
DYNALIB_FN(24, hal_posix_syscall, getcwd, char*(char* buf, size_t size))
DYNALIB_FN(25, hal_posix_syscall, truncate, int(const char*, off_t))
DYNALIB_FN(26, hal_posix_syscall, ftruncate, int(int, off_t))
   ba434:	b508      	push	{r3, lr}
   ba436:	4b02      	ldr	r3, [pc, #8]	; (ba440 <ftruncate+0xc>)
   ba438:	681b      	ldr	r3, [r3, #0]
   ba43a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   ba43c:	9301      	str	r3, [sp, #4]
   ba43e:	bd08      	pop	{r3, pc}
   ba440:	00030284 	.word	0x00030284

000ba444 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   ba444:	b508      	push	{r3, lr}
   ba446:	4b02      	ldr	r3, [pc, #8]	; (ba450 <hal_usart_end+0xc>)
   ba448:	681b      	ldr	r3, [r3, #0]
   ba44a:	689b      	ldr	r3, [r3, #8]
   ba44c:	9301      	str	r3, [sp, #4]
   ba44e:	bd08      	pop	{r3, pc}
   ba450:	0003023c 	.word	0x0003023c

000ba454 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba454:	b508      	push	{r3, lr}
   ba456:	4b02      	ldr	r3, [pc, #8]	; (ba460 <hal_usart_write+0xc>)
   ba458:	681b      	ldr	r3, [r3, #0]
   ba45a:	68db      	ldr	r3, [r3, #12]
   ba45c:	9301      	str	r3, [sp, #4]
   ba45e:	bd08      	pop	{r3, pc}
   ba460:	0003023c 	.word	0x0003023c

000ba464 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba464:	b508      	push	{r3, lr}
   ba466:	4b02      	ldr	r3, [pc, #8]	; (ba470 <hal_usart_available+0xc>)
   ba468:	681b      	ldr	r3, [r3, #0]
   ba46a:	691b      	ldr	r3, [r3, #16]
   ba46c:	9301      	str	r3, [sp, #4]
   ba46e:	bd08      	pop	{r3, pc}
   ba470:	0003023c 	.word	0x0003023c

000ba474 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba474:	b508      	push	{r3, lr}
   ba476:	4b02      	ldr	r3, [pc, #8]	; (ba480 <hal_usart_read+0xc>)
   ba478:	681b      	ldr	r3, [r3, #0]
   ba47a:	695b      	ldr	r3, [r3, #20]
   ba47c:	9301      	str	r3, [sp, #4]
   ba47e:	bd08      	pop	{r3, pc}
   ba480:	0003023c 	.word	0x0003023c

000ba484 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba484:	b508      	push	{r3, lr}
   ba486:	4b02      	ldr	r3, [pc, #8]	; (ba490 <hal_usart_peek+0xc>)
   ba488:	681b      	ldr	r3, [r3, #0]
   ba48a:	699b      	ldr	r3, [r3, #24]
   ba48c:	9301      	str	r3, [sp, #4]
   ba48e:	bd08      	pop	{r3, pc}
   ba490:	0003023c 	.word	0x0003023c

000ba494 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba494:	b508      	push	{r3, lr}
   ba496:	4b02      	ldr	r3, [pc, #8]	; (ba4a0 <hal_usart_flush+0xc>)
   ba498:	681b      	ldr	r3, [r3, #0]
   ba49a:	69db      	ldr	r3, [r3, #28]
   ba49c:	9301      	str	r3, [sp, #4]
   ba49e:	bd08      	pop	{r3, pc}
   ba4a0:	0003023c 	.word	0x0003023c

000ba4a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba4a4:	b508      	push	{r3, lr}
   ba4a6:	4b02      	ldr	r3, [pc, #8]	; (ba4b0 <hal_usart_is_enabled+0xc>)
   ba4a8:	681b      	ldr	r3, [r3, #0]
   ba4aa:	6a1b      	ldr	r3, [r3, #32]
   ba4ac:	9301      	str	r3, [sp, #4]
   ba4ae:	bd08      	pop	{r3, pc}
   ba4b0:	0003023c 	.word	0x0003023c

000ba4b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba4b4:	b508      	push	{r3, lr}
   ba4b6:	4b02      	ldr	r3, [pc, #8]	; (ba4c0 <hal_usart_available_data_for_write+0xc>)
   ba4b8:	681b      	ldr	r3, [r3, #0]
   ba4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba4bc:	9301      	str	r3, [sp, #4]
   ba4be:	bd08      	pop	{r3, pc}
   ba4c0:	0003023c 	.word	0x0003023c

000ba4c4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   ba4c4:	b508      	push	{r3, lr}
   ba4c6:	4b02      	ldr	r3, [pc, #8]	; (ba4d0 <hal_usart_begin_config+0xc>)
   ba4c8:	681b      	ldr	r3, [r3, #0]
   ba4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba4cc:	9301      	str	r3, [sp, #4]
   ba4ce:	bd08      	pop	{r3, pc}
   ba4d0:	0003023c 	.word	0x0003023c

000ba4d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba4d4:	b508      	push	{r3, lr}
   ba4d6:	4b02      	ldr	r3, [pc, #8]	; (ba4e0 <hal_usart_init_ex+0xc>)
   ba4d8:	681b      	ldr	r3, [r3, #0]
   ba4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba4dc:	9301      	str	r3, [sp, #4]
   ba4de:	bd08      	pop	{r3, pc}
   ba4e0:	0003023c 	.word	0x0003023c

000ba4e4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba4e4:	b508      	push	{r3, lr}
   ba4e6:	4b02      	ldr	r3, [pc, #8]	; (ba4f0 <HAL_USB_USART_Init+0xc>)
   ba4e8:	681b      	ldr	r3, [r3, #0]
   ba4ea:	681b      	ldr	r3, [r3, #0]
   ba4ec:	9301      	str	r3, [sp, #4]
   ba4ee:	bd08      	pop	{r3, pc}
   ba4f0:	0003024c 	.word	0x0003024c

000ba4f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba4f4:	b508      	push	{r3, lr}
   ba4f6:	4b02      	ldr	r3, [pc, #8]	; (ba500 <HAL_USB_USART_Begin+0xc>)
   ba4f8:	681b      	ldr	r3, [r3, #0]
   ba4fa:	685b      	ldr	r3, [r3, #4]
   ba4fc:	9301      	str	r3, [sp, #4]
   ba4fe:	bd08      	pop	{r3, pc}
   ba500:	0003024c 	.word	0x0003024c

000ba504 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   ba504:	b508      	push	{r3, lr}
   ba506:	4b02      	ldr	r3, [pc, #8]	; (ba510 <HAL_USB_USART_End+0xc>)
   ba508:	681b      	ldr	r3, [r3, #0]
   ba50a:	689b      	ldr	r3, [r3, #8]
   ba50c:	9301      	str	r3, [sp, #4]
   ba50e:	bd08      	pop	{r3, pc}
   ba510:	0003024c 	.word	0x0003024c

000ba514 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba514:	b508      	push	{r3, lr}
   ba516:	4b02      	ldr	r3, [pc, #8]	; (ba520 <HAL_USB_USART_Available_Data+0xc>)
   ba518:	681b      	ldr	r3, [r3, #0]
   ba51a:	691b      	ldr	r3, [r3, #16]
   ba51c:	9301      	str	r3, [sp, #4]
   ba51e:	bd08      	pop	{r3, pc}
   ba520:	0003024c 	.word	0x0003024c

000ba524 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba524:	b508      	push	{r3, lr}
   ba526:	4b02      	ldr	r3, [pc, #8]	; (ba530 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba528:	681b      	ldr	r3, [r3, #0]
   ba52a:	695b      	ldr	r3, [r3, #20]
   ba52c:	9301      	str	r3, [sp, #4]
   ba52e:	bd08      	pop	{r3, pc}
   ba530:	0003024c 	.word	0x0003024c

000ba534 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba534:	b508      	push	{r3, lr}
   ba536:	4b02      	ldr	r3, [pc, #8]	; (ba540 <HAL_USB_USART_Receive_Data+0xc>)
   ba538:	681b      	ldr	r3, [r3, #0]
   ba53a:	699b      	ldr	r3, [r3, #24]
   ba53c:	9301      	str	r3, [sp, #4]
   ba53e:	bd08      	pop	{r3, pc}
   ba540:	0003024c 	.word	0x0003024c

000ba544 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba544:	b508      	push	{r3, lr}
   ba546:	4b02      	ldr	r3, [pc, #8]	; (ba550 <HAL_USB_USART_Send_Data+0xc>)
   ba548:	681b      	ldr	r3, [r3, #0]
   ba54a:	69db      	ldr	r3, [r3, #28]
   ba54c:	9301      	str	r3, [sp, #4]
   ba54e:	bd08      	pop	{r3, pc}
   ba550:	0003024c 	.word	0x0003024c

000ba554 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   ba554:	b508      	push	{r3, lr}
   ba556:	4b02      	ldr	r3, [pc, #8]	; (ba560 <HAL_USB_USART_Flush_Data+0xc>)
   ba558:	681b      	ldr	r3, [r3, #0]
   ba55a:	6a1b      	ldr	r3, [r3, #32]
   ba55c:	9301      	str	r3, [sp, #4]
   ba55e:	bd08      	pop	{r3, pc}
   ba560:	0003024c 	.word	0x0003024c

000ba564 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   ba564:	b508      	push	{r3, lr}
   ba566:	4b02      	ldr	r3, [pc, #8]	; (ba570 <panic_+0xc>)
   ba568:	681b      	ldr	r3, [r3, #0]
   ba56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba56c:	9301      	str	r3, [sp, #4]
   ba56e:	bd08      	pop	{r3, pc}
   ba570:	00030260 	.word	0x00030260

000ba574 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   ba574:	b508      	push	{r3, lr}
   ba576:	4b02      	ldr	r3, [pc, #8]	; (ba580 <log_message+0xc>)
   ba578:	681b      	ldr	r3, [r3, #0]
   ba57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba57c:	9301      	str	r3, [sp, #4]
   ba57e:	bd08      	pop	{r3, pc}
   ba580:	00030260 	.word	0x00030260

000ba584 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   ba584:	b508      	push	{r3, lr}
   ba586:	4b02      	ldr	r3, [pc, #8]	; (ba590 <log_message_v+0xc>)
   ba588:	681b      	ldr	r3, [r3, #0]
   ba58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba58c:	9301      	str	r3, [sp, #4]
   ba58e:	bd08      	pop	{r3, pc}
   ba590:	00030260 	.word	0x00030260

000ba594 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   ba594:	b508      	push	{r3, lr}
   ba596:	4b02      	ldr	r3, [pc, #8]	; (ba5a0 <log_write+0xc>)
   ba598:	681b      	ldr	r3, [r3, #0]
   ba59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba59c:	9301      	str	r3, [sp, #4]
   ba59e:	bd08      	pop	{r3, pc}
   ba5a0:	00030260 	.word	0x00030260

000ba5a4 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   ba5a4:	b508      	push	{r3, lr}
   ba5a6:	4b02      	ldr	r3, [pc, #8]	; (ba5b0 <log_dump+0xc>)
   ba5a8:	681b      	ldr	r3, [r3, #0]
   ba5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba5ac:	9301      	str	r3, [sp, #4]
   ba5ae:	bd08      	pop	{r3, pc}
   ba5b0:	00030260 	.word	0x00030260

000ba5b4 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   ba5b4:	b508      	push	{r3, lr}
   ba5b6:	4b02      	ldr	r3, [pc, #8]	; (ba5c0 <log_level_name+0xc>)
   ba5b8:	681b      	ldr	r3, [r3, #0]
   ba5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   ba5bc:	9301      	str	r3, [sp, #4]
   ba5be:	bd08      	pop	{r3, pc}
   ba5c0:	00030260 	.word	0x00030260

000ba5c4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   ba5c4:	b508      	push	{r3, lr}
   ba5c6:	4b02      	ldr	r3, [pc, #8]	; (ba5d0 <log_set_callbacks+0xc>)
   ba5c8:	681b      	ldr	r3, [r3, #0]
   ba5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   ba5cc:	9301      	str	r3, [sp, #4]
   ba5ce:	bd08      	pop	{r3, pc}
   ba5d0:	00030260 	.word	0x00030260

000ba5d4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   ba5d4:	b508      	push	{r3, lr}
   ba5d6:	4b03      	ldr	r3, [pc, #12]	; (ba5e4 <diag_get_source+0x10>)
   ba5d8:	681b      	ldr	r3, [r3, #0]
   ba5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   ba5de:	9301      	str	r3, [sp, #4]
   ba5e0:	bd08      	pop	{r3, pc}
   ba5e2:	0000      	.short	0x0000
   ba5e4:	00030260 	.word	0x00030260

000ba5e8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   ba5e8:	b508      	push	{r3, lr}
   ba5ea:	4b02      	ldr	r3, [pc, #8]	; (ba5f4 <system_mode+0xc>)
   ba5ec:	681b      	ldr	r3, [r3, #0]
   ba5ee:	681b      	ldr	r3, [r3, #0]
   ba5f0:	9301      	str	r3, [sp, #4]
   ba5f2:	bd08      	pop	{r3, pc}
   ba5f4:	00030220 	.word	0x00030220

000ba5f8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   ba5f8:	b508      	push	{r3, lr}
   ba5fa:	4b02      	ldr	r3, [pc, #8]	; (ba604 <set_system_mode+0xc>)
   ba5fc:	681b      	ldr	r3, [r3, #0]
   ba5fe:	685b      	ldr	r3, [r3, #4]
   ba600:	9301      	str	r3, [sp, #4]
   ba602:	bd08      	pop	{r3, pc}
   ba604:	00030220 	.word	0x00030220

000ba608 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   ba608:	b508      	push	{r3, lr}
   ba60a:	4b02      	ldr	r3, [pc, #8]	; (ba614 <system_delay_ms+0xc>)
   ba60c:	681b      	ldr	r3, [r3, #0]
   ba60e:	695b      	ldr	r3, [r3, #20]
   ba610:	9301      	str	r3, [sp, #4]
   ba612:	bd08      	pop	{r3, pc}
   ba614:	00030220 	.word	0x00030220

000ba618 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   ba618:	b508      	push	{r3, lr}
   ba61a:	4b02      	ldr	r3, [pc, #8]	; (ba624 <system_subscribe_event+0xc>)
   ba61c:	681b      	ldr	r3, [r3, #0]
   ba61e:	6a1b      	ldr	r3, [r3, #32]
   ba620:	9301      	str	r3, [sp, #4]
   ba622:	bd08      	pop	{r3, pc}
   ba624:	00030220 	.word	0x00030220

000ba628 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   ba628:	b508      	push	{r3, lr}
   ba62a:	4b02      	ldr	r3, [pc, #8]	; (ba634 <system_thread_set_state+0xc>)
   ba62c:	681b      	ldr	r3, [r3, #0]
   ba62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba630:	9301      	str	r3, [sp, #4]
   ba632:	bd08      	pop	{r3, pc}
   ba634:	00030220 	.word	0x00030220

000ba638 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   ba638:	b508      	push	{r3, lr}
   ba63a:	4b02      	ldr	r3, [pc, #8]	; (ba644 <application_thread_current+0xc>)
   ba63c:	681b      	ldr	r3, [r3, #0]
   ba63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba640:	9301      	str	r3, [sp, #4]
   ba642:	bd08      	pop	{r3, pc}
   ba644:	00030220 	.word	0x00030220

000ba648 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   ba648:	b508      	push	{r3, lr}
   ba64a:	4b02      	ldr	r3, [pc, #8]	; (ba654 <application_thread_invoke+0xc>)
   ba64c:	681b      	ldr	r3, [r3, #0]
   ba64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba650:	9301      	str	r3, [sp, #4]
   ba652:	bd08      	pop	{r3, pc}
   ba654:	00030220 	.word	0x00030220

000ba658 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   ba658:	b508      	push	{r3, lr}
   ba65a:	4b02      	ldr	r3, [pc, #8]	; (ba664 <system_thread_get_state+0xc>)
   ba65c:	681b      	ldr	r3, [r3, #0]
   ba65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba660:	9301      	str	r3, [sp, #4]
   ba662:	bd08      	pop	{r3, pc}
   ba664:	00030220 	.word	0x00030220

000ba668 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   ba668:	b508      	push	{r3, lr}
   ba66a:	4b02      	ldr	r3, [pc, #8]	; (ba674 <system_notify_time_changed+0xc>)
   ba66c:	681b      	ldr	r3, [r3, #0]
   ba66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   ba670:	9301      	str	r3, [sp, #4]
   ba672:	bd08      	pop	{r3, pc}
   ba674:	00030220 	.word	0x00030220

000ba678 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   ba678:	b508      	push	{r3, lr}
   ba67a:	4b03      	ldr	r3, [pc, #12]	; (ba688 <system_ctrl_set_app_request_handler+0x10>)
   ba67c:	681b      	ldr	r3, [r3, #0]
   ba67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   ba682:	9301      	str	r3, [sp, #4]
   ba684:	bd08      	pop	{r3, pc}
   ba686:	0000      	.short	0x0000
   ba688:	00030220 	.word	0x00030220

000ba68c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   ba68c:	b508      	push	{r3, lr}
   ba68e:	4b03      	ldr	r3, [pc, #12]	; (ba69c <system_ctrl_set_result+0x10>)
   ba690:	681b      	ldr	r3, [r3, #0]
   ba692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   ba696:	9301      	str	r3, [sp, #4]
   ba698:	bd08      	pop	{r3, pc}
   ba69a:	0000      	.short	0x0000
   ba69c:	00030220 	.word	0x00030220

000ba6a0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   ba6a0:	b508      	push	{r3, lr}
   ba6a2:	4b03      	ldr	r3, [pc, #12]	; (ba6b0 <system_power_management_set_config+0x10>)
   ba6a4:	681b      	ldr	r3, [r3, #0]
   ba6a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   ba6aa:	9301      	str	r3, [sp, #4]
   ba6ac:	bd08      	pop	{r3, pc}
   ba6ae:	0000      	.short	0x0000
   ba6b0:	00030220 	.word	0x00030220

000ba6b4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   ba6b4:	b508      	push	{r3, lr}
   ba6b6:	4b03      	ldr	r3, [pc, #12]	; (ba6c4 <system_sleep_ext+0x10>)
   ba6b8:	681b      	ldr	r3, [r3, #0]
   ba6ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   ba6be:	9301      	str	r3, [sp, #4]
   ba6c0:	bd08      	pop	{r3, pc}
   ba6c2:	0000      	.short	0x0000
   ba6c4:	00030220 	.word	0x00030220

000ba6c8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   ba6c8:	b508      	push	{r3, lr}
   ba6ca:	4b03      	ldr	r3, [pc, #12]	; (ba6d8 <system_reset+0x10>)
   ba6cc:	681b      	ldr	r3, [r3, #0]
   ba6ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   ba6d2:	9301      	str	r3, [sp, #4]
   ba6d4:	bd08      	pop	{r3, pc}
   ba6d6:	0000      	.short	0x0000
   ba6d8:	00030220 	.word	0x00030220

000ba6dc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   ba6dc:	b508      	push	{r3, lr}
   ba6de:	4b02      	ldr	r3, [pc, #8]	; (ba6e8 <spark_function+0xc>)
   ba6e0:	681b      	ldr	r3, [r3, #0]
   ba6e2:	685b      	ldr	r3, [r3, #4]
   ba6e4:	9301      	str	r3, [sp, #4]
   ba6e6:	bd08      	pop	{r3, pc}
   ba6e8:	00030244 	.word	0x00030244

000ba6ec <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   ba6ec:	b508      	push	{r3, lr}
   ba6ee:	4b02      	ldr	r3, [pc, #8]	; (ba6f8 <spark_process+0xc>)
   ba6f0:	681b      	ldr	r3, [r3, #0]
   ba6f2:	689b      	ldr	r3, [r3, #8]
   ba6f4:	9301      	str	r3, [sp, #4]
   ba6f6:	bd08      	pop	{r3, pc}
   ba6f8:	00030244 	.word	0x00030244

000ba6fc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   ba6fc:	b508      	push	{r3, lr}
   ba6fe:	4b02      	ldr	r3, [pc, #8]	; (ba708 <spark_cloud_flag_connect+0xc>)
   ba700:	681b      	ldr	r3, [r3, #0]
   ba702:	68db      	ldr	r3, [r3, #12]
   ba704:	9301      	str	r3, [sp, #4]
   ba706:	bd08      	pop	{r3, pc}
   ba708:	00030244 	.word	0x00030244

000ba70c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   ba70c:	b508      	push	{r3, lr}
   ba70e:	4b02      	ldr	r3, [pc, #8]	; (ba718 <spark_cloud_flag_connected+0xc>)
   ba710:	681b      	ldr	r3, [r3, #0]
   ba712:	695b      	ldr	r3, [r3, #20]
   ba714:	9301      	str	r3, [sp, #4]
   ba716:	bd08      	pop	{r3, pc}
   ba718:	00030244 	.word	0x00030244

000ba71c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   ba71c:	b508      	push	{r3, lr}
   ba71e:	4b02      	ldr	r3, [pc, #8]	; (ba728 <spark_deviceID+0xc>)
   ba720:	681b      	ldr	r3, [r3, #0]
   ba722:	69db      	ldr	r3, [r3, #28]
   ba724:	9301      	str	r3, [sp, #4]
   ba726:	bd08      	pop	{r3, pc}
   ba728:	00030244 	.word	0x00030244

000ba72c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   ba72c:	b508      	push	{r3, lr}
   ba72e:	4b02      	ldr	r3, [pc, #8]	; (ba738 <spark_send_event+0xc>)
   ba730:	681b      	ldr	r3, [r3, #0]
   ba732:	6a1b      	ldr	r3, [r3, #32]
   ba734:	9301      	str	r3, [sp, #4]
   ba736:	bd08      	pop	{r3, pc}
   ba738:	00030244 	.word	0x00030244

000ba73c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   ba73c:	b508      	push	{r3, lr}
   ba73e:	4b02      	ldr	r3, [pc, #8]	; (ba748 <spark_subscribe+0xc>)
   ba740:	681b      	ldr	r3, [r3, #0]
   ba742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba744:	9301      	str	r3, [sp, #4]
   ba746:	bd08      	pop	{r3, pc}
   ba748:	00030244 	.word	0x00030244

000ba74c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   ba74c:	b508      	push	{r3, lr}
   ba74e:	4b02      	ldr	r3, [pc, #8]	; (ba758 <spark_sync_time_pending+0xc>)
   ba750:	681b      	ldr	r3, [r3, #0]
   ba752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba754:	9301      	str	r3, [sp, #4]
   ba756:	bd08      	pop	{r3, pc}
   ba758:	00030244 	.word	0x00030244

000ba75c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   ba75c:	b508      	push	{r3, lr}
   ba75e:	4b02      	ldr	r3, [pc, #8]	; (ba768 <spark_sync_time_last+0xc>)
   ba760:	681b      	ldr	r3, [r3, #0]
   ba762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba764:	9301      	str	r3, [sp, #4]
   ba766:	bd08      	pop	{r3, pc}
   ba768:	00030244 	.word	0x00030244

000ba76c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   ba76c:	b508      	push	{r3, lr}
   ba76e:	4b02      	ldr	r3, [pc, #8]	; (ba778 <spark_set_connection_property+0xc>)
   ba770:	681b      	ldr	r3, [r3, #0]
   ba772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba774:	9301      	str	r3, [sp, #4]
   ba776:	bd08      	pop	{r3, pc}
   ba778:	00030244 	.word	0x00030244

000ba77c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   ba77c:	b508      	push	{r3, lr}
   ba77e:	4b02      	ldr	r3, [pc, #8]	; (ba788 <spark_set_random_seed_from_cloud_handler+0xc>)
   ba780:	681b      	ldr	r3, [r3, #0]
   ba782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba784:	9301      	str	r3, [sp, #4]
   ba786:	bd08      	pop	{r3, pc}
   ba788:	00030244 	.word	0x00030244

000ba78c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   ba78c:	b508      	push	{r3, lr}
   ba78e:	4b02      	ldr	r3, [pc, #8]	; (ba798 <spark_cloud_disconnect+0xc>)
   ba790:	681b      	ldr	r3, [r3, #0]
   ba792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba794:	9301      	str	r3, [sp, #4]
   ba796:	bd08      	pop	{r3, pc}
   ba798:	00030244 	.word	0x00030244

000ba79c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   ba79c:	b508      	push	{r3, lr}
   ba79e:	4b02      	ldr	r3, [pc, #8]	; (ba7a8 <network_connect+0xc>)
   ba7a0:	681b      	ldr	r3, [r3, #0]
   ba7a2:	685b      	ldr	r3, [r3, #4]
   ba7a4:	9301      	str	r3, [sp, #4]
   ba7a6:	bd08      	pop	{r3, pc}
   ba7a8:	00030240 	.word	0x00030240

000ba7ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   ba7ac:	b508      	push	{r3, lr}
   ba7ae:	4b02      	ldr	r3, [pc, #8]	; (ba7b8 <network_connecting+0xc>)
   ba7b0:	681b      	ldr	r3, [r3, #0]
   ba7b2:	689b      	ldr	r3, [r3, #8]
   ba7b4:	9301      	str	r3, [sp, #4]
   ba7b6:	bd08      	pop	{r3, pc}
   ba7b8:	00030240 	.word	0x00030240

000ba7bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   ba7bc:	b508      	push	{r3, lr}
   ba7be:	4b02      	ldr	r3, [pc, #8]	; (ba7c8 <network_disconnect+0xc>)
   ba7c0:	681b      	ldr	r3, [r3, #0]
   ba7c2:	68db      	ldr	r3, [r3, #12]
   ba7c4:	9301      	str	r3, [sp, #4]
   ba7c6:	bd08      	pop	{r3, pc}
   ba7c8:	00030240 	.word	0x00030240

000ba7cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   ba7cc:	b508      	push	{r3, lr}
   ba7ce:	4b02      	ldr	r3, [pc, #8]	; (ba7d8 <network_ready+0xc>)
   ba7d0:	681b      	ldr	r3, [r3, #0]
   ba7d2:	691b      	ldr	r3, [r3, #16]
   ba7d4:	9301      	str	r3, [sp, #4]
   ba7d6:	bd08      	pop	{r3, pc}
   ba7d8:	00030240 	.word	0x00030240

000ba7dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   ba7dc:	b508      	push	{r3, lr}
   ba7de:	4b02      	ldr	r3, [pc, #8]	; (ba7e8 <network_on+0xc>)
   ba7e0:	681b      	ldr	r3, [r3, #0]
   ba7e2:	695b      	ldr	r3, [r3, #20]
   ba7e4:	9301      	str	r3, [sp, #4]
   ba7e6:	bd08      	pop	{r3, pc}
   ba7e8:	00030240 	.word	0x00030240

000ba7ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   ba7ec:	b508      	push	{r3, lr}
   ba7ee:	4b02      	ldr	r3, [pc, #8]	; (ba7f8 <network_off+0xc>)
   ba7f0:	681b      	ldr	r3, [r3, #0]
   ba7f2:	699b      	ldr	r3, [r3, #24]
   ba7f4:	9301      	str	r3, [sp, #4]
   ba7f6:	bd08      	pop	{r3, pc}
   ba7f8:	00030240 	.word	0x00030240

000ba7fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   ba7fc:	b508      	push	{r3, lr}
   ba7fe:	4b02      	ldr	r3, [pc, #8]	; (ba808 <network_listen+0xc>)
   ba800:	681b      	ldr	r3, [r3, #0]
   ba802:	69db      	ldr	r3, [r3, #28]
   ba804:	9301      	str	r3, [sp, #4]
   ba806:	bd08      	pop	{r3, pc}
   ba808:	00030240 	.word	0x00030240

000ba80c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   ba80c:	b508      	push	{r3, lr}
   ba80e:	4b02      	ldr	r3, [pc, #8]	; (ba818 <network_listening+0xc>)
   ba810:	681b      	ldr	r3, [r3, #0]
   ba812:	6a1b      	ldr	r3, [r3, #32]
   ba814:	9301      	str	r3, [sp, #4]
   ba816:	bd08      	pop	{r3, pc}
   ba818:	00030240 	.word	0x00030240

000ba81c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   ba81c:	b508      	push	{r3, lr}
   ba81e:	4b02      	ldr	r3, [pc, #8]	; (ba828 <network_set_listen_timeout+0xc>)
   ba820:	681b      	ldr	r3, [r3, #0]
   ba822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba824:	9301      	str	r3, [sp, #4]
   ba826:	bd08      	pop	{r3, pc}
   ba828:	00030240 	.word	0x00030240

000ba82c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   ba82c:	b508      	push	{r3, lr}
   ba82e:	4b02      	ldr	r3, [pc, #8]	; (ba838 <network_get_listen_timeout+0xc>)
   ba830:	681b      	ldr	r3, [r3, #0]
   ba832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba834:	9301      	str	r3, [sp, #4]
   ba836:	bd08      	pop	{r3, pc}
   ba838:	00030240 	.word	0x00030240

000ba83c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   ba83c:	b508      	push	{r3, lr}
   ba83e:	4b02      	ldr	r3, [pc, #8]	; (ba848 <network_is_on+0xc>)
   ba840:	681b      	ldr	r3, [r3, #0]
   ba842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba844:	9301      	str	r3, [sp, #4]
   ba846:	bd08      	pop	{r3, pc}
   ba848:	00030240 	.word	0x00030240

000ba84c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   ba84c:	b508      	push	{r3, lr}
   ba84e:	4b02      	ldr	r3, [pc, #8]	; (ba858 <network_is_off+0xc>)
   ba850:	681b      	ldr	r3, [r3, #0]
   ba852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba854:	9301      	str	r3, [sp, #4]
   ba856:	bd08      	pop	{r3, pc}
   ba858:	00030240 	.word	0x00030240

000ba85c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   ba85c:	b508      	push	{r3, lr}
   ba85e:	4b02      	ldr	r3, [pc, #8]	; (ba868 <network_prefer+0xc>)
   ba860:	681b      	ldr	r3, [r3, #0]
   ba862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba864:	9301      	str	r3, [sp, #4]
   ba866:	bd08      	pop	{r3, pc}
   ba868:	00030240 	.word	0x00030240

000ba86c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   ba86c:	b508      	push	{r3, lr}
   ba86e:	4b02      	ldr	r3, [pc, #8]	; (ba878 <network_is_preferred+0xc>)
   ba870:	681b      	ldr	r3, [r3, #0]
   ba872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba874:	9301      	str	r3, [sp, #4]
   ba876:	bd08      	pop	{r3, pc}
   ba878:	00030240 	.word	0x00030240

000ba87c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   ba87c:	b508      	push	{r3, lr}
   ba87e:	4b02      	ldr	r3, [pc, #8]	; (ba888 <malloc+0xc>)
   ba880:	681b      	ldr	r3, [r3, #0]
   ba882:	681b      	ldr	r3, [r3, #0]
   ba884:	9301      	str	r3, [sp, #4]
   ba886:	bd08      	pop	{r3, pc}
   ba888:	0003021c 	.word	0x0003021c

000ba88c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   ba88c:	b508      	push	{r3, lr}
   ba88e:	4b02      	ldr	r3, [pc, #8]	; (ba898 <free+0xc>)
   ba890:	681b      	ldr	r3, [r3, #0]
   ba892:	685b      	ldr	r3, [r3, #4]
   ba894:	9301      	str	r3, [sp, #4]
   ba896:	bd08      	pop	{r3, pc}
   ba898:	0003021c 	.word	0x0003021c

000ba89c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   ba89c:	b508      	push	{r3, lr}
   ba89e:	4b02      	ldr	r3, [pc, #8]	; (ba8a8 <realloc+0xc>)
   ba8a0:	681b      	ldr	r3, [r3, #0]
   ba8a2:	689b      	ldr	r3, [r3, #8]
   ba8a4:	9301      	str	r3, [sp, #4]
   ba8a6:	bd08      	pop	{r3, pc}
   ba8a8:	0003021c 	.word	0x0003021c

000ba8ac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   ba8ac:	b508      	push	{r3, lr}
   ba8ae:	4b02      	ldr	r3, [pc, #8]	; (ba8b8 <siprintf+0xc>)
   ba8b0:	681b      	ldr	r3, [r3, #0]
   ba8b2:	691b      	ldr	r3, [r3, #16]
   ba8b4:	9301      	str	r3, [sp, #4]
   ba8b6:	bd08      	pop	{r3, pc}
   ba8b8:	0003021c 	.word	0x0003021c

000ba8bc <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   ba8bc:	b508      	push	{r3, lr}
   ba8be:	4b02      	ldr	r3, [pc, #8]	; (ba8c8 <sscanf+0xc>)
   ba8c0:	681b      	ldr	r3, [r3, #0]
   ba8c2:	695b      	ldr	r3, [r3, #20]
   ba8c4:	9301      	str	r3, [sp, #4]
   ba8c6:	bd08      	pop	{r3, pc}
   ba8c8:	0003021c 	.word	0x0003021c

000ba8cc <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   ba8cc:	b508      	push	{r3, lr}
   ba8ce:	4b02      	ldr	r3, [pc, #8]	; (ba8d8 <snprintf+0xc>)
   ba8d0:	681b      	ldr	r3, [r3, #0]
   ba8d2:	69db      	ldr	r3, [r3, #28]
   ba8d4:	9301      	str	r3, [sp, #4]
   ba8d6:	bd08      	pop	{r3, pc}
   ba8d8:	0003021c 	.word	0x0003021c

000ba8dc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   ba8dc:	b508      	push	{r3, lr}
   ba8de:	4b02      	ldr	r3, [pc, #8]	; (ba8e8 <vsnprintf+0xc>)
   ba8e0:	681b      	ldr	r3, [r3, #0]
   ba8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba8e4:	9301      	str	r3, [sp, #4]
   ba8e6:	bd08      	pop	{r3, pc}
   ba8e8:	0003021c 	.word	0x0003021c

000ba8ec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   ba8ec:	b508      	push	{r3, lr}
   ba8ee:	4b02      	ldr	r3, [pc, #8]	; (ba8f8 <abort+0xc>)
   ba8f0:	681b      	ldr	r3, [r3, #0]
   ba8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba8f4:	9301      	str	r3, [sp, #4]
   ba8f6:	bd08      	pop	{r3, pc}
   ba8f8:	0003021c 	.word	0x0003021c

000ba8fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   ba8fc:	b508      	push	{r3, lr}
   ba8fe:	4b02      	ldr	r3, [pc, #8]	; (ba908 <_malloc_r+0xc>)
   ba900:	681b      	ldr	r3, [r3, #0]
   ba902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba904:	9301      	str	r3, [sp, #4]
   ba906:	bd08      	pop	{r3, pc}
   ba908:	0003021c 	.word	0x0003021c

000ba90c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   ba90c:	b508      	push	{r3, lr}
   ba90e:	4b02      	ldr	r3, [pc, #8]	; (ba918 <__errno+0xc>)
   ba910:	681b      	ldr	r3, [r3, #0]
   ba912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba914:	9301      	str	r3, [sp, #4]
   ba916:	bd08      	pop	{r3, pc}
   ba918:	0003021c 	.word	0x0003021c

000ba91c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   ba91c:	b508      	push	{r3, lr}
   ba91e:	4b02      	ldr	r3, [pc, #8]	; (ba928 <__assert_func+0xc>)
   ba920:	681b      	ldr	r3, [r3, #0]
   ba922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba924:	9301      	str	r3, [sp, #4]
   ba926:	bd08      	pop	{r3, pc}
   ba928:	0003021c 	.word	0x0003021c

000ba92c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   ba92c:	b508      	push	{r3, lr}
   ba92e:	4b02      	ldr	r3, [pc, #8]	; (ba938 <newlib_impure_ptr_callback+0xc>)
   ba930:	681b      	ldr	r3, [r3, #0]
   ba932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba934:	9301      	str	r3, [sp, #4]
   ba936:	bd08      	pop	{r3, pc}
   ba938:	0003021c 	.word	0x0003021c

000ba93c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   ba93c:	b508      	push	{r3, lr}
   ba93e:	4b02      	ldr	r3, [pc, #8]	; (ba948 <strftime+0xc>)
   ba940:	681b      	ldr	r3, [r3, #0]
   ba942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba944:	9301      	str	r3, [sp, #4]
   ba946:	bd08      	pop	{r3, pc}
   ba948:	0003021c 	.word	0x0003021c

000ba94c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   ba94c:	b508      	push	{r3, lr}
   ba94e:	4b02      	ldr	r3, [pc, #8]	; (ba958 <localtime_r+0xc>)
   ba950:	681b      	ldr	r3, [r3, #0]
   ba952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba954:	9301      	str	r3, [sp, #4]
   ba956:	bd08      	pop	{r3, pc}
   ba958:	0003021c 	.word	0x0003021c

000ba95c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   ba95c:	b508      	push	{r3, lr}
   ba95e:	4b02      	ldr	r3, [pc, #8]	; (ba968 <gmtime_r+0xc>)
   ba960:	681b      	ldr	r3, [r3, #0]
   ba962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba964:	9301      	str	r3, [sp, #4]
   ba966:	bd08      	pop	{r3, pc}
   ba968:	0003021c 	.word	0x0003021c

000ba96c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   ba96c:	b508      	push	{r3, lr}
   ba96e:	4b02      	ldr	r3, [pc, #8]	; (ba978 <mktime+0xc>)
   ba970:	681b      	ldr	r3, [r3, #0]
   ba972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba974:	9301      	str	r3, [sp, #4]
   ba976:	bd08      	pop	{r3, pc}
   ba978:	0003021c 	.word	0x0003021c

000ba97c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba97c:	2100      	movs	r1, #0
   ba97e:	f7ff be43 	b.w	ba608 <system_delay_ms>

000ba982 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ba982:	b510      	push	{r4, lr}
      if (_M_empty())
   ba984:	6883      	ldr	r3, [r0, #8]
   ba986:	4604      	mov	r4, r0
   ba988:	b90b      	cbnz	r3, ba98e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ba98a:	f003 f8ef 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba98e:	68c3      	ldr	r3, [r0, #12]
   ba990:	4798      	blx	r3
      if (_M_manager)
   ba992:	68a3      	ldr	r3, [r4, #8]
   ba994:	b11b      	cbz	r3, ba99e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba996:	2203      	movs	r2, #3
   ba998:	4621      	mov	r1, r4
   ba99a:	4620      	mov	r0, r4
   ba99c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba99e:	4620      	mov	r0, r4
   ba9a0:	2110      	movs	r1, #16
}
   ba9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba9a6:	f7fa b890 	b.w	b4aca <_ZdlPvj>

000ba9aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   ba9aa:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   ba9ac:	6843      	ldr	r3, [r0, #4]
   ba9ae:	3b01      	subs	r3, #1
    {
   ba9b0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   ba9b2:	6043      	str	r3, [r0, #4]
   ba9b4:	b963      	cbnz	r3, ba9d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   ba9b6:	6803      	ldr	r3, [r0, #0]
   ba9b8:	689b      	ldr	r3, [r3, #8]
   ba9ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba9bc:	68a3      	ldr	r3, [r4, #8]
   ba9be:	3b01      	subs	r3, #1
   ba9c0:	60a3      	str	r3, [r4, #8]
   ba9c2:	b92b      	cbnz	r3, ba9d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   ba9c4:	6823      	ldr	r3, [r4, #0]
   ba9c6:	4620      	mov	r0, r4
   ba9c8:	68db      	ldr	r3, [r3, #12]
    }
   ba9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   ba9ce:	4718      	bx	r3
    }
   ba9d0:	bd10      	pop	{r4, pc}

000ba9d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba9d2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba9d4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba9d8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba9da:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ba9de:	42ae      	cmp	r6, r5
   ba9e0:	d004      	beq.n	ba9ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ba9e2:	4628      	mov	r0, r5
   ba9e4:	f002 f9cc 	bl	bcd80 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ba9e8:	3510      	adds	r5, #16
   ba9ea:	e7f8      	b.n	ba9de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba9ec:	6820      	ldr	r0, [r4, #0]
   ba9ee:	f7ff ff4d 	bl	ba88c <free>
    AllocatorT::free(data_);
}
   ba9f2:	4620      	mov	r0, r4
   ba9f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba9f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   ba9f8:	4802      	ldr	r0, [pc, #8]	; (baa04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba9fa:	2300      	movs	r3, #0
   ba9fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   ba9fe:	f7ff bb71 	b.w	ba0e4 <os_mutex_recursive_create>
   baa02:	bf00      	nop
   baa04:	2003e604 	.word	0x2003e604

000baa08 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   baa08:	2200      	movs	r2, #0
   baa0a:	6840      	ldr	r0, [r0, #4]
   baa0c:	4611      	mov	r1, r2
   baa0e:	f7ff bedd 	b.w	ba7cc <network_ready>

000baa12 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   baa12:	2200      	movs	r2, #0
   baa14:	6840      	ldr	r0, [r0, #4]
   baa16:	4611      	mov	r1, r2
   baa18:	f7ff bef8 	b.w	ba80c <network_listening>

000baa1c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baa1c:	2200      	movs	r2, #0
   baa1e:	6840      	ldr	r0, [r0, #4]
   baa20:	4611      	mov	r1, r2
   baa22:	f7ff bf03 	b.w	ba82c <network_get_listen_timeout>

000baa26 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baa26:	6840      	ldr	r0, [r0, #4]
   baa28:	2200      	movs	r2, #0
   baa2a:	f7ff bef7 	b.w	ba81c <network_set_listen_timeout>

000baa2e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baa2e:	6840      	ldr	r0, [r0, #4]
   baa30:	2200      	movs	r2, #0
   baa32:	f081 0101 	eor.w	r1, r1, #1
   baa36:	f7ff bee1 	b.w	ba7fc <network_listen>

000baa3a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baa3a:	2300      	movs	r3, #0
   baa3c:	6840      	ldr	r0, [r0, #4]
   baa3e:	461a      	mov	r2, r3
   baa40:	4619      	mov	r1, r3
   baa42:	f7ff bed3 	b.w	ba7ec <network_off>

000baa46 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baa46:	2300      	movs	r3, #0
   baa48:	6840      	ldr	r0, [r0, #4]
   baa4a:	461a      	mov	r2, r3
   baa4c:	4619      	mov	r1, r3
   baa4e:	f7ff bec5 	b.w	ba7dc <network_on>

000baa52 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baa52:	2200      	movs	r2, #0
   baa54:	6840      	ldr	r0, [r0, #4]
   baa56:	4611      	mov	r1, r2
   baa58:	f7ff bea8 	b.w	ba7ac <network_connecting>

000baa5c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baa5c:	6840      	ldr	r0, [r0, #4]
   baa5e:	2200      	movs	r2, #0
   baa60:	2102      	movs	r1, #2
   baa62:	f7ff beab 	b.w	ba7bc <network_disconnect>

000baa66 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baa66:	2300      	movs	r3, #0
   baa68:	6840      	ldr	r0, [r0, #4]
   baa6a:	461a      	mov	r2, r3
   baa6c:	f7ff be96 	b.w	ba79c <network_connect>

000baa70 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   baa70:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   baa72:	4b13      	ldr	r3, [pc, #76]	; (baac0 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   baa74:	6003      	str	r3, [r0, #0]
   baa76:	2518      	movs	r5, #24
   baa78:	3330      	adds	r3, #48	; 0x30
   baa7a:	b086      	sub	sp, #24
   baa7c:	460e      	mov	r6, r1
   baa7e:	6043      	str	r3, [r0, #4]
   baa80:	462a      	mov	r2, r5
   baa82:	2100      	movs	r1, #0
   baa84:	4604      	mov	r4, r0
   baa86:	3008      	adds	r0, #8
   baa88:	f003 f9f8 	bl	bde7c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   baa8c:	2200      	movs	r2, #0
   baa8e:	6870      	ldr	r0, [r6, #4]
   baa90:	4611      	mov	r1, r2
   baa92:	f7ff fe9b 	bl	ba7cc <network_ready>
   baa96:	b178      	cbz	r0, baab8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   baa98:	2100      	movs	r1, #0
   baa9a:	462a      	mov	r2, r5
   baa9c:	4668      	mov	r0, sp
   baa9e:	f003 f9ed 	bl	bde7c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   baaa2:	4669      	mov	r1, sp
   baaa4:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   baaa6:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   baaaa:	f7ff fadb 	bl	ba064 <cellular_signal>
   baaae:	b918      	cbnz	r0, baab8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   baab0:	4669      	mov	r1, sp
   baab2:	4620      	mov	r0, r4
   baab4:	f000 f990 	bl	badd8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   baab8:	4620      	mov	r0, r4
   baaba:	b006      	add	sp, #24
   baabc:	bd70      	pop	{r4, r5, r6, pc}
   baabe:	bf00      	nop
   baac0:	000bf5bc 	.word	0x000bf5bc

000baac4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   baac4:	4b08      	ldr	r3, [pc, #32]	; (baae8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   baac6:	b510      	push	{r4, lr}
   baac8:	2428      	movs	r4, #40	; 0x28
   baaca:	4622      	mov	r2, r4
   baacc:	4618      	mov	r0, r3
   baace:	2100      	movs	r1, #0
   baad0:	f003 f9d4 	bl	bde7c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   baad4:	4b05      	ldr	r3, [pc, #20]	; (baaec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   baad6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   baad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baadc:	6042      	str	r2, [r0, #4]
   baade:	2204      	movs	r2, #4
   baae0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   baae2:	4a03      	ldr	r2, [pc, #12]	; (baaf0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   baae4:	601a      	str	r2, [r3, #0]
   baae6:	bd10      	pop	{r4, pc}
   baae8:	2003e610 	.word	0x2003e610
   baaec:	2003e608 	.word	0x2003e608
   baaf0:	000bf56c 	.word	0x000bf56c

000baaf4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   baaf4:	4770      	bx	lr

000baaf6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   baaf6:	7b00      	ldrb	r0, [r0, #12]
   baaf8:	4770      	bx	lr

000baafa <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   baafa:	7b03      	ldrb	r3, [r0, #12]
   baafc:	b14b      	cbz	r3, bab12 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   baafe:	6903      	ldr	r3, [r0, #16]
   bab00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bab04:	d005      	beq.n	bab12 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bab06:	6980      	ldr	r0, [r0, #24]
   bab08:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bab0c:	bf18      	it	ne
   bab0e:	2001      	movne	r0, #1
   bab10:	4770      	bx	lr
   bab12:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bab14:	4770      	bx	lr

000bab16 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bab16:	6803      	ldr	r3, [r0, #0]
   bab18:	6a1b      	ldr	r3, [r3, #32]
   bab1a:	4718      	bx	r3

000bab1c <_ZN14CellularSignalD0Ev>:
   bab1c:	b510      	push	{r4, lr}
   bab1e:	2120      	movs	r1, #32
   bab20:	4604      	mov	r4, r0
   bab22:	f7f9 ffd2 	bl	b4aca <_ZdlPvj>
   bab26:	4620      	mov	r0, r4
   bab28:	bd10      	pop	{r4, pc}
	...

000bab2c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bab2c:	7b03      	ldrb	r3, [r0, #12]
   bab2e:	b17b      	cbz	r3, bab50 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bab30:	6943      	ldr	r3, [r0, #20]
   bab32:	2b00      	cmp	r3, #0
   bab34:	db0c      	blt.n	bab50 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bab36:	ee07 3a90 	vmov	s15, r3
   bab3a:	ed9f 7a07 	vldr	s14, [pc, #28]	; bab58 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bab3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bab42:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bab46:	eddf 7a05 	vldr	s15, [pc, #20]	; bab5c <_ZNK14CellularSignal11getStrengthEv+0x30>
   bab4a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bab4e:	4770      	bx	lr
    return -1.0f;
   bab50:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bab54:	4770      	bx	lr
   bab56:	bf00      	nop
   bab58:	477fff00 	.word	0x477fff00
   bab5c:	42c80000 	.word	0x42c80000

000bab60 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bab60:	7b03      	ldrb	r3, [r0, #12]
   bab62:	b163      	cbz	r3, bab7e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bab64:	6903      	ldr	r3, [r0, #16]
   bab66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bab6a:	d008      	beq.n	bab7e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bab6c:	ee07 3a90 	vmov	s15, r3
   bab70:	ed9f 7a04 	vldr	s14, [pc, #16]	; bab84 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bab74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bab78:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bab7c:	4770      	bx	lr
    return 0.0f;
   bab7e:	ed9f 0a02 	vldr	s0, [pc, #8]	; bab88 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bab82:	4770      	bx	lr
   bab84:	42c80000 	.word	0x42c80000
   bab88:	00000000 	.word	0x00000000

000bab8c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bab8c:	7b03      	ldrb	r3, [r0, #12]
   bab8e:	b17b      	cbz	r3, babb0 <_ZNK14CellularSignal10getQualityEv+0x24>
   bab90:	69c3      	ldr	r3, [r0, #28]
   bab92:	2b00      	cmp	r3, #0
   bab94:	db0c      	blt.n	babb0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bab96:	ee07 3a90 	vmov	s15, r3
   bab9a:	ed9f 7a07 	vldr	s14, [pc, #28]	; babb8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bab9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   baba2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   baba6:	eddf 7a05 	vldr	s15, [pc, #20]	; babbc <_ZNK14CellularSignal10getQualityEv+0x30>
   babaa:	ee20 0a27 	vmul.f32	s0, s0, s15
   babae:	4770      	bx	lr
    return -1.0f;
   babb0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   babb4:	4770      	bx	lr
   babb6:	bf00      	nop
   babb8:	477fff00 	.word	0x477fff00
   babbc:	42c80000 	.word	0x42c80000

000babc0 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   babc0:	7b03      	ldrb	r3, [r0, #12]
   babc2:	b163      	cbz	r3, babde <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   babc4:	6983      	ldr	r3, [r0, #24]
   babc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   babca:	d008      	beq.n	babde <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   babcc:	ee07 3a90 	vmov	s15, r3
   babd0:	ed9f 7a04 	vldr	s14, [pc, #16]	; babe4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   babd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   babd8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   babdc:	4770      	bx	lr
    return 0.0f;
   babde:	ed9f 0a02 	vldr	s0, [pc, #8]	; babe8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   babe2:	4770      	bx	lr
   babe4:	42c80000 	.word	0x42c80000
   babe8:	00000000 	.word	0x00000000

000babec <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
   babec:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   babee:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
   babf0:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   babf2:	da0a      	bge.n	bac0a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   babf4:	212d      	movs	r1, #45	; 0x2d
   babf6:	f002 f867 	bl	bccc8 <_ZN5Print5printEc>
            val = -n;
   babfa:	4261      	negs	r1, r4
            t = print('-');
   babfc:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   babfe:	220a      	movs	r2, #10
   bac00:	4630      	mov	r0, r6
   bac02:	f002 f864 	bl	bccce <_ZN5Print11printNumberEmh>
    }
}
   bac06:	4428      	add	r0, r5
   bac08:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   bac0a:	4621      	mov	r1, r4
        size_t t = 0;
   bac0c:	2500      	movs	r5, #0
   bac0e:	e7f6      	b.n	babfe <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000bac10 <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
   bac10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac14:	ec55 4b10 	vmov	r4, r5, d0
   bac18:	4607      	mov	r7, r0
   bac1a:	460e      	mov	r6, r1
        if (std::isnan(number)) {
   bac1c:	ee10 2a10 	vmov	r2, s0
   bac20:	ee10 0a10 	vmov	r0, s0
   bac24:	462b      	mov	r3, r5
   bac26:	4629      	mov	r1, r5
   bac28:	f7f9 fe50 	bl	b48cc <__aeabi_dcmpun>
   bac2c:	b128      	cbz	r0, bac3a <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
   bac2e:	494c      	ldr	r1, [pc, #304]	; (bad60 <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
   bac30:	4638      	mov	r0, r7
    }
   bac32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
   bac36:	f002 b843 	b.w	bccc0 <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bac3a:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
   bac3e:	4b49      	ldr	r3, [pc, #292]	; (bad64 <_ZN5Print10printFloatEdh+0x154>)
   bac40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac44:	4620      	mov	r0, r4
   bac46:	4649      	mov	r1, r9
   bac48:	f7f9 fe40 	bl	b48cc <__aeabi_dcmpun>
   bac4c:	b948      	cbnz	r0, bac62 <_ZN5Print10printFloatEdh+0x52>
   bac4e:	4b45      	ldr	r3, [pc, #276]	; (bad64 <_ZN5Print10printFloatEdh+0x154>)
   bac50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac54:	4620      	mov	r0, r4
   bac56:	4649      	mov	r1, r9
   bac58:	f7f9 fe1a 	bl	b4890 <__aeabi_dcmple>
   bac5c:	b908      	cbnz	r0, bac62 <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
   bac5e:	4942      	ldr	r1, [pc, #264]	; (bad68 <_ZN5Print10printFloatEdh+0x158>)
   bac60:	e7e6      	b.n	bac30 <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
   bac62:	4b42      	ldr	r3, [pc, #264]	; (bad6c <_ZN5Print10printFloatEdh+0x15c>)
   bac64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bac68:	4620      	mov	r0, r4
   bac6a:	4629      	mov	r1, r5
   bac6c:	f7f9 fe24 	bl	b48b8 <__aeabi_dcmpgt>
   bac70:	b108      	cbz	r0, bac76 <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
   bac72:	493f      	ldr	r1, [pc, #252]	; (bad70 <_ZN5Print10printFloatEdh+0x160>)
   bac74:	e7dc      	b.n	bac30 <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
   bac76:	4b3f      	ldr	r3, [pc, #252]	; (bad74 <_ZN5Print10printFloatEdh+0x164>)
   bac78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bac7c:	4620      	mov	r0, r4
   bac7e:	4629      	mov	r1, r5
   bac80:	f7f9 fdfc 	bl	b487c <__aeabi_dcmplt>
   bac84:	2800      	cmp	r0, #0
   bac86:	d1f4      	bne.n	bac72 <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
   bac88:	2200      	movs	r2, #0
   bac8a:	2300      	movs	r3, #0
   bac8c:	4620      	mov	r0, r4
   bac8e:	4629      	mov	r1, r5
   bac90:	f7f9 fdf4 	bl	b487c <__aeabi_dcmplt>
   bac94:	b1d0      	cbz	r0, baccc <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
   bac96:	212d      	movs	r1, #45	; 0x2d
   bac98:	4638      	mov	r0, r7
   bac9a:	f002 f815 	bl	bccc8 <_ZN5Print5printEc>
            number = -number;
   bac9e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
   baca2:	4682      	mov	sl, r0
            number = -number;
   baca4:	461d      	mov	r5, r3
        double rounding = 0.5;
   baca6:	4934      	ldr	r1, [pc, #208]	; (bad78 <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
   baca8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; bad80 <_ZN5Print10printFloatEdh+0x170>
        size_t n = 0;
   bacac:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
   bacb0:	2000      	movs	r0, #0
            rounding /= 10.0;
   bacb2:	f04f 0800 	mov.w	r8, #0
        for (uint8_t i = 0; i < digits; ++i) {
   bacb6:	fa5f f38b 	uxtb.w	r3, fp
   bacba:	429e      	cmp	r6, r3
   bacbc:	d908      	bls.n	bacd0 <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
   bacbe:	4642      	mov	r2, r8
   bacc0:	464b      	mov	r3, r9
   bacc2:	f7f9 fc93 	bl	b45ec <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
   bacc6:	f10b 0b01 	add.w	fp, fp, #1
   bacca:	e7f4      	b.n	bacb6 <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
   baccc:	4682      	mov	sl, r0
   bacce:	e7ea      	b.n	baca6 <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
   bacd0:	4602      	mov	r2, r0
   bacd2:	460b      	mov	r3, r1
   bacd4:	4620      	mov	r0, r4
   bacd6:	4629      	mov	r1, r5
   bacd8:	f7f9 f9a8 	bl	b402c <__adddf3>
   bacdc:	460d      	mov	r5, r1
   bacde:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
   bace0:	f7f9 fe32 	bl	b4948 <__aeabi_d2uiz>
   bace4:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
   bace6:	f7f9 fadd 	bl	b42a4 <__aeabi_ui2d>
   bacea:	4602      	mov	r2, r0
   bacec:	460b      	mov	r3, r1
   bacee:	4620      	mov	r0, r4
   bacf0:	4629      	mov	r1, r5
   bacf2:	f7f9 f999 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bacf6:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
   bacf8:	4604      	mov	r4, r0
   bacfa:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
   bacfc:	4638      	mov	r0, r7
   bacfe:	4641      	mov	r1, r8
   bad00:	f001 ffe5 	bl	bccce <_ZN5Print11printNumberEmh>
        n += print(int_part);
   bad04:	4482      	add	sl, r0
        if (digits > 0) {
   bad06:	b33e      	cbz	r6, bad58 <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
   bad08:	491c      	ldr	r1, [pc, #112]	; (bad7c <_ZN5Print10printFloatEdh+0x16c>)
            remainder *= 10.0;
   bad0a:	f8df 9074 	ldr.w	r9, [pc, #116]	; bad80 <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
   bad0e:	4638      	mov	r0, r7
   bad10:	f001 ffd6 	bl	bccc0 <_ZN5Print5printEPKc>
            remainder *= 10.0;
   bad14:	f04f 0800 	mov.w	r8, #0
            n += print(".");
   bad18:	4482      	add	sl, r0
        while (digits-- > 0) {
   bad1a:	b1ee      	cbz	r6, bad58 <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
   bad1c:	4642      	mov	r2, r8
   bad1e:	464b      	mov	r3, r9
   bad20:	4620      	mov	r0, r4
   bad22:	4629      	mov	r1, r5
   bad24:	f7f9 fb38 	bl	b4398 <__aeabi_dmul>
   bad28:	460d      	mov	r5, r1
   bad2a:	4604      	mov	r4, r0
            int toPrint = int(remainder);
   bad2c:	f7f9 fde4 	bl	b48f8 <__aeabi_d2iz>
   bad30:	4601      	mov	r1, r0
   bad32:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
   bad34:	4638      	mov	r0, r7
   bad36:	f7ff ff59 	bl	babec <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
   bad3a:	4482      	add	sl, r0
            remainder -= toPrint;
   bad3c:	4658      	mov	r0, fp
   bad3e:	f7f9 fac1 	bl	b42c4 <__aeabi_i2d>
   bad42:	4602      	mov	r2, r0
   bad44:	460b      	mov	r3, r1
   bad46:	4620      	mov	r0, r4
   bad48:	4629      	mov	r1, r5
   bad4a:	f7f9 f96d 	bl	b4028 <__aeabi_dsub>
   bad4e:	3e01      	subs	r6, #1
   bad50:	4604      	mov	r4, r0
   bad52:	460d      	mov	r5, r1
   bad54:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
   bad56:	e7e0      	b.n	bad1a <_ZN5Print10printFloatEdh+0x10a>
    }
   bad58:	4650      	mov	r0, sl
   bad5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bad5e:	bf00      	nop
   bad60:	000bf5a8 	.word	0x000bf5a8
   bad64:	7fefffff 	.word	0x7fefffff
   bad68:	000bf5ac 	.word	0x000bf5ac
   bad6c:	41efffff 	.word	0x41efffff
   bad70:	000bf5b0 	.word	0x000bf5b0
   bad74:	c1efffff 	.word	0xc1efffff
   bad78:	3fe00000 	.word	0x3fe00000
   bad7c:	000bf7e8 	.word	0x000bf7e8
   bad80:	40240000 	.word	0x40240000

000bad84 <_ZNK14CellularSignal7printToER5Print>:
{
   bad84:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bad86:	6803      	ldr	r3, [r0, #0]
   bad88:	691b      	ldr	r3, [r3, #16]
{
   bad8a:	460c      	mov	r4, r1
   bad8c:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
   bad8e:	4798      	blx	r3
   bad90:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
   bad94:	f7f9 faa8 	bl	b42e8 <__aeabi_f2d>
   bad98:	ec41 0b10 	vmov	d0, r0, r1
   bad9c:	2102      	movs	r1, #2
   bad9e:	4620      	mov	r0, r4
   bada0:	f7ff ff36 	bl	bac10 <_ZN5Print10printFloatEdh>
    n += p.print(',');
   bada4:	212c      	movs	r1, #44	; 0x2c
   bada6:	4606      	mov	r6, r0
   bada8:	4620      	mov	r0, r4
   badaa:	f001 ff8d 	bl	bccc8 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   badae:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
   badb0:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
   badb2:	699b      	ldr	r3, [r3, #24]
   badb4:	4628      	mov	r0, r5
   badb6:	4798      	blx	r3
   badb8:	ee10 0a10 	vmov	r0, s0
   badbc:	f7f9 fa94 	bl	b42e8 <__aeabi_f2d>
   badc0:	ec41 0b10 	vmov	d0, r0, r1
   badc4:	2102      	movs	r1, #2
   badc6:	4620      	mov	r0, r4
   badc8:	f7ff ff22 	bl	bac10 <_ZN5Print10printFloatEdh>
}
   badcc:	4430      	add	r0, r6
   badce:	bd70      	pop	{r4, r5, r6, pc}

000badd0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   badd0:	f1a0 0004 	sub.w	r0, r0, #4
   badd4:	f7ff bfd6 	b.w	bad84 <_ZNK14CellularSignal7printToER5Print>

000badd8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   badd8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   badda:	460d      	mov	r5, r1
   baddc:	f100 0408 	add.w	r4, r0, #8
   bade0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bade2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bade4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bade8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   badec:	2001      	movs	r0, #1
   badee:	bd30      	pop	{r4, r5, pc}

000badf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   badf0:	4770      	bx	lr

000badf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   badf2:	2000      	movs	r0, #0
   badf4:	4770      	bx	lr

000badf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   badf6:	b510      	push	{r4, lr}
   badf8:	2110      	movs	r1, #16
   badfa:	4604      	mov	r4, r0
   badfc:	f7f9 fe65 	bl	b4aca <_ZdlPvj>
   bae00:	4620      	mov	r0, r4
   bae02:	bd10      	pop	{r4, pc}

000bae04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bae04:	b508      	push	{r3, lr}
      { delete this; }
   bae06:	f7ff fff6 	bl	badf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bae0a:	bd08      	pop	{r3, pc}

000bae0c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bae0c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bae0e:	2200      	movs	r2, #0
   bae10:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bae14:	6002      	str	r2, [r0, #0]
   bae16:	8084      	strh	r4, [r0, #4]
   bae18:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bae1a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bae1c:	680c      	ldr	r4, [r1, #0]
   bae1e:	8085      	strh	r5, [r0, #4]
   bae20:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bae22:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bae24:	bd30      	pop	{r4, r5, pc}

000bae26 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bae26:	b510      	push	{r4, lr}
   bae28:	4604      	mov	r4, r0
    free((void*)msg_);
   bae2a:	6800      	ldr	r0, [r0, #0]
   bae2c:	f7ff fd2e 	bl	ba88c <free>
}
   bae30:	4620      	mov	r0, r4
   bae32:	bd10      	pop	{r4, pc}

000bae34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bae34:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bae36:	68c4      	ldr	r4, [r0, #12]
   bae38:	b1f4      	cbz	r4, bae78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bae3a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bae3c:	2b02      	cmp	r3, #2
   bae3e:	d103      	bne.n	bae48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bae40:	f104 000c 	add.w	r0, r4, #12
   bae44:	f7ff ffef 	bl	bae26 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bae48:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bae4a:	b135      	cbz	r5, bae5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bae4c:	4628      	mov	r0, r5
   bae4e:	f7f9 fe95 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   bae52:	2110      	movs	r1, #16
   bae54:	4628      	mov	r0, r5
   bae56:	f7f9 fe38 	bl	b4aca <_ZdlPvj>
   bae5a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bae5c:	b135      	cbz	r5, bae6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bae5e:	4628      	mov	r0, r5
   bae60:	f7f9 fe8c 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
   bae64:	2110      	movs	r1, #16
   bae66:	4628      	mov	r0, r5
   bae68:	f7f9 fe2f 	bl	b4aca <_ZdlPvj>
   bae6c:	4620      	mov	r0, r4
   bae6e:	2114      	movs	r1, #20
   bae70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bae74:	f7f9 be29 	b.w	b4aca <_ZdlPvj>
   bae78:	bd38      	pop	{r3, r4, r5, pc}

000bae7a <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bae7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bae7c:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bae7e:	4668      	mov	r0, sp
   bae80:	f001 ffc9 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bae84:	68a3      	ldr	r3, [r4, #8]
   bae86:	b90b      	cbnz	r3, bae8c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bae88:	f002 fe70 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bae8c:	68e3      	ldr	r3, [r4, #12]
   bae8e:	4669      	mov	r1, sp
   bae90:	4620      	mov	r0, r4
   bae92:	4798      	blx	r3
   bae94:	4604      	mov	r4, r0
   bae96:	4668      	mov	r0, sp
   bae98:	f001 ff72 	bl	bcd80 <_ZN6StringD1Ev>
}
   bae9c:	4620      	mov	r0, r4
   bae9e:	b004      	add	sp, #16
   baea0:	bd10      	pop	{r4, pc}

000baea2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   baea2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   baea4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   baea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   baeaa:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   baeac:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   baeae:	461a      	mov	r2, r3
   baeb0:	4669      	mov	r1, sp
   baeb2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   baeb4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   baeb8:	f8ad 4000 	strh.w	r4, [sp]
   baebc:	f7ff fc0e 	bl	ba6dc <spark_function>
}
   baec0:	b004      	add	sp, #16
   baec2:	bd10      	pop	{r4, pc}

000baec4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   baec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   baec6:	230c      	movs	r3, #12
   baec8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   baecc:	6803      	ldr	r3, [r0, #0]
   baece:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   baed2:	7a03      	ldrb	r3, [r0, #8]
   baed4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   baed8:	6843      	ldr	r3, [r0, #4]
   baeda:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   baedc:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   baede:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   baee0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   baee4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   baee6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   baeea:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   baeee:	f7ff fc4d 	bl	ba78c <spark_cloud_disconnect>
}
   baef2:	b005      	add	sp, #20
   baef4:	f85d fb04 	ldr.w	pc, [sp], #4

000baef8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   baef8:	680b      	ldr	r3, [r1, #0]
   baefa:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   baefc:	684b      	ldr	r3, [r1, #4]
   baefe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   baf00:	b113      	cbz	r3, baf08 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   baf02:	685a      	ldr	r2, [r3, #4]
   baf04:	3201      	adds	r2, #1
   baf06:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   baf08:	4770      	bx	lr

000baf0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   baf0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baf0c:	4604      	mov	r4, r0
   baf0e:	4668      	mov	r0, sp
   baf10:	460d      	mov	r5, r1
   baf12:	f7ff fff1 	bl	baef8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   baf16:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   baf18:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   baf1a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   baf1c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   baf1e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   baf20:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   baf22:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   baf24:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   baf26:	f7f9 ff57 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   baf2a:	b135      	cbz	r5, baf3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   baf2c:	1d28      	adds	r0, r5, #4
   baf2e:	f7f9 ff53 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baf32:	2108      	movs	r1, #8
   baf34:	4628      	mov	r0, r5
   baf36:	f7f9 fdc8 	bl	b4aca <_ZdlPvj>
        return p;
    }
   baf3a:	4620      	mov	r0, r4
   baf3c:	b003      	add	sp, #12
   baf3e:	bd30      	pop	{r4, r5, pc}

000baf40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   baf40:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   baf42:	b510      	push	{r4, lr}
      if (_M_empty())
   baf44:	b90a      	cbnz	r2, baf4a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   baf46:	f002 fe11 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
    }
   baf4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baf4e:	68c3      	ldr	r3, [r0, #12]
   baf50:	4718      	bx	r3

000baf52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   baf52:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   baf54:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   baf56:	f100 0110 	add.w	r1, r0, #16
   baf5a:	f7ff fff1 	bl	baf40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   baf5e:	bd08      	pop	{r3, pc}

000baf60 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   baf60:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   baf62:	b510      	push	{r4, lr}
      if (_M_empty())
   baf64:	b90a      	cbnz	r2, baf6a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   baf66:	f002 fe01 	bl	bdb6c <_ZSt25__throw_bad_function_callv>
    }
   baf6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baf6e:	68c3      	ldr	r3, [r0, #12]
   baf70:	4718      	bx	r3

000baf72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   baf72:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   baf74:	6800      	ldr	r0, [r0, #0]
   baf76:	f100 0110 	add.w	r1, r0, #16
   baf7a:	f7ff fff1 	bl	baf60 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   baf7e:	bd08      	pop	{r3, pc}

000baf80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   baf80:	b538      	push	{r3, r4, r5, lr}
   baf82:	2300      	movs	r3, #0
   baf84:	4604      	mov	r4, r0
   baf86:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   baf88:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   baf8a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   baf8c:	f7f9 fd99 	bl	b4ac2 <_Znwj>
   baf90:	b128      	cbz	r0, baf9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   baf92:	2301      	movs	r3, #1
   baf94:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   baf98:	4b02      	ldr	r3, [pc, #8]	; (bafa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   baf9a:	6003      	str	r3, [r0, #0]
   baf9c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   baf9e:	6020      	str	r0, [r4, #0]
	}
   bafa0:	4620      	mov	r0, r4
   bafa2:	bd38      	pop	{r3, r4, r5, pc}
   bafa4:	000bf5f8 	.word	0x000bf5f8

000bafa8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bafa8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bafaa:	2300      	movs	r3, #0
   bafac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bafae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bafb0:	4604      	mov	r4, r0
   bafb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bafb4:	b12b      	cbz	r3, bafc2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bafb6:	2202      	movs	r2, #2
   bafb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bafba:	68eb      	ldr	r3, [r5, #12]
   bafbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bafbe:	68ab      	ldr	r3, [r5, #8]
   bafc0:	60a3      	str	r3, [r4, #8]
    }
   bafc2:	4620      	mov	r0, r4
   bafc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bafc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bafc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bafca:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bafcc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bafce:	4668      	mov	r0, sp
   bafd0:	f7ff ff1c 	bl	bae0c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bafd4:	f04f 0302 	mov.w	r3, #2
   bafd8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bafdc:	2a00      	cmp	r2, #0
   bafde:	d103      	bne.n	bafe8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bafe0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bafe4:	2900      	cmp	r1, #0
   bafe6:	d1f7      	bne.n	bafd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bafe8:	d125      	bne.n	bb036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bafea:	f104 050c 	add.w	r5, r4, #12
   bafee:	4669      	mov	r1, sp
   baff0:	4628      	mov	r0, r5
   baff2:	f7ff ff0b 	bl	bae0c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   baff6:	f3bf 8f5b 	dmb	ish
   baffa:	2301      	movs	r3, #1
   baffc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   baffe:	2000      	movs	r0, #0
   bb000:	f104 0308 	add.w	r3, r4, #8
   bb004:	f3bf 8f5b 	dmb	ish
   bb008:	e853 6f00 	ldrex	r6, [r3]
   bb00c:	e843 0200 	strex	r2, r0, [r3]
   bb010:	2a00      	cmp	r2, #0
   bb012:	d1f9      	bne.n	bb008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bb014:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb018:	b16e      	cbz	r6, bb036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bb01a:	f7ff fb0d 	bl	ba638 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb01e:	b178      	cbz	r0, bb040 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb020:	4629      	mov	r1, r5
   bb022:	4630      	mov	r0, r6
   bb024:	f7ff ff8c 	bl	baf40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bb028:	4630      	mov	r0, r6
   bb02a:	f7f9 fda7 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb02e:	2110      	movs	r1, #16
   bb030:	4630      	mov	r0, r6
   bb032:	f7f9 fd4a 	bl	b4aca <_ZdlPvj>
        p_->setError(std::move(error));
   bb036:	4668      	mov	r0, sp
   bb038:	f7ff fef5 	bl	bae26 <_ZN8particle5ErrorD1Ev>
    }
   bb03c:	b009      	add	sp, #36	; 0x24
   bb03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb040:	4631      	mov	r1, r6
   bb042:	a802      	add	r0, sp, #8
   bb044:	f7ff ffb0 	bl	bafa8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb048:	68e0      	ldr	r0, [r4, #12]
   bb04a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb04e:	b108      	cbz	r0, bb054 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bb050:	f002 ff6a 	bl	bdf28 <strdup>
        type_(type) {
   bb054:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb056:	2010      	movs	r0, #16
   bb058:	f8ad 501c 	strh.w	r5, [sp, #28]
   bb05c:	f7f9 fd31 	bl	b4ac2 <_Znwj>
   bb060:	4605      	mov	r5, r0
   bb062:	b1e8      	cbz	r0, bb0a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bb064:	2700      	movs	r7, #0
   bb066:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb068:	2018      	movs	r0, #24
   bb06a:	f7f9 fd2a 	bl	b4ac2 <_Znwj>
   bb06e:	4604      	mov	r4, r0
   bb070:	b188      	cbz	r0, bb096 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bb072:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bb074:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb076:	a802      	add	r0, sp, #8
   bb078:	f7fc fc9f 	bl	b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb07c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bb07e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb080:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb082:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb084:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb086:	a906      	add	r1, sp, #24
   bb088:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb08a:	60e3      	str	r3, [r4, #12]
   bb08c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bb090:	9205      	str	r2, [sp, #20]
   bb092:	f7ff febb 	bl	bae0c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bb096:	4b08      	ldr	r3, [pc, #32]	; (bb0b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bb098:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb09a:	4b08      	ldr	r3, [pc, #32]	; (bb0bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb09c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb09e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bb0a0:	a806      	add	r0, sp, #24
   bb0a2:	f7ff fec0 	bl	bae26 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb0a6:	a802      	add	r0, sp, #8
   bb0a8:	f7f9 fd68 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb0ac:	2200      	movs	r2, #0
   bb0ae:	4629      	mov	r1, r5
   bb0b0:	4803      	ldr	r0, [pc, #12]	; (bb0c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bb0b2:	f7ff fac9 	bl	ba648 <application_thread_invoke>
   bb0b6:	e7b7      	b.n	bb028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bb0b8:	000baf53 	.word	0x000baf53
   bb0bc:	000bb1d5 	.word	0x000bb1d5
   bb0c0:	000ba983 	.word	0x000ba983

000bb0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bb0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0c8:	b08b      	sub	sp, #44	; 0x2c
   bb0ca:	4605      	mov	r5, r0
   bb0cc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bb0d0:	460f      	mov	r7, r1
   bb0d2:	4690      	mov	r8, r2
   bb0d4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb0d6:	f7ff fb19 	bl	ba70c <spark_cloud_flag_connected>
   bb0da:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bb0dc:	4683      	mov	fp, r0
   bb0de:	bb38      	cbnz	r0, bb130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bb0e0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bb0e4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb0e6:	a905      	add	r1, sp, #20
   bb0e8:	4630      	mov	r0, r6
   bb0ea:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb0ee:	f7ff fe8d 	bl	bae0c <_ZN8particle5ErrorC1EOS0_>
   bb0f2:	2014      	movs	r0, #20
   bb0f4:	f7f9 fce5 	bl	b4ac2 <_Znwj>
   bb0f8:	4604      	mov	r4, r0
   bb0fa:	b148      	cbz	r0, bb110 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bb0fc:	2302      	movs	r3, #2
   bb0fe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb100:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb102:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb106:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bb108:	4631      	mov	r1, r6
   bb10a:	300c      	adds	r0, #12
   bb10c:	f7ff fe7e 	bl	bae0c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb110:	4628      	mov	r0, r5
	: __shared_count(__p)
   bb112:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb114:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bb118:	f7ff ff32 	bl	baf80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb11c:	4630      	mov	r0, r6
   bb11e:	f7ff fe82 	bl	bae26 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bb122:	a805      	add	r0, sp, #20
   bb124:	f7ff fe7f 	bl	bae26 <_ZN8particle5ErrorD1Ev>
}
   bb128:	4628      	mov	r0, r5
   bb12a:	b00b      	add	sp, #44	; 0x2c
   bb12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bb130:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bb132:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bb134:	2014      	movs	r0, #20
   bb136:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bb13a:	9307      	str	r3, [sp, #28]
   bb13c:	f7f9 fcc1 	bl	b4ac2 <_Znwj>
   bb140:	4601      	mov	r1, r0
   bb142:	b118      	cbz	r0, bb14c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb144:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb148:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb14a:	7044      	strb	r4, [r0, #1]
   bb14c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb14e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bb150:	f7ff ff16 	bl	baf80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bb154:	4b1e      	ldr	r3, [pc, #120]	; (bb1d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bb156:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bb158:	2008      	movs	r0, #8
   bb15a:	f7f9 fcb2 	bl	b4ac2 <_Znwj>
   bb15e:	4604      	mov	r4, r0
   bb160:	b110      	cbz	r0, bb168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bb162:	a903      	add	r1, sp, #12
   bb164:	f7ff fec8 	bl	baef8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb168:	9600      	str	r6, [sp, #0]
   bb16a:	fa5f f38a 	uxtb.w	r3, sl
   bb16e:	464a      	mov	r2, r9
   bb170:	4641      	mov	r1, r8
   bb172:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bb174:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb176:	f7ff fad9 	bl	ba72c <spark_send_event>
   bb17a:	b9b8      	cbnz	r0, bb1ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bb17c:	9b03      	ldr	r3, [sp, #12]
   bb17e:	785b      	ldrb	r3, [r3, #1]
   bb180:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bb184:	b993      	cbnz	r3, bb1ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bb186:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bb18a:	a905      	add	r1, sp, #20
   bb18c:	a803      	add	r0, sp, #12
   bb18e:	9205      	str	r2, [sp, #20]
   bb190:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb194:	f7ff ff18 	bl	bafc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb198:	a805      	add	r0, sp, #20
   bb19a:	f7ff fe44 	bl	bae26 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bb19e:	a805      	add	r0, sp, #20
   bb1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bb1a2:	f7ff feb2 	bl	baf0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bb1a6:	a806      	add	r0, sp, #24
   bb1a8:	f7f9 fe16 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb1ac:	a903      	add	r1, sp, #12
   bb1ae:	a805      	add	r0, sp, #20
   bb1b0:	f7ff fea2 	bl	baef8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb1b4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb1b6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb1b8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bb1ba:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bb1bc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb1be:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bb1c0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bb1c2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bb1c4:	f7f9 fe08 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb1c8:	a804      	add	r0, sp, #16
   bb1ca:	f7f9 fe05 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bb1ce:	e7ab      	b.n	bb128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bb1d0:	000bb299 	.word	0x000bb299

000bb1d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bb1d4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb1d8:	4605      	mov	r5, r0
	switch (__op)
   bb1da:	d103      	bne.n	bb1e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb1dc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb1de:	6003      	str	r3, [r0, #0]
      }
   bb1e0:	2000      	movs	r0, #0
   bb1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bb1e4:	2a02      	cmp	r2, #2
   bb1e6:	d010      	beq.n	bb20a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bb1e8:	2a03      	cmp	r2, #3
   bb1ea:	d1f9      	bne.n	bb1e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb1ec:	6804      	ldr	r4, [r0, #0]
   bb1ee:	2c00      	cmp	r4, #0
   bb1f0:	d0f6      	beq.n	bb1e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bb1f2:	f104 0010 	add.w	r0, r4, #16
   bb1f6:	f7ff fe16 	bl	bae26 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	f7f9 fcbe 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb200:	2118      	movs	r1, #24
   bb202:	4620      	mov	r0, r4
   bb204:	f7f9 fc61 	bl	b4aca <_ZdlPvj>
   bb208:	e7ea      	b.n	bb1e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb20a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bb20c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb20e:	f7f9 fc58 	bl	b4ac2 <_Znwj>
   bb212:	4604      	mov	r4, r0
   bb214:	b150      	cbz	r0, bb22c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bb216:	4631      	mov	r1, r6
   bb218:	f7ff fec6 	bl	bafa8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb21c:	6930      	ldr	r0, [r6, #16]
   bb21e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb222:	b108      	cbz	r0, bb228 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bb224:	f002 fe80 	bl	bdf28 <strdup>
        type_(type) {
   bb228:	6120      	str	r0, [r4, #16]
   bb22a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bb22c:	602c      	str	r4, [r5, #0]
	}
   bb22e:	e7d7      	b.n	bb1e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bb230 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bb230:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb232:	2300      	movs	r3, #0
   bb234:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb236:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb238:	4604      	mov	r4, r0
   bb23a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb23c:	b12b      	cbz	r3, bb24a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb23e:	2202      	movs	r2, #2
   bb240:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb242:	68eb      	ldr	r3, [r5, #12]
   bb244:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb246:	68ab      	ldr	r3, [r5, #8]
   bb248:	60a3      	str	r3, [r4, #8]
    }
   bb24a:	4620      	mov	r0, r4
   bb24c:	bd38      	pop	{r3, r4, r5, pc}

000bb24e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bb24e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb250:	b570      	push	{r4, r5, r6, lr}
   bb252:	4604      	mov	r4, r0
	switch (__op)
   bb254:	d103      	bne.n	bb25e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb256:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb258:	6003      	str	r3, [r0, #0]
      }
   bb25a:	2000      	movs	r0, #0
   bb25c:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bb25e:	2a02      	cmp	r2, #2
   bb260:	d00c      	beq.n	bb27c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bb262:	2a03      	cmp	r2, #3
   bb264:	d1f9      	bne.n	bb25a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb266:	6804      	ldr	r4, [r0, #0]
   bb268:	2c00      	cmp	r4, #0
   bb26a:	d0f6      	beq.n	bb25a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bb26c:	4620      	mov	r0, r4
   bb26e:	f7f9 fc85 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb272:	2114      	movs	r1, #20
   bb274:	4620      	mov	r0, r4
   bb276:	f7f9 fc28 	bl	b4aca <_ZdlPvj>
   bb27a:	e7ee      	b.n	bb25a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb27c:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bb27e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb280:	f7f9 fc1f 	bl	b4ac2 <_Znwj>
   bb284:	4605      	mov	r5, r0
   bb286:	b120      	cbz	r0, bb292 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   bb288:	4631      	mov	r1, r6
   bb28a:	f7ff ffd1 	bl	bb230 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bb28e:	7c33      	ldrb	r3, [r6, #16]
   bb290:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bb292:	6025      	str	r5, [r4, #0]
	}
   bb294:	e7e1      	b.n	bb25a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000bb298 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bb298:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb29a:	b089      	sub	sp, #36	; 0x24
   bb29c:	4604      	mov	r4, r0
   bb29e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bb2a0:	a801      	add	r0, sp, #4
   bb2a2:	4611      	mov	r1, r2
   bb2a4:	f7ff fe31 	bl	baf0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bb2a8:	b1a4      	cbz	r4, bb2d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bb2aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb2ac:	b11d      	cbz	r5, bb2b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bb2ae:	4628      	mov	r0, r5
   bb2b0:	f002 fe3a 	bl	bdf28 <strdup>
   bb2b4:	4605      	mov	r5, r0
   bb2b6:	a801      	add	r0, sp, #4
   bb2b8:	a903      	add	r1, sp, #12
        type_(type) {
   bb2ba:	9503      	str	r5, [sp, #12]
   bb2bc:	f8ad 4010 	strh.w	r4, [sp, #16]
   bb2c0:	f7ff fe82 	bl	bafc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb2c4:	a803      	add	r0, sp, #12
   bb2c6:	f7ff fdae 	bl	bae26 <_ZN8particle5ErrorD1Ev>
   bb2ca:	a802      	add	r0, sp, #8
   bb2cc:	f7f9 fd84 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb2d0:	b009      	add	sp, #36	; 0x24
   bb2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bb2d4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb2d6:	2301      	movs	r3, #1
   bb2d8:	e8d5 2f4f 	ldrexb	r2, [r5]
   bb2dc:	2a00      	cmp	r2, #0
   bb2de:	d103      	bne.n	bb2e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bb2e0:	e8c5 3f41 	strexb	r1, r3, [r5]
   bb2e4:	2900      	cmp	r1, #0
   bb2e6:	d1f7      	bne.n	bb2d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bb2e8:	d1ef      	bne.n	bb2ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bb2ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bb2ec:	f3bf 8f5b 	dmb	ish
   bb2f0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb2f2:	1d2b      	adds	r3, r5, #4
   bb2f4:	f3bf 8f5b 	dmb	ish
   bb2f8:	e853 6f00 	ldrex	r6, [r3]
   bb2fc:	e843 4200 	strex	r2, r4, [r3]
   bb300:	2a00      	cmp	r2, #0
   bb302:	d1f9      	bne.n	bb2f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bb304:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb308:	2e00      	cmp	r6, #0
   bb30a:	d0de      	beq.n	bb2ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bb30c:	4620      	mov	r0, r4
   bb30e:	f7ff f993 	bl	ba638 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb312:	4607      	mov	r7, r0
   bb314:	b160      	cbz	r0, bb330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb316:	f105 010c 	add.w	r1, r5, #12
   bb31a:	4630      	mov	r0, r6
   bb31c:	f7ff fe20 	bl	baf60 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bb320:	4630      	mov	r0, r6
   bb322:	f7f9 fc2b 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb326:	2110      	movs	r1, #16
   bb328:	4630      	mov	r0, r6
   bb32a:	f7f9 fbce 	bl	b4aca <_ZdlPvj>
   bb32e:	e7cc      	b.n	bb2ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb330:	4631      	mov	r1, r6
   bb332:	a803      	add	r0, sp, #12
   bb334:	f7ff ff7c 	bl	bb230 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb338:	7b2b      	ldrb	r3, [r5, #12]
   bb33a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb33e:	2010      	movs	r0, #16
   bb340:	f7f9 fbbf 	bl	b4ac2 <_Znwj>
   bb344:	4605      	mov	r5, r0
   bb346:	b1d0      	cbz	r0, bb37e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bb348:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb34a:	2014      	movs	r0, #20
   bb34c:	f7f9 fbb9 	bl	b4ac2 <_Znwj>
   bb350:	4604      	mov	r4, r0
   bb352:	b178      	cbz	r0, bb374 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bb354:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb356:	4601      	mov	r1, r0
   bb358:	a803      	add	r0, sp, #12
   bb35a:	f7fc fb2e 	bl	b79ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb35e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb360:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb362:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb364:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bb366:	9205      	str	r2, [sp, #20]
   bb368:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb36a:	60e3      	str	r3, [r4, #12]
   bb36c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bb370:	9206      	str	r2, [sp, #24]
   bb372:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bb374:	4b06      	ldr	r3, [pc, #24]	; (bb390 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bb376:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb378:	4b06      	ldr	r3, [pc, #24]	; (bb394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb37a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb37c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bb37e:	a803      	add	r0, sp, #12
   bb380:	f7f9 fbfc 	bl	b4b7c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb384:	2200      	movs	r2, #0
   bb386:	4629      	mov	r1, r5
   bb388:	4803      	ldr	r0, [pc, #12]	; (bb398 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bb38a:	f7ff f95d 	bl	ba648 <application_thread_invoke>
   bb38e:	e7c7      	b.n	bb320 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bb390:	000baf73 	.word	0x000baf73
   bb394:	000bb24f 	.word	0x000bb24f
   bb398:	000ba983 	.word	0x000ba983

000bb39c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb39c:	2200      	movs	r2, #0
   bb39e:	6840      	ldr	r0, [r0, #4]
   bb3a0:	4611      	mov	r1, r2
   bb3a2:	f7ff ba33 	b.w	ba80c <network_listening>

000bb3a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb3a6:	2200      	movs	r2, #0
   bb3a8:	6840      	ldr	r0, [r0, #4]
   bb3aa:	4611      	mov	r1, r2
   bb3ac:	f7ff ba3e 	b.w	ba82c <network_get_listen_timeout>

000bb3b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb3b0:	6840      	ldr	r0, [r0, #4]
   bb3b2:	2200      	movs	r2, #0
   bb3b4:	f7ff ba32 	b.w	ba81c <network_set_listen_timeout>

000bb3b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb3b8:	6840      	ldr	r0, [r0, #4]
   bb3ba:	2200      	movs	r2, #0
   bb3bc:	f081 0101 	eor.w	r1, r1, #1
   bb3c0:	f7ff ba1c 	b.w	ba7fc <network_listen>

000bb3c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb3c4:	2300      	movs	r3, #0
   bb3c6:	6840      	ldr	r0, [r0, #4]
   bb3c8:	461a      	mov	r2, r3
   bb3ca:	4619      	mov	r1, r3
   bb3cc:	f7ff ba0e 	b.w	ba7ec <network_off>

000bb3d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb3d0:	2300      	movs	r3, #0
   bb3d2:	6840      	ldr	r0, [r0, #4]
   bb3d4:	461a      	mov	r2, r3
   bb3d6:	4619      	mov	r1, r3
   bb3d8:	f7ff ba00 	b.w	ba7dc <network_on>

000bb3dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bb3dc:	2200      	movs	r2, #0
   bb3de:	6840      	ldr	r0, [r0, #4]
   bb3e0:	4611      	mov	r1, r2
   bb3e2:	f7ff b9f3 	b.w	ba7cc <network_ready>

000bb3e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb3e6:	2200      	movs	r2, #0
   bb3e8:	6840      	ldr	r0, [r0, #4]
   bb3ea:	4611      	mov	r1, r2
   bb3ec:	f7ff b9de 	b.w	ba7ac <network_connecting>

000bb3f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb3f0:	6840      	ldr	r0, [r0, #4]
   bb3f2:	2200      	movs	r2, #0
   bb3f4:	2102      	movs	r1, #2
   bb3f6:	f7ff b9e1 	b.w	ba7bc <network_disconnect>

000bb3fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb3fa:	2300      	movs	r3, #0
   bb3fc:	6840      	ldr	r0, [r0, #4]
   bb3fe:	461a      	mov	r2, r3
   bb400:	f7ff b9cc 	b.w	ba79c <network_connect>

000bb404 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bb404:	4b02      	ldr	r3, [pc, #8]	; (bb410 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bb406:	2203      	movs	r2, #3
   bb408:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bb40a:	4a02      	ldr	r2, [pc, #8]	; (bb414 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bb40c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bb40e:	4770      	bx	lr
   bb410:	2003e638 	.word	0x2003e638
   bb414:	000bf614 	.word	0x000bf614

000bb418 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb418:	4770      	bx	lr

000bb41a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb41c:	4606      	mov	r6, r0
   bb41e:	4615      	mov	r5, r2
   bb420:	460c      	mov	r4, r1
   bb422:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb424:	42bc      	cmp	r4, r7
   bb426:	d006      	beq.n	bb436 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb428:	6833      	ldr	r3, [r6, #0]
   bb42a:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb42e:	689b      	ldr	r3, [r3, #8]
   bb430:	4630      	mov	r0, r6
   bb432:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb434:	e7f6      	b.n	bb424 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb436:	4628      	mov	r0, r5
   bb438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb43a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb43a:	7c00      	ldrb	r0, [r0, #16]
   bb43c:	2200      	movs	r2, #0
   bb43e:	f7fe bf21 	b.w	ba284 <hal_i2c_write>

000bb442 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb442:	7c00      	ldrb	r0, [r0, #16]
   bb444:	2100      	movs	r1, #0
   bb446:	f7fe bf25 	b.w	ba294 <hal_i2c_available>

000bb44a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb44a:	7c00      	ldrb	r0, [r0, #16]
   bb44c:	2100      	movs	r1, #0
   bb44e:	f7fe bf29 	b.w	ba2a4 <hal_i2c_read>

000bb452 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb452:	7c00      	ldrb	r0, [r0, #16]
   bb454:	2100      	movs	r1, #0
   bb456:	f7fe bf2d 	b.w	ba2b4 <hal_i2c_peek>

000bb45a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb45a:	7c00      	ldrb	r0, [r0, #16]
   bb45c:	2100      	movs	r1, #0
   bb45e:	f7fe bf31 	b.w	ba2c4 <hal_i2c_flush>

000bb462 <_ZN7TwoWireD0Ev>:
   bb462:	b510      	push	{r4, lr}
   bb464:	2114      	movs	r1, #20
   bb466:	4604      	mov	r4, r0
   bb468:	f7f9 fb2f 	bl	b4aca <_ZdlPvj>
   bb46c:	4620      	mov	r0, r4
   bb46e:	bd10      	pop	{r4, pc}

000bb470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb470:	b538      	push	{r3, r4, r5, lr}
   bb472:	4604      	mov	r4, r0
   bb474:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bb476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb47a:	2200      	movs	r2, #0
   bb47c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb480:	4b09      	ldr	r3, [pc, #36]	; (bb4a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bb482:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb484:	4608      	mov	r0, r1
   bb486:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bb488:	4629      	mov	r1, r5
   bb48a:	f7fe ff2b 	bl	ba2e4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bb48e:	30bf      	adds	r0, #191	; 0xbf
   bb490:	d108      	bne.n	bb4a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bb492:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bb494:	07db      	lsls	r3, r3, #31
   bb496:	d505      	bpl.n	bb4a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bb498:	6868      	ldr	r0, [r5, #4]
   bb49a:	f7ff f9f7 	bl	ba88c <free>
    free(conf.tx_buffer);
   bb49e:	68e8      	ldr	r0, [r5, #12]
   bb4a0:	f7ff f9f4 	bl	ba88c <free>
}
   bb4a4:	4620      	mov	r0, r4
   bb4a6:	bd38      	pop	{r3, r4, r5, pc}
   bb4a8:	000bf658 	.word	0x000bf658

000bb4ac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb4ac:	2300      	movs	r3, #0
   bb4ae:	7c00      	ldrb	r0, [r0, #16]
   bb4b0:	461a      	mov	r2, r3
   bb4b2:	4619      	mov	r1, r3
   bb4b4:	f7fe bece 	b.w	ba254 <hal_i2c_begin>

000bb4b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bb4b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb4ba:	2200      	movs	r2, #0
   bb4bc:	2314      	movs	r3, #20
   bb4be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bb4c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bb4c6:	780b      	ldrb	r3, [r1, #0]
   bb4c8:	f88d 3008 	strb.w	r3, [sp, #8]
   bb4cc:	684b      	ldr	r3, [r1, #4]
   bb4ce:	9303      	str	r3, [sp, #12]
   bb4d0:	68cb      	ldr	r3, [r1, #12]
   bb4d2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bb4d4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb4d6:	7a0b      	ldrb	r3, [r1, #8]
   bb4d8:	9305      	str	r3, [sp, #20]
   bb4da:	a901      	add	r1, sp, #4
   bb4dc:	f7fe ff1a 	bl	ba314 <hal_i2c_request_ex>
}
   bb4e0:	b007      	add	sp, #28
   bb4e2:	f85d fb04 	ldr.w	pc, [sp], #4

000bb4e6 <_ZN7TwoWire11requestFromEhjh>:
{
   bb4e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bb4e8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb4ea:	f88d 1000 	strb.w	r1, [sp]
   bb4ee:	f04f 0164 	mov.w	r1, #100	; 0x64
   bb4f2:	9103      	str	r1, [sp, #12]
   bb4f4:	bf18      	it	ne
   bb4f6:	2301      	movne	r3, #1
   bb4f8:	4669      	mov	r1, sp
    size_ = size;
   bb4fa:	9201      	str	r2, [sp, #4]
   bb4fc:	f88d 3008 	strb.w	r3, [sp, #8]
   bb500:	f7ff ffda 	bl	bb4b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bb504:	b005      	add	sp, #20
   bb506:	f85d fb04 	ldr.w	pc, [sp], #4

000bb50a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb50a:	7c00      	ldrb	r0, [r0, #16]
   bb50c:	2200      	movs	r2, #0
   bb50e:	f7fe bea9 	b.w	ba264 <hal_i2c_begin_transmission>

000bb512 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bb512:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb514:	2300      	movs	r3, #0
   bb516:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bb51a:	684a      	ldr	r2, [r1, #4]
   bb51c:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bb51e:	2314      	movs	r3, #20
    };
   bb520:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bb522:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bb526:	780b      	ldrb	r3, [r1, #0]
    };
   bb528:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb52a:	7a0a      	ldrb	r2, [r1, #8]
   bb52c:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bb52e:	7c00      	ldrb	r0, [r0, #16]
    };
   bb530:	f88d 3008 	strb.w	r3, [sp, #8]
   bb534:	aa01      	add	r2, sp, #4
   bb536:	4619      	mov	r1, r3
   bb538:	f7fe fe94 	bl	ba264 <hal_i2c_begin_transmission>
}
   bb53c:	b007      	add	sp, #28
   bb53e:	f85d fb04 	ldr.w	pc, [sp], #4

000bb542 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb542:	7c00      	ldrb	r0, [r0, #16]
   bb544:	2200      	movs	r2, #0
   bb546:	f7fe be95 	b.w	ba274 <hal_i2c_end_transmission>

000bb54a <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bb54a:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bb54c:	2100      	movs	r1, #0
   bb54e:	7c00      	ldrb	r0, [r0, #16]
   bb550:	f7fe fed0 	bl	ba2f4 <hal_i2c_lock>
}
   bb554:	fab0 f080 	clz	r0, r0
   bb558:	0940      	lsrs	r0, r0, #5
   bb55a:	bd08      	pop	{r3, pc}

000bb55c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bb55c:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bb55e:	2100      	movs	r1, #0
   bb560:	7c00      	ldrb	r0, [r0, #16]
   bb562:	f7fe fecf 	bl	ba304 <hal_i2c_unlock>
}
   bb566:	fab0 f080 	clz	r0, r0
   bb56a:	0940      	lsrs	r0, r0, #5
   bb56c:	bd08      	pop	{r3, pc}

000bb56e <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bb56e:	4700      	bx	r0

000bb570 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bb570:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   bb574:	2400      	movs	r4, #0
{
   bb576:	461d      	mov	r5, r3
   bb578:	460f      	mov	r7, r1
   bb57a:	4690      	mov	r8, r2
   bb57c:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   bb57e:	f7fe fe59 	bl	ba234 <hal_interrupt_detach>
  if (priority >= 0) {
   bb582:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bb584:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   bb588:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bb58c:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   bb590:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bb594:	bfa2      	ittt	ge
   bb596:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bb59a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bb59e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bb5a0:	4907      	ldr	r1, [pc, #28]	; (bb5c0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bb5a2:	9400      	str	r4, [sp, #0]
   bb5a4:	4643      	mov	r3, r8
   bb5a6:	463a      	mov	r2, r7
   bb5a8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bb5aa:	bfa8      	it	ge
   bb5ac:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bb5b0:	f7fe fe38 	bl	ba224 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   bb5b4:	fab0 f080 	clz	r0, r0
   bb5b8:	0940      	lsrs	r0, r0, #5
   bb5ba:	b004      	add	sp, #16
   bb5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb5c0:	000bb56f 	.word	0x000bb56f

000bb5c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bb5c4:	4770      	bx	lr

000bb5c6 <_ZN9IPAddressD0Ev>:
   bb5c6:	b510      	push	{r4, lr}
   bb5c8:	2118      	movs	r1, #24
   bb5ca:	4604      	mov	r4, r0
   bb5cc:	f7f9 fa7d 	bl	b4aca <_ZdlPvj>
   bb5d0:	4620      	mov	r0, r4
   bb5d2:	bd10      	pop	{r4, pc}

000bb5d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bb5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bb5d6:	7d03      	ldrb	r3, [r0, #20]
   bb5d8:	2b06      	cmp	r3, #6
{
   bb5da:	b08d      	sub	sp, #52	; 0x34
   bb5dc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb5de:	f100 0704 	add.w	r7, r0, #4
   bb5e2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bb5e6:	d012      	beq.n	bb60e <_ZNK9IPAddress7printToER5Print+0x3a>
   bb5e8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   bb5ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bb5f0:	220a      	movs	r2, #10
   bb5f2:	4630      	mov	r0, r6
   bb5f4:	f001 fb6b 	bl	bccce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bb5f8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bb5fa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bb5fc:	d019      	beq.n	bb632 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bb5fe:	2c00      	cmp	r4, #0
   bb600:	d0f4      	beq.n	bb5ec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bb602:	212e      	movs	r1, #46	; 0x2e
   bb604:	4630      	mov	r0, r6
   bb606:	f001 fb5f 	bl	bccc8 <_ZN5Print5printEc>
   bb60a:	4404      	add	r4, r0
   bb60c:	e7ee      	b.n	bb5ec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb60e:	232f      	movs	r3, #47	; 0x2f
   bb610:	466a      	mov	r2, sp
   bb612:	4639      	mov	r1, r7
   bb614:	200a      	movs	r0, #10
		buf[0] = 0;
   bb616:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb61a:	f7fe fe83 	bl	ba324 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bb61e:	4668      	mov	r0, sp
   bb620:	f7f9 fa0c 	bl	b4a3c <strlen>
   bb624:	6833      	ldr	r3, [r6, #0]
   bb626:	4602      	mov	r2, r0
   bb628:	68db      	ldr	r3, [r3, #12]
   bb62a:	4669      	mov	r1, sp
   bb62c:	4630      	mov	r0, r6
   bb62e:	4798      	blx	r3
   bb630:	4604      	mov	r4, r0
    }
    return n;
}
   bb632:	4620      	mov	r0, r4
   bb634:	b00d      	add	sp, #52	; 0x34
   bb636:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb638 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bb638:	b510      	push	{r4, lr}
   bb63a:	4b05      	ldr	r3, [pc, #20]	; (bb650 <_ZN9IPAddressC1Ev+0x18>)
   bb63c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bb63e:	2211      	movs	r2, #17
   bb640:	f840 3b04 	str.w	r3, [r0], #4
   bb644:	2100      	movs	r1, #0
   bb646:	f002 fc19 	bl	bde7c <memset>
}
   bb64a:	4620      	mov	r0, r4
   bb64c:	bd10      	pop	{r4, pc}
   bb64e:	bf00      	nop
   bb650:	000bf684 	.word	0x000bf684

000bb654 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bb654:	4603      	mov	r3, r0
   bb656:	4a07      	ldr	r2, [pc, #28]	; (bb674 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bb658:	b510      	push	{r4, lr}
   bb65a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bb65e:	f101 0210 	add.w	r2, r1, #16
   bb662:	f851 4b04 	ldr.w	r4, [r1], #4
   bb666:	f843 4b04 	str.w	r4, [r3], #4
   bb66a:	4291      	cmp	r1, r2
   bb66c:	d1f9      	bne.n	bb662 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bb66e:	780a      	ldrb	r2, [r1, #0]
   bb670:	701a      	strb	r2, [r3, #0]
}
   bb672:	bd10      	pop	{r4, pc}
   bb674:	000bf684 	.word	0x000bf684

000bb678 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bb678:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bb67a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bb67e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bb682:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bb686:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bb68a:	2304      	movs	r3, #4
   bb68c:	6041      	str	r1, [r0, #4]
   bb68e:	7503      	strb	r3, [r0, #20]
}
   bb690:	bd10      	pop	{r4, pc}
	...

000bb694 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bb694:	b507      	push	{r0, r1, r2, lr}
   bb696:	4b06      	ldr	r3, [pc, #24]	; (bb6b0 <_ZN9IPAddressC1EPKh+0x1c>)
   bb698:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bb69a:	78cb      	ldrb	r3, [r1, #3]
   bb69c:	9300      	str	r3, [sp, #0]
   bb69e:	788b      	ldrb	r3, [r1, #2]
   bb6a0:	784a      	ldrb	r2, [r1, #1]
   bb6a2:	7809      	ldrb	r1, [r1, #0]
   bb6a4:	f7ff ffe8 	bl	bb678 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bb6a8:	b003      	add	sp, #12
   bb6aa:	f85d fb04 	ldr.w	pc, [sp], #4
   bb6ae:	bf00      	nop
   bb6b0:	000bf684 	.word	0x000bf684

000bb6b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bb6b4:	f100 0310 	add.w	r3, r0, #16
   bb6b8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bb6ba:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bb6be:	2901      	cmp	r1, #1
   bb6c0:	4618      	mov	r0, r3
   bb6c2:	d108      	bne.n	bb6d6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bb6c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bb6c8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bb6cc:	3a01      	subs	r2, #1
   bb6ce:	f103 0310 	add.w	r3, r3, #16
   bb6d2:	d1f2      	bne.n	bb6ba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bb6d4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bb6d6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bb6d8:	bf04      	itt	eq
   bb6da:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bb6de:	1852      	addeq	r2, r2, r1
   bb6e0:	e7f4      	b.n	bb6cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bb6e2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bb6e2:	b40e      	push	{r1, r2, r3}
   bb6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb6e6:	b088      	sub	sp, #32
   bb6e8:	af00      	add	r7, sp, #0
   bb6ea:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb6ee:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb6f0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb6f4:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb6f6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb6f8:	462b      	mov	r3, r5
   bb6fa:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bb6fc:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb6fe:	f7ff f8ed 	bl	ba8dc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bb702:	280f      	cmp	r0, #15
   bb704:	687a      	ldr	r2, [r7, #4]
   bb706:	d91a      	bls.n	bb73e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bb708:	f100 0308 	add.w	r3, r0, #8
   bb70c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bb710:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bb712:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb716:	1c41      	adds	r1, r0, #1
   bb718:	462b      	mov	r3, r5
   bb71a:	4668      	mov	r0, sp
        va_start(args, fmt);
   bb71c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb71e:	f7ff f8dd 	bl	ba8dc <vsnprintf>
        if (n > 0) {
   bb722:	1e02      	subs	r2, r0, #0
   bb724:	dd04      	ble.n	bb730 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bb726:	6823      	ldr	r3, [r4, #0]
   bb728:	4669      	mov	r1, sp
   bb72a:	689b      	ldr	r3, [r3, #8]
   bb72c:	4620      	mov	r0, r4
   bb72e:	4798      	blx	r3
   bb730:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bb732:	3720      	adds	r7, #32
   bb734:	46bd      	mov	sp, r7
   bb736:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb73a:	b003      	add	sp, #12
   bb73c:	4770      	bx	lr
    } else if (n > 0) {
   bb73e:	2800      	cmp	r0, #0
   bb740:	d0f7      	beq.n	bb732 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bb742:	6823      	ldr	r3, [r4, #0]
   bb744:	4602      	mov	r2, r0
   bb746:	689b      	ldr	r3, [r3, #8]
   bb748:	f107 0110 	add.w	r1, r7, #16
   bb74c:	4620      	mov	r0, r4
   bb74e:	4798      	blx	r3
}
   bb750:	e7ef      	b.n	bb732 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bb752 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb752:	b538      	push	{r3, r4, r5, lr}
   bb754:	680b      	ldr	r3, [r1, #0]
   bb756:	6003      	str	r3, [r0, #0]
   bb758:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bb75a:	6843      	ldr	r3, [r0, #4]
   bb75c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb75e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bb760:	d008      	beq.n	bb774 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bb762:	b115      	cbz	r5, bb76a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bb764:	686b      	ldr	r3, [r5, #4]
   bb766:	3301      	adds	r3, #1
   bb768:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bb76a:	6860      	ldr	r0, [r4, #4]
   bb76c:	b108      	cbz	r0, bb772 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bb76e:	f7ff f91c 	bl	ba9aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bb772:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb774:	bd38      	pop	{r3, r4, r5, pc}

000bb776 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bb776:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bb778:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bb77a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bb77e:	689b      	ldr	r3, [r3, #8]
   bb780:	2201      	movs	r2, #1
   bb782:	f10d 0107 	add.w	r1, sp, #7
   bb786:	4798      	blx	r3
}
   bb788:	b003      	add	sp, #12
   bb78a:	f85d fb04 	ldr.w	pc, [sp], #4

000bb78e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb78e:	460b      	mov	r3, r1
   bb790:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bb792:	2200      	movs	r2, #0
   bb794:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bb796:	e9c0 2200 	strd	r2, r2, [r0]
   bb79a:	4604      	mov	r4, r0
        t_ = t;
   bb79c:	6083      	str	r3, [r0, #8]
    if (t) {
   bb79e:	b90b      	cbnz	r3, bb7a4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bb7a0:	4620      	mov	r0, r4
   bb7a2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bb7a4:	f7ff ffd5 	bl	bb752 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bb7a8:	e7fa      	b.n	bb7a0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bb7aa <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bb7aa:	6883      	ldr	r3, [r0, #8]
   bb7ac:	b1eb      	cbz	r3, bb7ea <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bb7ae:	781a      	ldrb	r2, [r3, #0]
   bb7b0:	2a03      	cmp	r2, #3
   bb7b2:	d81a      	bhi.n	bb7ea <_ZNK5spark9JSONValue4typeEv+0x40>
   bb7b4:	e8df f002 	tbb	[pc, r2]
   bb7b8:	1b021704 	.word	0x1b021704
   bb7bc:	2005      	movs	r0, #5
   bb7be:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bb7c0:	6802      	ldr	r2, [r0, #0]
   bb7c2:	685b      	ldr	r3, [r3, #4]
   bb7c4:	6852      	ldr	r2, [r2, #4]
   bb7c6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bb7c8:	282d      	cmp	r0, #45	; 0x2d
   bb7ca:	d012      	beq.n	bb7f2 <_ZNK5spark9JSONValue4typeEv+0x48>
   bb7cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb7d0:	2b09      	cmp	r3, #9
   bb7d2:	d90e      	bls.n	bb7f2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bb7d4:	2874      	cmp	r0, #116	; 0x74
   bb7d6:	d00e      	beq.n	bb7f6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bb7d8:	2866      	cmp	r0, #102	; 0x66
   bb7da:	d00c      	beq.n	bb7f6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bb7dc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bb7e0:	4258      	negs	r0, r3
   bb7e2:	4158      	adcs	r0, r3
   bb7e4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bb7e6:	2006      	movs	r0, #6
   bb7e8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bb7ea:	2000      	movs	r0, #0
   bb7ec:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bb7ee:	2004      	movs	r0, #4
   bb7f0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bb7f2:	2003      	movs	r0, #3
   bb7f4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bb7f6:	2002      	movs	r0, #2
}
   bb7f8:	4770      	bx	lr

000bb7fa <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bb7fa:	b510      	push	{r4, lr}
   bb7fc:	4604      	mov	r4, r0
    switch (type()) {
   bb7fe:	f7ff ffd4 	bl	bb7aa <_ZNK5spark9JSONValue4typeEv>
   bb802:	2802      	cmp	r0, #2
   bb804:	d00e      	beq.n	bb824 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bb806:	1ec3      	subs	r3, r0, #3
   bb808:	b2db      	uxtb	r3, r3
   bb80a:	2b01      	cmp	r3, #1
   bb80c:	d814      	bhi.n	bb838 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bb80e:	6822      	ldr	r2, [r4, #0]
   bb810:	68a3      	ldr	r3, [r4, #8]
   bb812:	6850      	ldr	r0, [r2, #4]
   bb814:	685b      	ldr	r3, [r3, #4]
}
   bb816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bb81a:	220a      	movs	r2, #10
   bb81c:	2100      	movs	r1, #0
   bb81e:	4418      	add	r0, r3
   bb820:	f002 bc88 	b.w	be134 <strtol>
        const char* const s = d_->json + t_->start;
   bb824:	6822      	ldr	r2, [r4, #0]
   bb826:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bb828:	6852      	ldr	r2, [r2, #4]
   bb82a:	685b      	ldr	r3, [r3, #4]
   bb82c:	5cd0      	ldrb	r0, [r2, r3]
   bb82e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bb832:	4258      	negs	r0, r3
   bb834:	4158      	adcs	r0, r3
}
   bb836:	bd10      	pop	{r4, pc}
    switch (type()) {
   bb838:	2000      	movs	r0, #0
   bb83a:	e7fc      	b.n	bb836 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bb83c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb83c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb83e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bb840:	e9c0 3300 	strd	r3, r3, [r0]
   bb844:	4604      	mov	r4, r0
        n_(0) {
   bb846:	480e      	ldr	r0, [pc, #56]	; (bb880 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bb848:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bb84c:	b1a9      	cbz	r1, bb87a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bb84e:	780b      	ldrb	r3, [r1, #0]
   bb850:	2b03      	cmp	r3, #3
   bb852:	d006      	beq.n	bb862 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bb854:	b98b      	cbnz	r3, bb87a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bb856:	6813      	ldr	r3, [r2, #0]
   bb858:	6858      	ldr	r0, [r3, #4]
   bb85a:	684b      	ldr	r3, [r1, #4]
   bb85c:	5cc3      	ldrb	r3, [r0, r3]
   bb85e:	2b6e      	cmp	r3, #110	; 0x6e
   bb860:	d007      	beq.n	bb872 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bb862:	6813      	ldr	r3, [r2, #0]
   bb864:	684d      	ldr	r5, [r1, #4]
   bb866:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bb868:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bb86a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bb86c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bb86e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bb870:	60e3      	str	r3, [r4, #12]
   bb872:	4611      	mov	r1, r2
   bb874:	4620      	mov	r0, r4
   bb876:	f7ff ff6c 	bl	bb752 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb87a:	4620      	mov	r0, r4
   bb87c:	bd38      	pop	{r3, r4, r5, pc}
   bb87e:	bf00      	nop
   bb880:	000bf6ed 	.word	0x000bf6ed

000bb884 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb884:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb886:	2500      	movs	r5, #0
   bb888:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bb88a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bb88e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bb892:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bb896:	4604      	mov	r4, r0
   bb898:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bb89a:	b14b      	cbz	r3, bb8b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bb89c:	781a      	ldrb	r2, [r3, #0]
   bb89e:	2a01      	cmp	r2, #1
   bb8a0:	d106      	bne.n	bb8b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bb8a2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bb8a6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bb8a8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bb8aa:	6143      	str	r3, [r0, #20]
   bb8ac:	f7ff ff51 	bl	bb752 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb8b0:	4620      	mov	r0, r4
   bb8b2:	bd38      	pop	{r3, r4, r5, pc}

000bb8b4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bb8b4:	b510      	push	{r4, lr}
    if (!n_) {
   bb8b6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bb8b8:	4604      	mov	r4, r0
    if (!n_) {
   bb8ba:	b163      	cbz	r3, bb8d6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bb8bc:	6880      	ldr	r0, [r0, #8]
   bb8be:	60e0      	str	r0, [r4, #12]
    --n_;
   bb8c0:	3b01      	subs	r3, #1
    ++t_;
   bb8c2:	3010      	adds	r0, #16
   bb8c4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bb8c6:	6120      	str	r0, [r4, #16]
    --n_;
   bb8c8:	6163      	str	r3, [r4, #20]
    if (n_) {
   bb8ca:	b113      	cbz	r3, bb8d2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bb8cc:	f7ff fef2 	bl	bb6b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bb8d0:	60a0      	str	r0, [r4, #8]
    return true;
   bb8d2:	2001      	movs	r0, #1
   bb8d4:	e000      	b.n	bb8d8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bb8d6:	4618      	mov	r0, r3
}
   bb8d8:	bd10      	pop	{r4, pc}

000bb8da <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb8da:	b510      	push	{r4, lr}
    write('}');
   bb8dc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb8de:	4604      	mov	r4, r0
    write('}');
   bb8e0:	f7ff ff49 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bb8e4:	2301      	movs	r3, #1
   bb8e6:	7123      	strb	r3, [r4, #4]
}
   bb8e8:	4620      	mov	r0, r4
   bb8ea:	bd10      	pop	{r4, pc}

000bb8ec <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bb8ec:	b508      	push	{r3, lr}
    switch (state_) {
   bb8ee:	7903      	ldrb	r3, [r0, #4]
   bb8f0:	2b01      	cmp	r3, #1
   bb8f2:	d002      	beq.n	bb8fa <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bb8f4:	2b02      	cmp	r3, #2
   bb8f6:	d004      	beq.n	bb902 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bb8f8:	bd08      	pop	{r3, pc}
        write(',');
   bb8fa:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bb8fc:	f7ff ff3b 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
}
   bb900:	e7fa      	b.n	bb8f8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bb902:	213a      	movs	r1, #58	; 0x3a
   bb904:	e7fa      	b.n	bb8fc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bb906 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bb906:	b510      	push	{r4, lr}
   bb908:	4604      	mov	r4, r0
    writeSeparator();
   bb90a:	f7ff ffef 	bl	bb8ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bb90e:	4620      	mov	r0, r4
   bb910:	217b      	movs	r1, #123	; 0x7b
   bb912:	f7ff ff30 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bb916:	2300      	movs	r3, #0
   bb918:	7123      	strb	r3, [r4, #4]
}
   bb91a:	4620      	mov	r0, r4
   bb91c:	bd10      	pop	{r4, pc}
	...

000bb920 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bb920:	b513      	push	{r0, r1, r4, lr}
   bb922:	4604      	mov	r4, r0
   bb924:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb926:	f7ff ffe1 	bl	bb8ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bb92a:	6823      	ldr	r3, [r4, #0]
   bb92c:	9a01      	ldr	r2, [sp, #4]
   bb92e:	68db      	ldr	r3, [r3, #12]
   bb930:	4903      	ldr	r1, [pc, #12]	; (bb940 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bb932:	4620      	mov	r0, r4
   bb934:	4798      	blx	r3
    state_ = NEXT;
   bb936:	2301      	movs	r3, #1
}
   bb938:	4620      	mov	r0, r4
    state_ = NEXT;
   bb93a:	7123      	strb	r3, [r4, #4]
}
   bb93c:	b002      	add	sp, #8
   bb93e:	bd10      	pop	{r4, pc}
   bb940:	000beedb 	.word	0x000beedb

000bb944 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bb944:	b513      	push	{r0, r1, r4, lr}
   bb946:	4604      	mov	r4, r0
   bb948:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb94a:	f7ff ffcf 	bl	bb8ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bb94e:	6823      	ldr	r3, [r4, #0]
   bb950:	9a01      	ldr	r2, [sp, #4]
   bb952:	68db      	ldr	r3, [r3, #12]
   bb954:	4903      	ldr	r1, [pc, #12]	; (bb964 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bb956:	4620      	mov	r0, r4
   bb958:	4798      	blx	r3
    state_ = NEXT;
   bb95a:	2301      	movs	r3, #1
}
   bb95c:	4620      	mov	r0, r4
    state_ = NEXT;
   bb95e:	7123      	strb	r3, [r4, #4]
}
   bb960:	b002      	add	sp, #8
   bb962:	bd10      	pop	{r4, pc}
   bb964:	000bf192 	.word	0x000bf192

000bb968 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bb968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb96c:	460d      	mov	r5, r1
    write('"');
   bb96e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bb970:	4690      	mov	r8, r2
   bb972:	4604      	mov	r4, r0
    write('"');
   bb974:	f7ff feff 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bb978:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bba20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bb97c:	44a8      	add	r8, r5
    const char *s = str;
   bb97e:	462f      	mov	r7, r5
    while (s != end) {
   bb980:	4547      	cmp	r7, r8
   bb982:	46ba      	mov	sl, r7
   bb984:	d03d      	beq.n	bba02 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bb986:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bb98a:	2e22      	cmp	r6, #34	; 0x22
   bb98c:	d006      	beq.n	bb99c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bb98e:	2e5c      	cmp	r6, #92	; 0x5c
   bb990:	d004      	beq.n	bb99c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bb992:	4630      	mov	r0, r6
   bb994:	f002 fa42 	bl	bde1c <isprint>
   bb998:	2800      	cmp	r0, #0
   bb99a:	d1f1      	bne.n	bb980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bb99c:	6823      	ldr	r3, [r4, #0]
   bb99e:	ebaa 0205 	sub.w	r2, sl, r5
   bb9a2:	689b      	ldr	r3, [r3, #8]
   bb9a4:	4629      	mov	r1, r5
   bb9a6:	4620      	mov	r0, r4
   bb9a8:	4798      	blx	r3
            write('\\');
   bb9aa:	215c      	movs	r1, #92	; 0x5c
   bb9ac:	4620      	mov	r0, r4
   bb9ae:	f7ff fee2 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bb9b2:	2e0d      	cmp	r6, #13
   bb9b4:	d80a      	bhi.n	bb9cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bb9b6:	2e07      	cmp	r6, #7
   bb9b8:	d91c      	bls.n	bb9f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bb9ba:	f1a6 0308 	sub.w	r3, r6, #8
   bb9be:	2b05      	cmp	r3, #5
   bb9c0:	d818      	bhi.n	bb9f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bb9c2:	e8df f003 	tbb	[pc, r3]
   bb9c6:	0f0d      	.short	0x0f0d
   bb9c8:	15131711 	.word	0x15131711
   bb9cc:	2e22      	cmp	r6, #34	; 0x22
   bb9ce:	d001      	beq.n	bb9d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bb9d0:	2e5c      	cmp	r6, #92	; 0x5c
   bb9d2:	d10f      	bne.n	bb9f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bb9d4:	4631      	mov	r1, r6
                write('b');
   bb9d6:	4620      	mov	r0, r4
   bb9d8:	f7ff fecd 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bb9dc:	463d      	mov	r5, r7
    while (s != end) {
   bb9de:	e7cf      	b.n	bb980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bb9e0:	2162      	movs	r1, #98	; 0x62
   bb9e2:	e7f8      	b.n	bb9d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bb9e4:	2174      	movs	r1, #116	; 0x74
   bb9e6:	e7f6      	b.n	bb9d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bb9e8:	216e      	movs	r1, #110	; 0x6e
   bb9ea:	e7f4      	b.n	bb9d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bb9ec:	2166      	movs	r1, #102	; 0x66
   bb9ee:	e7f2      	b.n	bb9d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bb9f0:	2172      	movs	r1, #114	; 0x72
   bb9f2:	e7f0      	b.n	bb9d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bb9f4:	6823      	ldr	r3, [r4, #0]
   bb9f6:	4632      	mov	r2, r6
   bb9f8:	68db      	ldr	r3, [r3, #12]
   bb9fa:	4649      	mov	r1, r9
   bb9fc:	4620      	mov	r0, r4
   bb9fe:	4798      	blx	r3
                break;
   bba00:	e7ec      	b.n	bb9dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bba02:	42bd      	cmp	r5, r7
   bba04:	d005      	beq.n	bba12 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bba06:	6823      	ldr	r3, [r4, #0]
   bba08:	1b7a      	subs	r2, r7, r5
   bba0a:	689b      	ldr	r3, [r3, #8]
   bba0c:	4629      	mov	r1, r5
   bba0e:	4620      	mov	r0, r4
   bba10:	4798      	blx	r3
    }
    write('"');
   bba12:	2122      	movs	r1, #34	; 0x22
   bba14:	4620      	mov	r0, r4
   bba16:	f7ff feae 	bl	bb776 <_ZN5spark10JSONWriter5writeEc>
}
   bba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bba1e:	bf00      	nop
   bba20:	000bf690 	.word	0x000bf690

000bba24 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bba24:	b513      	push	{r0, r1, r4, lr}
   bba26:	4604      	mov	r4, r0
   bba28:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bba2c:	f7ff ff5e 	bl	bb8ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bba30:	4620      	mov	r0, r4
   bba32:	e9dd 2100 	ldrd	r2, r1, [sp]
   bba36:	f7ff ff97 	bl	bb968 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bba3a:	2302      	movs	r3, #2
}
   bba3c:	4620      	mov	r0, r4
    state_ = VALUE;
   bba3e:	7123      	strb	r3, [r4, #4]
}
   bba40:	b002      	add	sp, #8
   bba42:	bd10      	pop	{r4, pc}

000bba44 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bba44:	b513      	push	{r0, r1, r4, lr}
   bba46:	4604      	mov	r4, r0
   bba48:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bba4c:	f7ff ff4e 	bl	bb8ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bba50:	4620      	mov	r0, r4
   bba52:	e9dd 2100 	ldrd	r2, r1, [sp]
   bba56:	f7ff ff87 	bl	bb968 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bba5a:	2301      	movs	r3, #1
}
   bba5c:	4620      	mov	r0, r4
    state_ = NEXT;
   bba5e:	7123      	strb	r3, [r4, #4]
}
   bba60:	b002      	add	sp, #8
   bba62:	bd10      	pop	{r4, pc}

000bba64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bba64:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bba66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bba68:	4604      	mov	r4, r0
   bba6a:	460d      	mov	r5, r1
   bba6c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bba6e:	d914      	bls.n	bba9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bba70:	4290      	cmp	r0, r2
   bba72:	d213      	bcs.n	bba9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bba74:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bba78:	1a75      	subs	r5, r6, r1
   bba7a:	f1a1 0710 	sub.w	r7, r1, #16
   bba7e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bba80:	42b7      	cmp	r7, r6
   bba82:	d018      	beq.n	bbab6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bba84:	b11c      	cbz	r4, bba8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bba86:	4631      	mov	r1, r6
   bba88:	4620      	mov	r0, r4
   bba8a:	f001 f9f6 	bl	bce7a <_ZN6StringC1EOS_>
                end->~T();
   bba8e:	4630      	mov	r0, r6
   bba90:	f001 f976 	bl	bcd80 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bba94:	3e10      	subs	r6, #16
   bba96:	3c10      	subs	r4, #16
   bba98:	e7f2      	b.n	bba80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bba9a:	d00c      	beq.n	bbab6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bba9c:	42b5      	cmp	r5, r6
   bba9e:	d00a      	beq.n	bbab6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bbaa0:	b11c      	cbz	r4, bbaaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bbaa2:	4629      	mov	r1, r5
   bbaa4:	4620      	mov	r0, r4
   bbaa6:	f001 f9e8 	bl	bce7a <_ZN6StringC1EOS_>
                p->~T();
   bbaaa:	4628      	mov	r0, r5
   bbaac:	f001 f968 	bl	bcd80 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bbab0:	3510      	adds	r5, #16
   bbab2:	3410      	adds	r4, #16
   bbab4:	e7f2      	b.n	bba9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bbab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bbab8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bbaba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbabc:	4605      	mov	r5, r0
        if (n > 0) {
   bbabe:	dd11      	ble.n	bbae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bbac0:	0130      	lsls	r0, r6, #4
   bbac2:	f7fe fedb 	bl	ba87c <malloc>
            if (!d) {
   bbac6:	4604      	mov	r4, r0
   bbac8:	b158      	cbz	r0, bbae2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bbaca:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbace:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bbad2:	f7ff ffc7 	bl	bba64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bbad6:	6828      	ldr	r0, [r5, #0]
   bbad8:	f7fe fed8 	bl	ba88c <free>
        data_ = d;
   bbadc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbade:	60ae      	str	r6, [r5, #8]
        return true;
   bbae0:	2001      	movs	r0, #1
    }
   bbae2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bbae4:	2400      	movs	r4, #0
   bbae6:	e7f6      	b.n	bbad6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bbae8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   bbae8:	b510      	push	{r4, lr}
   bbaea:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   bbaec:	6880      	ldr	r0, [r0, #8]
   bbaee:	6803      	ldr	r3, [r0, #0]
   bbaf0:	68db      	ldr	r3, [r3, #12]
   bbaf2:	4798      	blx	r3
   bbaf4:	68e3      	ldr	r3, [r4, #12]
   bbaf6:	4418      	add	r0, r3
   bbaf8:	60e0      	str	r0, [r4, #12]
}
   bbafa:	bd10      	pop	{r4, pc}

000bbafc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bbafc:	4770      	bx	lr

000bbafe <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bbafe:	4608      	mov	r0, r1
   bbb00:	b111      	cbz	r1, bbb08 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bbb02:	680b      	ldr	r3, [r1, #0]
   bbb04:	685b      	ldr	r3, [r3, #4]
   bbb06:	4718      	bx	r3
}
   bbb08:	4770      	bx	lr

000bbb0a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bbb0a:	4770      	bx	lr

000bbb0c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbb0c:	4770      	bx	lr

000bbb0e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bbb0e:	4770      	bx	lr

000bbb10 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bbb10:	4770      	bx	lr

000bbb12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bbb12:	b538      	push	{r3, r4, r5, lr}
   bbb14:	4604      	mov	r4, r0
   bbb16:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bbb18:	6800      	ldr	r0, [r0, #0]
   bbb1a:	212e      	movs	r1, #46	; 0x2e
   bbb1c:	f002 f9f1 	bl	bdf02 <strchrnul>
    size = s - category;
   bbb20:	6823      	ldr	r3, [r4, #0]
   bbb22:	1ac3      	subs	r3, r0, r3
   bbb24:	602b      	str	r3, [r5, #0]
    if (size) {
   bbb26:	b123      	cbz	r3, bbb32 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bbb28:	7803      	ldrb	r3, [r0, #0]
   bbb2a:	b103      	cbz	r3, bbb2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bbb2c:	3001      	adds	r0, #1
   bbb2e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbb30:	6020      	str	r0, [r4, #0]
}
   bbb32:	4618      	mov	r0, r3
   bbb34:	bd38      	pop	{r3, r4, r5, pc}

000bbb36 <_ZN5spark16JSONStreamWriterD0Ev>:
   bbb36:	b510      	push	{r4, lr}
   bbb38:	2110      	movs	r1, #16
   bbb3a:	4604      	mov	r4, r0
   bbb3c:	f7f8 ffc5 	bl	b4aca <_ZdlPvj>
   bbb40:	4620      	mov	r0, r4
   bbb42:	bd10      	pop	{r4, pc}

000bbb44 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bbb44:	b510      	push	{r4, lr}
   bbb46:	2104      	movs	r1, #4
   bbb48:	4604      	mov	r4, r0
   bbb4a:	f7f8 ffbe 	bl	b4aca <_ZdlPvj>
   bbb4e:	4620      	mov	r0, r4
   bbb50:	bd10      	pop	{r4, pc}

000bbb52 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbb52:	b510      	push	{r4, lr}
   bbb54:	2104      	movs	r1, #4
   bbb56:	4604      	mov	r4, r0
   bbb58:	f7f8 ffb7 	bl	b4aca <_ZdlPvj>
   bbb5c:	4620      	mov	r0, r4
   bbb5e:	bd10      	pop	{r4, pc}

000bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bbb60:	f7fe bad0 	b.w	ba104 <os_mutex_recursive_lock>

000bbb64 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bbb64:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bbb66:	f7f8 ff5f 	bl	b4a28 <strcmp>
}
   bbb6a:	fab0 f080 	clz	r0, r0
   bbb6e:	0940      	lsrs	r0, r0, #5
   bbb70:	bd08      	pop	{r3, pc}

000bbb72 <__tcf_1>:
   bbb72:	4770      	bx	lr

000bbb74 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bbb74:	b510      	push	{r4, lr}
   bbb76:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bbb78:	f001 fdc4 	bl	bd704 <_Z16_fetch_usbserialv>
   bbb7c:	4284      	cmp	r4, r0
   bbb7e:	d010      	beq.n	bbba2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bbb80:	f001 ffc6 	bl	bdb10 <_Z22__fetch_global_Serial1v>
   bbb84:	4284      	cmp	r4, r0
   bbb86:	d105      	bne.n	bbb94 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bbb88:	f001 ffc2 	bl	bdb10 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bbb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bbb90:	f001 bd53 	b.w	bd63a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bbb94:	b12c      	cbz	r4, bbba2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bbb96:	6823      	ldr	r3, [r4, #0]
   bbb98:	4620      	mov	r0, r4
   bbb9a:	685b      	ldr	r3, [r3, #4]
}
   bbb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbba0:	4718      	bx	r3
   bbba2:	bd10      	pop	{r4, pc}

000bbba4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bbba4:	b513      	push	{r0, r1, r4, lr}
   bbba6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bbba8:	4608      	mov	r0, r1
   bbbaa:	9101      	str	r1, [sp, #4]
   bbbac:	f7f8 ff46 	bl	b4a3c <strlen>
   bbbb0:	9901      	ldr	r1, [sp, #4]
   bbbb2:	4602      	mov	r2, r0
   bbbb4:	4620      	mov	r0, r4
}
   bbbb6:	b002      	add	sp, #8
   bbbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bbbbc:	f7ff bf42 	b.w	bba44 <_ZN5spark10JSONWriter5valueEPKcj>

000bbbc0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bbbc0:	b513      	push	{r0, r1, r4, lr}
   bbbc2:	4604      	mov	r4, r0
    write(str, strlen(str));
   bbbc4:	4608      	mov	r0, r1
   bbbc6:	9101      	str	r1, [sp, #4]
   bbbc8:	f7f8 ff38 	bl	b4a3c <strlen>
   bbbcc:	6823      	ldr	r3, [r4, #0]
   bbbce:	9901      	ldr	r1, [sp, #4]
   bbbd0:	68db      	ldr	r3, [r3, #12]
   bbbd2:	4602      	mov	r2, r0
   bbbd4:	4620      	mov	r0, r4
}
   bbbd6:	b002      	add	sp, #8
   bbbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bbbdc:	4718      	bx	r3

000bbbde <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bbbde:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bbbe0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bbbe2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bbbe6:	68db      	ldr	r3, [r3, #12]
   bbbe8:	2201      	movs	r2, #1
   bbbea:	f10d 0107 	add.w	r1, sp, #7
   bbbee:	4798      	blx	r3
}
   bbbf0:	b003      	add	sp, #12
   bbbf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbbf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bbbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bbbfc:	e9d0 8400 	ldrd	r8, r4, [r0]
   bbc00:	f04f 0a14 	mov.w	sl, #20
   bbc04:	9300      	str	r3, [sp, #0]
   bbc06:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bbc0a:	4b18      	ldr	r3, [pc, #96]	; (bbc6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bbc0c:	10a4      	asrs	r4, r4, #2
   bbc0e:	4617      	mov	r7, r2
   bbc10:	435c      	muls	r4, r3
   bbc12:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bbc14:	2c00      	cmp	r4, #0
   bbc16:	dd21      	ble.n	bbc5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bbc18:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bbc1a:	fb0a f006 	mul.w	r0, sl, r6
   bbc1e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bbc22:	463a      	mov	r2, r7
   bbc24:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bbc28:	5828      	ldr	r0, [r5, r0]
   bbc2a:	9101      	str	r1, [sp, #4]
   bbc2c:	455f      	cmp	r7, fp
   bbc2e:	bf28      	it	cs
   bbc30:	465a      	movcs	r2, fp
   bbc32:	f002 f996 	bl	bdf62 <strncmp>
                if (cmp == 0) {
   bbc36:	2800      	cmp	r0, #0
   bbc38:	9901      	ldr	r1, [sp, #4]
   bbc3a:	f04f 0301 	mov.w	r3, #1
   bbc3e:	d10b      	bne.n	bbc58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bbc40:	455f      	cmp	r7, fp
   bbc42:	d103      	bne.n	bbc4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bbc44:	9a00      	ldr	r2, [sp, #0]
   bbc46:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bbc48:	4634      	mov	r4, r6
   bbc4a:	e7e3      	b.n	bbc14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bbc4c:	d9fc      	bls.n	bbc48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bbc4e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bbc50:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bbc54:	3e01      	subs	r6, #1
   bbc56:	e7f7      	b.n	bbc48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bbc58:	dbf9      	blt.n	bbc4e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bbc5a:	e7f5      	b.n	bbc48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bbc5c:	eba5 0508 	sub.w	r5, r5, r8
}
   bbc60:	4802      	ldr	r0, [pc, #8]	; (bbc6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bbc62:	10ad      	asrs	r5, r5, #2
   bbc64:	4368      	muls	r0, r5
   bbc66:	b003      	add	sp, #12
   bbc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbc6c:	cccccccd 	.word	0xcccccccd

000bbc70 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bbc70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bbc72:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bbc74:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bbc76:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bbc78:	b303      	cbz	r3, bbcbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bbc7a:	b1f9      	cbz	r1, bbcbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bbc7c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bbc7e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bbc82:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bbc84:	a903      	add	r1, sp, #12
   bbc86:	a801      	add	r0, sp, #4
   bbc88:	f7ff ff43 	bl	bbb12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bbc8c:	4601      	mov	r1, r0
   bbc8e:	b1a8      	cbz	r0, bbcbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bbc90:	f10d 030b 	add.w	r3, sp, #11
   bbc94:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bbc96:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bbc9a:	4620      	mov	r0, r4
   bbc9c:	f7ff ffac 	bl	bbbf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bbca0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bbca4:	b153      	cbz	r3, bbcbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bbca6:	6823      	ldr	r3, [r4, #0]
   bbca8:	2414      	movs	r4, #20
   bbcaa:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bbcae:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bbcb0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bbcb4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bbcb6:	bfa8      	it	ge
   bbcb8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bbcba:	e7e3      	b.n	bbc84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bbcbc:	4628      	mov	r0, r5
   bbcbe:	b004      	add	sp, #16
   bbcc0:	bd70      	pop	{r4, r5, r6, pc}

000bbcc2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bbcc2:	b40e      	push	{r1, r2, r3}
   bbcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbcc6:	b08c      	sub	sp, #48	; 0x30
   bbcc8:	af00      	add	r7, sp, #0
   bbcca:	f107 0544 	add.w	r5, r7, #68	; 0x44
   bbcce:	4604      	mov	r4, r0
   bbcd0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbcd4:	607a      	str	r2, [r7, #4]
   bbcd6:	462b      	mov	r3, r5
   bbcd8:	2120      	movs	r1, #32
   bbcda:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   bbcde:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbce0:	f7fe fdfc 	bl	ba8dc <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   bbce4:	281f      	cmp	r0, #31
   bbce6:	687a      	ldr	r2, [r7, #4]
   bbce8:	d91a      	bls.n	bbd20 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   bbcea:	f100 0308 	add.w	r3, r0, #8
   bbcee:	f023 0307 	bic.w	r3, r3, #7
        }
   bbcf2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   bbcf4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbcf8:	1c41      	adds	r1, r0, #1
   bbcfa:	462b      	mov	r3, r5
   bbcfc:	4668      	mov	r0, sp
        va_start(args, fmt);
   bbcfe:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbd00:	f7fe fdec 	bl	ba8dc <vsnprintf>
        if (n > 0) {
   bbd04:	1e02      	subs	r2, r0, #0
   bbd06:	dd04      	ble.n	bbd12 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   bbd08:	6823      	ldr	r3, [r4, #0]
   bbd0a:	4669      	mov	r1, sp
   bbd0c:	68db      	ldr	r3, [r3, #12]
   bbd0e:	4620      	mov	r0, r4
   bbd10:	4798      	blx	r3
   bbd12:	46b5      	mov	sp, r6
}
   bbd14:	3730      	adds	r7, #48	; 0x30
   bbd16:	46bd      	mov	sp, r7
   bbd18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbd1c:	b003      	add	sp, #12
   bbd1e:	4770      	bx	lr
    } else if (n > 0) {
   bbd20:	2800      	cmp	r0, #0
   bbd22:	d0f7      	beq.n	bbd14 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   bbd24:	6823      	ldr	r3, [r4, #0]
   bbd26:	4602      	mov	r2, r0
   bbd28:	68db      	ldr	r3, [r3, #12]
   bbd2a:	f107 0110 	add.w	r1, r7, #16
   bbd2e:	4620      	mov	r0, r4
   bbd30:	4798      	blx	r3
}
   bbd32:	e7ef      	b.n	bbd14 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000bbd34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bbd34:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bbd36:	4c09      	ldr	r4, [pc, #36]	; (bbd5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bbd38:	7823      	ldrb	r3, [r4, #0]
   bbd3a:	f3bf 8f5b 	dmb	ish
   bbd3e:	07db      	lsls	r3, r3, #31
   bbd40:	d409      	bmi.n	bbd56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bbd42:	4620      	mov	r0, r4
   bbd44:	f7f8 fed0 	bl	b4ae8 <__cxa_guard_acquire>
   bbd48:	b128      	cbz	r0, bbd56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bbd4a:	4620      	mov	r0, r4
   bbd4c:	f7f8 fed1 	bl	b4af2 <__cxa_guard_release>
   bbd50:	4803      	ldr	r0, [pc, #12]	; (bbd60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bbd52:	f002 f83b 	bl	bddcc <atexit>
}
   bbd56:	4803      	ldr	r0, [pc, #12]	; (bbd64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bbd58:	bd10      	pop	{r4, pc}
   bbd5a:	bf00      	nop
   bbd5c:	2003e644 	.word	0x2003e644
   bbd60:	000bbb0b 	.word	0x000bbb0b
   bbd64:	2003e3e0 	.word	0x2003e3e0

000bbd68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bbd68:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bbd6a:	4c09      	ldr	r4, [pc, #36]	; (bbd90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bbd6c:	7823      	ldrb	r3, [r4, #0]
   bbd6e:	f3bf 8f5b 	dmb	ish
   bbd72:	07db      	lsls	r3, r3, #31
   bbd74:	d409      	bmi.n	bbd8a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bbd76:	4620      	mov	r0, r4
   bbd78:	f7f8 feb6 	bl	b4ae8 <__cxa_guard_acquire>
   bbd7c:	b128      	cbz	r0, bbd8a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bbd7e:	4620      	mov	r0, r4
   bbd80:	f7f8 feb7 	bl	b4af2 <__cxa_guard_release>
   bbd84:	4803      	ldr	r0, [pc, #12]	; (bbd94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bbd86:	f002 f821 	bl	bddcc <atexit>
    return &factory;
}
   bbd8a:	4803      	ldr	r0, [pc, #12]	; (bbd98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bbd8c:	bd10      	pop	{r4, pc}
   bbd8e:	bf00      	nop
   bbd90:	2003e648 	.word	0x2003e648
   bbd94:	000bbb73 	.word	0x000bbb73
   bbd98:	2003e3e4 	.word	0x2003e3e4

000bbd9c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bbd9c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bbd9e:	2500      	movs	r5, #0
   bbda0:	4604      	mov	r4, r0
   bbda2:	e9c0 5500 	strd	r5, r5, [r0]
   bbda6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bbdaa:	6085      	str	r5, [r0, #8]
   bbdac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bbdae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bbdb2:	f7fe f997 	bl	ba0e4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bbdb6:	f7ff ffbd 	bl	bbd34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bbdba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bbdbc:	f7ff ffd4 	bl	bbd68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bbdc0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bbdc2:	6220      	str	r0, [r4, #32]
}
   bbdc4:	4620      	mov	r0, r4
   bbdc6:	bd38      	pop	{r3, r4, r5, pc}

000bbdc8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bbdc8:	b510      	push	{r4, lr}
    static LogManager mgr;
   bbdca:	4c0a      	ldr	r4, [pc, #40]	; (bbdf4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bbdcc:	7823      	ldrb	r3, [r4, #0]
   bbdce:	f3bf 8f5b 	dmb	ish
   bbdd2:	07db      	lsls	r3, r3, #31
   bbdd4:	d40c      	bmi.n	bbdf0 <_ZN5spark10LogManager8instanceEv+0x28>
   bbdd6:	4620      	mov	r0, r4
   bbdd8:	f7f8 fe86 	bl	b4ae8 <__cxa_guard_acquire>
   bbddc:	b140      	cbz	r0, bbdf0 <_ZN5spark10LogManager8instanceEv+0x28>
   bbdde:	4806      	ldr	r0, [pc, #24]	; (bbdf8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bbde0:	f7ff ffdc 	bl	bbd9c <_ZN5spark10LogManagerC1Ev>
   bbde4:	4620      	mov	r0, r4
   bbde6:	f7f8 fe84 	bl	b4af2 <__cxa_guard_release>
   bbdea:	4804      	ldr	r0, [pc, #16]	; (bbdfc <_ZN5spark10LogManager8instanceEv+0x34>)
   bbdec:	f001 ffee 	bl	bddcc <atexit>
    return &mgr;
}
   bbdf0:	4801      	ldr	r0, [pc, #4]	; (bbdf8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bbdf2:	bd10      	pop	{r4, pc}
   bbdf4:	2003e640 	.word	0x2003e640
   bbdf8:	2003e650 	.word	0x2003e650
   bbdfc:	000bc2d9 	.word	0x000bc2d9

000bbe00 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bbe00:	4a02      	ldr	r2, [pc, #8]	; (bbe0c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bbe02:	4903      	ldr	r1, [pc, #12]	; (bbe10 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bbe04:	4803      	ldr	r0, [pc, #12]	; (bbe14 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bbe06:	2300      	movs	r3, #0
   bbe08:	f7fe bbdc 	b.w	ba5c4 <log_set_callbacks>
   bbe0c:	000bc0bd 	.word	0x000bc0bd
   bbe10:	000bc049 	.word	0x000bc049
   bbe14:	000bbfc9 	.word	0x000bbfc9

000bbe18 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bbe18:	2300      	movs	r3, #0
   bbe1a:	461a      	mov	r2, r3
   bbe1c:	4619      	mov	r1, r3
   bbe1e:	4618      	mov	r0, r3
   bbe20:	f7fe bbd0 	b.w	ba5c4 <log_set_callbacks>

000bbe24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bbe24:	b570      	push	{r4, r5, r6, lr}
   bbe26:	b08a      	sub	sp, #40	; 0x28
   bbe28:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bbe2a:	4601      	mov	r1, r0
   bbe2c:	a804      	add	r0, sp, #16
   bbe2e:	f7fc fe08 	bl	b8a42 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bbe32:	4e14      	ldr	r6, [pc, #80]	; (bbe84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bbe34:	a804      	add	r0, sp, #16
   bbe36:	f7ff fd3d 	bl	bb8b4 <_ZN5spark18JSONObjectIterator4nextEv>
   bbe3a:	b1e8      	cbz	r0, bbe78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bbe3c:	a904      	add	r1, sp, #16
   bbe3e:	4668      	mov	r0, sp
   bbe40:	f7fc fe10 	bl	b8a64 <_ZNK5spark18JSONObjectIterator4nameEv>
   bbe44:	9802      	ldr	r0, [sp, #8]
   bbe46:	4631      	mov	r1, r6
   bbe48:	f7ff fe8c 	bl	bbb64 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bbe4c:	4604      	mov	r4, r0
   bbe4e:	b110      	cbz	r0, bbe56 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bbe50:	1e2c      	subs	r4, r5, #0
   bbe52:	bf18      	it	ne
   bbe54:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bbe56:	a801      	add	r0, sp, #4
   bbe58:	f7f8 ffbe 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbe5c:	2c00      	cmp	r4, #0
   bbe5e:	d0e9      	beq.n	bbe34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bbe60:	a904      	add	r1, sp, #16
   bbe62:	4668      	mov	r0, sp
   bbe64:	f7fc fe0f 	bl	b8a86 <_ZNK5spark18JSONObjectIterator5valueEv>
   bbe68:	4668      	mov	r0, sp
   bbe6a:	f7ff fcc6 	bl	bb7fa <_ZNK5spark9JSONValue5toIntEv>
   bbe6e:	6028      	str	r0, [r5, #0]
   bbe70:	a801      	add	r0, sp, #4
   bbe72:	f7f8 ffb1 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbe76:	e7dd      	b.n	bbe34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bbe78:	a805      	add	r0, sp, #20
   bbe7a:	f7f8 ffad 	bl	b4dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbe7e:	b00a      	add	sp, #40	; 0x28
   bbe80:	bd70      	pop	{r4, r5, r6, pc}
   bbe82:	bf00      	nop
   bbe84:	000bf696 	.word	0x000bf696

000bbe88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bbe88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbe8a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bbe8c:	4620      	mov	r0, r4
   bbe8e:	4913      	ldr	r1, [pc, #76]	; (bbedc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bbe90:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bbe92:	f7f8 fdc9 	bl	b4a28 <strcmp>
   bbe96:	b950      	cbnz	r0, bbeae <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bbe98:	f001 fc34 	bl	bd704 <_Z16_fetch_usbserialv>
   bbe9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bbea0:	f001 fc20 	bl	bd6e4 <_ZN9USBSerial5beginEl>
}
   bbea4:	b003      	add	sp, #12
   bbea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bbeaa:	f001 bc2b 	b.w	bd704 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bbeae:	490c      	ldr	r1, [pc, #48]	; (bbee0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bbeb0:	4620      	mov	r0, r4
   bbeb2:	f7f8 fdb9 	bl	b4a28 <strcmp>
   bbeb6:	b978      	cbnz	r0, bbed8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bbeb8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bbebc:	a901      	add	r1, sp, #4
   bbebe:	4628      	mov	r0, r5
        int baud = 9600;
   bbec0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bbec2:	f7ff ffaf 	bl	bbe24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bbec6:	f001 fe23 	bl	bdb10 <_Z22__fetch_global_Serial1v>
   bbeca:	9901      	ldr	r1, [sp, #4]
   bbecc:	f001 fbb2 	bl	bd634 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bbed0:	f001 fe1e 	bl	bdb10 <_Z22__fetch_global_Serial1v>
}
   bbed4:	b003      	add	sp, #12
   bbed6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bbed8:	2000      	movs	r0, #0
   bbeda:	e7fb      	b.n	bbed4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bbedc:	000bf69b 	.word	0x000bf69b
   bbee0:	000bf6a2 	.word	0x000bf6a2

000bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bbee4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bbee6:	e9d0 5300 	ldrd	r5, r3, [r0]
   bbeea:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bbeec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bbeee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bbef2:	42ae      	cmp	r6, r5
   bbef4:	d005      	beq.n	bbf02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bbef6:	f105 0008 	add.w	r0, r5, #8
   bbefa:	f7ff fff3 	bl	bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bbefe:	3514      	adds	r5, #20
   bbf00:	e7f7      	b.n	bbef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bbf02:	6820      	ldr	r0, [r4, #0]
   bbf04:	f7fe fcc2 	bl	ba88c <free>
}
   bbf08:	4620      	mov	r0, r4
   bbf0a:	bd70      	pop	{r4, r5, r6, pc}

000bbf0c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bbf0c:	b510      	push	{r4, lr}
   bbf0e:	4604      	mov	r4, r0
   bbf10:	300c      	adds	r0, #12
   bbf12:	f7ff ffe7 	bl	bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bbf16:	4620      	mov	r0, r4
   bbf18:	f7fe fd5b 	bl	ba9d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bbf1c:	4620      	mov	r0, r4
   bbf1e:	bd10      	pop	{r4, pc}

000bbf20 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bbf20:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bbf22:	4b04      	ldr	r3, [pc, #16]	; (bbf34 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bbf24:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bbf26:	f840 3b04 	str.w	r3, [r0], #4
   bbf2a:	f7ff ffef 	bl	bbf0c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bbf2e:	4620      	mov	r0, r4
   bbf30:	bd10      	pop	{r4, pc}
   bbf32:	bf00      	nop
   bbf34:	000bec84 	.word	0x000bec84

000bbf38 <_ZN5spark16StreamLogHandlerD0Ev>:
   bbf38:	b510      	push	{r4, lr}
   bbf3a:	4604      	mov	r4, r0
   bbf3c:	f7ff fff0 	bl	bbf20 <_ZN5spark16StreamLogHandlerD1Ev>
   bbf40:	4620      	mov	r0, r4
   bbf42:	2124      	movs	r1, #36	; 0x24
   bbf44:	f7f8 fdc1 	bl	b4aca <_ZdlPvj>
   bbf48:	4620      	mov	r0, r4
   bbf4a:	bd10      	pop	{r4, pc}

000bbf4c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bbf4c:	b510      	push	{r4, lr}
   bbf4e:	4b03      	ldr	r3, [pc, #12]	; (bbf5c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bbf50:	6003      	str	r3, [r0, #0]
   bbf52:	4604      	mov	r4, r0
   bbf54:	f7ff ffe4 	bl	bbf20 <_ZN5spark16StreamLogHandlerD1Ev>
   bbf58:	4620      	mov	r0, r4
   bbf5a:	bd10      	pop	{r4, pc}
   bbf5c:	000bf738 	.word	0x000bf738

000bbf60 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bbf60:	b510      	push	{r4, lr}
   bbf62:	4604      	mov	r4, r0
   bbf64:	f7ff fff2 	bl	bbf4c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bbf68:	4620      	mov	r0, r4
   bbf6a:	2124      	movs	r1, #36	; 0x24
   bbf6c:	f7f8 fdad 	bl	b4aca <_ZdlPvj>
   bbf70:	4620      	mov	r0, r4
   bbf72:	bd10      	pop	{r4, pc}

000bbf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bbf74:	680a      	ldr	r2, [r1, #0]
   bbf76:	6002      	str	r2, [r0, #0]
   bbf78:	684a      	ldr	r2, [r1, #4]
   bbf7a:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bbf7c:	2200      	movs	r2, #0
   bbf7e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bbf82:	b510      	push	{r4, lr}
   bbf84:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbf86:	688c      	ldr	r4, [r1, #8]
   bbf88:	6084      	str	r4, [r0, #8]
   bbf8a:	68cc      	ldr	r4, [r1, #12]
   bbf8c:	60c4      	str	r4, [r0, #12]
   bbf8e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf90:	608a      	str	r2, [r1, #8]
   bbf92:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bbf94:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf96:	610a      	str	r2, [r1, #16]
   bbf98:	bd10      	pop	{r4, pc}

000bbf9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   bbf9a:	2200      	movs	r2, #0
   bbf9c:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bbfa0:	b510      	push	{r4, lr}
        capacity_(0) {
   bbfa2:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bbfa4:	680c      	ldr	r4, [r1, #0]
   bbfa6:	6004      	str	r4, [r0, #0]
   bbfa8:	684c      	ldr	r4, [r1, #4]
   bbfaa:	6044      	str	r4, [r0, #4]
   bbfac:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbfae:	600a      	str	r2, [r1, #0]
   bbfb0:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbfb2:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbfb4:	608a      	str	r2, [r1, #8]
}
   bbfb6:	bd10      	pop	{r4, pc}

000bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bbfb8:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bbfba:	6803      	ldr	r3, [r0, #0]
   bbfbc:	4604      	mov	r4, r0
   bbfbe:	6818      	ldr	r0, [r3, #0]
   bbfc0:	f7fe f8a8 	bl	ba114 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bbfc4:	4620      	mov	r0, r4
   bbfc6:	bd10      	pop	{r4, pc}

000bbfc8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bbfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbfcc:	b087      	sub	sp, #28
   bbfce:	4680      	mov	r8, r0
   bbfd0:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bbfd2:	4b1c      	ldr	r3, [pc, #112]	; (bc044 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bbfd4:	685b      	ldr	r3, [r3, #4]
   bbfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bbfda:	4689      	mov	r9, r1
   bbfdc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   bbfde:	b96b      	cbnz	r3, bbffc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bbfe0:	f7ff fef2 	bl	bbdc8 <_ZN5spark10LogManager8instanceEv>
   bbfe4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bbfe6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bbfea:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bbfec:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bbfee:	f7ff fdb7 	bl	bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bbff2:	7b23      	ldrb	r3, [r4, #12]
   bbff4:	b12b      	cbz	r3, bc002 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bbff6:	a805      	add	r0, sp, #20
   bbff8:	f7ff ffde 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bbffc:	b007      	add	sp, #28
   bbffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bc002:	2301      	movs	r3, #1
   bc004:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bc006:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bc00a:	fa5f f989 	uxtb.w	r9, r9
   bc00e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc012:	45aa      	cmp	sl, r5
   bc014:	d012      	beq.n	bc03c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bc016:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bc01a:	4631      	mov	r1, r6
   bc01c:	1d38      	adds	r0, r7, #4
   bc01e:	f7ff fe27 	bl	bbc70 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc022:	4581      	cmp	r9, r0
   bc024:	d3f5      	bcc.n	bc012 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bc026:	683b      	ldr	r3, [r7, #0]
   bc028:	9a03      	ldr	r2, [sp, #12]
   bc02a:	9200      	str	r2, [sp, #0]
   bc02c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bc030:	464a      	mov	r2, r9
   bc032:	4633      	mov	r3, r6
   bc034:	4641      	mov	r1, r8
   bc036:	4638      	mov	r0, r7
   bc038:	47d8      	blx	fp
   bc03a:	e7ea      	b.n	bc012 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bc03c:	2300      	movs	r3, #0
   bc03e:	7323      	strb	r3, [r4, #12]
   bc040:	e7d9      	b.n	bbff6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bc042:	bf00      	nop
   bc044:	e000ed00 	.word	0xe000ed00

000bc048 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bc048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc04c:	469b      	mov	fp, r3
   bc04e:	4b1a      	ldr	r3, [pc, #104]	; (bc0b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bc050:	685b      	ldr	r3, [r3, #4]
   bc052:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc056:	4680      	mov	r8, r0
   bc058:	4689      	mov	r9, r1
   bc05a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   bc05c:	b96b      	cbnz	r3, bc07a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bc05e:	f7ff feb3 	bl	bbdc8 <_ZN5spark10LogManager8instanceEv>
   bc062:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc064:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bc068:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc06a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc06c:	f7ff fd78 	bl	bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bc070:	7b23      	ldrb	r3, [r4, #12]
   bc072:	b12b      	cbz	r3, bc080 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bc074:	a801      	add	r0, sp, #4
   bc076:	f7ff ff9f 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc07a:	b003      	add	sp, #12
   bc07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bc080:	2301      	movs	r3, #1
   bc082:	7323      	strb	r3, [r4, #12]
   bc084:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bc088:	b2f6      	uxtb	r6, r6
   bc08a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc08e:	4555      	cmp	r5, sl
   bc090:	d00e      	beq.n	bc0b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bc092:	f855 7b04 	ldr.w	r7, [r5], #4
   bc096:	4659      	mov	r1, fp
   bc098:	1d38      	adds	r0, r7, #4
   bc09a:	f7ff fde9 	bl	bbc70 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc09e:	4286      	cmp	r6, r0
   bc0a0:	d3f5      	bcc.n	bc08e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bc0a2:	683b      	ldr	r3, [r7, #0]
   bc0a4:	464a      	mov	r2, r9
   bc0a6:	68db      	ldr	r3, [r3, #12]
   bc0a8:	4641      	mov	r1, r8
   bc0aa:	4638      	mov	r0, r7
   bc0ac:	4798      	blx	r3
   bc0ae:	e7ee      	b.n	bc08e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bc0b0:	2300      	movs	r3, #0
   bc0b2:	7323      	strb	r3, [r4, #12]
   bc0b4:	e7de      	b.n	bc074 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bc0b6:	bf00      	nop
   bc0b8:	e000ed00 	.word	0xe000ed00

000bc0bc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bc0bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc0c0:	4b16      	ldr	r3, [pc, #88]	; (bc11c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bc0c2:	685b      	ldr	r3, [r3, #4]
   bc0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc0c8:	4605      	mov	r5, r0
   bc0ca:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   bc0cc:	bb1b      	cbnz	r3, bc116 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bc0ce:	f7ff fe7b 	bl	bbdc8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bc0d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bc0d6:	4604      	mov	r4, r0
   bc0d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc0da:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc0dc:	f7ff fd40 	bl	bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>
   bc0e0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bc0e4:	2446      	movs	r4, #70	; 0x46
   bc0e6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc0ea:	45b0      	cmp	r8, r6
   bc0ec:	d109      	bne.n	bc102 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bc0ee:	a801      	add	r0, sp, #4
   bc0f0:	f7ff ff62 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bc0f4:	42a5      	cmp	r5, r4
   bc0f6:	bfb4      	ite	lt
   bc0f8:	2000      	movlt	r0, #0
   bc0fa:	2001      	movge	r0, #1
}
   bc0fc:	b002      	add	sp, #8
   bc0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bc102:	f856 0b04 	ldr.w	r0, [r6], #4
   bc106:	4639      	mov	r1, r7
   bc108:	3004      	adds	r0, #4
   bc10a:	f7ff fdb1 	bl	bbc70 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bc10e:	4284      	cmp	r4, r0
   bc110:	bfa8      	it	ge
   bc112:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bc114:	e7e9      	b.n	bc0ea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bc116:	2000      	movs	r0, #0
   bc118:	e7f0      	b.n	bc0fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bc11a:	bf00      	nop
   bc11c:	e000ed00 	.word	0xe000ed00

000bc120 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc122:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bc126:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc128:	4604      	mov	r4, r0
   bc12a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc12c:	db0d      	blt.n	bc14a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bc12e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bc130:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bc132:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bc134:	dd04      	ble.n	bc140 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bc136:	00b9      	lsls	r1, r7, #2
   bc138:	f7fe fbb0 	bl	ba89c <realloc>
            if (!d) {
   bc13c:	b918      	cbnz	r0, bc146 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bc13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bc140:	f7fe fba4 	bl	ba88c <free>
        T* d = nullptr;
   bc144:	2000      	movs	r0, #0
        data_ = d;
   bc146:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bc148:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bc14a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc14c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc14e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bc152:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc154:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bc158:	1d08      	adds	r0, r1, #4
   bc15a:	f001 fe75 	bl	bde48 <memmove>
    new(p) T(std::move(value));
   bc15e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bc162:	6863      	ldr	r3, [r4, #4]
   bc164:	3301      	adds	r3, #1
   bc166:	6063      	str	r3, [r4, #4]
    return true;
   bc168:	2001      	movs	r0, #1
   bc16a:	e7e8      	b.n	bc13e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bc16c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bc16e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc172:	4604      	mov	r4, r0
   bc174:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc176:	9301      	str	r3, [sp, #4]
   bc178:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bc17a:	f7ff fcf1 	bl	bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bc17e:	e9d4 3200 	ldrd	r3, r2, [r4]
   bc182:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bc186:	4293      	cmp	r3, r2
   bc188:	4619      	mov	r1, r3
   bc18a:	d00b      	beq.n	bc1a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bc18c:	6809      	ldr	r1, [r1, #0]
   bc18e:	42a9      	cmp	r1, r5
   bc190:	f103 0304 	add.w	r3, r3, #4
   bc194:	d1f7      	bne.n	bc186 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bc196:	a801      	add	r0, sp, #4
   bc198:	f7ff ff0e 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc19c:	2500      	movs	r5, #0
}
   bc19e:	4628      	mov	r0, r5
   bc1a0:	b003      	add	sp, #12
   bc1a2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bc1a4:	4629      	mov	r1, r5
   bc1a6:	4620      	mov	r0, r4
   bc1a8:	f7ff ffba 	bl	bc120 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bc1ac:	4605      	mov	r5, r0
   bc1ae:	2800      	cmp	r0, #0
   bc1b0:	d0f1      	beq.n	bc196 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bc1b2:	6863      	ldr	r3, [r4, #4]
   bc1b4:	2b01      	cmp	r3, #1
   bc1b6:	d101      	bne.n	bc1bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bc1b8:	f7ff fe22 	bl	bbe00 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc1bc:	a801      	add	r0, sp, #4
   bc1be:	f7ff fefb 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc1c2:	e7ec      	b.n	bc19e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bc1c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc1c4:	b570      	push	{r4, r5, r6, lr}
   bc1c6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bc1c8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc1cc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bc1ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bc1d2:	4282      	cmp	r2, r0
   bc1d4:	d00f      	beq.n	bc1f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bc1d6:	4601      	mov	r1, r0
            if (*p == value) {
   bc1d8:	681d      	ldr	r5, [r3, #0]
   bc1da:	f851 6b04 	ldr.w	r6, [r1], #4
   bc1de:	42ae      	cmp	r6, r5
   bc1e0:	d107      	bne.n	bc1f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc1e2:	1a52      	subs	r2, r2, r1
   bc1e4:	f001 fe30 	bl	bde48 <memmove>
    --size_;
   bc1e8:	6863      	ldr	r3, [r4, #4]
   bc1ea:	3b01      	subs	r3, #1
   bc1ec:	6063      	str	r3, [r4, #4]
    return true;
   bc1ee:	2001      	movs	r0, #1
}
   bc1f0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bc1f2:	4608      	mov	r0, r1
   bc1f4:	e7ed      	b.n	bc1d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bc1f6:	2000      	movs	r0, #0
   bc1f8:	e7fa      	b.n	bc1f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bc1fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc1fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bc1fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc200:	4604      	mov	r4, r0
   bc202:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bc204:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc206:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bc208:	f7ff fcaa 	bl	bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bc20c:	a901      	add	r1, sp, #4
   bc20e:	4620      	mov	r0, r4
   bc210:	f7ff ffd8 	bl	bc1c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bc214:	b118      	cbz	r0, bc21e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bc216:	6863      	ldr	r3, [r4, #4]
   bc218:	b90b      	cbnz	r3, bc21e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bc21a:	f7ff fdfd 	bl	bbe18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc21e:	a803      	add	r0, sp, #12
   bc220:	f7ff feca 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc224:	b004      	add	sp, #16
   bc226:	bd10      	pop	{r4, pc}

000bc228 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bc228:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bc22a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bc22e:	2318      	movs	r3, #24
   bc230:	4604      	mov	r4, r0
   bc232:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bc236:	42ae      	cmp	r6, r5
   bc238:	d015      	beq.n	bc266 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bc23a:	f105 0110 	add.w	r1, r5, #16
   bc23e:	4620      	mov	r0, r4
   bc240:	f7ff ffc0 	bl	bc1c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bc244:	6863      	ldr	r3, [r4, #4]
   bc246:	b90b      	cbnz	r3, bc24c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bc248:	f7ff fde6 	bl	bbe18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bc24c:	69e0      	ldr	r0, [r4, #28]
   bc24e:	6929      	ldr	r1, [r5, #16]
   bc250:	6803      	ldr	r3, [r0, #0]
   bc252:	68db      	ldr	r3, [r3, #12]
   bc254:	4798      	blx	r3
        if (h.stream) {
   bc256:	6969      	ldr	r1, [r5, #20]
   bc258:	b119      	cbz	r1, bc262 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bc25a:	6a20      	ldr	r0, [r4, #32]
   bc25c:	6803      	ldr	r3, [r0, #0]
   bc25e:	68db      	ldr	r3, [r3, #12]
   bc260:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bc262:	3518      	adds	r5, #24
   bc264:	e7e7      	b.n	bc236 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bc266:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc26a:	2618      	movs	r6, #24
   bc26c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc270:	42ae      	cmp	r6, r5
   bc272:	d004      	beq.n	bc27e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bc274:	4628      	mov	r0, r5
   bc276:	f000 fd83 	bl	bcd80 <_ZN6StringD1Ev>
   bc27a:	3518      	adds	r5, #24
   bc27c:	e7f8      	b.n	bc270 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bc27e:	2300      	movs	r3, #0
   bc280:	6163      	str	r3, [r4, #20]
}
   bc282:	bd70      	pop	{r4, r5, r6, pc}

000bc284 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bc284:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc286:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bc288:	f7ff fdc6 	bl	bbe18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc28c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bc290:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc292:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc294:	f7ff fc64 	bl	bbb60 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bc298:	4620      	mov	r0, r4
   bc29a:	f7ff ffc5 	bl	bc228 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bc29e:	a801      	add	r0, sp, #4
   bc2a0:	f7ff fe8a 	bl	bbfb8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bc2a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bc2a6:	b108      	cbz	r0, bc2ac <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bc2a8:	f7fd ff24 	bl	ba0f4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bc2ac:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc2b0:	2618      	movs	r6, #24
   bc2b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc2b6:	42ae      	cmp	r6, r5
   bc2b8:	d004      	beq.n	bc2c4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bc2ba:	4628      	mov	r0, r5
   bc2bc:	f000 fd60 	bl	bcd80 <_ZN6StringD1Ev>
   bc2c0:	3518      	adds	r5, #24
   bc2c2:	e7f8      	b.n	bc2b6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bc2c4:	6920      	ldr	r0, [r4, #16]
   bc2c6:	f7fe fae1 	bl	ba88c <free>
   bc2ca:	6820      	ldr	r0, [r4, #0]
   bc2cc:	f7fe fade 	bl	ba88c <free>
}
   bc2d0:	4620      	mov	r0, r4
   bc2d2:	b002      	add	sp, #8
   bc2d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc2d8 <__tcf_2>:
    static LogManager mgr;
   bc2d8:	4801      	ldr	r0, [pc, #4]	; (bc2e0 <__tcf_2+0x8>)
   bc2da:	f7ff bfd3 	b.w	bc284 <_ZN5spark10LogManagerD1Ev>
   bc2de:	bf00      	nop
   bc2e0:	2003e650 	.word	0x2003e650

000bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bc2e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc2e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc2e8:	4604      	mov	r4, r0
   bc2ea:	460d      	mov	r5, r1
   bc2ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc2ee:	d915      	bls.n	bc31c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bc2f0:	4290      	cmp	r0, r2
   bc2f2:	d214      	bcs.n	bc31e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bc2f4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bc2f8:	1a75      	subs	r5, r6, r1
   bc2fa:	f1a1 0714 	sub.w	r7, r1, #20
   bc2fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc300:	42b7      	cmp	r7, r6
   bc302:	d01a      	beq.n	bc33a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bc304:	b11c      	cbz	r4, bc30e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bc306:	4631      	mov	r1, r6
   bc308:	4620      	mov	r0, r4
   bc30a:	f7ff fe33 	bl	bbf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bc30e:	f106 0008 	add.w	r0, r6, #8
   bc312:	f7ff fde7 	bl	bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bc316:	3e14      	subs	r6, #20
   bc318:	3c14      	subs	r4, #20
   bc31a:	e7f1      	b.n	bc300 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bc31c:	d00d      	beq.n	bc33a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bc31e:	42b5      	cmp	r5, r6
   bc320:	d00b      	beq.n	bc33a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bc322:	b11c      	cbz	r4, bc32c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bc324:	4629      	mov	r1, r5
   bc326:	4620      	mov	r0, r4
   bc328:	f7ff fe24 	bl	bbf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bc32c:	f105 0008 	add.w	r0, r5, #8
   bc330:	f7ff fdd8 	bl	bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bc334:	3514      	adds	r5, #20
   bc336:	3414      	adds	r4, #20
   bc338:	e7f1      	b.n	bc31e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bc33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc33c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc340:	4690      	mov	r8, r2
   bc342:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bc344:	2300      	movs	r3, #0
   bc346:	9103      	str	r1, [sp, #12]
    return size_;
   bc348:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bc34c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc34e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bc350:	4299      	cmp	r1, r3
        capacity_(0) {
   bc352:	e9c0 3300 	strd	r3, r3, [r0]
   bc356:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bc35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bc35e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc362:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc364:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bc366:	dc23      	bgt.n	bc3b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bc368:	e9d8 5700 	ldrd	r5, r7, [r8]
   bc36c:	2314      	movs	r3, #20
   bc36e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bc372:	42af      	cmp	r7, r5
   bc374:	d03b      	beq.n	bc3ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bc376:	4629      	mov	r1, r5
   bc378:	a80b      	add	r0, sp, #44	; 0x2c
   bc37a:	f000 fd7e 	bl	bce7a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bc37e:	a90b      	add	r1, sp, #44	; 0x2c
   bc380:	a80f      	add	r0, sp, #60	; 0x3c
   bc382:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bc384:	f000 fd79 	bl	bce7a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc388:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bc38c:	4299      	cmp	r1, r3
   bc38e:	da1b      	bge.n	bc3c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bc390:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bc392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bc394:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bc398:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bc39c:	4631      	mov	r1, r6
   bc39e:	f106 0010 	add.w	r0, r6, #16
   bc3a2:	f7ff fb5f 	bl	bba64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bc3a6:	b9ee      	cbnz	r6, bc3e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bc3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc3aa:	3301      	adds	r3, #1
   bc3ac:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bc3ae:	e011      	b.n	bc3d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bc3b0:	a808      	add	r0, sp, #32
   bc3b2:	f7ff fb81 	bl	bbab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc3b6:	2800      	cmp	r0, #0
   bc3b8:	d1d6      	bne.n	bc368 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bc3ba:	a808      	add	r0, sp, #32
   bc3bc:	f7fe fb09 	bl	ba9d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc3c0:	4620      	mov	r0, r4
   bc3c2:	b015      	add	sp, #84	; 0x54
   bc3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc3c8:	3101      	adds	r1, #1
   bc3ca:	a808      	add	r0, sp, #32
   bc3cc:	f7ff fb74 	bl	bbab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc3d0:	2800      	cmp	r0, #0
   bc3d2:	d1dd      	bne.n	bc390 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bc3d4:	a80f      	add	r0, sp, #60	; 0x3c
   bc3d6:	f000 fcd3 	bl	bcd80 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bc3da:	a80b      	add	r0, sp, #44	; 0x2c
   bc3dc:	f000 fcd0 	bl	bcd80 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bc3e0:	3514      	adds	r5, #20
   bc3e2:	e7c6      	b.n	bc372 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bc3e4:	a90f      	add	r1, sp, #60	; 0x3c
   bc3e6:	4630      	mov	r0, r6
   bc3e8:	f000 fd47 	bl	bce7a <_ZN6StringC1EOS_>
   bc3ec:	e7dc      	b.n	bc3a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bc3ee:	2600      	movs	r6, #0
   bc3f0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bc3f4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bc3f6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bc3fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bc3fe:	429e      	cmp	r6, r3
   bc400:	da7c      	bge.n	bc4fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   bc402:	0133      	lsls	r3, r6, #4
   bc404:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bc406:	9306      	str	r3, [sp, #24]
        if (!category) {
   bc408:	b90b      	cbnz	r3, bc40e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bc40a:	3601      	adds	r6, #1
   bc40c:	e7f5      	b.n	bc3fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bc40e:	2300      	movs	r3, #0
   bc410:	9307      	str	r3, [sp, #28]
   bc412:	fb09 f306 	mul.w	r3, r9, r6
   bc416:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bc418:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bc41a:	a907      	add	r1, sp, #28
   bc41c:	a806      	add	r0, sp, #24
   bc41e:	f7ff fb78 	bl	bbb12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc422:	4682      	mov	sl, r0
   bc424:	2800      	cmp	r0, #0
   bc426:	d0f0      	beq.n	bc40a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bc428:	f04f 0300 	mov.w	r3, #0
   bc42c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc430:	4601      	mov	r1, r0
   bc432:	9a07      	ldr	r2, [sp, #28]
   bc434:	f10d 0317 	add.w	r3, sp, #23
   bc438:	4628      	mov	r0, r5
   bc43a:	f7ff fbdd 	bl	bbbf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc43e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc442:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc444:	2f00      	cmp	r7, #0
   bc446:	d14a      	bne.n	bc4de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bc448:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bc44c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bc450:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bc454:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bc458:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bc45c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bc460:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc462:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bc466:	4293      	cmp	r3, r2
   bc468:	db17      	blt.n	bc49a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bc46a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bc46e:	f1ba 0f00 	cmp.w	sl, #0
   bc472:	dd30      	ble.n	bc4d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bc474:	fb09 f00a 	mul.w	r0, r9, sl
   bc478:	f7fe fa00 	bl	ba87c <malloc>
            if (!d) {
   bc47c:	4683      	mov	fp, r0
   bc47e:	b360      	cbz	r0, bc4da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bc480:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc484:	fb09 1202 	mla	r2, r9, r2, r1
   bc488:	f7ff ff2c 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bc48c:	6828      	ldr	r0, [r5, #0]
   bc48e:	f7fe f9fd 	bl	ba88c <free>
        data_ = d;
   bc492:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bc496:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bc49a:	682b      	ldr	r3, [r5, #0]
   bc49c:	9a01      	ldr	r2, [sp, #4]
   bc49e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bc4a2:	686a      	ldr	r2, [r5, #4]
   bc4a4:	4651      	mov	r1, sl
   bc4a6:	fb09 3202 	mla	r2, r9, r2, r3
   bc4aa:	f10a 0014 	add.w	r0, sl, #20
   bc4ae:	f7ff ff19 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bc4b2:	f1ba 0f00 	cmp.w	sl, #0
   bc4b6:	d003      	beq.n	bc4c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bc4b8:	a90f      	add	r1, sp, #60	; 0x3c
   bc4ba:	4650      	mov	r0, sl
   bc4bc:	f7ff fd5a 	bl	bbf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bc4c0:	686b      	ldr	r3, [r5, #4]
   bc4c2:	3301      	adds	r3, #1
   bc4c4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bc4c6:	a811      	add	r0, sp, #68	; 0x44
   bc4c8:	f7ff fd0c 	bl	bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc4cc:	b13f      	cbz	r7, bc4de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bc4ce:	a80b      	add	r0, sp, #44	; 0x2c
   bc4d0:	f7ff fd08 	bl	bbee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc4d4:	e771      	b.n	bc3ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bc4d6:	46bb      	mov	fp, r7
   bc4d8:	e7d8      	b.n	bc48c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc4da:	2701      	movs	r7, #1
   bc4dc:	e7f3      	b.n	bc4c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bc4de:	9b01      	ldr	r3, [sp, #4]
   bc4e0:	682d      	ldr	r5, [r5, #0]
   bc4e2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bc4e6:	9b06      	ldr	r3, [sp, #24]
   bc4e8:	781b      	ldrb	r3, [r3, #0]
   bc4ea:	b92b      	cbnz	r3, bc4f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bc4ec:	f8d8 3000 	ldr.w	r3, [r8]
   bc4f0:	9a02      	ldr	r2, [sp, #8]
   bc4f2:	4413      	add	r3, r2
   bc4f4:	7c1b      	ldrb	r3, [r3, #16]
   bc4f6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bc4f8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bc4fa:	e78e      	b.n	bc41a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc4fc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bc4fe:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc500:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc502:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc504:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc506:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bc508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bc50a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc50c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc50e:	60a2      	str	r2, [r4, #8]
   bc510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bc512:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc514:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc516:	60e2      	str	r2, [r4, #12]
   bc518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bc51a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc51c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc51e:	6122      	str	r2, [r4, #16]
   bc520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bc522:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bc524:	9b03      	ldr	r3, [sp, #12]
   bc526:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bc528:	6162      	str	r2, [r4, #20]
   bc52a:	7623      	strb	r3, [r4, #24]
   bc52c:	e7cf      	b.n	bc4ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bc530 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc530:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc532:	4604      	mov	r4, r0
   bc534:	b087      	sub	sp, #28
   bc536:	460d      	mov	r5, r1
        filter_(level, filters) {
   bc538:	4626      	mov	r6, r4
        stream_(&stream) {
   bc53a:	4619      	mov	r1, r3
   bc53c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc53e:	4617      	mov	r7, r2
        stream_(&stream) {
   bc540:	f7fa f921 	bl	b6786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bc544:	4b0b      	ldr	r3, [pc, #44]	; (bc574 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bc546:	f846 3b04 	str.w	r3, [r6], #4
   bc54a:	4669      	mov	r1, sp
   bc54c:	a803      	add	r0, sp, #12
   bc54e:	f7fa f91a 	bl	b6786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bc552:	aa03      	add	r2, sp, #12
   bc554:	4639      	mov	r1, r7
   bc556:	4630      	mov	r0, r6
   bc558:	f7ff fef0 	bl	bc33c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc55c:	a803      	add	r0, sp, #12
   bc55e:	f7fa f8d1 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bc562:	4668      	mov	r0, sp
   bc564:	f7fa f8ce 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc568:	4b03      	ldr	r3, [pc, #12]	; (bc578 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bc56a:	6023      	str	r3, [r4, #0]
}
   bc56c:	4620      	mov	r0, r4
        stream_(&stream) {
   bc56e:	6225      	str	r5, [r4, #32]
}
   bc570:	b007      	add	sp, #28
   bc572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc574:	000bec84 	.word	0x000bec84
   bc578:	000bf720 	.word	0x000bf720

000bc57c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bc57c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc57e:	460f      	mov	r7, r1
   bc580:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc582:	491d      	ldr	r1, [pc, #116]	; (bc5f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bc584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc586:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bc588:	4616      	mov	r6, r2
   bc58a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc58c:	f7f8 fa4c 	bl	b4a28 <strcmp>
   bc590:	b9c0      	cbnz	r0, bc5c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bc592:	b1a4      	cbz	r4, bc5be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bc594:	4629      	mov	r1, r5
   bc596:	a801      	add	r0, sp, #4
   bc598:	f7ff fcff 	bl	bbf9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc59c:	4917      	ldr	r1, [pc, #92]	; (bc5fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc59e:	2024      	movs	r0, #36	; 0x24
   bc5a0:	f001 fada 	bl	bdb58 <_ZnwjRKSt9nothrow_t>
   bc5a4:	4605      	mov	r5, r0
   bc5a6:	b130      	cbz	r0, bc5b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bc5a8:	ab01      	add	r3, sp, #4
   bc5aa:	4632      	mov	r2, r6
   bc5ac:	4621      	mov	r1, r4
   bc5ae:	f7ff ffbf 	bl	bc530 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc5b2:	4b13      	ldr	r3, [pc, #76]	; (bc600 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bc5b4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bc5b6:	a801      	add	r0, sp, #4
   bc5b8:	f7fa f8a4 	bl	b6704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc5bc:	462c      	mov	r4, r5
}
   bc5be:	4620      	mov	r0, r4
   bc5c0:	b005      	add	sp, #20
   bc5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bc5c4:	490f      	ldr	r1, [pc, #60]	; (bc604 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bc5c6:	4638      	mov	r0, r7
   bc5c8:	f7f8 fa2e 	bl	b4a28 <strcmp>
   bc5cc:	b990      	cbnz	r0, bc5f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bc5ce:	2c00      	cmp	r4, #0
   bc5d0:	d0f5      	beq.n	bc5be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bc5d2:	4629      	mov	r1, r5
   bc5d4:	a801      	add	r0, sp, #4
   bc5d6:	f7ff fce0 	bl	bbf9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc5da:	4908      	ldr	r1, [pc, #32]	; (bc5fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc5dc:	2024      	movs	r0, #36	; 0x24
   bc5de:	f001 fabb 	bl	bdb58 <_ZnwjRKSt9nothrow_t>
   bc5e2:	4605      	mov	r5, r0
   bc5e4:	2800      	cmp	r0, #0
   bc5e6:	d0e6      	beq.n	bc5b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bc5e8:	ab01      	add	r3, sp, #4
   bc5ea:	4632      	mov	r2, r6
   bc5ec:	4621      	mov	r1, r4
   bc5ee:	f7ff ff9f 	bl	bc530 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc5f2:	e7e0      	b.n	bc5b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bc5f4:	2400      	movs	r4, #0
   bc5f6:	e7e2      	b.n	bc5be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bc5f8:	000bf6aa 	.word	0x000bf6aa
   bc5fc:	000bf87c 	.word	0x000bf87c
   bc600:	000bf738 	.word	0x000bf738
   bc604:	000bf6ae 	.word	0x000bf6ae

000bc608 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bc608:	4b01      	ldr	r3, [pc, #4]	; (bc610 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bc60a:	4a02      	ldr	r2, [pc, #8]	; (bc614 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bc60c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bc60e:	4770      	bx	lr
   bc610:	2003e64c 	.word	0x2003e64c
   bc614:	000bf6bf 	.word	0x000bf6bf

000bc618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bc618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc61c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bc61e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bc622:	4604      	mov	r4, r0
   bc624:	460e      	mov	r6, r1
   bc626:	4617      	mov	r7, r2
   bc628:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bc62a:	f001 f86b 	bl	bd704 <_Z16_fetch_usbserialv>
   bc62e:	4581      	cmp	r9, r0
   bc630:	d04c      	beq.n	bc6cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bc632:	792b      	ldrb	r3, [r5, #4]
   bc634:	0719      	lsls	r1, r3, #28
   bc636:	d504      	bpl.n	bc642 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bc638:	696a      	ldr	r2, [r5, #20]
   bc63a:	4954      	ldr	r1, [pc, #336]	; (bc78c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bc63c:	4620      	mov	r0, r4
   bc63e:	f7ff fb40 	bl	bbcc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bc642:	f1b8 0f00 	cmp.w	r8, #0
   bc646:	d00d      	beq.n	bc664 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bc648:	215b      	movs	r1, #91	; 0x5b
   bc64a:	4620      	mov	r0, r4
   bc64c:	f7ff fac7 	bl	bbbde <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bc650:	4641      	mov	r1, r8
   bc652:	4620      	mov	r0, r4
   bc654:	f7ff fab4 	bl	bbbc0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bc658:	6823      	ldr	r3, [r4, #0]
   bc65a:	494d      	ldr	r1, [pc, #308]	; (bc790 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bc65c:	68db      	ldr	r3, [r3, #12]
   bc65e:	2202      	movs	r2, #2
   bc660:	4620      	mov	r0, r4
   bc662:	4798      	blx	r3
    if (attr.has_file) {
   bc664:	792b      	ldrb	r3, [r5, #4]
   bc666:	07da      	lsls	r2, r3, #31
   bc668:	d523      	bpl.n	bc6b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bc66a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bc66e:	212f      	movs	r1, #47	; 0x2f
   bc670:	4640      	mov	r0, r8
   bc672:	f001 fc9d 	bl	bdfb0 <strrchr>
    if (s1) {
   bc676:	b108      	cbz	r0, bc67c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bc678:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bc67c:	4641      	mov	r1, r8
   bc67e:	4620      	mov	r0, r4
   bc680:	f7ff fa9e 	bl	bbbc0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bc684:	792b      	ldrb	r3, [r5, #4]
   bc686:	079b      	lsls	r3, r3, #30
   bc688:	d508      	bpl.n	bc69c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bc68a:	213a      	movs	r1, #58	; 0x3a
   bc68c:	4620      	mov	r0, r4
   bc68e:	f7ff faa6 	bl	bbbde <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bc692:	68ea      	ldr	r2, [r5, #12]
   bc694:	493f      	ldr	r1, [pc, #252]	; (bc794 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bc696:	4620      	mov	r0, r4
   bc698:	f7ff fb13 	bl	bbcc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bc69c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bc69e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bc6a0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bc6a4:	68db      	ldr	r3, [r3, #12]
   bc6a6:	bf14      	ite	ne
   bc6a8:	493b      	ldrne	r1, [pc, #236]	; (bc798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bc6aa:	493c      	ldreq	r1, [pc, #240]	; (bc79c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bc6ac:	2202      	movs	r2, #2
            write(": ", 2);
   bc6ae:	4620      	mov	r0, r4
   bc6b0:	4798      	blx	r3
    if (attr.has_function) {
   bc6b2:	792b      	ldrb	r3, [r5, #4]
   bc6b4:	0758      	lsls	r0, r3, #29
   bc6b6:	d51d      	bpl.n	bc6f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bc6b8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bc6ba:	460b      	mov	r3, r1
   bc6bc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bc6be:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc6c2:	b160      	cbz	r0, bc6de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bc6c4:	2820      	cmp	r0, #32
   bc6c6:	d108      	bne.n	bc6da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bc6c8:	4619      	mov	r1, r3
   bc6ca:	e7f7      	b.n	bc6bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bc6cc:	4834      	ldr	r0, [pc, #208]	; (bc7a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bc6ce:	f000 f982 	bl	bc9d6 <_ZN5spark12NetworkClass9listeningEv>
   bc6d2:	2800      	cmp	r0, #0
   bc6d4:	d0ad      	beq.n	bc632 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bc6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bc6da:	2828      	cmp	r0, #40	; 0x28
   bc6dc:	d1ee      	bne.n	bc6bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bc6de:	6823      	ldr	r3, [r4, #0]
   bc6e0:	1a52      	subs	r2, r2, r1
   bc6e2:	68db      	ldr	r3, [r3, #12]
   bc6e4:	4620      	mov	r0, r4
   bc6e6:	4798      	blx	r3
        write("(): ", 4);
   bc6e8:	6823      	ldr	r3, [r4, #0]
   bc6ea:	492e      	ldr	r1, [pc, #184]	; (bc7a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bc6ec:	68db      	ldr	r3, [r3, #12]
   bc6ee:	2204      	movs	r2, #4
   bc6f0:	4620      	mov	r0, r4
   bc6f2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bc6f4:	2100      	movs	r1, #0
   bc6f6:	4638      	mov	r0, r7
   bc6f8:	f7fd ff5c 	bl	ba5b4 <log_level_name>
   bc6fc:	4601      	mov	r1, r0
    write(s);
   bc6fe:	4620      	mov	r0, r4
   bc700:	f7ff fa5e 	bl	bbbc0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bc704:	6823      	ldr	r3, [r4, #0]
   bc706:	4925      	ldr	r1, [pc, #148]	; (bc79c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bc708:	68db      	ldr	r3, [r3, #12]
   bc70a:	2202      	movs	r2, #2
   bc70c:	4620      	mov	r0, r4
   bc70e:	4798      	blx	r3
    if (msg) {
   bc710:	b11e      	cbz	r6, bc71a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bc712:	4631      	mov	r1, r6
   bc714:	4620      	mov	r0, r4
   bc716:	f7ff fa53 	bl	bbbc0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bc71a:	792b      	ldrb	r3, [r5, #4]
   bc71c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bc720:	d02c      	beq.n	bc77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bc722:	6823      	ldr	r3, [r4, #0]
   bc724:	4920      	ldr	r1, [pc, #128]	; (bc7a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bc726:	68db      	ldr	r3, [r3, #12]
   bc728:	2202      	movs	r2, #2
   bc72a:	4620      	mov	r0, r4
   bc72c:	4798      	blx	r3
        if (attr.has_code) {
   bc72e:	792b      	ldrb	r3, [r5, #4]
   bc730:	06d9      	lsls	r1, r3, #27
   bc732:	d50a      	bpl.n	bc74a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bc734:	6823      	ldr	r3, [r4, #0]
   bc736:	491d      	ldr	r1, [pc, #116]	; (bc7ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bc738:	68db      	ldr	r3, [r3, #12]
   bc73a:	2207      	movs	r2, #7
   bc73c:	4620      	mov	r0, r4
   bc73e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bc740:	69aa      	ldr	r2, [r5, #24]
   bc742:	491b      	ldr	r1, [pc, #108]	; (bc7b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bc744:	4620      	mov	r0, r4
   bc746:	f7ff fabc 	bl	bbcc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bc74a:	792b      	ldrb	r3, [r5, #4]
   bc74c:	069a      	lsls	r2, r3, #26
   bc74e:	d511      	bpl.n	bc774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bc750:	06db      	lsls	r3, r3, #27
   bc752:	d505      	bpl.n	bc760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bc754:	6823      	ldr	r3, [r4, #0]
   bc756:	4910      	ldr	r1, [pc, #64]	; (bc798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bc758:	68db      	ldr	r3, [r3, #12]
   bc75a:	2202      	movs	r2, #2
   bc75c:	4620      	mov	r0, r4
   bc75e:	4798      	blx	r3
            write("details = ", 10);
   bc760:	6823      	ldr	r3, [r4, #0]
   bc762:	4914      	ldr	r1, [pc, #80]	; (bc7b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bc764:	68db      	ldr	r3, [r3, #12]
   bc766:	4620      	mov	r0, r4
   bc768:	220a      	movs	r2, #10
   bc76a:	4798      	blx	r3
            write(attr.details);
   bc76c:	69e9      	ldr	r1, [r5, #28]
   bc76e:	4620      	mov	r0, r4
   bc770:	f7ff fa26 	bl	bbbc0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bc774:	215d      	movs	r1, #93	; 0x5d
   bc776:	4620      	mov	r0, r4
   bc778:	f7ff fa31 	bl	bbbde <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bc77c:	6823      	ldr	r3, [r4, #0]
   bc77e:	490e      	ldr	r1, [pc, #56]	; (bc7b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bc780:	68db      	ldr	r3, [r3, #12]
   bc782:	4620      	mov	r0, r4
   bc784:	2202      	movs	r2, #2
}
   bc786:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bc78a:	4718      	bx	r3
   bc78c:	000bf6c3 	.word	0x000bf6c3
   bc790:	000bf6ca 	.word	0x000bf6ca
   bc794:	000beedb 	.word	0x000beedb
   bc798:	000bf6cd 	.word	0x000bf6cd
   bc79c:	000bf6d2 	.word	0x000bf6d2
   bc7a0:	2003e678 	.word	0x2003e678
   bc7a4:	000bf6d0 	.word	0x000bf6d0
   bc7a8:	000bf6d5 	.word	0x000bf6d5
   bc7ac:	000bf6d8 	.word	0x000bf6d8
   bc7b0:	000be46b 	.word	0x000be46b
   bc7b4:	000bf6e0 	.word	0x000bf6e0
   bc7b8:	000bf6eb 	.word	0x000bf6eb

000bc7bc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   bc7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc7c0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   bc7c2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   bc7c4:	460d      	mov	r5, r1
   bc7c6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   bc7c8:	f000 ff9c 	bl	bd704 <_Z16_fetch_usbserialv>
   bc7cc:	4287      	cmp	r7, r0
   bc7ce:	d007      	beq.n	bc7e0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   bc7d0:	6a20      	ldr	r0, [r4, #32]
   bc7d2:	6803      	ldr	r3, [r0, #0]
   bc7d4:	4632      	mov	r2, r6
   bc7d6:	4629      	mov	r1, r5
   bc7d8:	68db      	ldr	r3, [r3, #12]
}
   bc7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   bc7de:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   bc7e0:	4803      	ldr	r0, [pc, #12]	; (bc7f0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   bc7e2:	f000 f8f8 	bl	bc9d6 <_ZN5spark12NetworkClass9listeningEv>
   bc7e6:	2800      	cmp	r0, #0
   bc7e8:	d0f2      	beq.n	bc7d0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   bc7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc7ee:	bf00      	nop
   bc7f0:	2003e678 	.word	0x2003e678

000bc7f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bc7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc7f8:	b085      	sub	sp, #20
    return stream_;
   bc7fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bc7fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bc800:	4605      	mov	r5, r0
   bc802:	460f      	mov	r7, r1
   bc804:	4690      	mov	r8, r2
   bc806:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bc808:	f000 ff7c 	bl	bd704 <_Z16_fetch_usbserialv>
   bc80c:	4581      	cmp	r9, r0
   bc80e:	d105      	bne.n	bc81c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bc810:	4849      	ldr	r0, [pc, #292]	; (bc938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bc812:	f000 f8e0 	bl	bc9d6 <_ZN5spark12NetworkClass9listeningEv>
   bc816:	2800      	cmp	r0, #0
   bc818:	f040 808a 	bne.w	bc930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bc81c:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   bc81e:	4a47      	ldr	r2, [pc, #284]	; (bc93c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bc820:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   bc822:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bc826:	4668      	mov	r0, sp
        bytesWritten_(0) {
   bc828:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   bc82c:	f88d 9004 	strb.w	r9, [sp, #4]
   bc830:	f7ff f869 	bl	bb906 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bc834:	4649      	mov	r1, r9
   bc836:	4640      	mov	r0, r8
   bc838:	f7fd febc 	bl	ba5b4 <log_level_name>
    json.name("l", 1).value(s);
   bc83c:	4940      	ldr	r1, [pc, #256]	; (bc940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bc83e:	4680      	mov	r8, r0
   bc840:	2201      	movs	r2, #1
   bc842:	4668      	mov	r0, sp
   bc844:	f7ff f8ee 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc848:	4641      	mov	r1, r8
   bc84a:	f7ff f9ab 	bl	bbba4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bc84e:	b13f      	cbz	r7, bc860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   bc850:	493c      	ldr	r1, [pc, #240]	; (bc944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bc852:	2201      	movs	r2, #1
   bc854:	4668      	mov	r0, sp
   bc856:	f7ff f8e5 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc85a:	4639      	mov	r1, r7
   bc85c:	f7ff f9a2 	bl	bbba4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bc860:	b13e      	cbz	r6, bc872 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   bc862:	4939      	ldr	r1, [pc, #228]	; (bc948 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bc864:	2201      	movs	r2, #1
   bc866:	4668      	mov	r0, sp
   bc868:	f7ff f8dc 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc86c:	4631      	mov	r1, r6
   bc86e:	f7ff f999 	bl	bbba4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bc872:	7923      	ldrb	r3, [r4, #4]
   bc874:	07df      	lsls	r7, r3, #31
   bc876:	d50e      	bpl.n	bc896 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   bc878:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bc87a:	212f      	movs	r1, #47	; 0x2f
   bc87c:	4630      	mov	r0, r6
   bc87e:	f001 fb97 	bl	bdfb0 <strrchr>
    if (s1) {
   bc882:	b100      	cbz	r0, bc886 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   bc884:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bc886:	4931      	ldr	r1, [pc, #196]	; (bc94c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bc888:	2201      	movs	r2, #1
   bc88a:	4668      	mov	r0, sp
   bc88c:	f7ff f8ca 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc890:	4631      	mov	r1, r6
   bc892:	f7ff f987 	bl	bbba4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bc896:	7923      	ldrb	r3, [r4, #4]
   bc898:	079e      	lsls	r6, r3, #30
   bc89a:	d507      	bpl.n	bc8ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   bc89c:	492c      	ldr	r1, [pc, #176]	; (bc950 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bc89e:	2202      	movs	r2, #2
   bc8a0:	4668      	mov	r0, sp
   bc8a2:	f7ff f8bf 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc8a6:	68e1      	ldr	r1, [r4, #12]
   bc8a8:	f7ff f83a 	bl	bb920 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bc8ac:	7923      	ldrb	r3, [r4, #4]
   bc8ae:	0758      	lsls	r0, r3, #29
   bc8b0:	d514      	bpl.n	bc8dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bc8b2:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bc8b4:	4633      	mov	r3, r6
   bc8b6:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bc8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc8bc:	b12a      	cbz	r2, bc8ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   bc8be:	2a20      	cmp	r2, #32
   bc8c0:	d101      	bne.n	bc8c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   bc8c2:	461e      	mov	r6, r3
   bc8c4:	e7f7      	b.n	bc8b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   bc8c6:	2a28      	cmp	r2, #40	; 0x28
   bc8c8:	d1f5      	bne.n	bc8b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   bc8ca:	4922      	ldr	r1, [pc, #136]	; (bc954 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bc8cc:	2202      	movs	r2, #2
   bc8ce:	4668      	mov	r0, sp
   bc8d0:	f7ff f8a8 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc8d4:	1bba      	subs	r2, r7, r6
   bc8d6:	4631      	mov	r1, r6
   bc8d8:	f7ff f8b4 	bl	bba44 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bc8dc:	7923      	ldrb	r3, [r4, #4]
   bc8de:	0719      	lsls	r1, r3, #28
   bc8e0:	d507      	bpl.n	bc8f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   bc8e2:	491d      	ldr	r1, [pc, #116]	; (bc958 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bc8e4:	2201      	movs	r2, #1
   bc8e6:	4668      	mov	r0, sp
   bc8e8:	f7ff f89c 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc8ec:	6961      	ldr	r1, [r4, #20]
   bc8ee:	f7ff f829 	bl	bb944 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bc8f2:	7923      	ldrb	r3, [r4, #4]
   bc8f4:	06da      	lsls	r2, r3, #27
   bc8f6:	d507      	bpl.n	bc908 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bc8f8:	4918      	ldr	r1, [pc, #96]	; (bc95c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bc8fa:	2204      	movs	r2, #4
   bc8fc:	4668      	mov	r0, sp
   bc8fe:	f7ff f891 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc902:	69a1      	ldr	r1, [r4, #24]
   bc904:	f7ff f80c 	bl	bb920 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bc908:	7923      	ldrb	r3, [r4, #4]
   bc90a:	069b      	lsls	r3, r3, #26
   bc90c:	d507      	bpl.n	bc91e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bc90e:	4914      	ldr	r1, [pc, #80]	; (bc960 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bc910:	2206      	movs	r2, #6
   bc912:	4668      	mov	r0, sp
   bc914:	f7ff f886 	bl	bba24 <_ZN5spark10JSONWriter4nameEPKcj>
   bc918:	69e1      	ldr	r1, [r4, #28]
   bc91a:	f7ff f943 	bl	bbba4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bc91e:	4668      	mov	r0, sp
   bc920:	f7fe ffdb 	bl	bb8da <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bc924:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bc926:	490f      	ldr	r1, [pc, #60]	; (bc964 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bc928:	6803      	ldr	r3, [r0, #0]
   bc92a:	2202      	movs	r2, #2
   bc92c:	68db      	ldr	r3, [r3, #12]
   bc92e:	4798      	blx	r3
}
   bc930:	b005      	add	sp, #20
   bc932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc936:	bf00      	nop
   bc938:	2003e678 	.word	0x2003e678
   bc93c:	000bf708 	.word	0x000bf708
   bc940:	000bf6a0 	.word	0x000bf6a0
   bc944:	000bf204 	.word	0x000bf204
   bc948:	000bf99d 	.word	0x000bf99d
   bc94c:	000bf5ae 	.word	0x000bf5ae
   bc950:	000bf6ee 	.word	0x000bf6ee
   bc954:	000be9c5 	.word	0x000be9c5
   bc958:	000be846 	.word	0x000be846
   bc95c:	000bf6f1 	.word	0x000bf6f1
   bc960:	000bf6f6 	.word	0x000bf6f6
   bc964:	000bf6eb 	.word	0x000bf6eb

000bc968 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc968:	2300      	movs	r3, #0
   bc96a:	6840      	ldr	r0, [r0, #4]
   bc96c:	461a      	mov	r2, r3
   bc96e:	f7fd bf15 	b.w	ba79c <network_connect>

000bc972 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc972:	6840      	ldr	r0, [r0, #4]
   bc974:	2200      	movs	r2, #0
   bc976:	2102      	movs	r1, #2
   bc978:	f7fd bf20 	b.w	ba7bc <network_disconnect>

000bc97c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc97c:	2200      	movs	r2, #0
   bc97e:	6840      	ldr	r0, [r0, #4]
   bc980:	4611      	mov	r1, r2
   bc982:	f7fd bf13 	b.w	ba7ac <network_connecting>

000bc986 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc986:	2200      	movs	r2, #0
   bc988:	6840      	ldr	r0, [r0, #4]
   bc98a:	4611      	mov	r1, r2
   bc98c:	f7fd bf1e 	b.w	ba7cc <network_ready>

000bc990 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc990:	2300      	movs	r3, #0
   bc992:	6840      	ldr	r0, [r0, #4]
   bc994:	461a      	mov	r2, r3
   bc996:	4619      	mov	r1, r3
   bc998:	f7fd bf20 	b.w	ba7dc <network_on>

000bc99c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc99c:	2300      	movs	r3, #0
   bc99e:	6840      	ldr	r0, [r0, #4]
   bc9a0:	461a      	mov	r2, r3
   bc9a2:	4619      	mov	r1, r3
   bc9a4:	f7fd bf22 	b.w	ba7ec <network_off>

000bc9a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc9a8:	6840      	ldr	r0, [r0, #4]
   bc9aa:	2100      	movs	r1, #0
   bc9ac:	f7fd bf46 	b.w	ba83c <network_is_on>

000bc9b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc9b0:	6840      	ldr	r0, [r0, #4]
   bc9b2:	2100      	movs	r1, #0
   bc9b4:	f7fd bf4a 	b.w	ba84c <network_is_off>

000bc9b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc9b8:	6840      	ldr	r0, [r0, #4]
   bc9ba:	2200      	movs	r2, #0
   bc9bc:	f081 0101 	eor.w	r1, r1, #1
   bc9c0:	f7fd bf1c 	b.w	ba7fc <network_listen>

000bc9c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc9c4:	6840      	ldr	r0, [r0, #4]
   bc9c6:	2200      	movs	r2, #0
   bc9c8:	f7fd bf28 	b.w	ba81c <network_set_listen_timeout>

000bc9cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc9cc:	2200      	movs	r2, #0
   bc9ce:	6840      	ldr	r0, [r0, #4]
   bc9d0:	4611      	mov	r1, r2
   bc9d2:	f7fd bf2b 	b.w	ba82c <network_get_listen_timeout>

000bc9d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc9d6:	2200      	movs	r2, #0
   bc9d8:	6840      	ldr	r0, [r0, #4]
   bc9da:	4611      	mov	r1, r2
   bc9dc:	f7fd bf16 	b.w	ba80c <network_listening>

000bc9e0 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   bc9e0:	6840      	ldr	r0, [r0, #4]
   bc9e2:	2100      	movs	r1, #0
   bc9e4:	f7fd bf42 	b.w	ba86c <network_is_preferred>

000bc9e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc9e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc9ec:	b095      	sub	sp, #84	; 0x54
   bc9ee:	4614      	mov	r4, r2
   bc9f0:	460d      	mov	r5, r1
   bc9f2:	4607      	mov	r7, r0
    IPAddress addr;
   bc9f4:	f7fe fe20 	bl	bb638 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc9f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc9fa:	221c      	movs	r2, #28
   bc9fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc9fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bca00:	f001 fa3c 	bl	bde7c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bca04:	2340      	movs	r3, #64	; 0x40
   bca06:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bca08:	4620      	mov	r0, r4
   bca0a:	466b      	mov	r3, sp
   bca0c:	aa0c      	add	r2, sp, #48	; 0x30
   bca0e:	2100      	movs	r1, #0
   bca10:	f7fd fc98 	bl	ba344 <netdb_getaddrinfo>
    if (!r) {
   bca14:	4604      	mov	r4, r0
   bca16:	2800      	cmp	r0, #0
   bca18:	d14b      	bne.n	bcab2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bca1a:	4602      	mov	r2, r0
   bca1c:	2101      	movs	r1, #1
   bca1e:	6868      	ldr	r0, [r5, #4]
   bca20:	f7fd fed4 	bl	ba7cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bca24:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bca26:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bca28:	4622      	mov	r2, r4
   bca2a:	6868      	ldr	r0, [r5, #4]
   bca2c:	f7fd fece 	bl	ba7cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bca30:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bca32:	4681      	mov	r9, r0
        bool ok = false;
   bca34:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bca36:	2e00      	cmp	r6, #0
   bca38:	d03b      	beq.n	bcab2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bca3a:	2900      	cmp	r1, #0
   bca3c:	d139      	bne.n	bcab2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bca3e:	6873      	ldr	r3, [r6, #4]
   bca40:	2b02      	cmp	r3, #2
   bca42:	d003      	beq.n	bca4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bca44:	2b0a      	cmp	r3, #10
   bca46:	d011      	beq.n	bca6c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bca48:	69f6      	ldr	r6, [r6, #28]
   bca4a:	e7f4      	b.n	bca36 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bca4c:	f1b8 0f00 	cmp.w	r8, #0
   bca50:	d0fa      	beq.n	bca48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bca52:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bca54:	a806      	add	r0, sp, #24
   bca56:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bca58:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bca5a:	f7fe fe1b 	bl	bb694 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bca5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bca60:	1d3c      	adds	r4, r7, #4
   bca62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bca64:	682b      	ldr	r3, [r5, #0]
   bca66:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bca68:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bca6a:	e7ed      	b.n	bca48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bca6c:	f1b9 0f00 	cmp.w	r9, #0
   bca70:	d0ea      	beq.n	bca48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bca72:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bca74:	2210      	movs	r2, #16
   bca76:	a801      	add	r0, sp, #4
   bca78:	f001 fa00 	bl	bde7c <memset>
                    a.v = 6;
   bca7c:	2306      	movs	r3, #6
   bca7e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bca82:	ad01      	add	r5, sp, #4
   bca84:	f104 0308 	add.w	r3, r4, #8
   bca88:	3418      	adds	r4, #24
   bca8a:	6818      	ldr	r0, [r3, #0]
   bca8c:	6859      	ldr	r1, [r3, #4]
   bca8e:	462a      	mov	r2, r5
   bca90:	c203      	stmia	r2!, {r0, r1}
   bca92:	3308      	adds	r3, #8
   bca94:	42a3      	cmp	r3, r4
   bca96:	4615      	mov	r5, r2
   bca98:	d1f7      	bne.n	bca8a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bca9a:	a901      	add	r1, sp, #4
   bca9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bca9e:	ad07      	add	r5, sp, #28
   bcaa0:	f7fe fdd8 	bl	bb654 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bcaa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcaa6:	1d3c      	adds	r4, r7, #4
   bcaa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcaaa:	682b      	ldr	r3, [r5, #0]
   bcaac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcaae:	4649      	mov	r1, r9
   bcab0:	e7ca      	b.n	bca48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bcab2:	9800      	ldr	r0, [sp, #0]
   bcab4:	f7fd fc3e 	bl	ba334 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bcab8:	4638      	mov	r0, r7
   bcaba:	b015      	add	sp, #84	; 0x54
   bcabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bcac0 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   bcac0:	2803      	cmp	r0, #3
NetworkClass& NetworkClass::from(network_interface_t nif) {
   bcac2:	4602      	mov	r2, r0
    switch (nif) {
   bcac4:	d005      	beq.n	bcad2 <_ZN5spark12NetworkClass4fromEm+0x12>
   bcac6:	4b04      	ldr	r3, [pc, #16]	; (bcad8 <_ZN5spark12NetworkClass4fromEm+0x18>)
   bcac8:	4804      	ldr	r0, [pc, #16]	; (bcadc <_ZN5spark12NetworkClass4fromEm+0x1c>)
   bcaca:	2a04      	cmp	r2, #4
   bcacc:	bf18      	it	ne
   bcace:	4618      	movne	r0, r3
   bcad0:	4770      	bx	lr
        return Ethernet;
   bcad2:	4803      	ldr	r0, [pc, #12]	; (bcae0 <_ZN5spark12NetworkClass4fromEm+0x20>)
}
   bcad4:	4770      	bx	lr
   bcad6:	bf00      	nop
   bcad8:	2003e678 	.word	0x2003e678
   bcadc:	2003e608 	.word	0x2003e608
   bcae0:	2003e638 	.word	0x2003e638

000bcae4 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   bcae4:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   bcae6:	2200      	movs	r2, #0
   bcae8:	6840      	ldr	r0, [r0, #4]
   bcaea:	f7fd feb7 	bl	ba85c <network_prefer>
}
   bcaee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   bcaf2:	f7ff bfe5 	b.w	bcac0 <_ZN5spark12NetworkClass4fromEm>
	...

000bcaf8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bcaf8:	4b02      	ldr	r3, [pc, #8]	; (bcb04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bcafa:	4a03      	ldr	r2, [pc, #12]	; (bcb08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bcafc:	601a      	str	r2, [r3, #0]
   bcafe:	2200      	movs	r2, #0
   bcb00:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bcb02:	4770      	bx	lr
   bcb04:	2003e678 	.word	0x2003e678
   bcb08:	000bf780 	.word	0x000bf780

000bcb0c <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bcb0c:	b508      	push	{r3, lr}
            return &Wire1;
   bcb0e:	f000 ffbf 	bl	bda90 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bcb12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bcb16:	f7fe bd18 	b.w	bb54a <_ZN7TwoWire4lockEv>

000bcb1a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bcb1a:	b510      	push	{r4, lr}
   bcb1c:	4604      	mov	r4, r0
    lock_(_lock)
   bcb1e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bcb20:	b109      	cbz	r1, bcb26 <_ZN4PMICC1Eb+0xc>
        lock();
   bcb22:	f7ff fff3 	bl	bcb0c <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bcb26:	4620      	mov	r0, r4
   bcb28:	bd10      	pop	{r4, pc}

000bcb2a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bcb2a:	b508      	push	{r3, lr}
            return &Wire1;
   bcb2c:	f000 ffb0 	bl	bda90 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bcb30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bcb34:	f7fe bd12 	b.w	bb55c <_ZN7TwoWire6unlockEv>

000bcb38 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bcb38:	b510      	push	{r4, lr}
    if (lock_) {
   bcb3a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bcb3c:	4604      	mov	r4, r0
    if (lock_) {
   bcb3e:	b10b      	cbz	r3, bcb44 <_ZN4PMICD1Ev+0xc>
        unlock();
   bcb40:	f7ff fff3 	bl	bcb2a <_ZN4PMIC6unlockEv>
}
   bcb44:	4620      	mov	r0, r4
   bcb46:	bd10      	pop	{r4, pc}

000bcb48 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bcb48:	b510      	push	{r4, lr}
   bcb4a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bcb4c:	6800      	ldr	r0, [r0, #0]
   bcb4e:	f7ff ffec 	bl	bcb2a <_ZN4PMIC6unlockEv>
   bcb52:	4620      	mov	r0, r4
   bcb54:	bd10      	pop	{r4, pc}

000bcb56 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bcb56:	b530      	push	{r4, r5, lr}
   bcb58:	b087      	sub	sp, #28
   bcb5a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcb5c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcb5e:	f7ff ffd5 	bl	bcb0c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcb62:	226b      	movs	r2, #107	; 0x6b
   bcb64:	2300      	movs	r3, #0
   bcb66:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcb6a:	2401      	movs	r4, #1
   bcb6c:	230a      	movs	r3, #10
   bcb6e:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bcb72:	f000 ff8d 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bcb76:	a902      	add	r1, sp, #8
   bcb78:	f7fe fccb 	bl	bb512 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bcb7c:	f000 ff88 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bcb80:	6803      	ldr	r3, [r0, #0]
   bcb82:	4629      	mov	r1, r5
   bcb84:	689b      	ldr	r3, [r3, #8]
   bcb86:	4798      	blx	r3
            return &Wire1;
   bcb88:	f000 ff82 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bcb8c:	4621      	mov	r1, r4
   bcb8e:	f7fe fcd8 	bl	bb542 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bcb92:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bcb94:	f000 ff7c 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bcb98:	a902      	add	r1, sp, #8
   bcb9a:	f7fe fc8d 	bl	bb4b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bcb9e:	f000 ff77 	bl	bda90 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bcba2:	6803      	ldr	r3, [r0, #0]
   bcba4:	695b      	ldr	r3, [r3, #20]
   bcba6:	4798      	blx	r3
   bcba8:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bcbaa:	a801      	add	r0, sp, #4
   bcbac:	f7ff ffcc 	bl	bcb48 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcbb0:	b2e0      	uxtb	r0, r4
   bcbb2:	b007      	add	sp, #28
   bcbb4:	bd30      	pop	{r4, r5, pc}

000bcbb6 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bcbb6:	b570      	push	{r4, r5, r6, lr}
   bcbb8:	b086      	sub	sp, #24
   bcbba:	460d      	mov	r5, r1
   bcbbc:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcbbe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcbc0:	f7ff ffa4 	bl	bcb0c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcbc4:	226b      	movs	r2, #107	; 0x6b
   bcbc6:	2300      	movs	r3, #0
   bcbc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcbcc:	2601      	movs	r6, #1
   bcbce:	230a      	movs	r3, #10
   bcbd0:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bcbd4:	f000 ff5c 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bcbd8:	a902      	add	r1, sp, #8
   bcbda:	f7fe fc9a 	bl	bb512 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bcbde:	f000 ff57 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bcbe2:	6803      	ldr	r3, [r0, #0]
   bcbe4:	4629      	mov	r1, r5
   bcbe6:	689b      	ldr	r3, [r3, #8]
   bcbe8:	4798      	blx	r3
            return &Wire1;
   bcbea:	f000 ff51 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bcbee:	6803      	ldr	r3, [r0, #0]
   bcbf0:	4621      	mov	r1, r4
   bcbf2:	689b      	ldr	r3, [r3, #8]
   bcbf4:	4798      	blx	r3
            return &Wire1;
   bcbf6:	f000 ff4b 	bl	bda90 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bcbfa:	4631      	mov	r1, r6
   bcbfc:	f7fe fca1 	bl	bb542 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bcc00:	a801      	add	r0, sp, #4
   bcc02:	f7ff ffa1 	bl	bcb48 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcc06:	b006      	add	sp, #24
   bcc08:	bd70      	pop	{r4, r5, r6, pc}

000bcc0a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bcc0a:	b513      	push	{r0, r1, r4, lr}
   bcc0c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcc0e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcc10:	f7ff ff7c 	bl	bcb0c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bcc14:	2101      	movs	r1, #1
   bcc16:	4620      	mov	r0, r4
   bcc18:	f7ff ff9d 	bl	bcb56 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bcc1c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bcc20:	2b10      	cmp	r3, #16
   bcc22:	d007      	beq.n	bcc34 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bcc24:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bcc28:	f042 0210 	orr.w	r2, r2, #16
   bcc2c:	2101      	movs	r1, #1
   bcc2e:	4620      	mov	r0, r4
   bcc30:	f7ff ffc1 	bl	bcbb6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bcc34:	a801      	add	r0, sp, #4
   bcc36:	f7ff ff87 	bl	bcb48 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcc3a:	2001      	movs	r0, #1
   bcc3c:	b002      	add	sp, #8
   bcc3e:	bd10      	pop	{r4, pc}

000bcc40 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bcc40:	b513      	push	{r0, r1, r4, lr}
   bcc42:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcc44:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcc46:	f7ff ff61 	bl	bcb0c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bcc4a:	2101      	movs	r1, #1
   bcc4c:	4620      	mov	r0, r4
   bcc4e:	f7ff ff82 	bl	bcb56 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bcc52:	f010 0f30 	tst.w	r0, #48	; 0x30
   bcc56:	d005      	beq.n	bcc64 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bcc58:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bcc5c:	2101      	movs	r1, #1
   bcc5e:	4620      	mov	r0, r4
   bcc60:	f7ff ffa9 	bl	bcbb6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bcc64:	a801      	add	r0, sp, #4
   bcc66:	f7ff ff6f 	bl	bcb48 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcc6a:	2001      	movs	r0, #1
   bcc6c:	b002      	add	sp, #8
   bcc6e:	bd10      	pop	{r4, pc}

000bcc70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bcc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcc72:	4606      	mov	r6, r0
   bcc74:	460d      	mov	r5, r1
  size_t n = 0;
   bcc76:	188f      	adds	r7, r1, r2
   bcc78:	2400      	movs	r4, #0
  while (size--) {
   bcc7a:	42bd      	cmp	r5, r7
   bcc7c:	d00c      	beq.n	bcc98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bcc7e:	6833      	ldr	r3, [r6, #0]
   bcc80:	f815 1b01 	ldrb.w	r1, [r5], #1
   bcc84:	689b      	ldr	r3, [r3, #8]
   bcc86:	4630      	mov	r0, r6
   bcc88:	4798      	blx	r3
     if (chunk>=0)
   bcc8a:	1e03      	subs	r3, r0, #0
   bcc8c:	db01      	blt.n	bcc92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bcc8e:	441c      	add	r4, r3
  while (size--) {
   bcc90:	e7f3      	b.n	bcc7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bcc92:	2c00      	cmp	r4, #0
   bcc94:	bf08      	it	eq
   bcc96:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bcc98:	4620      	mov	r0, r4
   bcc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcc9c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bcc9c:	b513      	push	{r0, r1, r4, lr}
   bcc9e:	4604      	mov	r4, r0
    }
   bcca0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bcca2:	b159      	cbz	r1, bccbc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bcca4:	9101      	str	r1, [sp, #4]
   bcca6:	f7f7 fec9 	bl	b4a3c <strlen>
   bccaa:	6823      	ldr	r3, [r4, #0]
   bccac:	9901      	ldr	r1, [sp, #4]
   bccae:	68db      	ldr	r3, [r3, #12]
   bccb0:	4602      	mov	r2, r0
   bccb2:	4620      	mov	r0, r4
    }
   bccb4:	b002      	add	sp, #8
   bccb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bccba:	4718      	bx	r3
    }
   bccbc:	b002      	add	sp, #8
   bccbe:	bd10      	pop	{r4, pc}

000bccc0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bccc0:	b508      	push	{r3, lr}
  return write(str);
   bccc2:	f7ff ffeb 	bl	bcc9c <_ZN5Print5writeEPKc>
}
   bccc6:	bd08      	pop	{r3, pc}

000bccc8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bccc8:	6803      	ldr	r3, [r0, #0]
   bccca:	689b      	ldr	r3, [r3, #8]
   bcccc:	4718      	bx	r3

000bccce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bccce:	b530      	push	{r4, r5, lr}
   bccd0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bccd2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bccd4:	2a01      	cmp	r2, #1
  *str = '\0';
   bccd6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bccda:	bf98      	it	ls
   bccdc:	220a      	movls	r2, #10
   bccde:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bcce0:	460d      	mov	r5, r1
   bcce2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bcce6:	fb01 5312 	mls	r3, r1, r2, r5
   bccea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bccee:	2b09      	cmp	r3, #9
   bccf0:	bf94      	ite	ls
   bccf2:	3330      	addls	r3, #48	; 0x30
   bccf4:	3337      	addhi	r3, #55	; 0x37
   bccf6:	b2db      	uxtb	r3, r3
  } while(n);
   bccf8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bccfa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bccfe:	d9ef      	bls.n	bcce0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bcd00:	4621      	mov	r1, r4
   bcd02:	f7ff ffcb 	bl	bcc9c <_ZN5Print5writeEPKc>
}
   bcd06:	b00b      	add	sp, #44	; 0x2c
   bcd08:	bd30      	pop	{r4, r5, pc}
	...

000bcd0c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bcd0c:	4b01      	ldr	r3, [pc, #4]	; (bcd14 <_GLOBAL__sub_I_RGB+0x8>)
   bcd0e:	2200      	movs	r2, #0
   bcd10:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bcd12:	4770      	bx	lr
   bcd14:	2003e680 	.word	0x2003e680

000bcd18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bcd18:	b510      	push	{r4, lr}
   bcd1a:	4604      	mov	r4, r0
   bcd1c:	4608      	mov	r0, r1
{
    _spi = spi;
   bcd1e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bcd20:	f7fd fb18 	bl	ba354 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bcd24:	2300      	movs	r3, #0
   bcd26:	6063      	str	r3, [r4, #4]
}
   bcd28:	4620      	mov	r0, r4
   bcd2a:	bd10      	pop	{r4, pc}

000bcd2c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bcd2c:	b510      	push	{r4, lr}
   bcd2e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bcd30:	f7fd fa28 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bcd34:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bcd36:	6823      	ldr	r3, [r4, #0]
   bcd38:	4620      	mov	r0, r4
   bcd3a:	695b      	ldr	r3, [r3, #20]
   bcd3c:	4798      	blx	r3
    if (c >= 0) return c;
   bcd3e:	2800      	cmp	r0, #0
   bcd40:	da08      	bge.n	bcd54 <_ZN6Stream9timedReadEv+0x28>
   bcd42:	f7fd fa1f 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bcd46:	68e3      	ldr	r3, [r4, #12]
   bcd48:	1ac0      	subs	r0, r0, r3
   bcd4a:	68a3      	ldr	r3, [r4, #8]
   bcd4c:	4298      	cmp	r0, r3
   bcd4e:	d3f2      	bcc.n	bcd36 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bcd50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcd54:	bd10      	pop	{r4, pc}

000bcd56 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   bcd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcd5a:	4607      	mov	r7, r0
   bcd5c:	460c      	mov	r4, r1
   bcd5e:	188e      	adds	r6, r1, r2
   bcd60:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   bcd62:	42b5      	cmp	r5, r6
   bcd64:	eba5 0804 	sub.w	r8, r5, r4
   bcd68:	d007      	beq.n	bcd7a <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   bcd6a:	4638      	mov	r0, r7
   bcd6c:	f7ff ffde 	bl	bcd2c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   bcd70:	1e03      	subs	r3, r0, #0
   bcd72:	db02      	blt.n	bcd7a <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   bcd74:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   bcd78:	e7f3      	b.n	bcd62 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   bcd7a:	4640      	mov	r0, r8
   bcd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcd80 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   bcd80:	b510      	push	{r4, lr}
   bcd82:	4604      	mov	r4, r0
{
    free(buffer);
   bcd84:	6800      	ldr	r0, [r0, #0]
   bcd86:	f7fd fd81 	bl	ba88c <free>
}
   bcd8a:	4620      	mov	r0, r4
   bcd8c:	bd10      	pop	{r4, pc}

000bcd8e <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   bcd8e:	b510      	push	{r4, lr}
   bcd90:	4604      	mov	r4, r0
    if (buffer) {
   bcd92:	6800      	ldr	r0, [r0, #0]
   bcd94:	b108      	cbz	r0, bcd9a <_ZN6String10invalidateEv+0xc>
        free(buffer);
   bcd96:	f7fd fd79 	bl	ba88c <free>
    }
    buffer = nullptr;
   bcd9a:	2300      	movs	r3, #0
    capacity_ = len = 0;
   bcd9c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   bcda0:	6023      	str	r3, [r4, #0]
}
   bcda2:	bd10      	pop	{r4, pc}

000bcda4 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bcda4:	b538      	push	{r3, r4, r5, lr}
   bcda6:	4604      	mov	r4, r0
   bcda8:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bcdaa:	6800      	ldr	r0, [r0, #0]
   bcdac:	3101      	adds	r1, #1
   bcdae:	f7fd fd75 	bl	ba89c <realloc>
    if (newbuffer) {
   bcdb2:	b110      	cbz	r0, bcdba <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   bcdb4:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   bcdb8:	2001      	movs	r0, #1
    }
    return 0;
}
   bcdba:	bd38      	pop	{r3, r4, r5, pc}

000bcdbc <_ZN6String7reserveEj>:
{
   bcdbc:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   bcdbe:	6803      	ldr	r3, [r0, #0]
{
   bcdc0:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   bcdc2:	b123      	cbz	r3, bcdce <_ZN6String7reserveEj+0x12>
   bcdc4:	6843      	ldr	r3, [r0, #4]
   bcdc6:	428b      	cmp	r3, r1
   bcdc8:	d301      	bcc.n	bcdce <_ZN6String7reserveEj+0x12>
   bcdca:	2001      	movs	r0, #1
}
   bcdcc:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   bcdce:	4620      	mov	r0, r4
   bcdd0:	f7ff ffe8 	bl	bcda4 <_ZN6String12changeBufferEj>
   bcdd4:	2800      	cmp	r0, #0
   bcdd6:	d0f9      	beq.n	bcdcc <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   bcdd8:	68a3      	ldr	r3, [r4, #8]
   bcdda:	2b00      	cmp	r3, #0
   bcddc:	d1f5      	bne.n	bcdca <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   bcdde:	6822      	ldr	r2, [r4, #0]
   bcde0:	7013      	strb	r3, [r2, #0]
   bcde2:	e7f2      	b.n	bcdca <_ZN6String7reserveEj+0xe>

000bcde4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bcde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcde6:	460d      	mov	r5, r1
    if (!reserve(length)) {
   bcde8:	4611      	mov	r1, r2
   bcdea:	9201      	str	r2, [sp, #4]
{
   bcdec:	4604      	mov	r4, r0
    if (!reserve(length)) {
   bcdee:	f7ff ffe5 	bl	bcdbc <_ZN6String7reserveEj>
   bcdf2:	9a01      	ldr	r2, [sp, #4]
   bcdf4:	b928      	cbnz	r0, bce02 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   bcdf6:	4620      	mov	r0, r4
   bcdf8:	f7ff ffc9 	bl	bcd8e <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   bcdfc:	4620      	mov	r0, r4
   bcdfe:	b003      	add	sp, #12
   bce00:	bd30      	pop	{r4, r5, pc}
    len = length;
   bce02:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   bce04:	4629      	mov	r1, r5
   bce06:	6820      	ldr	r0, [r4, #0]
   bce08:	f001 f810 	bl	bde2c <memcpy>
    buffer[len] = 0;
   bce0c:	6822      	ldr	r2, [r4, #0]
   bce0e:	68a3      	ldr	r3, [r4, #8]
   bce10:	2100      	movs	r1, #0
   bce12:	54d1      	strb	r1, [r2, r3]
    return *this;
   bce14:	e7f2      	b.n	bcdfc <_ZN6String4copyEPKcj+0x18>

000bce16 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   bce16:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bce18:	b513      	push	{r0, r1, r4, lr}
    capacity_ = 0;
   bce1a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bce1e:	4604      	mov	r4, r0
    len = 0;
   bce20:	6083      	str	r3, [r0, #8]
    flags = 0;
   bce22:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   bce24:	b141      	cbz	r1, bce38 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   bce26:	4608      	mov	r0, r1
   bce28:	9101      	str	r1, [sp, #4]
   bce2a:	f7f7 fe07 	bl	b4a3c <strlen>
   bce2e:	9901      	ldr	r1, [sp, #4]
   bce30:	4602      	mov	r2, r0
   bce32:	4620      	mov	r0, r4
   bce34:	f7ff ffd6 	bl	bcde4 <_ZN6String4copyEPKcj>
}
   bce38:	4620      	mov	r0, r4
   bce3a:	b002      	add	sp, #8
   bce3c:	bd10      	pop	{r4, pc}

000bce3e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bce3e:	b538      	push	{r3, r4, r5, lr}
   bce40:	4605      	mov	r5, r0
    if (buffer) {
   bce42:	6800      	ldr	r0, [r0, #0]
{
   bce44:	460c      	mov	r4, r1
    if (buffer) {
   bce46:	b170      	cbz	r0, bce66 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   bce48:	686a      	ldr	r2, [r5, #4]
   bce4a:	688b      	ldr	r3, [r1, #8]
   bce4c:	429a      	cmp	r2, r3
   bce4e:	d308      	bcc.n	bce62 <_ZN6String4moveERS_+0x24>
   bce50:	6809      	ldr	r1, [r1, #0]
   bce52:	b131      	cbz	r1, bce62 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   bce54:	f001 f85f 	bl	bdf16 <strcpy>
            len = rhs.len;
   bce58:	68a3      	ldr	r3, [r4, #8]
   bce5a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   bce5c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   bce5e:	60a3      	str	r3, [r4, #8]
}
   bce60:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   bce62:	f7fd fd13 	bl	ba88c <free>
    buffer = rhs.buffer;
   bce66:	6823      	ldr	r3, [r4, #0]
   bce68:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   bce6a:	6863      	ldr	r3, [r4, #4]
   bce6c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   bce6e:	68a3      	ldr	r3, [r4, #8]
   bce70:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   bce72:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   bce74:	e9c4 3300 	strd	r3, r3, [r4]
   bce78:	e7f1      	b.n	bce5e <_ZN6String4moveERS_+0x20>

000bce7a <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bce7a:	b510      	push	{r4, lr}
    buffer = nullptr;
   bce7c:	2300      	movs	r3, #0
    capacity_ = 0;
   bce7e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bce82:	4604      	mov	r4, r0
    len = 0;
   bce84:	6083      	str	r3, [r0, #8]
    flags = 0;
   bce86:	7303      	strb	r3, [r0, #12]
    move(rval);
   bce88:	f7ff ffd9 	bl	bce3e <_ZN6String4moveERS_>
}
   bce8c:	4620      	mov	r0, r4
   bce8e:	bd10      	pop	{r4, pc}

000bce90 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   bce90:	4288      	cmp	r0, r1
{
   bce92:	b510      	push	{r4, lr}
   bce94:	4604      	mov	r4, r0
    if (this == &rhs) {
   bce96:	d005      	beq.n	bcea4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   bce98:	680b      	ldr	r3, [r1, #0]
   bce9a:	b12b      	cbz	r3, bcea8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   bce9c:	688a      	ldr	r2, [r1, #8]
   bce9e:	4619      	mov	r1, r3
   bcea0:	f7ff ffa0 	bl	bcde4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   bcea4:	4620      	mov	r0, r4
   bcea6:	bd10      	pop	{r4, pc}
        invalidate();
   bcea8:	f7ff ff71 	bl	bcd8e <_ZN6String10invalidateEv>
   bceac:	e7fa      	b.n	bcea4 <_ZN6StringaSERKS_+0x14>

000bceae <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bceae:	b510      	push	{r4, lr}
    buffer = nullptr;
   bceb0:	2300      	movs	r3, #0
String::String(const String &value)
   bceb2:	4604      	mov	r4, r0
    capacity_ = 0;
   bceb4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   bceb8:	6083      	str	r3, [r0, #8]
    flags = 0;
   bceba:	7303      	strb	r3, [r0, #12]
    *this = value;
   bcebc:	f7ff ffe8 	bl	bce90 <_ZN6StringaSERKS_>
}
   bcec0:	4620      	mov	r0, r4
   bcec2:	bd10      	pop	{r4, pc}

000bcec4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
   bcec4:	4288      	cmp	r0, r1
{
   bcec6:	b510      	push	{r4, lr}
   bcec8:	4604      	mov	r4, r0
    if (this != &rval) {
   bceca:	d001      	beq.n	bced0 <_ZN6StringaSEOS_+0xc>
        move(rval);
   bcecc:	f7ff ffb7 	bl	bce3e <_ZN6String4moveERS_>
    }
    return *this;
}
   bced0:	4620      	mov	r0, r4
   bced2:	bd10      	pop	{r4, pc}

000bced4 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bced4:	b513      	push	{r0, r1, r4, lr}
   bced6:	4604      	mov	r4, r0
    if (cstr) {
   bced8:	b159      	cbz	r1, bcef2 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   bceda:	4608      	mov	r0, r1
   bcedc:	9101      	str	r1, [sp, #4]
   bcede:	f7f7 fdad 	bl	b4a3c <strlen>
   bcee2:	9901      	ldr	r1, [sp, #4]
   bcee4:	4602      	mov	r2, r0
   bcee6:	4620      	mov	r0, r4
   bcee8:	f7ff ff7c 	bl	bcde4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   bceec:	4620      	mov	r0, r4
   bceee:	b002      	add	sp, #8
   bcef0:	bd10      	pop	{r4, pc}
        invalidate();
   bcef2:	f7ff ff4c 	bl	bcd8e <_ZN6String10invalidateEv>
   bcef6:	e7f9      	b.n	bceec <_ZN6StringaSEPKc+0x18>

000bcef8 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bcef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcefa:	4604      	mov	r4, r0
   bcefc:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
   bcefe:	460f      	mov	r7, r1
   bcf00:	b909      	cbnz	r1, bcf06 <_ZN6String6concatEPKcj+0xe>
        return 0;
   bcf02:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
   bcf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
   bcf06:	b18a      	cbz	r2, bcf2c <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
   bcf08:	6885      	ldr	r5, [r0, #8]
   bcf0a:	4415      	add	r5, r2
    if (!reserve(newlen)) {
   bcf0c:	4629      	mov	r1, r5
   bcf0e:	f7ff ff55 	bl	bcdbc <_ZN6String7reserveEj>
   bcf12:	2800      	cmp	r0, #0
   bcf14:	d0f5      	beq.n	bcf02 <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
   bcf16:	68a3      	ldr	r3, [r4, #8]
   bcf18:	6820      	ldr	r0, [r4, #0]
   bcf1a:	4632      	mov	r2, r6
   bcf1c:	4418      	add	r0, r3
   bcf1e:	4639      	mov	r1, r7
   bcf20:	f000 ff84 	bl	bde2c <memcpy>
    buffer[newlen] = 0;
   bcf24:	6823      	ldr	r3, [r4, #0]
   bcf26:	2200      	movs	r2, #0
   bcf28:	555a      	strb	r2, [r3, r5]
    len = newlen;
   bcf2a:	60a5      	str	r5, [r4, #8]
        return 1;
   bcf2c:	2001      	movs	r0, #1
   bcf2e:	e7e9      	b.n	bcf04 <_ZN6String6concatEPKcj+0xc>

000bcf30 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bcf30:	b513      	push	{r0, r1, r4, lr}
   bcf32:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
   bcf34:	4608      	mov	r0, r1
    if (!cstr) {
   bcf36:	b151      	cbz	r1, bcf4e <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
   bcf38:	9101      	str	r1, [sp, #4]
   bcf3a:	f7f7 fd7f 	bl	b4a3c <strlen>
   bcf3e:	9901      	ldr	r1, [sp, #4]
   bcf40:	4602      	mov	r2, r0
   bcf42:	4620      	mov	r0, r4
}
   bcf44:	b002      	add	sp, #8
   bcf46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
   bcf4a:	f7ff bfd5 	b.w	bcef8 <_ZN6String6concatEPKcj>
}
   bcf4e:	b002      	add	sp, #8
   bcf50:	bd10      	pop	{r4, pc}

000bcf52 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bcf52:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   bcf54:	2300      	movs	r3, #0
   bcf56:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   bcf5a:	2201      	movs	r2, #1
    buf[0] = c;
   bcf5c:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   bcf60:	a901      	add	r1, sp, #4
   bcf62:	f7ff ffc9 	bl	bcef8 <_ZN6String6concatEPKcj>
}
   bcf66:	b003      	add	sp, #12
   bcf68:	f85d fb04 	ldr.w	pc, [sp], #4

000bcf6c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bcf6c:	b510      	push	{r4, lr}
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!a.concat(rhs.buffer, rhs.len)) {
   bcf6e:	688a      	ldr	r2, [r1, #8]
   bcf70:	6809      	ldr	r1, [r1, #0]
{
   bcf72:	4604      	mov	r4, r0
    if (!a.concat(rhs.buffer, rhs.len)) {
   bcf74:	f7ff ffc0 	bl	bcef8 <_ZN6String6concatEPKcj>
   bcf78:	b910      	cbnz	r0, bcf80 <_ZplRK15StringSumHelperRK6String+0x14>
        a.invalidate();
   bcf7a:	4620      	mov	r0, r4
   bcf7c:	f7ff ff07 	bl	bcd8e <_ZN6String10invalidateEv>
    }
    return a;
}
   bcf80:	4620      	mov	r0, r4
   bcf82:	bd10      	pop	{r4, pc}

000bcf84 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bcf84:	b513      	push	{r0, r1, r4, lr}
   bcf86:	4604      	mov	r4, r0
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
   bcf88:	b929      	cbnz	r1, bcf96 <_ZplRK15StringSumHelperPKc+0x12>
        a.invalidate();
   bcf8a:	4620      	mov	r0, r4
   bcf8c:	f7ff feff 	bl	bcd8e <_ZN6String10invalidateEv>
    }
    return a;
}
   bcf90:	4620      	mov	r0, r4
   bcf92:	b002      	add	sp, #8
   bcf94:	bd10      	pop	{r4, pc}
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
   bcf96:	4608      	mov	r0, r1
   bcf98:	9101      	str	r1, [sp, #4]
   bcf9a:	f7f7 fd4f 	bl	b4a3c <strlen>
   bcf9e:	9901      	ldr	r1, [sp, #4]
   bcfa0:	4602      	mov	r2, r0
   bcfa2:	4620      	mov	r0, r4
   bcfa4:	f7ff ffa8 	bl	bcef8 <_ZN6String6concatEPKcj>
   bcfa8:	2800      	cmp	r0, #0
   bcfaa:	d0ee      	beq.n	bcf8a <_ZplRK15StringSumHelperPKc+0x6>
   bcfac:	e7f0      	b.n	bcf90 <_ZplRK15StringSumHelperPKc+0xc>

000bcfae <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bcfae:	b508      	push	{r3, lr}
    if (len == 0) {
   bcfb0:	6882      	ldr	r2, [r0, #8]
   bcfb2:	b93a      	cbnz	r2, bcfc4 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   bcfb4:	b121      	cbz	r1, bcfc0 <_ZNK6String6equalsEPKc+0x12>
   bcfb6:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   bcfb8:	fab0 f080 	clz	r0, r0
   bcfbc:	0940      	lsrs	r0, r0, #5
   bcfbe:	e000      	b.n	bcfc2 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   bcfc0:	2001      	movs	r0, #1
}
   bcfc2:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   bcfc4:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   bcfc6:	b909      	cbnz	r1, bcfcc <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   bcfc8:	7800      	ldrb	r0, [r0, #0]
   bcfca:	e7f5      	b.n	bcfb8 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   bcfcc:	f7f7 fd2c 	bl	b4a28 <strcmp>
   bcfd0:	e7f2      	b.n	bcfb8 <_ZNK6String6equalsEPKc+0xa>

000bcfd2 <_ZNK6String8endsWithERKS_>:
    }
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bcfd2:	b508      	push	{r3, lr}
    if ( len < s2.len || !buffer || !s2.buffer) {
   bcfd4:	6883      	ldr	r3, [r0, #8]
   bcfd6:	688a      	ldr	r2, [r1, #8]
   bcfd8:	4293      	cmp	r3, r2
   bcfda:	d30b      	bcc.n	bcff4 <_ZNK6String8endsWithERKS_+0x22>
   bcfdc:	6800      	ldr	r0, [r0, #0]
   bcfde:	b140      	cbz	r0, bcff2 <_ZNK6String8endsWithERKS_+0x20>
   bcfe0:	6809      	ldr	r1, [r1, #0]
   bcfe2:	b149      	cbz	r1, bcff8 <_ZNK6String8endsWithERKS_+0x26>
        return 0;
    }
    return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bcfe4:	1a9b      	subs	r3, r3, r2
   bcfe6:	4418      	add	r0, r3
   bcfe8:	f7f7 fd1e 	bl	b4a28 <strcmp>
   bcfec:	fab0 f080 	clz	r0, r0
   bcff0:	0940      	lsrs	r0, r0, #5
}
   bcff2:	bd08      	pop	{r3, pc}
        return 0;
   bcff4:	2000      	movs	r0, #0
   bcff6:	e7fc      	b.n	bcff2 <_ZNK6String8endsWithERKS_+0x20>
   bcff8:	4608      	mov	r0, r1
   bcffa:	e7fa      	b.n	bcff2 <_ZNK6String8endsWithERKS_+0x20>

000bcffc <_ZNK6String8getBytesEPhjj>:
    }
    return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bcffc:	b558      	push	{r3, r4, r6, lr}
   bcffe:	460e      	mov	r6, r1
    if (!bufsize || !buf) {
   bd000:	b12a      	cbz	r2, bd00e <_ZNK6String8getBytesEPhjj+0x12>
   bd002:	b121      	cbz	r1, bd00e <_ZNK6String8getBytesEPhjj+0x12>
        return;
    }
    if (index >= len) {
   bd004:	6884      	ldr	r4, [r0, #8]
   bd006:	42a3      	cmp	r3, r4
   bd008:	d302      	bcc.n	bd010 <_ZNK6String8getBytesEPhjj+0x14>
        buf[0] = 0;
   bd00a:	2300      	movs	r3, #0
   bd00c:	700b      	strb	r3, [r1, #0]
    if (n > len - index) {
        n = len - index;
    }
    strncpy((char *)buf, buffer + index, n);
    buf[n] = 0;
}
   bd00e:	bd58      	pop	{r3, r4, r6, pc}
    if (n > len - index) {
   bd010:	1ae4      	subs	r4, r4, r3
    unsigned int n = bufsize - 1;
   bd012:	3a01      	subs	r2, #1
    strncpy((char *)buf, buffer + index, n);
   bd014:	6801      	ldr	r1, [r0, #0]
   bd016:	4294      	cmp	r4, r2
   bd018:	bf28      	it	cs
   bd01a:	4614      	movcs	r4, r2
   bd01c:	4419      	add	r1, r3
   bd01e:	4622      	mov	r2, r4
   bd020:	4630      	mov	r0, r6
   bd022:	f000 ffb2 	bl	bdf8a <strncpy>
    buf[n] = 0;
   bd026:	2300      	movs	r3, #0
   bd028:	5533      	strb	r3, [r6, r4]
   bd02a:	e7f0      	b.n	bd00e <_ZNK6String8getBytesEPhjj+0x12>

000bd02c <_ZNK6String9substringEjj>:
{
    return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bd02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (left > right) {
   bd02e:	429a      	cmp	r2, r3
{
   bd030:	460f      	mov	r7, r1
   bd032:	461d      	mov	r5, r3
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
   bd034:	490c      	ldr	r1, [pc, #48]	; (bd068 <_ZNK6String9substringEjj+0x3c>)
    if (left > right) {
   bd036:	bf88      	it	hi
   bd038:	4613      	movhi	r3, r2
{
   bd03a:	4614      	mov	r4, r2
   bd03c:	4606      	mov	r6, r0
    if (left > right) {
   bd03e:	bf84      	itt	hi
   bd040:	462c      	movhi	r4, r5
   bd042:	461d      	movhi	r5, r3
    String out;
   bd044:	f7ff fee7 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
    if (left > len) {
   bd048:	68bb      	ldr	r3, [r7, #8]
   bd04a:	42a3      	cmp	r3, r4
   bd04c:	d30a      	bcc.n	bd064 <_ZNK6String9substringEjj+0x38>
        return out;
    }
    if (right > len) {
        right = len;
    }
    out.copy(&buffer[left], right - left);
   bd04e:	6839      	ldr	r1, [r7, #0]
   bd050:	42ab      	cmp	r3, r5
   bd052:	bf94      	ite	ls
   bd054:	ebc4 0203 	rsbls	r2, r4, r3
   bd058:	ebc4 0205 	rsbhi	r2, r4, r5
   bd05c:	4421      	add	r1, r4
   bd05e:	4630      	mov	r0, r6
   bd060:	f7ff fec0 	bl	bcde4 <_ZN6String4copyEPKcj>
    return out;
}
   bd064:	4630      	mov	r0, r6
   bd066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd068:	000bf6ed 	.word	0x000bf6ed

000bd06c <_ZN6String6formatEPKcz>:
    OutputStringStream stream(*this);
    printable.printTo(stream);
}

String String::format(const char* fmt, ...)
{
   bd06c:	b40e      	push	{r1, r2, r3}
   bd06e:	b570      	push	{r4, r5, r6, lr}
   bd070:	b087      	sub	sp, #28
   bd072:	ad0b      	add	r5, sp, #44	; 0x2c
   bd074:	4604      	mov	r4, r0
   bd076:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd07a:	9201      	str	r2, [sp, #4]
   bd07c:	462b      	mov	r3, r5
   bd07e:	2105      	movs	r1, #5
   bd080:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bd082:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd084:	f7fd fc2a 	bl	ba8dc <vsnprintf>
    va_end(marker);

    String result;
   bd088:	490b      	ldr	r1, [pc, #44]	; (bd0b8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd08a:	4606      	mov	r6, r0
    String result;
   bd08c:	4620      	mov	r0, r4
   bd08e:	f7ff fec2 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bd092:	4631      	mov	r1, r6
   bd094:	4620      	mov	r0, r4
   bd096:	f7ff fe91 	bl	bcdbc <_ZN6String7reserveEj>
    if (result.buffer) {
   bd09a:	6820      	ldr	r0, [r4, #0]
   bd09c:	b130      	cbz	r0, bd0ac <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd09e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bd0a0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd0a2:	462b      	mov	r3, r5
   bd0a4:	1c71      	adds	r1, r6, #1
   bd0a6:	f7fd fc19 	bl	ba8dc <vsnprintf>
        va_end(marker);
        result.len = n;
   bd0aa:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bd0ac:	4620      	mov	r0, r4
   bd0ae:	b007      	add	sp, #28
   bd0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd0b4:	b003      	add	sp, #12
   bd0b6:	4770      	bx	lr
   bd0b8:	000bf6ed 	.word	0x000bf6ed

000bd0bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bd0bc:	b510      	push	{r4, lr}
   bd0be:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bd0c0:	6800      	ldr	r0, [r0, #0]
   bd0c2:	b118      	cbz	r0, bd0cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bd0c4:	f7fd fbe2 	bl	ba88c <free>
            wakeupSource_ = nullptr;
   bd0c8:	2300      	movs	r3, #0
   bd0ca:	6023      	str	r3, [r4, #0]
        }
    }
   bd0cc:	bd10      	pop	{r4, pc}

000bd0ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bd0ce:	b538      	push	{r3, r4, r5, lr}
   bd0d0:	460c      	mov	r4, r1
   bd0d2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd0d4:	f7ff fff2 	bl	bd0bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bd0d8:	b154      	cbz	r4, bd0f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bd0da:	8820      	ldrh	r0, [r4, #0]
   bd0dc:	f7fd fbce 	bl	ba87c <malloc>
   bd0e0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bd0e2:	b128      	cbz	r0, bd0f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bd0e4:	8822      	ldrh	r2, [r4, #0]
   bd0e6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bd0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bd0ec:	f000 be9e 	b.w	bde2c <memcpy>
    }
   bd0f0:	bd38      	pop	{r3, r4, r5, pc}

000bd0f2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd0f2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bd0f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bd0f8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bd0fa:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bd0fe:	f8c0 3006 	str.w	r3, [r0, #6]
   bd102:	894b      	ldrh	r3, [r1, #10]
   bd104:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd106:	460c      	mov	r4, r1
   bd108:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd10a:	f7ff ffd7 	bl	bd0bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bd10e:	6823      	ldr	r3, [r4, #0]
   bd110:	b113      	cbz	r3, bd118 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bd112:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bd114:	2300      	movs	r3, #0
   bd116:	6023      	str	r3, [r4, #0]
    }
   bd118:	bd38      	pop	{r3, r4, r5, pc}

000bd11a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bd11a:	b507      	push	{r0, r1, r2, lr}
   bd11c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd11e:	2100      	movs	r1, #0
{
   bd120:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd122:	9100      	str	r1, [sp, #0]
   bd124:	2001      	movs	r0, #1
   bd126:	218c      	movs	r1, #140	; 0x8c
   bd128:	f7fd face 	bl	ba6c8 <system_reset>
}
   bd12c:	b003      	add	sp, #12
   bd12e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd132 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bd132:	4601      	mov	r1, r0
    reset(0, flags);
   bd134:	2000      	movs	r0, #0
   bd136:	f7ff bff0 	b.w	bd11a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bd13a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bd13a:	2000      	movs	r0, #0
   bd13c:	f7ff bff9 	b.w	bd132 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bd140 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bd140:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd142:	4d2b      	ldr	r5, [pc, #172]	; (bd1f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bd144:	7d0b      	ldrb	r3, [r1, #20]
   bd146:	4604      	mov	r4, r0
   bd148:	b08b      	sub	sp, #44	; 0x2c
   bd14a:	4608      	mov	r0, r1
   bd14c:	1daf      	adds	r7, r5, #6
   bd14e:	2b00      	cmp	r3, #0
   bd150:	d036      	beq.n	bd1c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bd152:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bd154:	791b      	ldrb	r3, [r3, #4]
   bd156:	2b00      	cmp	r3, #0
   bd158:	d032      	beq.n	bd1c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bd15a:	4b26      	ldr	r3, [pc, #152]	; (bd1f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bd15c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bd15e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bd160:	a902      	add	r1, sp, #8
   bd162:	3004      	adds	r0, #4
   bd164:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bd168:	f7fd faa4 	bl	ba6b4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bd16c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bd170:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bd174:	b200      	sxth	r0, r0
   bd176:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bd17a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bd17e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bd180:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bd182:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd184:	4628      	mov	r0, r5
   bd186:	f7ff ffa2 	bl	bd0ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bd18a:	a802      	add	r0, sp, #8
   bd18c:	f7ff ff96 	bl	bd0bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bd190:	2300      	movs	r3, #0
   bd192:	6023      	str	r3, [r4, #0]
   bd194:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bd196:	71a3      	strb	r3, [r4, #6]
   bd198:	8123      	strh	r3, [r4, #8]
   bd19a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd19e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bd1a0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bd1a4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bd1a6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bd1aa:	f8c4 3006 	str.w	r3, [r4, #6]
   bd1ae:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd1b0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bd1b2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bd1b4:	4620      	mov	r0, r4
   bd1b6:	f7ff ff8a 	bl	bd0ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bd1ba:	4620      	mov	r0, r4
   bd1bc:	b00b      	add	sp, #44	; 0x2c
   bd1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bd1c0:	2600      	movs	r6, #0
   bd1c2:	2320      	movs	r3, #32
   bd1c4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bd1c8:	4b0b      	ldr	r3, [pc, #44]	; (bd1f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bd1ca:	9300      	str	r3, [sp, #0]
   bd1cc:	aa02      	add	r2, sp, #8
   bd1ce:	4633      	mov	r3, r6
   bd1d0:	490a      	ldr	r1, [pc, #40]	; (bd1fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bd1d2:	2032      	movs	r0, #50	; 0x32
   bd1d4:	f7fd f9ce 	bl	ba574 <log_message>
            : wakeupSource_(nullptr),
   bd1d8:	4b06      	ldr	r3, [pc, #24]	; (bd1f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bd1da:	4805      	ldr	r0, [pc, #20]	; (bd1f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bd1dc:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bd1de:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bd1e2:	a902      	add	r1, sp, #8
   bd1e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bd1e8:	f7ff ff83 	bl	bd0f2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bd1ec:	e7cd      	b.n	bd18a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bd1ee:	bf00      	nop
   bd1f0:	2003e690 	.word	0x2003e690
   bd1f4:	ffff0000 	.word	0xffff0000
   bd1f8:	000bf7c3 	.word	0x000bf7c3
   bd1fc:	000bf7bc 	.word	0x000bf7bc

000bd200 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bd200:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bd202:	2420      	movs	r4, #32
{
   bd204:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bd206:	4622      	mov	r2, r4
   bd208:	2100      	movs	r1, #0
   bd20a:	4668      	mov	r0, sp
   bd20c:	f000 fe36 	bl	bde7c <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bd210:	2100      	movs	r1, #0
   bd212:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bd214:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bd218:	f7fc ff8c 	bl	ba134 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bd21c:	9801      	ldr	r0, [sp, #4]
   bd21e:	b008      	add	sp, #32
   bd220:	bd10      	pop	{r4, pc}
	...

000bd224 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd224:	4b05      	ldr	r3, [pc, #20]	; (bd23c <_GLOBAL__sub_I_System+0x18>)
   bd226:	2202      	movs	r2, #2
   bd228:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bd22a:	4b05      	ldr	r3, [pc, #20]	; (bd240 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd22c:	4a05      	ldr	r2, [pc, #20]	; (bd244 <_GLOBAL__sub_I_System+0x20>)
   bd22e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd230:	2000      	movs	r0, #0
   bd232:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd236:	f7fd b9df 	b.w	ba5f8 <set_system_mode>
   bd23a:	bf00      	nop
   bd23c:	2003e69c 	.word	0x2003e69c
   bd240:	2003e690 	.word	0x2003e690
   bd244:	ffff0000 	.word	0xffff0000

000bd248 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd24c:	4a15      	ldr	r2, [pc, #84]	; (bd2a4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd24e:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd2b0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd252:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd256:	1980      	adds	r0, r0, r6
   bd258:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd25c:	4b12      	ldr	r3, [pc, #72]	; (bd2a8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd25e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd262:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd266:	1986      	adds	r6, r0, r6
   bd268:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd26c:	42bb      	cmp	r3, r7
   bd26e:	bf08      	it	eq
   bd270:	42b2      	cmpeq	r2, r6
{
   bd272:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd274:	d013      	beq.n	bd29e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd276:	a903      	add	r1, sp, #12
   bd278:	4668      	mov	r0, sp
   bd27a:	e9cd 6700 	strd	r6, r7, [sp]
   bd27e:	f7fd fb65 	bl	ba94c <localtime_r>
	calendar_time.tm_year += 1900;
   bd282:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd284:	4d09      	ldr	r5, [pc, #36]	; (bd2ac <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd286:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd28a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd28c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd28e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd296:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd29a:	6823      	ldr	r3, [r4, #0]
   bd29c:	602b      	str	r3, [r5, #0]
    }
}
   bd29e:	b00c      	add	sp, #48	; 0x30
   bd2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd2a4:	2003e6d8 	.word	0x2003e6d8
   bd2a8:	2003e6d0 	.word	0x2003e6d0
   bd2ac:	2003e6a8 	.word	0x2003e6a8
   bd2b0:	2003e6e0 	.word	0x2003e6e0

000bd2b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd2b4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd2b6:	2000      	movs	r0, #0
   bd2b8:	f7fd fa48 	bl	ba74c <spark_sync_time_pending>
   bd2bc:	b128      	cbz	r0, bd2ca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd2be:	f7fd fa25 	bl	ba70c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd2c2:	f080 0001 	eor.w	r0, r0, #1
   bd2c6:	b2c0      	uxtb	r0, r0
    }
   bd2c8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd2ca:	2001      	movs	r0, #1
   bd2cc:	e7fc      	b.n	bd2c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd2d0 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bd2d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd2d2:	f7ff ffb9 	bl	bd248 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bd2d6:	4b01      	ldr	r3, [pc, #4]	; (bd2dc <_ZN9TimeClass4hourEx+0xc>)
   bd2d8:	6898      	ldr	r0, [r3, #8]
   bd2da:	bd08      	pop	{r3, pc}
   bd2dc:	2003e6a8 	.word	0x2003e6a8

000bd2e0 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bd2e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd2e2:	f7ff ffb1 	bl	bd248 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bd2e6:	4b01      	ldr	r3, [pc, #4]	; (bd2ec <_ZN9TimeClass3dayEx+0xc>)
   bd2e8:	68d8      	ldr	r0, [r3, #12]
   bd2ea:	bd08      	pop	{r3, pc}
   bd2ec:	2003e6a8 	.word	0x2003e6a8

000bd2f0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bd2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd2f2:	4602      	mov	r2, r0
   bd2f4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd2f6:	4668      	mov	r0, sp
    struct timeval tv = {
   bd2f8:	2100      	movs	r1, #0
    };
   bd2fa:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bd2fe:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd302:	f7fc ff5f 	bl	ba1c4 <hal_rtc_set_time>
   bd306:	4602      	mov	r2, r0
   bd308:	b910      	cbnz	r0, bd310 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bd30a:	4601      	mov	r1, r0
   bd30c:	f7fd f9ac 	bl	ba668 <system_notify_time_changed>
    }
}
   bd310:	b005      	add	sp, #20
   bd312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd318 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bd318:	b530      	push	{r4, r5, lr}
   bd31a:	b093      	sub	sp, #76	; 0x4c
   bd31c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bd320:	4b19      	ldr	r3, [pc, #100]	; (bd388 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bd322:	4604      	mov	r4, r0
    t += time_zone_cache;
   bd324:	e9d3 1000 	ldrd	r1, r0, [r3]
   bd328:	9b01      	ldr	r3, [sp, #4]
   bd32a:	1852      	adds	r2, r2, r1
   bd32c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bd330:	4816      	ldr	r0, [pc, #88]	; (bd38c <_ZN9TimeClass7timeStrEx+0x74>)
   bd332:	e9d0 1000 	ldrd	r1, r0, [r0]
   bd336:	1852      	adds	r2, r2, r1
   bd338:	eb43 0300 	adc.w	r3, r3, r0
   bd33c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bd340:	2224      	movs	r2, #36	; 0x24
   bd342:	eb0d 0002 	add.w	r0, sp, r2
   bd346:	2100      	movs	r1, #0
   bd348:	f000 fd98 	bl	bde7c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bd34c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bd34e:	a909      	add	r1, sp, #36	; 0x24
   bd350:	4668      	mov	r0, sp
   bd352:	f7fd fafb 	bl	ba94c <localtime_r>
    char ascstr[26] = {};
   bd356:	2216      	movs	r2, #22
   bd358:	4629      	mov	r1, r5
   bd35a:	a803      	add	r0, sp, #12
   bd35c:	9502      	str	r5, [sp, #8]
   bd35e:	f000 fd8d 	bl	bde7c <memset>
    asctime_r(&calendar_time, ascstr);
   bd362:	a902      	add	r1, sp, #8
   bd364:	a809      	add	r0, sp, #36	; 0x24
   bd366:	f000 fd0b 	bl	bdd80 <asctime_r>
    int len = strlen(ascstr);
   bd36a:	a802      	add	r0, sp, #8
   bd36c:	f7f7 fb66 	bl	b4a3c <strlen>
    ascstr[len-1] = 0; // remove final newline
   bd370:	ab12      	add	r3, sp, #72	; 0x48
   bd372:	4418      	add	r0, r3
    return String(ascstr);
   bd374:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bd376:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bd37a:	4620      	mov	r0, r4
   bd37c:	f7ff fd4b 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bd380:	4620      	mov	r0, r4
   bd382:	b013      	add	sp, #76	; 0x4c
   bd384:	bd30      	pop	{r4, r5, pc}
   bd386:	bf00      	nop
   bd388:	2003e6d8 	.word	0x2003e6d8
   bd38c:	2003e6d0 	.word	0x2003e6d0

000bd390 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bd390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd394:	b0a4      	sub	sp, #144	; 0x90
   bd396:	4607      	mov	r7, r0
   bd398:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bd39a:	a814      	add	r0, sp, #80	; 0x50
{
   bd39c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bd39e:	223f      	movs	r2, #63	; 0x3f
{
   bd3a0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bd3a2:	f000 fdf2 	bl	bdf8a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bd3a6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bd3a8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bd3aa:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bd3ae:	f7f7 fb45 	bl	b4a3c <strlen>
   bd3b2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bd3b4:	bb4c      	cbnz	r4, bd40a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bd3b6:	4929      	ldr	r1, [pc, #164]	; (bd45c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bd3b8:	a803      	add	r0, sp, #12
   bd3ba:	f000 fdac 	bl	bdf16 <strcpy>
   bd3be:	ac14      	add	r4, sp, #80	; 0x50
{
   bd3c0:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bd3c2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bd3c6:	45b1      	cmp	r9, r6
   bd3c8:	d934      	bls.n	bd434 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bd3ca:	7823      	ldrb	r3, [r4, #0]
   bd3cc:	2b25      	cmp	r3, #37	; 0x25
   bd3ce:	f106 0a01 	add.w	sl, r6, #1
   bd3d2:	d117      	bne.n	bd404 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bd3d4:	7863      	ldrb	r3, [r4, #1]
   bd3d6:	2b7a      	cmp	r3, #122	; 0x7a
   bd3d8:	d114      	bne.n	bd404 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bd3da:	a803      	add	r0, sp, #12
   bd3dc:	f7f7 fb2e 	bl	b4a3c <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bd3e0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bd3e2:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bd3e4:	1830      	adds	r0, r6, r0
   bd3e6:	4418      	add	r0, r3
   bd3e8:	eba9 0206 	sub.w	r2, r9, r6
   bd3ec:	1ca1      	adds	r1, r4, #2
   bd3ee:	f000 fd1d 	bl	bde2c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bd3f2:	462a      	mov	r2, r5
   bd3f4:	a903      	add	r1, sp, #12
   bd3f6:	4620      	mov	r0, r4
   bd3f8:	f000 fd18 	bl	bde2c <memcpy>
            len = strlen(format_str);
   bd3fc:	a814      	add	r0, sp, #80	; 0x50
   bd3fe:	f7f7 fb1d 	bl	b4a3c <strlen>
   bd402:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bd404:	3401      	adds	r4, #1
   bd406:	4656      	mov	r6, sl
   bd408:	e7db      	b.n	bd3c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bd40a:	233c      	movs	r3, #60	; 0x3c
   bd40c:	fb94 f2f3 	sdiv	r2, r4, r3
   bd410:	2a00      	cmp	r2, #0
   bd412:	bfb8      	it	lt
   bd414:	4252      	neglt	r2, r2
   bd416:	fbb2 f1f3 	udiv	r1, r2, r3
   bd41a:	fb03 2211 	mls	r2, r3, r1, r2
   bd41e:	9200      	str	r2, [sp, #0]
   bd420:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bd424:	4a0e      	ldr	r2, [pc, #56]	; (bd460 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bd426:	fb94 f3f3 	sdiv	r3, r4, r3
   bd42a:	2110      	movs	r1, #16
   bd42c:	a803      	add	r0, sp, #12
   bd42e:	f7fd fa4d 	bl	ba8cc <snprintf>
   bd432:	e7c4      	b.n	bd3be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bd434:	2100      	movs	r1, #0
   bd436:	222e      	movs	r2, #46	; 0x2e
   bd438:	a808      	add	r0, sp, #32
   bd43a:	9107      	str	r1, [sp, #28]
   bd43c:	f000 fd1e 	bl	bde7c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bd440:	4643      	mov	r3, r8
   bd442:	aa14      	add	r2, sp, #80	; 0x50
   bd444:	2132      	movs	r1, #50	; 0x32
   bd446:	a807      	add	r0, sp, #28
   bd448:	f7fd fa78 	bl	ba93c <strftime>
    return String(buf);
   bd44c:	a907      	add	r1, sp, #28
   bd44e:	4638      	mov	r0, r7
   bd450:	f7ff fce1 	bl	bce16 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bd454:	4638      	mov	r0, r7
   bd456:	b024      	add	sp, #144	; 0x90
   bd458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd45c:	000bf7ea 	.word	0x000bf7ea
   bd460:	000bf7ec 	.word	0x000bf7ec

000bd464 <_ZN9TimeClass6formatExPKc>:
{
   bd464:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd466:	b08d      	sub	sp, #52	; 0x34
   bd468:	e9cd 2300 	strd	r2, r3, [sp]
   bd46c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bd46e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bd470:	b915      	cbnz	r5, bd478 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bd472:	4b19      	ldr	r3, [pc, #100]	; (bd4d8 <_ZN9TimeClass6formatExPKc+0x74>)
   bd474:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bd476:	b12d      	cbz	r5, bd484 <_ZN9TimeClass6formatExPKc+0x20>
   bd478:	4b18      	ldr	r3, [pc, #96]	; (bd4dc <_ZN9TimeClass6formatExPKc+0x78>)
   bd47a:	4628      	mov	r0, r5
   bd47c:	6819      	ldr	r1, [r3, #0]
   bd47e:	f7f7 fad3 	bl	b4a28 <strcmp>
   bd482:	b938      	cbnz	r0, bd494 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bd484:	e9dd 2300 	ldrd	r2, r3, [sp]
   bd488:	4620      	mov	r0, r4
   bd48a:	f7ff ff45 	bl	bd318 <_ZN9TimeClass7timeStrEx>
}
   bd48e:	4620      	mov	r0, r4
   bd490:	b00d      	add	sp, #52	; 0x34
   bd492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bd494:	4e12      	ldr	r6, [pc, #72]	; (bd4e0 <_ZN9TimeClass6formatExPKc+0x7c>)
   bd496:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bd498:	4f12      	ldr	r7, [pc, #72]	; (bd4e4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bd49a:	e9d6 3200 	ldrd	r3, r2, [r6]
   bd49e:	185b      	adds	r3, r3, r1
   bd4a0:	9901      	ldr	r1, [sp, #4]
   bd4a2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bd4a6:	e9d7 0100 	ldrd	r0, r1, [r7]
   bd4aa:	181b      	adds	r3, r3, r0
   bd4ac:	eb42 0201 	adc.w	r2, r2, r1
   bd4b0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bd4b4:	2100      	movs	r1, #0
   bd4b6:	2224      	movs	r2, #36	; 0x24
   bd4b8:	a803      	add	r0, sp, #12
   bd4ba:	f000 fcdf 	bl	bde7c <memset>
    localtime_r(&t, &calendar_time);
   bd4be:	a903      	add	r1, sp, #12
   bd4c0:	4668      	mov	r0, sp
   bd4c2:	f7fd fa43 	bl	ba94c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bd4c6:	6832      	ldr	r2, [r6, #0]
   bd4c8:	683b      	ldr	r3, [r7, #0]
   bd4ca:	a903      	add	r1, sp, #12
   bd4cc:	4413      	add	r3, r2
   bd4ce:	4620      	mov	r0, r4
   bd4d0:	462a      	mov	r2, r5
   bd4d2:	f7ff ff5d 	bl	bd390 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bd4d6:	e7da      	b.n	bd48e <_ZN9TimeClass6formatExPKc+0x2a>
   bd4d8:	2003e6a4 	.word	0x2003e6a4
   bd4dc:	2003e3e8 	.word	0x2003e3e8
   bd4e0:	2003e6d8 	.word	0x2003e6d8
   bd4e4:	2003e6d0 	.word	0x2003e6d0

000bd4e8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bd4e8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bd4ea:	2000      	movs	r0, #0
   bd4ec:	f7fc fe52 	bl	ba194 <hal_rtc_time_is_valid>
    if (rtcstate)
   bd4f0:	4604      	mov	r4, r0
   bd4f2:	b9a0      	cbnz	r0, bd51e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bd4f4:	f7fd f878 	bl	ba5e8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bd4f8:	2801      	cmp	r0, #1
   bd4fa:	d110      	bne.n	bd51e <_ZN9TimeClass7isValidEv+0x36>
   bd4fc:	4620      	mov	r0, r4
   bd4fe:	f7fd f8ab 	bl	ba658 <system_thread_get_state>
   bd502:	b960      	cbnz	r0, bd51e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bd504:	f7ff fed6 	bl	bd2b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bd508:	b910      	cbnz	r0, bd510 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bd50a:	f7fd f8ef 	bl	ba6ec <spark_process>
        while (_while() && !_condition()) {
   bd50e:	e7f9      	b.n	bd504 <_ZN9TimeClass7isValidEv+0x1c>
   bd510:	f7ff fed0 	bl	bd2b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bd514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bd518:	2000      	movs	r0, #0
   bd51a:	f7fc be3b 	b.w	ba194 <hal_rtc_time_is_valid>
}
   bd51e:	4620      	mov	r0, r4
   bd520:	bd10      	pop	{r4, pc}

000bd522 <_ZN9TimeClass3nowEv>:
{
   bd522:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bd524:	f7ff ffe0 	bl	bd4e8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bd528:	2210      	movs	r2, #16
   bd52a:	2100      	movs	r1, #0
   bd52c:	4668      	mov	r0, sp
   bd52e:	f000 fca5 	bl	bde7c <memset>
    hal_rtc_get_time(&tv, nullptr);
   bd532:	2100      	movs	r1, #0
   bd534:	4668      	mov	r0, sp
   bd536:	f7fc fe3d 	bl	ba1b4 <hal_rtc_get_time>
}
   bd53a:	9800      	ldr	r0, [sp, #0]
   bd53c:	b005      	add	sp, #20
   bd53e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd544 <_ZN9TimeClass4hourEv>:
{
   bd544:	b508      	push	{r3, lr}
	return hour(now());
   bd546:	f7ff ffec 	bl	bd522 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd54a:	17c1      	asrs	r1, r0, #31
   bd54c:	f7ff fe7c 	bl	bd248 <_ZL22Refresh_UnixTime_Cachex>
}
   bd550:	4b01      	ldr	r3, [pc, #4]	; (bd558 <_ZN9TimeClass4hourEv+0x14>)
   bd552:	6898      	ldr	r0, [r3, #8]
   bd554:	bd08      	pop	{r3, pc}
   bd556:	bf00      	nop
   bd558:	2003e6a8 	.word	0x2003e6a8

000bd55c <_ZN9TimeClass3dayEv>:
{
   bd55c:	b508      	push	{r3, lr}
	return day(now());
   bd55e:	f7ff ffe0 	bl	bd522 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd562:	17c1      	asrs	r1, r0, #31
   bd564:	f7ff fe70 	bl	bd248 <_ZL22Refresh_UnixTime_Cachex>
}
   bd568:	4b01      	ldr	r3, [pc, #4]	; (bd570 <_ZN9TimeClass3dayEv+0x14>)
   bd56a:	68d8      	ldr	r0, [r3, #12]
   bd56c:	bd08      	pop	{r3, pc}
   bd56e:	bf00      	nop
   bd570:	2003e6a8 	.word	0x2003e6a8

000bd574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bd574:	4b02      	ldr	r3, [pc, #8]	; (bd580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bd576:	681a      	ldr	r2, [r3, #0]
   bd578:	4b02      	ldr	r3, [pc, #8]	; (bd584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bd57a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bd57c:	4770      	bx	lr
   bd57e:	bf00      	nop
   bd580:	2003e3e8 	.word	0x2003e3e8
   bd584:	2003e6a4 	.word	0x2003e6a4

000bd588 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bd588:	4770      	bx	lr

000bd58a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd58a:	7441      	strb	r1, [r0, #17]
}
   bd58c:	4770      	bx	lr

000bd58e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bd58e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bd590:	7c00      	ldrb	r0, [r0, #16]
   bd592:	f7fc ff8f 	bl	ba4b4 <hal_usart_available_data_for_write>
}
   bd596:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd59a:	bd08      	pop	{r3, pc}

000bd59c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bd59c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bd59e:	7c00      	ldrb	r0, [r0, #16]
   bd5a0:	f7fc ff60 	bl	ba464 <hal_usart_available>
}
   bd5a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd5a8:	bd08      	pop	{r3, pc}

000bd5aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bd5aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bd5ac:	7c00      	ldrb	r0, [r0, #16]
   bd5ae:	f7fc ff69 	bl	ba484 <hal_usart_peek>
}
   bd5b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd5b6:	bd08      	pop	{r3, pc}

000bd5b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bd5b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bd5ba:	7c00      	ldrb	r0, [r0, #16]
   bd5bc:	f7fc ff5a 	bl	ba474 <hal_usart_read>
}
   bd5c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd5c4:	bd08      	pop	{r3, pc}

000bd5c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bd5c6:	7c00      	ldrb	r0, [r0, #16]
   bd5c8:	f7fc bf64 	b.w	ba494 <hal_usart_flush>

000bd5cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bd5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd5ce:	7c45      	ldrb	r5, [r0, #17]
{
   bd5d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd5d2:	b12d      	cbz	r5, bd5e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bd5d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bd5d6:	b003      	add	sp, #12
   bd5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bd5dc:	f7fc bf3a 	b.w	ba454 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd5e0:	7c00      	ldrb	r0, [r0, #16]
   bd5e2:	9101      	str	r1, [sp, #4]
   bd5e4:	f7fc ff66 	bl	ba4b4 <hal_usart_available_data_for_write>
   bd5e8:	2800      	cmp	r0, #0
   bd5ea:	9901      	ldr	r1, [sp, #4]
   bd5ec:	dcf2      	bgt.n	bd5d4 <_ZN11USARTSerial5writeEh+0x8>
}
   bd5ee:	4628      	mov	r0, r5
   bd5f0:	b003      	add	sp, #12
   bd5f2:	bd30      	pop	{r4, r5, pc}

000bd5f4 <_ZN11USARTSerialD0Ev>:
   bd5f4:	b510      	push	{r4, lr}
   bd5f6:	2114      	movs	r1, #20
   bd5f8:	4604      	mov	r4, r0
   bd5fa:	f7f7 fa66 	bl	b4aca <_ZdlPvj>
   bd5fe:	4620      	mov	r0, r4
   bd600:	bd10      	pop	{r4, pc}
	...

000bd604 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bd604:	b510      	push	{r4, lr}
   bd606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd60a:	4604      	mov	r4, r0
   bd60c:	4608      	mov	r0, r1
   bd60e:	4611      	mov	r1, r2
   bd610:	2200      	movs	r2, #0
   bd612:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd616:	4b04      	ldr	r3, [pc, #16]	; (bd628 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bd618:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd61a:	2301      	movs	r3, #1
  _serial = serial;
   bd61c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd61e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bd620:	f7fc ff58 	bl	ba4d4 <hal_usart_init_ex>
}
   bd624:	4620      	mov	r0, r4
   bd626:	bd10      	pop	{r4, pc}
   bd628:	000bf81c 	.word	0x000bf81c

000bd62c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd62c:	7c00      	ldrb	r0, [r0, #16]
   bd62e:	2300      	movs	r3, #0
   bd630:	f7fc bf48 	b.w	ba4c4 <hal_usart_begin_config>

000bd634 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd634:	2200      	movs	r2, #0
   bd636:	f7ff bff9 	b.w	bd62c <_ZN11USARTSerial5beginEmm>

000bd63a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bd63a:	7c00      	ldrb	r0, [r0, #16]
   bd63c:	f7fc bf02 	b.w	ba444 <hal_usart_end>

000bd640 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd640:	7441      	strb	r1, [r0, #17]
}
   bd642:	4770      	bx	lr

000bd644 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd644:	4770      	bx	lr

000bd646 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd646:	4770      	bx	lr

000bd648 <_ZN9USBSerial4readEv>:
{
   bd648:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd64a:	2100      	movs	r1, #0
   bd64c:	7c00      	ldrb	r0, [r0, #16]
   bd64e:	f7fc ff71 	bl	ba534 <HAL_USB_USART_Receive_Data>
}
   bd652:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd656:	bd08      	pop	{r3, pc}

000bd658 <_ZN9USBSerial4peekEv>:
{
   bd658:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd65a:	2101      	movs	r1, #1
   bd65c:	7c00      	ldrb	r0, [r0, #16]
   bd65e:	f7fc ff69 	bl	ba534 <HAL_USB_USART_Receive_Data>
}
   bd662:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd666:	bd08      	pop	{r3, pc}

000bd668 <_ZN9USBSerial17availableForWriteEv>:
{
   bd668:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd66a:	7c00      	ldrb	r0, [r0, #16]
   bd66c:	f7fc ff5a 	bl	ba524 <HAL_USB_USART_Available_Data_For_Write>
}
   bd670:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd674:	bd08      	pop	{r3, pc}

000bd676 <_ZN9USBSerial9availableEv>:
{
   bd676:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd678:	7c00      	ldrb	r0, [r0, #16]
   bd67a:	f7fc ff4b 	bl	ba514 <HAL_USB_USART_Available_Data>
}
   bd67e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd682:	bd08      	pop	{r3, pc}

000bd684 <_ZN9USBSerial5writeEh>:
{
   bd684:	b513      	push	{r0, r1, r4, lr}
   bd686:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd688:	7c00      	ldrb	r0, [r0, #16]
{
   bd68a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd68c:	f7fc ff4a 	bl	ba524 <HAL_USB_USART_Available_Data_For_Write>
   bd690:	2800      	cmp	r0, #0
   bd692:	9901      	ldr	r1, [sp, #4]
   bd694:	dc01      	bgt.n	bd69a <_ZN9USBSerial5writeEh+0x16>
   bd696:	7c60      	ldrb	r0, [r4, #17]
   bd698:	b120      	cbz	r0, bd6a4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd69a:	7c20      	ldrb	r0, [r4, #16]
   bd69c:	f7fc ff52 	bl	ba544 <HAL_USB_USART_Send_Data>
   bd6a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd6a4:	b002      	add	sp, #8
   bd6a6:	bd10      	pop	{r4, pc}

000bd6a8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd6a8:	7c00      	ldrb	r0, [r0, #16]
   bd6aa:	f7fc bf53 	b.w	ba554 <HAL_USB_USART_Flush_Data>

000bd6ae <_ZN9USBSerialD0Ev>:
   bd6ae:	b510      	push	{r4, lr}
   bd6b0:	2114      	movs	r1, #20
   bd6b2:	4604      	mov	r4, r0
   bd6b4:	f7f7 fa09 	bl	b4aca <_ZdlPvj>
   bd6b8:	4620      	mov	r0, r4
   bd6ba:	bd10      	pop	{r4, pc}

000bd6bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd6bc:	b510      	push	{r4, lr}
   bd6be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd6c2:	4604      	mov	r4, r0
   bd6c4:	4608      	mov	r0, r1
   bd6c6:	2100      	movs	r1, #0
   bd6c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd6cc:	4b04      	ldr	r3, [pc, #16]	; (bd6e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd6ce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd6d0:	2301      	movs	r3, #1
  _serial = serial;
   bd6d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd6d4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd6d6:	4611      	mov	r1, r2
   bd6d8:	f7fc ff04 	bl	ba4e4 <HAL_USB_USART_Init>
}
   bd6dc:	4620      	mov	r0, r4
   bd6de:	bd10      	pop	{r4, pc}
   bd6e0:	000bf850 	.word	0x000bf850

000bd6e4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd6e4:	7c00      	ldrb	r0, [r0, #16]
   bd6e6:	2200      	movs	r2, #0
   bd6e8:	f7fc bf04 	b.w	ba4f4 <HAL_USB_USART_Begin>

000bd6ec <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bd6ec:	7c00      	ldrb	r0, [r0, #16]
   bd6ee:	f7fc bf09 	b.w	ba504 <HAL_USB_USART_End>

000bd6f2 <_Z19acquireSerialBufferv>:
{
   bd6f2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd6f4:	2214      	movs	r2, #20
{
   bd6f6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd6f8:	2100      	movs	r1, #0
   bd6fa:	f000 fbbf 	bl	bde7c <memset>
}
   bd6fe:	4620      	mov	r0, r4
   bd700:	bd10      	pop	{r4, pc}
	...

000bd704 <_Z16_fetch_usbserialv>:
{
   bd704:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd706:	4c0f      	ldr	r4, [pc, #60]	; (bd744 <_Z16_fetch_usbserialv+0x40>)
{
   bd708:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd70a:	a803      	add	r0, sp, #12
   bd70c:	f7ff fff1 	bl	bd6f2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd710:	7821      	ldrb	r1, [r4, #0]
   bd712:	f3bf 8f5b 	dmb	ish
   bd716:	f011 0101 	ands.w	r1, r1, #1
   bd71a:	d10f      	bne.n	bd73c <_Z16_fetch_usbserialv+0x38>
   bd71c:	4620      	mov	r0, r4
   bd71e:	9101      	str	r1, [sp, #4]
   bd720:	f7f7 f9e2 	bl	b4ae8 <__cxa_guard_acquire>
   bd724:	9901      	ldr	r1, [sp, #4]
   bd726:	b148      	cbz	r0, bd73c <_Z16_fetch_usbserialv+0x38>
   bd728:	aa03      	add	r2, sp, #12
   bd72a:	4807      	ldr	r0, [pc, #28]	; (bd748 <_Z16_fetch_usbserialv+0x44>)
   bd72c:	f7ff ffc6 	bl	bd6bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd730:	4620      	mov	r0, r4
   bd732:	f7f7 f9de 	bl	b4af2 <__cxa_guard_release>
   bd736:	4805      	ldr	r0, [pc, #20]	; (bd74c <_Z16_fetch_usbserialv+0x48>)
   bd738:	f000 fb48 	bl	bddcc <atexit>
	return _usbserial;
}
   bd73c:	4802      	ldr	r0, [pc, #8]	; (bd748 <_Z16_fetch_usbserialv+0x44>)
   bd73e:	b008      	add	sp, #32
   bd740:	bd10      	pop	{r4, pc}
   bd742:	bf00      	nop
   bd744:	2003e6e8 	.word	0x2003e6e8
   bd748:	2003e6ec 	.word	0x2003e6ec
   bd74c:	000bd645 	.word	0x000bd645

000bd750 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd750:	4b01      	ldr	r3, [pc, #4]	; (bd758 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd752:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd754:	4770      	bx	lr
   bd756:	bf00      	nop
   bd758:	2003e3f0 	.word	0x2003e3f0

000bd75c <serialEventRun>:
{
   bd75c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd75e:	4b0b      	ldr	r3, [pc, #44]	; (bd78c <serialEventRun+0x30>)
   bd760:	b143      	cbz	r3, bd774 <serialEventRun+0x18>
   bd762:	f7ff ffcf 	bl	bd704 <_Z16_fetch_usbserialv>
   bd766:	6803      	ldr	r3, [r0, #0]
   bd768:	691b      	ldr	r3, [r3, #16]
   bd76a:	4798      	blx	r3
   bd76c:	2800      	cmp	r0, #0
   bd76e:	dd01      	ble.n	bd774 <serialEventRun+0x18>
        serialEvent();
   bd770:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd774:	4b06      	ldr	r3, [pc, #24]	; (bd790 <serialEventRun+0x34>)
   bd776:	b143      	cbz	r3, bd78a <serialEventRun+0x2e>
   bd778:	f000 f9ca 	bl	bdb10 <_Z22__fetch_global_Serial1v>
   bd77c:	6803      	ldr	r3, [r0, #0]
   bd77e:	691b      	ldr	r3, [r3, #16]
   bd780:	4798      	blx	r3
   bd782:	2800      	cmp	r0, #0
   bd784:	dd01      	ble.n	bd78a <serialEventRun+0x2e>
        serialEvent1();
   bd786:	f3af 8000 	nop.w
}
   bd78a:	bd08      	pop	{r3, pc}
	...

000bd794 <_post_loop>:
{
   bd794:	b508      	push	{r3, lr}
	serialEventRun();
   bd796:	f7ff ffe1 	bl	bd75c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd79a:	f7fc fcf3 	bl	ba184 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd79e:	4b01      	ldr	r3, [pc, #4]	; (bd7a4 <_post_loop+0x10>)
   bd7a0:	6018      	str	r0, [r3, #0]
}
   bd7a2:	bd08      	pop	{r3, pc}
   bd7a4:	2003e714 	.word	0x2003e714

000bd7a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd7a8:	4805      	ldr	r0, [pc, #20]	; (bd7c0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bd7aa:	4a06      	ldr	r2, [pc, #24]	; (bd7c4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bd7ac:	4906      	ldr	r1, [pc, #24]	; (bd7c8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bd7ae:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd7b0:	1a12      	subs	r2, r2, r0
   bd7b2:	f000 fb3b 	bl	bde2c <memcpy>
    __backup_sram_signature = signature;
   bd7b6:	4b05      	ldr	r3, [pc, #20]	; (bd7cc <_Z33system_initialize_user_backup_ramv+0x24>)
   bd7b8:	4a05      	ldr	r2, [pc, #20]	; (bd7d0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bd7ba:	601a      	str	r2, [r3, #0]
}
   bd7bc:	bd08      	pop	{r3, pc}
   bd7be:	bf00      	nop
   bd7c0:	2003f400 	.word	0x2003f400
   bd7c4:	2003f404 	.word	0x2003f404
   bd7c8:	000bfc1c 	.word	0x000bfc1c
   bd7cc:	2003f400 	.word	0x2003f400
   bd7d0:	9a271c1e 	.word	0x9a271c1e

000bd7d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd7d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd7d6:	2300      	movs	r3, #0
   bd7d8:	9300      	str	r3, [sp, #0]
   bd7da:	461a      	mov	r2, r3
   bd7dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd7e0:	f7fc ff54 	bl	ba68c <system_ctrl_set_result>
}
   bd7e4:	b003      	add	sp, #12
   bd7e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd7ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd7ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd7ee:	8843      	ldrh	r3, [r0, #2]
   bd7f0:	2b0a      	cmp	r3, #10
   bd7f2:	d008      	beq.n	bd806 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd7f4:	2b50      	cmp	r3, #80	; 0x50
   bd7f6:	d10b      	bne.n	bd810 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd7f8:	4b09      	ldr	r3, [pc, #36]	; (bd820 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd7fa:	681b      	ldr	r3, [r3, #0]
   bd7fc:	b14b      	cbz	r3, bd812 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd7fe:	b003      	add	sp, #12
   bd800:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd804:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd806:	f7ff ffe5 	bl	bd7d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd80a:	b003      	add	sp, #12
   bd80c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd810:	2300      	movs	r3, #0
   bd812:	9300      	str	r3, [sp, #0]
   bd814:	461a      	mov	r2, r3
   bd816:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd81a:	f7fc ff37 	bl	ba68c <system_ctrl_set_result>
}
   bd81e:	e7f4      	b.n	bd80a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd820:	2003e704 	.word	0x2003e704

000bd824 <module_user_init_hook>:
{
   bd824:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd826:	4812      	ldr	r0, [pc, #72]	; (bd870 <module_user_init_hook+0x4c>)
   bd828:	2100      	movs	r1, #0
   bd82a:	f7fd f87f 	bl	ba92c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd82e:	4b11      	ldr	r3, [pc, #68]	; (bd874 <module_user_init_hook+0x50>)
   bd830:	681a      	ldr	r2, [r3, #0]
   bd832:	4b11      	ldr	r3, [pc, #68]	; (bd878 <module_user_init_hook+0x54>)
   bd834:	429a      	cmp	r2, r3
   bd836:	4b11      	ldr	r3, [pc, #68]	; (bd87c <module_user_init_hook+0x58>)
   bd838:	bf0c      	ite	eq
   bd83a:	2201      	moveq	r2, #1
   bd83c:	2200      	movne	r2, #0
   bd83e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd840:	d001      	beq.n	bd846 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd842:	f7ff ffb1 	bl	bd7a8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd846:	f7fc fc85 	bl	ba154 <HAL_RNG_GetRandomNumber>
   bd84a:	4604      	mov	r4, r0
    srand(seed);
   bd84c:	f000 fb1e 	bl	bde8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd850:	4b0b      	ldr	r3, [pc, #44]	; (bd880 <module_user_init_hook+0x5c>)
   bd852:	b113      	cbz	r3, bd85a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd854:	4620      	mov	r0, r4
   bd856:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd85a:	2100      	movs	r1, #0
   bd85c:	4808      	ldr	r0, [pc, #32]	; (bd880 <module_user_init_hook+0x5c>)
   bd85e:	f7fc ff8d 	bl	ba77c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd866:	4807      	ldr	r0, [pc, #28]	; (bd884 <module_user_init_hook+0x60>)
   bd868:	2100      	movs	r1, #0
   bd86a:	f7fc bf05 	b.w	ba678 <system_ctrl_set_app_request_handler>
   bd86e:	bf00      	nop
   bd870:	000bd751 	.word	0x000bd751
   bd874:	2003f400 	.word	0x2003f400
   bd878:	9a271c1e 	.word	0x9a271c1e
   bd87c:	2003e700 	.word	0x2003e700
   bd880:	00000000 	.word	0x00000000
   bd884:	000bd7ed 	.word	0x000bd7ed

000bd888 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bd888:	b508      	push	{r3, lr}
   bd88a:	4b02      	ldr	r3, [pc, #8]	; (bd894 <spark_protocol_instance+0xc>)
   bd88c:	681b      	ldr	r3, [r3, #0]
   bd88e:	681b      	ldr	r3, [r3, #0]
   bd890:	9301      	str	r3, [sp, #4]
   bd892:	bd08      	pop	{r3, pc}
   bd894:	0003025c 	.word	0x0003025c

000bd898 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bd898:	b508      	push	{r3, lr}
   bd89a:	4b02      	ldr	r3, [pc, #8]	; (bd8a4 <spark_protocol_set_product_id+0xc>)
   bd89c:	681b      	ldr	r3, [r3, #0]
   bd89e:	685b      	ldr	r3, [r3, #4]
   bd8a0:	9301      	str	r3, [sp, #4]
   bd8a2:	bd08      	pop	{r3, pc}
   bd8a4:	0003025c 	.word	0x0003025c

000bd8a8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bd8a8:	b508      	push	{r3, lr}
   bd8aa:	4b02      	ldr	r3, [pc, #8]	; (bd8b4 <spark_protocol_set_product_firmware_version+0xc>)
   bd8ac:	681b      	ldr	r3, [r3, #0]
   bd8ae:	689b      	ldr	r3, [r3, #8]
   bd8b0:	9301      	str	r3, [sp, #4]
   bd8b2:	bd08      	pop	{r3, pc}
   bd8b4:	0003025c 	.word	0x0003025c

000bd8b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd8b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bd8ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd8bc:	d902      	bls.n	bd8c4 <pinAvailable+0xc>
    return false;
   bd8be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bd8c0:	b002      	add	sp, #8
   bd8c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bd8c4:	f1a0 030b 	sub.w	r3, r0, #11
   bd8c8:	2b02      	cmp	r3, #2
   bd8ca:	d81a      	bhi.n	bd902 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bd8cc:	4c17      	ldr	r4, [pc, #92]	; (bd92c <pinAvailable+0x74>)
   bd8ce:	7821      	ldrb	r1, [r4, #0]
   bd8d0:	f3bf 8f5b 	dmb	ish
   bd8d4:	f011 0101 	ands.w	r1, r1, #1
   bd8d8:	d10b      	bne.n	bd8f2 <pinAvailable+0x3a>
   bd8da:	4620      	mov	r0, r4
   bd8dc:	9101      	str	r1, [sp, #4]
   bd8de:	f7f7 f903 	bl	b4ae8 <__cxa_guard_acquire>
   bd8e2:	9901      	ldr	r1, [sp, #4]
   bd8e4:	b128      	cbz	r0, bd8f2 <pinAvailable+0x3a>
   bd8e6:	4812      	ldr	r0, [pc, #72]	; (bd930 <pinAvailable+0x78>)
   bd8e8:	f7ff fa16 	bl	bcd18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bd8ec:	4620      	mov	r0, r4
   bd8ee:	f7f7 f900 	bl	b4af2 <__cxa_guard_release>
   bd8f2:	4b0f      	ldr	r3, [pc, #60]	; (bd930 <pinAvailable+0x78>)
   bd8f4:	7818      	ldrb	r0, [r3, #0]
   bd8f6:	f7fc fd35 	bl	ba364 <hal_spi_is_enabled>
   bd8fa:	2800      	cmp	r0, #0
   bd8fc:	d1df      	bne.n	bd8be <pinAvailable+0x6>
  return true; // 'pin' is available
   bd8fe:	2001      	movs	r0, #1
   bd900:	e7de      	b.n	bd8c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bd902:	2801      	cmp	r0, #1
   bd904:	d809      	bhi.n	bd91a <pinAvailable+0x62>
   bd906:	f000 f89f 	bl	bda48 <_Z19__fetch_global_Wirev>
   bd90a:	2100      	movs	r1, #0
   bd90c:	7c00      	ldrb	r0, [r0, #16]
   bd90e:	f7fc fce1 	bl	ba2d4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bd912:	f080 0001 	eor.w	r0, r0, #1
   bd916:	b2c0      	uxtb	r0, r0
   bd918:	e7d2      	b.n	bd8c0 <pinAvailable+0x8>
   bd91a:	3809      	subs	r0, #9
   bd91c:	2801      	cmp	r0, #1
   bd91e:	d8ee      	bhi.n	bd8fe <pinAvailable+0x46>
   bd920:	f000 f8f6 	bl	bdb10 <_Z22__fetch_global_Serial1v>
   bd924:	7c00      	ldrb	r0, [r0, #16]
   bd926:	f7fc fdbd 	bl	ba4a4 <hal_usart_is_enabled>
   bd92a:	e7f2      	b.n	bd912 <pinAvailable+0x5a>
   bd92c:	2003e708 	.word	0x2003e708
   bd930:	2003e70c 	.word	0x2003e70c

000bd934 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd934:	2823      	cmp	r0, #35	; 0x23
{
   bd936:	b538      	push	{r3, r4, r5, lr}
   bd938:	4604      	mov	r4, r0
   bd93a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd93c:	d80a      	bhi.n	bd954 <pinMode+0x20>
   bd93e:	29ff      	cmp	r1, #255	; 0xff
   bd940:	d008      	beq.n	bd954 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bd942:	f7ff ffb9 	bl	bd8b8 <pinAvailable>
   bd946:	b128      	cbz	r0, bd954 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bd948:	4629      	mov	r1, r5
   bd94a:	4620      	mov	r0, r4
}
   bd94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bd950:	f7fc bc48 	b.w	ba1e4 <hal_gpio_mode>
}
   bd954:	bd38      	pop	{r3, r4, r5, pc}

000bd956 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bd956:	b538      	push	{r3, r4, r5, lr}
   bd958:	4604      	mov	r4, r0
   bd95a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bd95c:	f7fc fc4a 	bl	ba1f4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bd960:	28ff      	cmp	r0, #255	; 0xff
   bd962:	d010      	beq.n	bd986 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bd964:	2806      	cmp	r0, #6
   bd966:	d804      	bhi.n	bd972 <digitalWrite+0x1c>
   bd968:	234d      	movs	r3, #77	; 0x4d
   bd96a:	fa23 f000 	lsr.w	r0, r3, r0
   bd96e:	07c3      	lsls	r3, r0, #31
   bd970:	d409      	bmi.n	bd986 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bd972:	4620      	mov	r0, r4
   bd974:	f7ff ffa0 	bl	bd8b8 <pinAvailable>
   bd978:	b128      	cbz	r0, bd986 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bd97a:	4629      	mov	r1, r5
   bd97c:	4620      	mov	r0, r4
}
   bd97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bd982:	f7fc bc3f 	b.w	ba204 <hal_gpio_write>
}
   bd986:	bd38      	pop	{r3, r4, r5, pc}

000bd988 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bd988:	b510      	push	{r4, lr}
   bd98a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bd98c:	f7fc fc32 	bl	ba1f4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bd990:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bd992:	b2db      	uxtb	r3, r3
   bd994:	2b01      	cmp	r3, #1
   bd996:	d908      	bls.n	bd9aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bd998:	4620      	mov	r0, r4
   bd99a:	f7ff ff8d 	bl	bd8b8 <pinAvailable>
   bd99e:	b120      	cbz	r0, bd9aa <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bd9a0:	4620      	mov	r0, r4
}
   bd9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bd9a6:	f7fc bc35 	b.w	ba214 <hal_gpio_read>
}
   bd9aa:	2000      	movs	r0, #0
   bd9ac:	bd10      	pop	{r4, pc}

000bd9ae <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bd9ae:	280d      	cmp	r0, #13
{
   bd9b0:	b510      	push	{r4, lr}
   bd9b2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bd9b4:	bf9c      	itt	ls
   bd9b6:	340e      	addls	r4, #14
   bd9b8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bd9ba:	4620      	mov	r0, r4
   bd9bc:	f7ff ff7c 	bl	bd8b8 <pinAvailable>
   bd9c0:	b150      	cbz	r0, bd9d8 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bd9c2:	2103      	movs	r1, #3
   bd9c4:	4620      	mov	r0, r4
   bd9c6:	f7fc fc05 	bl	ba1d4 <hal_pin_validate_function>
   bd9ca:	2803      	cmp	r0, #3
   bd9cc:	d104      	bne.n	bd9d8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bd9ce:	4620      	mov	r0, r4
}
   bd9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bd9d4:	f7fc bc36 	b.w	ba244 <hal_adc_read>
}
   bd9d8:	2000      	movs	r0, #0
   bd9da:	bd10      	pop	{r4, pc}

000bd9dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd9dc:	4770      	bx	lr

000bd9de <__tcf_1>:
   bd9de:	4770      	bx	lr

000bd9e0 <_Z17acquireWireBufferv>:
{
   bd9e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd9e2:	4b0a      	ldr	r3, [pc, #40]	; (bda0c <_Z17acquireWireBufferv+0x2c>)
   bd9e4:	6003      	str	r3, [r0, #0]
   bd9e6:	2301      	movs	r3, #1
{
   bd9e8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd9ea:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bd9ec:	4908      	ldr	r1, [pc, #32]	; (bda10 <_Z17acquireWireBufferv+0x30>)
   bd9ee:	2020      	movs	r0, #32
   bd9f0:	f000 f8b4 	bl	bdb5c <_ZnajRKSt9nothrow_t>
	};
   bd9f4:	2520      	movs	r5, #32
   bd9f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bd9f8:	4905      	ldr	r1, [pc, #20]	; (bda10 <_Z17acquireWireBufferv+0x30>)
	};
   bd9fa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bd9fc:	4628      	mov	r0, r5
   bd9fe:	f000 f8ad 	bl	bdb5c <_ZnajRKSt9nothrow_t>
	};
   bda02:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bda06:	4620      	mov	r0, r4
   bda08:	bd38      	pop	{r3, r4, r5, pc}
   bda0a:	bf00      	nop
   bda0c:	00010018 	.word	0x00010018
   bda10:	000bf87c 	.word	0x000bf87c

000bda14 <_Z18acquireWire1Bufferv>:
{
   bda14:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bda16:	4b0a      	ldr	r3, [pc, #40]	; (bda40 <_Z18acquireWire1Bufferv+0x2c>)
   bda18:	6003      	str	r3, [r0, #0]
   bda1a:	2301      	movs	r3, #1
{
   bda1c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bda1e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bda20:	4908      	ldr	r1, [pc, #32]	; (bda44 <_Z18acquireWire1Bufferv+0x30>)
   bda22:	2020      	movs	r0, #32
   bda24:	f000 f89a 	bl	bdb5c <_ZnajRKSt9nothrow_t>
	};
   bda28:	2520      	movs	r5, #32
   bda2a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bda2c:	4905      	ldr	r1, [pc, #20]	; (bda44 <_Z18acquireWire1Bufferv+0x30>)
	};
   bda2e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bda30:	4628      	mov	r0, r5
   bda32:	f000 f893 	bl	bdb5c <_ZnajRKSt9nothrow_t>
	};
   bda36:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bda3a:	4620      	mov	r0, r4
   bda3c:	bd38      	pop	{r3, r4, r5, pc}
   bda3e:	bf00      	nop
   bda40:	00010018 	.word	0x00010018
   bda44:	000bf87c 	.word	0x000bf87c

000bda48 <_Z19__fetch_global_Wirev>:
{
   bda48:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bda4a:	4d0e      	ldr	r5, [pc, #56]	; (bda84 <_Z19__fetch_global_Wirev+0x3c>)
   bda4c:	7829      	ldrb	r1, [r5, #0]
   bda4e:	f3bf 8f5b 	dmb	ish
   bda52:	f011 0401 	ands.w	r4, r1, #1
{
   bda56:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bda58:	d111      	bne.n	bda7e <_Z19__fetch_global_Wirev+0x36>
   bda5a:	4628      	mov	r0, r5
   bda5c:	f7f7 f844 	bl	b4ae8 <__cxa_guard_acquire>
   bda60:	b168      	cbz	r0, bda7e <_Z19__fetch_global_Wirev+0x36>
   bda62:	4668      	mov	r0, sp
   bda64:	f7ff ffbc 	bl	bd9e0 <_Z17acquireWireBufferv>
   bda68:	466a      	mov	r2, sp
   bda6a:	4621      	mov	r1, r4
   bda6c:	4806      	ldr	r0, [pc, #24]	; (bda88 <_Z19__fetch_global_Wirev+0x40>)
   bda6e:	f7fd fcff 	bl	bb470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bda72:	4628      	mov	r0, r5
   bda74:	f7f7 f83d 	bl	b4af2 <__cxa_guard_release>
   bda78:	4804      	ldr	r0, [pc, #16]	; (bda8c <_Z19__fetch_global_Wirev+0x44>)
   bda7a:	f000 f9a7 	bl	bddcc <atexit>
	return wire;
}
   bda7e:	4802      	ldr	r0, [pc, #8]	; (bda88 <_Z19__fetch_global_Wirev+0x40>)
   bda80:	b007      	add	sp, #28
   bda82:	bd30      	pop	{r4, r5, pc}
   bda84:	2003e718 	.word	0x2003e718
   bda88:	2003e720 	.word	0x2003e720
   bda8c:	000bd9dd 	.word	0x000bd9dd

000bda90 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bda90:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bda92:	4c0e      	ldr	r4, [pc, #56]	; (bdacc <_Z20__fetch_global_Wire1v+0x3c>)
   bda94:	7823      	ldrb	r3, [r4, #0]
   bda96:	f3bf 8f5b 	dmb	ish
   bda9a:	07db      	lsls	r3, r3, #31
{
   bda9c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bda9e:	d411      	bmi.n	bdac4 <_Z20__fetch_global_Wire1v+0x34>
   bdaa0:	4620      	mov	r0, r4
   bdaa2:	f7f7 f821 	bl	b4ae8 <__cxa_guard_acquire>
   bdaa6:	b168      	cbz	r0, bdac4 <_Z20__fetch_global_Wire1v+0x34>
   bdaa8:	4668      	mov	r0, sp
   bdaaa:	f7ff ffb3 	bl	bda14 <_Z18acquireWire1Bufferv>
   bdaae:	466a      	mov	r2, sp
   bdab0:	2101      	movs	r1, #1
   bdab2:	4807      	ldr	r0, [pc, #28]	; (bdad0 <_Z20__fetch_global_Wire1v+0x40>)
   bdab4:	f7fd fcdc 	bl	bb470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bdab8:	4620      	mov	r0, r4
   bdaba:	f7f7 f81a 	bl	b4af2 <__cxa_guard_release>
   bdabe:	4805      	ldr	r0, [pc, #20]	; (bdad4 <_Z20__fetch_global_Wire1v+0x44>)
   bdac0:	f000 f984 	bl	bddcc <atexit>
	return wire;
}
   bdac4:	4802      	ldr	r0, [pc, #8]	; (bdad0 <_Z20__fetch_global_Wire1v+0x40>)
   bdac6:	b006      	add	sp, #24
   bdac8:	bd10      	pop	{r4, pc}
   bdaca:	bf00      	nop
   bdacc:	2003e71c 	.word	0x2003e71c
   bdad0:	2003e734 	.word	0x2003e734
   bdad4:	000bd9df 	.word	0x000bd9df

000bdad8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdad8:	4770      	bx	lr
	...

000bdadc <_Z20acquireSerial1Bufferv>:
{
   bdadc:	b538      	push	{r3, r4, r5, lr}
   bdade:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bdae0:	2514      	movs	r5, #20
   bdae2:	462a      	mov	r2, r5
   bdae4:	2100      	movs	r1, #0
   bdae6:	f000 f9c9 	bl	bde7c <memset>
   bdaea:	8025      	strh	r5, [r4, #0]
   bdaec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdaee:	4907      	ldr	r1, [pc, #28]	; (bdb0c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bdaf0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdaf2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bdaf4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdaf6:	f000 f831 	bl	bdb5c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdafa:	4904      	ldr	r1, [pc, #16]	; (bdb0c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bdafc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdafe:	4628      	mov	r0, r5
   bdb00:	f000 f82c 	bl	bdb5c <_ZnajRKSt9nothrow_t>
    };
   bdb04:	60e0      	str	r0, [r4, #12]
}
   bdb06:	4620      	mov	r0, r4
   bdb08:	bd38      	pop	{r3, r4, r5, pc}
   bdb0a:	bf00      	nop
   bdb0c:	000bf87c 	.word	0x000bf87c

000bdb10 <_Z22__fetch_global_Serial1v>:
{
   bdb10:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdb12:	4d0e      	ldr	r5, [pc, #56]	; (bdb4c <_Z22__fetch_global_Serial1v+0x3c>)
   bdb14:	7829      	ldrb	r1, [r5, #0]
   bdb16:	f3bf 8f5b 	dmb	ish
   bdb1a:	f011 0401 	ands.w	r4, r1, #1
{
   bdb1e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdb20:	d111      	bne.n	bdb46 <_Z22__fetch_global_Serial1v+0x36>
   bdb22:	4628      	mov	r0, r5
   bdb24:	f7f6 ffe0 	bl	b4ae8 <__cxa_guard_acquire>
   bdb28:	b168      	cbz	r0, bdb46 <_Z22__fetch_global_Serial1v+0x36>
   bdb2a:	a801      	add	r0, sp, #4
   bdb2c:	f7ff ffd6 	bl	bdadc <_Z20acquireSerial1Bufferv>
   bdb30:	aa01      	add	r2, sp, #4
   bdb32:	4621      	mov	r1, r4
   bdb34:	4806      	ldr	r0, [pc, #24]	; (bdb50 <_Z22__fetch_global_Serial1v+0x40>)
   bdb36:	f7ff fd65 	bl	bd604 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bdb3a:	4628      	mov	r0, r5
   bdb3c:	f7f6 ffd9 	bl	b4af2 <__cxa_guard_release>
   bdb40:	4804      	ldr	r0, [pc, #16]	; (bdb54 <_Z22__fetch_global_Serial1v+0x44>)
   bdb42:	f000 f943 	bl	bddcc <atexit>
    return serial1;
}
   bdb46:	4802      	ldr	r0, [pc, #8]	; (bdb50 <_Z22__fetch_global_Serial1v+0x40>)
   bdb48:	b007      	add	sp, #28
   bdb4a:	bd30      	pop	{r4, r5, pc}
   bdb4c:	2003e748 	.word	0x2003e748
   bdb50:	2003e74c 	.word	0x2003e74c
   bdb54:	000bdad9 	.word	0x000bdad9

000bdb58 <_ZnwjRKSt9nothrow_t>:
   bdb58:	f7f6 bfb3 	b.w	b4ac2 <_Znwj>

000bdb5c <_ZnajRKSt9nothrow_t>:
   bdb5c:	f7f6 bfb3 	b.w	b4ac6 <_Znaj>

000bdb60 <_ZSt17__throw_bad_allocv>:
   bdb60:	b508      	push	{r3, lr}
   bdb62:	f7fc fec3 	bl	ba8ec <abort>

000bdb66 <_ZSt20__throw_length_errorPKc>:
   bdb66:	b508      	push	{r3, lr}
   bdb68:	f7fc fec0 	bl	ba8ec <abort>

000bdb6c <_ZSt25__throw_bad_function_callv>:
   bdb6c:	b508      	push	{r3, lr}
   bdb6e:	f7fc febd 	bl	ba8ec <abort>
	...

000bdb74 <sqrt>:
   bdb74:	b538      	push	{r3, r4, r5, lr}
   bdb76:	ed2d 8b02 	vpush	{d8}
   bdb7a:	ec55 4b10 	vmov	r4, r5, d0
   bdb7e:	f000 f833 	bl	bdbe8 <__ieee754_sqrt>
   bdb82:	4b18      	ldr	r3, [pc, #96]	; (bdbe4 <sqrt+0x70>)
   bdb84:	eeb0 8a40 	vmov.f32	s16, s0
   bdb88:	eef0 8a60 	vmov.f32	s17, s1
   bdb8c:	f993 3000 	ldrsb.w	r3, [r3]
   bdb90:	3301      	adds	r3, #1
   bdb92:	d00d      	beq.n	bdbb0 <sqrt+0x3c>
   bdb94:	4622      	mov	r2, r4
   bdb96:	462b      	mov	r3, r5
   bdb98:	4620      	mov	r0, r4
   bdb9a:	4629      	mov	r1, r5
   bdb9c:	f7f6 fe96 	bl	b48cc <__aeabi_dcmpun>
   bdba0:	b930      	cbnz	r0, bdbb0 <sqrt+0x3c>
   bdba2:	2200      	movs	r2, #0
   bdba4:	2300      	movs	r3, #0
   bdba6:	4620      	mov	r0, r4
   bdba8:	4629      	mov	r1, r5
   bdbaa:	f7f6 fe67 	bl	b487c <__aeabi_dcmplt>
   bdbae:	b930      	cbnz	r0, bdbbe <sqrt+0x4a>
   bdbb0:	eeb0 0a48 	vmov.f32	s0, s16
   bdbb4:	eef0 0a68 	vmov.f32	s1, s17
   bdbb8:	ecbd 8b02 	vpop	{d8}
   bdbbc:	bd38      	pop	{r3, r4, r5, pc}
   bdbbe:	f7fc fea5 	bl	ba90c <__errno>
   bdbc2:	2200      	movs	r2, #0
   bdbc4:	2300      	movs	r3, #0
   bdbc6:	2121      	movs	r1, #33	; 0x21
   bdbc8:	6001      	str	r1, [r0, #0]
   bdbca:	4610      	mov	r0, r2
   bdbcc:	4619      	mov	r1, r3
   bdbce:	f7f6 fd0d 	bl	b45ec <__aeabi_ddiv>
   bdbd2:	ec41 0b18 	vmov	d8, r0, r1
   bdbd6:	eeb0 0a48 	vmov.f32	s0, s16
   bdbda:	eef0 0a68 	vmov.f32	s1, s17
   bdbde:	ecbd 8b02 	vpop	{d8}
   bdbe2:	bd38      	pop	{r3, r4, r5, pc}
   bdbe4:	2003e3ec 	.word	0x2003e3ec

000bdbe8 <__ieee754_sqrt>:
   bdbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdbec:	4a63      	ldr	r2, [pc, #396]	; (bdd7c <__ieee754_sqrt+0x194>)
   bdbee:	ec55 4b10 	vmov	r4, r5, d0
   bdbf2:	43aa      	bics	r2, r5
   bdbf4:	f000 809f 	beq.w	bdd36 <__ieee754_sqrt+0x14e>
   bdbf8:	2d00      	cmp	r5, #0
   bdbfa:	ee10 ca10 	vmov	ip, s0
   bdbfe:	462b      	mov	r3, r5
   bdc00:	dd54      	ble.n	bdcac <__ieee754_sqrt+0xc4>
   bdc02:	1529      	asrs	r1, r5, #20
   bdc04:	d063      	beq.n	bdcce <__ieee754_sqrt+0xe6>
   bdc06:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bdc0a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bdc0e:	07c9      	lsls	r1, r1, #31
   bdc10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdc14:	d404      	bmi.n	bdc20 <__ieee754_sqrt+0x38>
   bdc16:	005b      	lsls	r3, r3, #1
   bdc18:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bdc1c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bdc20:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bdc24:	2600      	movs	r6, #0
   bdc26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bdc2a:	107f      	asrs	r7, r7, #1
   bdc2c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bdc30:	f04f 0e16 	mov.w	lr, #22
   bdc34:	4634      	mov	r4, r6
   bdc36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bdc3a:	18a1      	adds	r1, r4, r2
   bdc3c:	4299      	cmp	r1, r3
   bdc3e:	dc02      	bgt.n	bdc46 <__ieee754_sqrt+0x5e>
   bdc40:	1a5b      	subs	r3, r3, r1
   bdc42:	188c      	adds	r4, r1, r2
   bdc44:	4416      	add	r6, r2
   bdc46:	005b      	lsls	r3, r3, #1
   bdc48:	f1be 0e01 	subs.w	lr, lr, #1
   bdc4c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bdc50:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bdc54:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bdc58:	d1ef      	bne.n	bdc3a <__ieee754_sqrt+0x52>
   bdc5a:	4675      	mov	r5, lr
   bdc5c:	2020      	movs	r0, #32
   bdc5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bdc62:	e00a      	b.n	bdc7a <__ieee754_sqrt+0x92>
   bdc64:	d044      	beq.n	bdcf0 <__ieee754_sqrt+0x108>
   bdc66:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bdc6a:	3801      	subs	r0, #1
   bdc6c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bdc70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bdc74:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bdc78:	d043      	beq.n	bdd02 <__ieee754_sqrt+0x11a>
   bdc7a:	42a3      	cmp	r3, r4
   bdc7c:	eb02 010e 	add.w	r1, r2, lr
   bdc80:	ddf0      	ble.n	bdc64 <__ieee754_sqrt+0x7c>
   bdc82:	2900      	cmp	r1, #0
   bdc84:	eb01 0e02 	add.w	lr, r1, r2
   bdc88:	db0a      	blt.n	bdca0 <__ieee754_sqrt+0xb8>
   bdc8a:	46a0      	mov	r8, r4
   bdc8c:	1b1b      	subs	r3, r3, r4
   bdc8e:	4561      	cmp	r1, ip
   bdc90:	bf88      	it	hi
   bdc92:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bdc96:	ebac 0c01 	sub.w	ip, ip, r1
   bdc9a:	4415      	add	r5, r2
   bdc9c:	4644      	mov	r4, r8
   bdc9e:	e7e2      	b.n	bdc66 <__ieee754_sqrt+0x7e>
   bdca0:	f1be 0f00 	cmp.w	lr, #0
   bdca4:	dbf1      	blt.n	bdc8a <__ieee754_sqrt+0xa2>
   bdca6:	f104 0801 	add.w	r8, r4, #1
   bdcaa:	e7ef      	b.n	bdc8c <__ieee754_sqrt+0xa4>
   bdcac:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bdcb0:	4322      	orrs	r2, r4
   bdcb2:	d038      	beq.n	bdd26 <__ieee754_sqrt+0x13e>
   bdcb4:	2d00      	cmp	r5, #0
   bdcb6:	d14e      	bne.n	bdd56 <__ieee754_sqrt+0x16e>
   bdcb8:	4629      	mov	r1, r5
   bdcba:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bdcbe:	3915      	subs	r1, #21
   bdcc0:	4613      	mov	r3, r2
   bdcc2:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bdcc6:	2a00      	cmp	r2, #0
   bdcc8:	d0f7      	beq.n	bdcba <__ieee754_sqrt+0xd2>
   bdcca:	02d6      	lsls	r6, r2, #11
   bdccc:	d450      	bmi.n	bdd70 <__ieee754_sqrt+0x188>
   bdcce:	2000      	movs	r0, #0
   bdcd0:	005b      	lsls	r3, r3, #1
   bdcd2:	02dd      	lsls	r5, r3, #11
   bdcd4:	4604      	mov	r4, r0
   bdcd6:	f100 0001 	add.w	r0, r0, #1
   bdcda:	d5f9      	bpl.n	bdcd0 <__ieee754_sqrt+0xe8>
   bdcdc:	461a      	mov	r2, r3
   bdcde:	4663      	mov	r3, ip
   bdce0:	fa0c fc00 	lsl.w	ip, ip, r0
   bdce4:	f1c0 0020 	rsb	r0, r0, #32
   bdce8:	40c3      	lsrs	r3, r0
   bdcea:	1b09      	subs	r1, r1, r4
   bdcec:	4313      	orrs	r3, r2
   bdcee:	e78a      	b.n	bdc06 <__ieee754_sqrt+0x1e>
   bdcf0:	4561      	cmp	r1, ip
   bdcf2:	d8b8      	bhi.n	bdc66 <__ieee754_sqrt+0x7e>
   bdcf4:	2900      	cmp	r1, #0
   bdcf6:	eb01 0e02 	add.w	lr, r1, r2
   bdcfa:	dbd1      	blt.n	bdca0 <__ieee754_sqrt+0xb8>
   bdcfc:	4698      	mov	r8, r3
   bdcfe:	2300      	movs	r3, #0
   bdd00:	e7c9      	b.n	bdc96 <__ieee754_sqrt+0xae>
   bdd02:	ea53 030c 	orrs.w	r3, r3, ip
   bdd06:	d110      	bne.n	bdd2a <__ieee754_sqrt+0x142>
   bdd08:	0868      	lsrs	r0, r5, #1
   bdd0a:	1071      	asrs	r1, r6, #1
   bdd0c:	07f3      	lsls	r3, r6, #31
   bdd0e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bdd12:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bdd16:	bf48      	it	mi
   bdd18:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bdd1c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bdd20:	4602      	mov	r2, r0
   bdd22:	ec43 2b10 	vmov	d0, r2, r3
   bdd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdd2a:	1c6a      	adds	r2, r5, #1
   bdd2c:	bf16      	itet	ne
   bdd2e:	1c68      	addne	r0, r5, #1
   bdd30:	3601      	addeq	r6, #1
   bdd32:	0840      	lsrne	r0, r0, #1
   bdd34:	e7e9      	b.n	bdd0a <__ieee754_sqrt+0x122>
   bdd36:	ee10 2a10 	vmov	r2, s0
   bdd3a:	ee10 0a10 	vmov	r0, s0
   bdd3e:	462b      	mov	r3, r5
   bdd40:	4629      	mov	r1, r5
   bdd42:	f7f6 fb29 	bl	b4398 <__aeabi_dmul>
   bdd46:	4622      	mov	r2, r4
   bdd48:	462b      	mov	r3, r5
   bdd4a:	f7f6 f96f 	bl	b402c <__adddf3>
   bdd4e:	ec41 0b10 	vmov	d0, r0, r1
   bdd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdd56:	ee10 2a10 	vmov	r2, s0
   bdd5a:	4620      	mov	r0, r4
   bdd5c:	4629      	mov	r1, r5
   bdd5e:	f7f6 f963 	bl	b4028 <__aeabi_dsub>
   bdd62:	4602      	mov	r2, r0
   bdd64:	460b      	mov	r3, r1
   bdd66:	f7f6 fc41 	bl	b45ec <__aeabi_ddiv>
   bdd6a:	ec41 0b10 	vmov	d0, r0, r1
   bdd6e:	e7da      	b.n	bdd26 <__ieee754_sqrt+0x13e>
   bdd70:	4663      	mov	r3, ip
   bdd72:	2020      	movs	r0, #32
   bdd74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bdd78:	e7b6      	b.n	bdce8 <__ieee754_sqrt+0x100>
   bdd7a:	bf00      	nop
   bdd7c:	7ff00000 	.word	0x7ff00000

000bdd80 <asctime_r>:
   bdd80:	b510      	push	{r4, lr}
   bdd82:	460c      	mov	r4, r1
   bdd84:	6941      	ldr	r1, [r0, #20]
   bdd86:	6903      	ldr	r3, [r0, #16]
   bdd88:	6982      	ldr	r2, [r0, #24]
   bdd8a:	b086      	sub	sp, #24
   bdd8c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bdd90:	9104      	str	r1, [sp, #16]
   bdd92:	6801      	ldr	r1, [r0, #0]
   bdd94:	9103      	str	r1, [sp, #12]
   bdd96:	6841      	ldr	r1, [r0, #4]
   bdd98:	9102      	str	r1, [sp, #8]
   bdd9a:	6881      	ldr	r1, [r0, #8]
   bdd9c:	9101      	str	r1, [sp, #4]
   bdd9e:	68c1      	ldr	r1, [r0, #12]
   bdda0:	9100      	str	r1, [sp, #0]
   bdda2:	4907      	ldr	r1, [pc, #28]	; (bddc0 <asctime_r+0x40>)
   bdda4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bdda8:	440b      	add	r3, r1
   bddaa:	4906      	ldr	r1, [pc, #24]	; (bddc4 <asctime_r+0x44>)
   bddac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bddb0:	440a      	add	r2, r1
   bddb2:	4620      	mov	r0, r4
   bddb4:	4904      	ldr	r1, [pc, #16]	; (bddc8 <asctime_r+0x48>)
   bddb6:	f7fc fd79 	bl	ba8ac <siprintf>
   bddba:	4620      	mov	r0, r4
   bddbc:	b006      	add	sp, #24
   bddbe:	bd10      	pop	{r4, pc}
   bddc0:	000bf8b2 	.word	0x000bf8b2
   bddc4:	000bf89d 	.word	0x000bf89d
   bddc8:	000bf87d 	.word	0x000bf87d

000bddcc <atexit>:
   bddcc:	2300      	movs	r3, #0
   bddce:	4601      	mov	r1, r0
   bddd0:	461a      	mov	r2, r3
   bddd2:	4618      	mov	r0, r3
   bddd4:	f000 ba24 	b.w	be220 <__register_exitproc>

000bddd8 <atoi>:
   bddd8:	220a      	movs	r2, #10
   bddda:	2100      	movs	r1, #0
   bdddc:	f000 b9aa 	b.w	be134 <strtol>

000bdde0 <gmtime>:
   bdde0:	b538      	push	{r3, r4, r5, lr}
   bdde2:	4b0b      	ldr	r3, [pc, #44]	; (bde10 <gmtime+0x30>)
   bdde4:	681d      	ldr	r5, [r3, #0]
   bdde6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bdde8:	4604      	mov	r4, r0
   bddea:	b953      	cbnz	r3, bde02 <gmtime+0x22>
   bddec:	2024      	movs	r0, #36	; 0x24
   bddee:	f7fc fd45 	bl	ba87c <malloc>
   bddf2:	4602      	mov	r2, r0
   bddf4:	63e8      	str	r0, [r5, #60]	; 0x3c
   bddf6:	b920      	cbnz	r0, bde02 <gmtime+0x22>
   bddf8:	4b06      	ldr	r3, [pc, #24]	; (bde14 <gmtime+0x34>)
   bddfa:	4807      	ldr	r0, [pc, #28]	; (bde18 <gmtime+0x38>)
   bddfc:	2139      	movs	r1, #57	; 0x39
   bddfe:	f7fc fd8d 	bl	ba91c <__assert_func>
   bde02:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bde04:	4620      	mov	r0, r4
   bde06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bde0a:	f7fc bda7 	b.w	ba95c <gmtime_r>
   bde0e:	bf00      	nop
   bde10:	2003e3f0 	.word	0x2003e3f0
   bde14:	000bf8d6 	.word	0x000bf8d6
   bde18:	000bf8ed 	.word	0x000bf8ed

000bde1c <isprint>:
   bde1c:	4b02      	ldr	r3, [pc, #8]	; (bde28 <isprint+0xc>)
   bde1e:	4418      	add	r0, r3
   bde20:	7840      	ldrb	r0, [r0, #1]
   bde22:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bde26:	4770      	bx	lr
   bde28:	000bf99f 	.word	0x000bf99f

000bde2c <memcpy>:
   bde2c:	440a      	add	r2, r1
   bde2e:	4291      	cmp	r1, r2
   bde30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bde34:	d100      	bne.n	bde38 <memcpy+0xc>
   bde36:	4770      	bx	lr
   bde38:	b510      	push	{r4, lr}
   bde3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bde3e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bde42:	4291      	cmp	r1, r2
   bde44:	d1f9      	bne.n	bde3a <memcpy+0xe>
   bde46:	bd10      	pop	{r4, pc}

000bde48 <memmove>:
   bde48:	4288      	cmp	r0, r1
   bde4a:	b510      	push	{r4, lr}
   bde4c:	eb01 0402 	add.w	r4, r1, r2
   bde50:	d902      	bls.n	bde58 <memmove+0x10>
   bde52:	4284      	cmp	r4, r0
   bde54:	4623      	mov	r3, r4
   bde56:	d807      	bhi.n	bde68 <memmove+0x20>
   bde58:	1e43      	subs	r3, r0, #1
   bde5a:	42a1      	cmp	r1, r4
   bde5c:	d008      	beq.n	bde70 <memmove+0x28>
   bde5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bde62:	f803 2f01 	strb.w	r2, [r3, #1]!
   bde66:	e7f8      	b.n	bde5a <memmove+0x12>
   bde68:	4402      	add	r2, r0
   bde6a:	4601      	mov	r1, r0
   bde6c:	428a      	cmp	r2, r1
   bde6e:	d100      	bne.n	bde72 <memmove+0x2a>
   bde70:	bd10      	pop	{r4, pc}
   bde72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bde76:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bde7a:	e7f7      	b.n	bde6c <memmove+0x24>

000bde7c <memset>:
   bde7c:	4402      	add	r2, r0
   bde7e:	4603      	mov	r3, r0
   bde80:	4293      	cmp	r3, r2
   bde82:	d100      	bne.n	bde86 <memset+0xa>
   bde84:	4770      	bx	lr
   bde86:	f803 1b01 	strb.w	r1, [r3], #1
   bde8a:	e7f9      	b.n	bde80 <memset+0x4>

000bde8c <srand>:
   bde8c:	b538      	push	{r3, r4, r5, lr}
   bde8e:	4b10      	ldr	r3, [pc, #64]	; (bded0 <srand+0x44>)
   bde90:	681d      	ldr	r5, [r3, #0]
   bde92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bde94:	4604      	mov	r4, r0
   bde96:	b9b3      	cbnz	r3, bdec6 <srand+0x3a>
   bde98:	2018      	movs	r0, #24
   bde9a:	f7fc fcef 	bl	ba87c <malloc>
   bde9e:	4602      	mov	r2, r0
   bdea0:	63a8      	str	r0, [r5, #56]	; 0x38
   bdea2:	b920      	cbnz	r0, bdeae <srand+0x22>
   bdea4:	4b0b      	ldr	r3, [pc, #44]	; (bded4 <srand+0x48>)
   bdea6:	480c      	ldr	r0, [pc, #48]	; (bded8 <srand+0x4c>)
   bdea8:	2142      	movs	r1, #66	; 0x42
   bdeaa:	f7fc fd37 	bl	ba91c <__assert_func>
   bdeae:	490b      	ldr	r1, [pc, #44]	; (bdedc <srand+0x50>)
   bdeb0:	4b0b      	ldr	r3, [pc, #44]	; (bdee0 <srand+0x54>)
   bdeb2:	e9c0 1300 	strd	r1, r3, [r0]
   bdeb6:	4b0b      	ldr	r3, [pc, #44]	; (bdee4 <srand+0x58>)
   bdeb8:	6083      	str	r3, [r0, #8]
   bdeba:	230b      	movs	r3, #11
   bdebc:	8183      	strh	r3, [r0, #12]
   bdebe:	2100      	movs	r1, #0
   bdec0:	2001      	movs	r0, #1
   bdec2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bdec6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdec8:	2200      	movs	r2, #0
   bdeca:	611c      	str	r4, [r3, #16]
   bdecc:	615a      	str	r2, [r3, #20]
   bdece:	bd38      	pop	{r3, r4, r5, pc}
   bded0:	2003e3f0 	.word	0x2003e3f0
   bded4:	000bf8d6 	.word	0x000bf8d6
   bded8:	000bf946 	.word	0x000bf946
   bdedc:	abcd330e 	.word	0xabcd330e
   bdee0:	e66d1234 	.word	0xe66d1234
   bdee4:	0005deec 	.word	0x0005deec

000bdee8 <strchr>:
   bdee8:	b2c9      	uxtb	r1, r1
   bdeea:	4603      	mov	r3, r0
   bdeec:	f810 2b01 	ldrb.w	r2, [r0], #1
   bdef0:	b11a      	cbz	r2, bdefa <strchr+0x12>
   bdef2:	428a      	cmp	r2, r1
   bdef4:	d1f9      	bne.n	bdeea <strchr+0x2>
   bdef6:	4618      	mov	r0, r3
   bdef8:	4770      	bx	lr
   bdefa:	2900      	cmp	r1, #0
   bdefc:	bf18      	it	ne
   bdefe:	2300      	movne	r3, #0
   bdf00:	e7f9      	b.n	bdef6 <strchr+0xe>

000bdf02 <strchrnul>:
   bdf02:	b510      	push	{r4, lr}
   bdf04:	4604      	mov	r4, r0
   bdf06:	f7ff ffef 	bl	bdee8 <strchr>
   bdf0a:	b918      	cbnz	r0, bdf14 <strchrnul+0x12>
   bdf0c:	4620      	mov	r0, r4
   bdf0e:	f7f6 fd95 	bl	b4a3c <strlen>
   bdf12:	4420      	add	r0, r4
   bdf14:	bd10      	pop	{r4, pc}

000bdf16 <strcpy>:
   bdf16:	4603      	mov	r3, r0
   bdf18:	f811 2b01 	ldrb.w	r2, [r1], #1
   bdf1c:	f803 2b01 	strb.w	r2, [r3], #1
   bdf20:	2a00      	cmp	r2, #0
   bdf22:	d1f9      	bne.n	bdf18 <strcpy+0x2>
   bdf24:	4770      	bx	lr
	...

000bdf28 <strdup>:
   bdf28:	4b02      	ldr	r3, [pc, #8]	; (bdf34 <strdup+0xc>)
   bdf2a:	4601      	mov	r1, r0
   bdf2c:	6818      	ldr	r0, [r3, #0]
   bdf2e:	f000 b803 	b.w	bdf38 <_strdup_r>
   bdf32:	bf00      	nop
   bdf34:	2003e3f0 	.word	0x2003e3f0

000bdf38 <_strdup_r>:
   bdf38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdf3a:	4604      	mov	r4, r0
   bdf3c:	4608      	mov	r0, r1
   bdf3e:	460d      	mov	r5, r1
   bdf40:	f7f6 fd7c 	bl	b4a3c <strlen>
   bdf44:	1c42      	adds	r2, r0, #1
   bdf46:	4611      	mov	r1, r2
   bdf48:	4620      	mov	r0, r4
   bdf4a:	9201      	str	r2, [sp, #4]
   bdf4c:	f7fc fcd6 	bl	ba8fc <_malloc_r>
   bdf50:	4604      	mov	r4, r0
   bdf52:	b118      	cbz	r0, bdf5c <_strdup_r+0x24>
   bdf54:	9a01      	ldr	r2, [sp, #4]
   bdf56:	4629      	mov	r1, r5
   bdf58:	f7ff ff68 	bl	bde2c <memcpy>
   bdf5c:	4620      	mov	r0, r4
   bdf5e:	b003      	add	sp, #12
   bdf60:	bd30      	pop	{r4, r5, pc}

000bdf62 <strncmp>:
   bdf62:	b510      	push	{r4, lr}
   bdf64:	b17a      	cbz	r2, bdf86 <strncmp+0x24>
   bdf66:	4603      	mov	r3, r0
   bdf68:	3901      	subs	r1, #1
   bdf6a:	1884      	adds	r4, r0, r2
   bdf6c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdf70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bdf74:	4290      	cmp	r0, r2
   bdf76:	d101      	bne.n	bdf7c <strncmp+0x1a>
   bdf78:	42a3      	cmp	r3, r4
   bdf7a:	d101      	bne.n	bdf80 <strncmp+0x1e>
   bdf7c:	1a80      	subs	r0, r0, r2
   bdf7e:	bd10      	pop	{r4, pc}
   bdf80:	2800      	cmp	r0, #0
   bdf82:	d1f3      	bne.n	bdf6c <strncmp+0xa>
   bdf84:	e7fa      	b.n	bdf7c <strncmp+0x1a>
   bdf86:	4610      	mov	r0, r2
   bdf88:	e7f9      	b.n	bdf7e <strncmp+0x1c>

000bdf8a <strncpy>:
   bdf8a:	b510      	push	{r4, lr}
   bdf8c:	3901      	subs	r1, #1
   bdf8e:	4603      	mov	r3, r0
   bdf90:	b132      	cbz	r2, bdfa0 <strncpy+0x16>
   bdf92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bdf96:	f803 4b01 	strb.w	r4, [r3], #1
   bdf9a:	3a01      	subs	r2, #1
   bdf9c:	2c00      	cmp	r4, #0
   bdf9e:	d1f7      	bne.n	bdf90 <strncpy+0x6>
   bdfa0:	441a      	add	r2, r3
   bdfa2:	2100      	movs	r1, #0
   bdfa4:	4293      	cmp	r3, r2
   bdfa6:	d100      	bne.n	bdfaa <strncpy+0x20>
   bdfa8:	bd10      	pop	{r4, pc}
   bdfaa:	f803 1b01 	strb.w	r1, [r3], #1
   bdfae:	e7f9      	b.n	bdfa4 <strncpy+0x1a>

000bdfb0 <strrchr>:
   bdfb0:	b538      	push	{r3, r4, r5, lr}
   bdfb2:	4603      	mov	r3, r0
   bdfb4:	460c      	mov	r4, r1
   bdfb6:	b969      	cbnz	r1, bdfd4 <strrchr+0x24>
   bdfb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdfbc:	f7ff bf94 	b.w	bdee8 <strchr>
   bdfc0:	1c43      	adds	r3, r0, #1
   bdfc2:	4605      	mov	r5, r0
   bdfc4:	4621      	mov	r1, r4
   bdfc6:	4618      	mov	r0, r3
   bdfc8:	f7ff ff8e 	bl	bdee8 <strchr>
   bdfcc:	2800      	cmp	r0, #0
   bdfce:	d1f7      	bne.n	bdfc0 <strrchr+0x10>
   bdfd0:	4628      	mov	r0, r5
   bdfd2:	bd38      	pop	{r3, r4, r5, pc}
   bdfd4:	2500      	movs	r5, #0
   bdfd6:	e7f5      	b.n	bdfc4 <strrchr+0x14>

000bdfd8 <__strtok_r>:
   bdfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdfda:	b908      	cbnz	r0, bdfe0 <__strtok_r+0x8>
   bdfdc:	6810      	ldr	r0, [r2, #0]
   bdfde:	b188      	cbz	r0, be004 <__strtok_r+0x2c>
   bdfe0:	4604      	mov	r4, r0
   bdfe2:	4620      	mov	r0, r4
   bdfe4:	f814 5b01 	ldrb.w	r5, [r4], #1
   bdfe8:	460f      	mov	r7, r1
   bdfea:	f817 6b01 	ldrb.w	r6, [r7], #1
   bdfee:	b91e      	cbnz	r6, bdff8 <__strtok_r+0x20>
   bdff0:	b965      	cbnz	r5, be00c <__strtok_r+0x34>
   bdff2:	6015      	str	r5, [r2, #0]
   bdff4:	4628      	mov	r0, r5
   bdff6:	e005      	b.n	be004 <__strtok_r+0x2c>
   bdff8:	42b5      	cmp	r5, r6
   bdffa:	d1f6      	bne.n	bdfea <__strtok_r+0x12>
   bdffc:	2b00      	cmp	r3, #0
   bdffe:	d1f0      	bne.n	bdfe2 <__strtok_r+0xa>
   be000:	6014      	str	r4, [r2, #0]
   be002:	7003      	strb	r3, [r0, #0]
   be004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   be006:	461c      	mov	r4, r3
   be008:	e00c      	b.n	be024 <__strtok_r+0x4c>
   be00a:	b915      	cbnz	r5, be012 <__strtok_r+0x3a>
   be00c:	f814 3b01 	ldrb.w	r3, [r4], #1
   be010:	460e      	mov	r6, r1
   be012:	f816 5b01 	ldrb.w	r5, [r6], #1
   be016:	42ab      	cmp	r3, r5
   be018:	d1f7      	bne.n	be00a <__strtok_r+0x32>
   be01a:	2b00      	cmp	r3, #0
   be01c:	d0f3      	beq.n	be006 <__strtok_r+0x2e>
   be01e:	2300      	movs	r3, #0
   be020:	f804 3c01 	strb.w	r3, [r4, #-1]
   be024:	6014      	str	r4, [r2, #0]
   be026:	e7ed      	b.n	be004 <__strtok_r+0x2c>

000be028 <strtok_r>:
   be028:	2301      	movs	r3, #1
   be02a:	f7ff bfd5 	b.w	bdfd8 <__strtok_r>
	...

000be030 <_strtol_l.constprop.0>:
   be030:	2b01      	cmp	r3, #1
   be032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be036:	d001      	beq.n	be03c <_strtol_l.constprop.0+0xc>
   be038:	2b24      	cmp	r3, #36	; 0x24
   be03a:	d906      	bls.n	be04a <_strtol_l.constprop.0+0x1a>
   be03c:	f7fc fc66 	bl	ba90c <__errno>
   be040:	2316      	movs	r3, #22
   be042:	6003      	str	r3, [r0, #0]
   be044:	2000      	movs	r0, #0
   be046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be04a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be130 <_strtol_l.constprop.0+0x100>
   be04e:	460d      	mov	r5, r1
   be050:	462e      	mov	r6, r5
   be052:	f815 4b01 	ldrb.w	r4, [r5], #1
   be056:	f814 700c 	ldrb.w	r7, [r4, ip]
   be05a:	f017 0708 	ands.w	r7, r7, #8
   be05e:	d1f7      	bne.n	be050 <_strtol_l.constprop.0+0x20>
   be060:	2c2d      	cmp	r4, #45	; 0x2d
   be062:	d132      	bne.n	be0ca <_strtol_l.constprop.0+0x9a>
   be064:	782c      	ldrb	r4, [r5, #0]
   be066:	2701      	movs	r7, #1
   be068:	1cb5      	adds	r5, r6, #2
   be06a:	2b00      	cmp	r3, #0
   be06c:	d05b      	beq.n	be126 <_strtol_l.constprop.0+0xf6>
   be06e:	2b10      	cmp	r3, #16
   be070:	d109      	bne.n	be086 <_strtol_l.constprop.0+0x56>
   be072:	2c30      	cmp	r4, #48	; 0x30
   be074:	d107      	bne.n	be086 <_strtol_l.constprop.0+0x56>
   be076:	782c      	ldrb	r4, [r5, #0]
   be078:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   be07c:	2c58      	cmp	r4, #88	; 0x58
   be07e:	d14d      	bne.n	be11c <_strtol_l.constprop.0+0xec>
   be080:	786c      	ldrb	r4, [r5, #1]
   be082:	2310      	movs	r3, #16
   be084:	3502      	adds	r5, #2
   be086:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   be08a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be08e:	f04f 0c00 	mov.w	ip, #0
   be092:	fbb8 f9f3 	udiv	r9, r8, r3
   be096:	4666      	mov	r6, ip
   be098:	fb03 8a19 	mls	sl, r3, r9, r8
   be09c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   be0a0:	f1be 0f09 	cmp.w	lr, #9
   be0a4:	d816      	bhi.n	be0d4 <_strtol_l.constprop.0+0xa4>
   be0a6:	4674      	mov	r4, lr
   be0a8:	42a3      	cmp	r3, r4
   be0aa:	dd24      	ble.n	be0f6 <_strtol_l.constprop.0+0xc6>
   be0ac:	f1bc 0f00 	cmp.w	ip, #0
   be0b0:	db1e      	blt.n	be0f0 <_strtol_l.constprop.0+0xc0>
   be0b2:	45b1      	cmp	r9, r6
   be0b4:	d31c      	bcc.n	be0f0 <_strtol_l.constprop.0+0xc0>
   be0b6:	d101      	bne.n	be0bc <_strtol_l.constprop.0+0x8c>
   be0b8:	45a2      	cmp	sl, r4
   be0ba:	db19      	blt.n	be0f0 <_strtol_l.constprop.0+0xc0>
   be0bc:	fb06 4603 	mla	r6, r6, r3, r4
   be0c0:	f04f 0c01 	mov.w	ip, #1
   be0c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   be0c8:	e7e8      	b.n	be09c <_strtol_l.constprop.0+0x6c>
   be0ca:	2c2b      	cmp	r4, #43	; 0x2b
   be0cc:	bf04      	itt	eq
   be0ce:	782c      	ldrbeq	r4, [r5, #0]
   be0d0:	1cb5      	addeq	r5, r6, #2
   be0d2:	e7ca      	b.n	be06a <_strtol_l.constprop.0+0x3a>
   be0d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   be0d8:	f1be 0f19 	cmp.w	lr, #25
   be0dc:	d801      	bhi.n	be0e2 <_strtol_l.constprop.0+0xb2>
   be0de:	3c37      	subs	r4, #55	; 0x37
   be0e0:	e7e2      	b.n	be0a8 <_strtol_l.constprop.0+0x78>
   be0e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   be0e6:	f1be 0f19 	cmp.w	lr, #25
   be0ea:	d804      	bhi.n	be0f6 <_strtol_l.constprop.0+0xc6>
   be0ec:	3c57      	subs	r4, #87	; 0x57
   be0ee:	e7db      	b.n	be0a8 <_strtol_l.constprop.0+0x78>
   be0f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be0f4:	e7e6      	b.n	be0c4 <_strtol_l.constprop.0+0x94>
   be0f6:	f1bc 0f00 	cmp.w	ip, #0
   be0fa:	da05      	bge.n	be108 <_strtol_l.constprop.0+0xd8>
   be0fc:	2322      	movs	r3, #34	; 0x22
   be0fe:	6003      	str	r3, [r0, #0]
   be100:	4646      	mov	r6, r8
   be102:	b942      	cbnz	r2, be116 <_strtol_l.constprop.0+0xe6>
   be104:	4630      	mov	r0, r6
   be106:	e79e      	b.n	be046 <_strtol_l.constprop.0+0x16>
   be108:	b107      	cbz	r7, be10c <_strtol_l.constprop.0+0xdc>
   be10a:	4276      	negs	r6, r6
   be10c:	2a00      	cmp	r2, #0
   be10e:	d0f9      	beq.n	be104 <_strtol_l.constprop.0+0xd4>
   be110:	f1bc 0f00 	cmp.w	ip, #0
   be114:	d000      	beq.n	be118 <_strtol_l.constprop.0+0xe8>
   be116:	1e69      	subs	r1, r5, #1
   be118:	6011      	str	r1, [r2, #0]
   be11a:	e7f3      	b.n	be104 <_strtol_l.constprop.0+0xd4>
   be11c:	2430      	movs	r4, #48	; 0x30
   be11e:	2b00      	cmp	r3, #0
   be120:	d1b1      	bne.n	be086 <_strtol_l.constprop.0+0x56>
   be122:	2308      	movs	r3, #8
   be124:	e7af      	b.n	be086 <_strtol_l.constprop.0+0x56>
   be126:	2c30      	cmp	r4, #48	; 0x30
   be128:	d0a5      	beq.n	be076 <_strtol_l.constprop.0+0x46>
   be12a:	230a      	movs	r3, #10
   be12c:	e7ab      	b.n	be086 <_strtol_l.constprop.0+0x56>
   be12e:	bf00      	nop
   be130:	000bf9a0 	.word	0x000bf9a0

000be134 <strtol>:
   be134:	4613      	mov	r3, r2
   be136:	460a      	mov	r2, r1
   be138:	4601      	mov	r1, r0
   be13a:	4802      	ldr	r0, [pc, #8]	; (be144 <strtol+0x10>)
   be13c:	6800      	ldr	r0, [r0, #0]
   be13e:	f7ff bf77 	b.w	be030 <_strtol_l.constprop.0>
   be142:	bf00      	nop
   be144:	2003e3f0 	.word	0x2003e3f0

000be148 <close>:
   be148:	4b02      	ldr	r3, [pc, #8]	; (be154 <close+0xc>)
   be14a:	4601      	mov	r1, r0
   be14c:	6818      	ldr	r0, [r3, #0]
   be14e:	f000 b8c9 	b.w	be2e4 <_close_r>
   be152:	bf00      	nop
   be154:	2003e3f0 	.word	0x2003e3f0

000be158 <fstat>:
   be158:	4b02      	ldr	r3, [pc, #8]	; (be164 <fstat+0xc>)
   be15a:	460a      	mov	r2, r1
   be15c:	4601      	mov	r1, r0
   be15e:	6818      	ldr	r0, [r3, #0]
   be160:	f000 b8d0 	b.w	be304 <_fstat_r>
   be164:	2003e3f0 	.word	0x2003e3f0

000be168 <lseek>:
   be168:	4613      	mov	r3, r2
   be16a:	460a      	mov	r2, r1
   be16c:	4601      	mov	r1, r0
   be16e:	4802      	ldr	r0, [pc, #8]	; (be178 <lseek+0x10>)
   be170:	6800      	ldr	r0, [r0, #0]
   be172:	f000 b8dd 	b.w	be330 <_lseek_r>
   be176:	bf00      	nop
   be178:	2003e3f0 	.word	0x2003e3f0

000be17c <open>:
   be17c:	b40e      	push	{r1, r2, r3}
   be17e:	b503      	push	{r0, r1, lr}
   be180:	ab03      	add	r3, sp, #12
   be182:	4601      	mov	r1, r0
   be184:	4806      	ldr	r0, [pc, #24]	; (be1a0 <open+0x24>)
   be186:	f853 2b04 	ldr.w	r2, [r3], #4
   be18a:	9301      	str	r3, [sp, #4]
   be18c:	6800      	ldr	r0, [r0, #0]
   be18e:	9b04      	ldr	r3, [sp, #16]
   be190:	f000 f8e0 	bl	be354 <_open_r>
   be194:	b002      	add	sp, #8
   be196:	f85d eb04 	ldr.w	lr, [sp], #4
   be19a:	b003      	add	sp, #12
   be19c:	4770      	bx	lr
   be19e:	bf00      	nop
   be1a0:	2003e3f0 	.word	0x2003e3f0

000be1a4 <read>:
   be1a4:	4613      	mov	r3, r2
   be1a6:	460a      	mov	r2, r1
   be1a8:	4601      	mov	r1, r0
   be1aa:	4802      	ldr	r0, [pc, #8]	; (be1b4 <read+0x10>)
   be1ac:	6800      	ldr	r0, [r0, #0]
   be1ae:	f000 b8e3 	b.w	be378 <_read_r>
   be1b2:	bf00      	nop
   be1b4:	2003e3f0 	.word	0x2003e3f0

000be1b8 <unlink>:
   be1b8:	4b02      	ldr	r3, [pc, #8]	; (be1c4 <unlink+0xc>)
   be1ba:	4601      	mov	r1, r0
   be1bc:	6818      	ldr	r0, [r3, #0]
   be1be:	f000 b80d 	b.w	be1dc <_unlink_r>
   be1c2:	bf00      	nop
   be1c4:	2003e3f0 	.word	0x2003e3f0

000be1c8 <write>:
   be1c8:	4613      	mov	r3, r2
   be1ca:	460a      	mov	r2, r1
   be1cc:	4601      	mov	r1, r0
   be1ce:	4802      	ldr	r0, [pc, #8]	; (be1d8 <write+0x10>)
   be1d0:	6800      	ldr	r0, [r0, #0]
   be1d2:	f000 b813 	b.w	be1fc <_write_r>
   be1d6:	bf00      	nop
   be1d8:	2003e3f0 	.word	0x2003e3f0

000be1dc <_unlink_r>:
   be1dc:	b538      	push	{r3, r4, r5, lr}
   be1de:	4d06      	ldr	r5, [pc, #24]	; (be1f8 <_unlink_r+0x1c>)
   be1e0:	2300      	movs	r3, #0
   be1e2:	4604      	mov	r4, r0
   be1e4:	4608      	mov	r0, r1
   be1e6:	602b      	str	r3, [r5, #0]
   be1e8:	f7fc f904 	bl	ba3f4 <_unlink>
   be1ec:	1c43      	adds	r3, r0, #1
   be1ee:	d102      	bne.n	be1f6 <_unlink_r+0x1a>
   be1f0:	682b      	ldr	r3, [r5, #0]
   be1f2:	b103      	cbz	r3, be1f6 <_unlink_r+0x1a>
   be1f4:	6023      	str	r3, [r4, #0]
   be1f6:	bd38      	pop	{r3, r4, r5, pc}
   be1f8:	2003e7f4 	.word	0x2003e7f4

000be1fc <_write_r>:
   be1fc:	b538      	push	{r3, r4, r5, lr}
   be1fe:	4d07      	ldr	r5, [pc, #28]	; (be21c <_write_r+0x20>)
   be200:	4604      	mov	r4, r0
   be202:	4608      	mov	r0, r1
   be204:	4611      	mov	r1, r2
   be206:	2200      	movs	r2, #0
   be208:	602a      	str	r2, [r5, #0]
   be20a:	461a      	mov	r2, r3
   be20c:	f7fc f8ba 	bl	ba384 <_write>
   be210:	1c43      	adds	r3, r0, #1
   be212:	d102      	bne.n	be21a <_write_r+0x1e>
   be214:	682b      	ldr	r3, [r5, #0]
   be216:	b103      	cbz	r3, be21a <_write_r+0x1e>
   be218:	6023      	str	r3, [r4, #0]
   be21a:	bd38      	pop	{r3, r4, r5, pc}
   be21c:	2003e7f4 	.word	0x2003e7f4

000be220 <__register_exitproc>:
   be220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be224:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be2e0 <__register_exitproc+0xc0>
   be228:	4606      	mov	r6, r0
   be22a:	f8d8 0000 	ldr.w	r0, [r8]
   be22e:	461f      	mov	r7, r3
   be230:	460d      	mov	r5, r1
   be232:	4691      	mov	r9, r2
   be234:	f000 f878 	bl	be328 <__retarget_lock_acquire_recursive>
   be238:	4b25      	ldr	r3, [pc, #148]	; (be2d0 <__register_exitproc+0xb0>)
   be23a:	681c      	ldr	r4, [r3, #0]
   be23c:	b934      	cbnz	r4, be24c <__register_exitproc+0x2c>
   be23e:	4c25      	ldr	r4, [pc, #148]	; (be2d4 <__register_exitproc+0xb4>)
   be240:	601c      	str	r4, [r3, #0]
   be242:	4b25      	ldr	r3, [pc, #148]	; (be2d8 <__register_exitproc+0xb8>)
   be244:	b113      	cbz	r3, be24c <__register_exitproc+0x2c>
   be246:	681b      	ldr	r3, [r3, #0]
   be248:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be24c:	6863      	ldr	r3, [r4, #4]
   be24e:	2b1f      	cmp	r3, #31
   be250:	dd07      	ble.n	be262 <__register_exitproc+0x42>
   be252:	f8d8 0000 	ldr.w	r0, [r8]
   be256:	f000 f869 	bl	be32c <__retarget_lock_release_recursive>
   be25a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be262:	b34e      	cbz	r6, be2b8 <__register_exitproc+0x98>
   be264:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be268:	b988      	cbnz	r0, be28e <__register_exitproc+0x6e>
   be26a:	4b1c      	ldr	r3, [pc, #112]	; (be2dc <__register_exitproc+0xbc>)
   be26c:	b923      	cbnz	r3, be278 <__register_exitproc+0x58>
   be26e:	f8d8 0000 	ldr.w	r0, [r8]
   be272:	f000 f85a 	bl	be32a <__retarget_lock_release>
   be276:	e7f0      	b.n	be25a <__register_exitproc+0x3a>
   be278:	f44f 7084 	mov.w	r0, #264	; 0x108
   be27c:	f7fc fafe 	bl	ba87c <malloc>
   be280:	2800      	cmp	r0, #0
   be282:	d0f4      	beq.n	be26e <__register_exitproc+0x4e>
   be284:	2300      	movs	r3, #0
   be286:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be28a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be28e:	6863      	ldr	r3, [r4, #4]
   be290:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be294:	2201      	movs	r2, #1
   be296:	409a      	lsls	r2, r3
   be298:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be29c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be2a0:	4313      	orrs	r3, r2
   be2a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be2a6:	2e02      	cmp	r6, #2
   be2a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be2ac:	bf02      	ittt	eq
   be2ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be2b2:	4313      	orreq	r3, r2
   be2b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be2b8:	6863      	ldr	r3, [r4, #4]
   be2ba:	f8d8 0000 	ldr.w	r0, [r8]
   be2be:	1c5a      	adds	r2, r3, #1
   be2c0:	3302      	adds	r3, #2
   be2c2:	6062      	str	r2, [r4, #4]
   be2c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be2c8:	f000 f830 	bl	be32c <__retarget_lock_release_recursive>
   be2cc:	2000      	movs	r0, #0
   be2ce:	e7c6      	b.n	be25e <__register_exitproc+0x3e>
   be2d0:	2003e7ec 	.word	0x2003e7ec
   be2d4:	2003e760 	.word	0x2003e760
   be2d8:	00000000 	.word	0x00000000
   be2dc:	000ba87d 	.word	0x000ba87d
   be2e0:	2003e454 	.word	0x2003e454

000be2e4 <_close_r>:
   be2e4:	b538      	push	{r3, r4, r5, lr}
   be2e6:	4d06      	ldr	r5, [pc, #24]	; (be300 <_close_r+0x1c>)
   be2e8:	2300      	movs	r3, #0
   be2ea:	4604      	mov	r4, r0
   be2ec:	4608      	mov	r0, r1
   be2ee:	602b      	str	r3, [r5, #0]
   be2f0:	f7fc f858 	bl	ba3a4 <_close>
   be2f4:	1c43      	adds	r3, r0, #1
   be2f6:	d102      	bne.n	be2fe <_close_r+0x1a>
   be2f8:	682b      	ldr	r3, [r5, #0]
   be2fa:	b103      	cbz	r3, be2fe <_close_r+0x1a>
   be2fc:	6023      	str	r3, [r4, #0]
   be2fe:	bd38      	pop	{r3, r4, r5, pc}
   be300:	2003e7f4 	.word	0x2003e7f4

000be304 <_fstat_r>:
   be304:	b538      	push	{r3, r4, r5, lr}
   be306:	4d07      	ldr	r5, [pc, #28]	; (be324 <_fstat_r+0x20>)
   be308:	2300      	movs	r3, #0
   be30a:	4604      	mov	r4, r0
   be30c:	4608      	mov	r0, r1
   be30e:	4611      	mov	r1, r2
   be310:	602b      	str	r3, [r5, #0]
   be312:	f7fc f84f 	bl	ba3b4 <_fstat>
   be316:	1c43      	adds	r3, r0, #1
   be318:	d102      	bne.n	be320 <_fstat_r+0x1c>
   be31a:	682b      	ldr	r3, [r5, #0]
   be31c:	b103      	cbz	r3, be320 <_fstat_r+0x1c>
   be31e:	6023      	str	r3, [r4, #0]
   be320:	bd38      	pop	{r3, r4, r5, pc}
   be322:	bf00      	nop
   be324:	2003e7f4 	.word	0x2003e7f4

000be328 <__retarget_lock_acquire_recursive>:
   be328:	4770      	bx	lr

000be32a <__retarget_lock_release>:
   be32a:	4770      	bx	lr

000be32c <__retarget_lock_release_recursive>:
   be32c:	4770      	bx	lr
	...

000be330 <_lseek_r>:
   be330:	b538      	push	{r3, r4, r5, lr}
   be332:	4d07      	ldr	r5, [pc, #28]	; (be350 <_lseek_r+0x20>)
   be334:	4604      	mov	r4, r0
   be336:	4608      	mov	r0, r1
   be338:	4611      	mov	r1, r2
   be33a:	2200      	movs	r2, #0
   be33c:	602a      	str	r2, [r5, #0]
   be33e:	461a      	mov	r2, r3
   be340:	f7fc f840 	bl	ba3c4 <_lseek>
   be344:	1c43      	adds	r3, r0, #1
   be346:	d102      	bne.n	be34e <_lseek_r+0x1e>
   be348:	682b      	ldr	r3, [r5, #0]
   be34a:	b103      	cbz	r3, be34e <_lseek_r+0x1e>
   be34c:	6023      	str	r3, [r4, #0]
   be34e:	bd38      	pop	{r3, r4, r5, pc}
   be350:	2003e7f4 	.word	0x2003e7f4

000be354 <_open_r>:
   be354:	b538      	push	{r3, r4, r5, lr}
   be356:	4d07      	ldr	r5, [pc, #28]	; (be374 <_open_r+0x20>)
   be358:	4604      	mov	r4, r0
   be35a:	4608      	mov	r0, r1
   be35c:	4611      	mov	r1, r2
   be35e:	2200      	movs	r2, #0
   be360:	602a      	str	r2, [r5, #0]
   be362:	461a      	mov	r2, r3
   be364:	f7fc f806 	bl	ba374 <_open>
   be368:	1c43      	adds	r3, r0, #1
   be36a:	d102      	bne.n	be372 <_open_r+0x1e>
   be36c:	682b      	ldr	r3, [r5, #0]
   be36e:	b103      	cbz	r3, be372 <_open_r+0x1e>
   be370:	6023      	str	r3, [r4, #0]
   be372:	bd38      	pop	{r3, r4, r5, pc}
   be374:	2003e7f4 	.word	0x2003e7f4

000be378 <_read_r>:
   be378:	b538      	push	{r3, r4, r5, lr}
   be37a:	4d07      	ldr	r5, [pc, #28]	; (be398 <_read_r+0x20>)
   be37c:	4604      	mov	r4, r0
   be37e:	4608      	mov	r0, r1
   be380:	4611      	mov	r1, r2
   be382:	2200      	movs	r2, #0
   be384:	602a      	str	r2, [r5, #0]
   be386:	461a      	mov	r2, r3
   be388:	f7fc f804 	bl	ba394 <_read>
   be38c:	1c43      	adds	r3, r0, #1
   be38e:	d102      	bne.n	be396 <_read_r+0x1e>
   be390:	682b      	ldr	r3, [r5, #0]
   be392:	b103      	cbz	r3, be396 <_read_r+0x1e>
   be394:	6023      	str	r3, [r4, #0]
   be396:	bd38      	pop	{r3, r4, r5, pc}
   be398:	2003e7f4 	.word	0x2003e7f4

000be39c <link_code_end>:
   be39c:	64616f4c 	.word	0x64616f4c
   be3a0:	20676e69 	.word	0x20676e69
   be3a4:	74737953 	.word	0x74737953
   be3a8:	44206d65 	.word	0x44206d65
   be3ac:	75616665 	.word	0x75616665
   be3b0:	0073746c 	.word	0x0073746c
   be3b4:	00000000 	.word	0x00000000
   be3b8:	000becbc 	.word	0x000becbc
   be3bc:	000bed6c 	.word	0x000bed6c
   be3c0:	000bed71 	.word	0x000bed71
   be3c4:	000bed76 	.word	0x000bed76
   be3c8:	000bed7a 	.word	0x000bed7a
   be3cc:	000bed7f 	.word	0x000bed7f
   be3d0:	000bed84 	.word	0x000bed84
   be3d4:	000bed88 	.word	0x000bed88
   be3d8:	000bed93 	.word	0x000bed93
   be3dc:	000bed9e 	.word	0x000bed9e

000be3e0 <dynalib_user>:
   be3e0:	000b4a4d 000b4a89 000b4ab1 000b4ab5     MJ...J...J...J..
   be3f0:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   be400:	72697620 6c617574 6f724600 7325206d      virtual.From %s
   be410:	206f7420 77207325 20687469 61766e69      to %s with inva
   be420:	2064696c 656d6974 6f724600 7325206d     lid time.From %s
   be430:	206f7420 4e007325 6144206f 52006174      to %s.No Data.R
   be440:	6f707365 2065736e 65636552 64657669     esponse Received
   be450:	6b6e5500 6e776f6e 73657220 736e6f70     .Unknown respons
   be460:	65722065 69766563 25206465 62550069     e recevied %i.Ub
   be470:	746f6469 6f482073 52006b6f 696e6e75     idots Hook.Runni
   be480:	5200676e 696e6e75 4420676e 796c6961     ng.Running Daily
   be490:	656c4320 70756e61 65735500 75622072      Cleanup.User bu
   be4a0:	6e6f7474 65727020 64657373 20746120     tton pressed at 
   be4b0:	72617473 20707574 6573202d 6e697474     startup - settin
   be4c0:	65642067 6c756166 4e007374 64207765     g defaults.New d
   be4d0:	202c7961 65736572 6e697474 6f632067     ay, resetting co
   be4e0:	73746e75 6d695400 73692065 766e6920     unts.Time is inv
   be4f0:	64696c61 20202d20 73207325 6f63206f     alid -  %s so co
   be500:	63656e6e 676e6974 6d695400 73692065     nnecting.Time is
   be510:	6c617620 2d206469 00732520 35545345      valid - %s.EST5
   be520:	2c544445 322e334d 322f302e 3a30303a     EDT,M3.2.0/2:00:
   be530:	4d2c3030 312e3131 322f302e 3a30303a     00,M11.1.0/2:00:
   be540:	25003030 74530054 75747261 6f632070     00.%T.Startup co
   be550:	656c706d 77206574 20687469 7473616c     mplete with last
   be560:	6e6f6320 7463656e 00732520 656b6f57      connect %s.Woke
   be570:	74697720 73752068 62207265 6f747475      with user butto
   be580:	202d206e 65736552 6e697474 6f682067     n - Resetting ho
   be590:	20737275 20646e61 6e696f67 6f742067     urs and going to
   be5a0:	6e6f6320 7463656e 6d695400 73692065      connect.Time is
   be5b0:	20707520 25207461 69772073 25206874      up at %s with %
   be5c0:	6620696c 20656572 6f6d656d 4e007972     li free memory.N
   be5d0:	6320746f 656e6e6f 6e697463 202d2067     ot connecting - 
   be5e0:	20776f6c 74746162 20797265 65646f6d     low battery mode
   be5f0:	66755300 69636966 20746e65 74746162     .Sufficient batt
   be600:	20797265 65776f70 6f632072 63656e6e     ery power connec
   be610:	676e6974 746f4e00 6e6f6320 7463656e     ting.Not connect
   be620:	20676e69 353c202d 20252530 72616863     ing - <50%% char
   be630:	2d206567 756f6620 6f682072 73207275     ge - four hour s
   be640:	64656863 00656c75 20746f4e 6e6e6f63     chedule.Not conn
   be650:	69746365 2d20676e 2d303520 25253536     ecting - 50-65%%
   be660:	61686320 20656772 7774202d 6f68206f      charge - two ho
   be670:	73207275 64656863 00656c75 68626557     ur schedule.Webh
   be680:	206b6f6f 656d6974 2074756f 6572202d     ook timeout - re
   be690:	74746573 00676e69 6e6e6f43 65746365     setting.Connecte
   be6a0:	6e692064 20692520 73636573 6c654300     d in %i secs.Cel
   be6b0:	616c756c 72450072 20726f72 74617473     lular.Error stat
   be6c0:	202d2065 65736572 6e697474 65520067     e - resetting.Re
   be6d0:	74746573 20676e69 20657564 6c206f74     setting due to l
   be6e0:	6d20776f 726f6d65 75430079 6e657272     ow memory.Curren
   be6f0:	61442074 49206174 6974696e 7a696c61     t Data Initializ
   be700:	6e006465 7620746f 64696c61 74616400     ed.not valid.dat
   be710:	6f6e2061 61762074 2064696c 6e65706f     a not valid open
   be720:	6d697420 253d2065 61640064 6e206174      time =%d.data n
   be730:	7620746f 64696c61 73616c20 6f632074     ot valid last co
   be740:	63656e6e 6e6f6974 72756420 6f697461     nnection duratio
   be750:	253d206e 79730064 61745373 20737574     n =%d.sysStatus 
   be760:	61746164 20736920 63007325 65727275     data is %s.curre
   be770:	6420746e 61747369 2065636e 20746f6e     nt distance not 
   be780:	696c6176 253d2064 6d632064 72756300     valid =%d cm.cur
   be790:	746e6572 73696420 636e6174 73692065     rent distance is
   be7a0:	00732520 65646f4d 616f4c00 676e6964      %s.Mode.Loading
   be7b0:	73797320 206d6574 61666564 73746c75      system defaults
   be7c0:	414e4100 32312d54 00000000              .ANAT-12....

000be7cc <_ZTVN15StorageHelperRK15FileSystemPosixE>:
	...
   be7d4:	000b575d 000b575f 000b57c5 000b57ad     ]W.._W...W...W..
   be7e4:	000b57df 000b579d 000b578f 000b5781     .W...W...W...W..
   be7f4:	000b576d                                mW..

000be7f8 <_ZTVN15StorageHelperRK18PersistentDataFileE>:
	...
   be800:	000b9cd9 000b9d69 000ba029 000b9cdf     ....i...).......
   be810:	000b9d07 000b9ed9 000b9fb1 000b5841     ............AX..
   be820:	000b5855 7273752f 7275632f 746e6572     UX../usr/current
   be830:	7461642e 73752f00 79732f72 61745373     .dat./usr/sysSta
   be840:	2e737574 00746164                       tus.dat.

000be848 <_ZTV13sysStatusData>:
	...
   be850:	000b5959 000b9d69 000ba029 000b9cdf     YY..i...).......
   be860:	000b9d07 000b5d09 000b5e31 000b5869     .....]..1^..iX..
   be870:	000b587d                                }X..

000be874 <_ZTV17currentStatusData>:
	...
   be87c:	000b5a15 000b9d69 000ba029 000b9cdf     .Z..i...).......
   be88c:	000b9d07 000b5d99 000b5cb1 000b5891     .....]...\...X..
   be89c:	000b58a5 74696e49 696c6169 676e697a     .X..Initializing
   be8ac:	72615020 6c636974 75662065 6974636e      Particle functi
   be8bc:	20736e6f 20646e61 69726176 656c6261     ons and variable
   be8cc:	6f430073 6e616d6d 7b007364 73696422     s.Commands.{"dis
   be8dc:	636e6174 253a2265 22202c69 74746162     tance":%i, "batt
   be8ec:	22797265 2e34253a 222c6632 3179656b     ery":%4.2f,"key1
   be8fc:	25223a22 202c2273 6d657422 253a2270     ":"%s", "temp":%
   be90c:	66322e34 7222202c 74657365 253a2273     4.2f, "resets":%
   be91c:	22202c69 72656c61 3a227374 222c6925     i, "alerts":%i,"
   be92c:	6e6e6f63 74746365 22656d69 2c69253a     connecttime":%i,
   be93c:	6d697422 61747365 3a22706d 30756c25     "timestamp":%lu0
   be94c:	007d3030 64696255 5f73746f 6576654c     00}.Ubidots_Leve
   be95c:	6f485f6c 765f6b6f 62550031 746f6469     l_Hook_v1.Ubidot
   be96c:	65572073 6f6f6862 25203a6b 654c0073     s Webhook: %s.Le
   be97c:	006c6576 69617254 6f6e006c 6f6c2074     vel.Trail.not lo
   be98c:	6f702077 00726577 00726163 73726570     w power.car.pers
   be99c:	50006e6f 69737261 6620676e 656c6961     on.Parsing faile
   be9ac:	202d2064 63656863 7973206b 7861746e     d - check syntax
   be9bc:	646d6300 72617600 006e6600 65736572     .cmd.var.fn.rese
   be9cc:	6c610074 6552006c 74746573 20676e69     t.all.Resetting 
   be9dc:	20656874 65746167 27796177 79732073     the gateway's sy
   be9ec:	6d657473 646e6120 72756320 746e6572     stem and current
   be9fc:	74616420 65520061 74746573 20676e69      data.Resetting 
   bea0c:	20656874 65746167 27796177 75632073     the gateway's cu
   bea1c:	6e657272 61642074 73006174 75746174     rrent data.statu
   bea2c:	69440073 6e617473 203a6563 202c6425     s.Distance: %d, 
   bea3c:	736e6553 203a726f 202c7325 74746142     Sensor: %s, Batt
   bea4c:	3a797265 2e342520 61206632 2520646e     ery: %4.2f and %
   bea5c:	6f6c0073 5400676e 3a656d69 2c732520     s.long.Time: %s,
   bea6c:	65706f20 25203a6e 63202c64 65736f6c      open: %d, close
   bea7c:	6425203a 6f6d202c 25206564 65730073     : %d, mode %s.se
   bea8c:	7300646e 00796174 65757274 696f4700     nd.stay.true.Goi
   bea9c:	7420676e 656b206f 74207065 64206568     ng to keep the d
   beaac:	63697665 6e6f2065 656e696c 696f4700     evice online.Goi
   beabc:	6220676e 206b6361 6e206f74 616d726f     ng back to norma
   beacc:	6f63206c 63656e6e 69766974 6f007974     l connectivity.o
   beadc:	006e6570 74746553 20676e69 6e65706f     pen.Setting open
   beaec:	20676e69 72756f68 206f7420 303a6425     ing hour to %d:0
   beafc:	704f0030 68206e65 2072756f 756d202d     0.Open hour - mu
   beb0c:	62207473 2d302065 63003231 65736f6c     st be 0-12.close
   beb1c:	74655300 676e6974 6f6c6320 676e6973     .Setting closing
   beb2c:	756f6820 6f742072 3a642520 43003030      hour to %d:00.C
   beb3c:	65736f6c 756f6820 202d2072 7473756d     lose hour - must
   beb4c:	20656220 322d3331 79740034 53006570      be 13-24.type.S
   beb5c:	69747465 7320676e 6f736e65 79742072     etting sensor ty
   beb6c:	74206570 7325206f 756f6320 7265746e     pe to %s counter
   beb7c:	6e655300 20726f73 626d756e 6f207265     .Sensor number o
   beb8c:	6f207475 61722066 2065676e 322d3028     ut of range (0-2
   beb9c:	6f4e0029 20612074 696c6176 6f632064     ).Not a valid co
   bebac:	6e616d6d 6e490064 65687420 73696420     mmand.In the dis
   bebbc:	6e6e6f63 20746365 6d6f7266 72615020     connect from Par
   bebcc:	6c636974 75662065 6974636e 46006e6f     ticle function.F
   bebdc:	656c6961 6f742064 73696420 6e6e6f63     ailed to disconn
   bebec:	20746365 6d6f7266 72615020 6c636974     ect from Particl
   bebfc:	69440065 6e6f6373 7463656e 66206465     e.Disconnected f
   bec0c:	206d6f72 74726150 656c6369 206e6920     rom Particle in 
   bec1c:	73206925 6e6f6365 46007364 656c6961     %i seconds.Faile
   bec2c:	6f742064 72757420 666f206e 68742066     d to turn off th
   bec3c:	65432065 6c756c6c 6d207261 6d65646f     e Cellular modem
   bec4c:	72755400 2064656e 2066666f 20656874     .Turned off the 
   bec5c:	6c6c6563 72616c75 646f6d20 69206d65     cellular modem i
   bec6c:	6925206e 63657320 73646e6f 00000000     n %i seconds....

000bec7c <_ZTVN5spark10LogHandlerE>:
	...
   bec8c:	000b4ad1 000b6029                       .J..)`..

000bec94 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bec9c:	000b60f9 000b612d 000bc619 000bc7bd     .`..-a..........

000becac <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   becb4:	000b603d 000b6051 6e6b6e55 006e776f     =`..Q`..Unknown.
   becc4:	20746f4e 72616843 676e6967 61684300     Not Charging.Cha
   becd4:	64656772 73694400 72616863 676e6967     rged.Discharging
   bece4:	75614600 4400746c 6e6f6369 7463656e     .Fault.Diconnect
   becf4:	00006465                                ed..

000becf8 <_ZTV18Particle_Functions>:
	...
   bed00:	000b602b 000b602d 74696e49 7a696c61     +`..-`..Initaliz
   bed10:	20676e69 20656874 4d6e6970 7365646f     ing the pinModes
   bed20:	696e4900 6c616974 6e697a69 6f502067     .Initializing Po
   bed30:	20726577 666e6f43 50006769 7265776f     wer Config.Power
   bed40:	6e6f6320 75676966 69746172 70206e6f      configuration p
   bed50:	65636f72 73207373 63636375 75667365     rocess succcesfu
   bed60:	                                         l.

000bed62 <BLUE_LED>:
   bed62:	                                         ..

000bed64 <BUTTON_PIN>:
   bed64:	                                         ..

000bed66 <DISTANCE_PIN>:
   bed66:	                                         ..

000bed68 <EXTERNAL_TEMP_PIN>:
   bed68:	                                         ..

000bed6a <INTERNAL_TEMP_PIN>:
   bed6a:	6f4e000f 5700656e 00694669 004d5347     ..None.WiFi.GSM.
   bed7a:	53544d55 4d444300 544c0041 45490045     UMTS.CDMA.LTE.IE
   bed8a:	30384545 34353132 45544c00 5441435f     EE802154.LTE_CAT
   bed9a:	00314d5f 5f45544c 5f544143 0031424e     _M1.LTE_CAT_NB1.
   bedaa:	53207325 2e32253a 25256630 3a51202c     %s S:%2.0f%%, Q:
   bedba:	302e3225 20252566 73734100 69747265     %2.0f%% .Asserti
   bedca:	61466e6f 72756c69 72732065 26262063     onFailure src &&
   bedda:	63727320 61633e2d 61626c6c 42006b63      src->callback.B
   bedea:	65747461 73207972 65746174 20666f20     attery state of 
   bedfa:	72616863 25206567 66322e34 45002525     charge %4.2f%%.E
   bee0a:	72657478 206c616e 706d6554 3425203a     xternal Temp: %4
   bee1a:	4366322e 73694400 636e6174 25203a65     .2fC.Distance: %
   bee2a:	006d6364 65746e49 6c616e72 6d655420     dcm.Internal Tem
   bee3a:	25203a70 66322e34 61660043 64656c69     p: %4.2fC.failed
   bee4a:	206f7420 64616572 67657220 72646441      to read regAddr
   bee5a:	3230253d 6f632078 3d746e75 66007525     =%02x count=%u.f
   bee6a:	656c6961 6f742064 61657220 65722064     ailed to read re
   bee7a:	64644167 30253d72 73207832 3d746174     gAddr=%02x stat=
   bee8a:	46006425 2054554f 20646964 20746f6e     %d.FOUT did not 
   bee9a:	48206f67 00484749 20746f6e 65746564     go HIGH.not dete
   beeaa:	64657463 69616600 2064656c 77206f74     cted.failed to w
   beeba:	65746972 67657220 72646441 3230253d     rite regAddr=%02
   beeca:	74732078 253d7461 65730064 54445774     x stat=%d.setWDT
   beeda:	00642520 63746177 676f6468 656c6320      %d.watchdog cle
   beeea:	64657261 65526220 746c7573 0064253d     ared bResult=%d.
   beefa:	63746177 676f6468 74657320 756f6620     watchdog set fou
   bef0a:	63655372 64253d73 65526220 746c7573     rSecs=%d bResult
   bef1a:	0064253d 43544157 474f4448 45454400     =%d.WATCHDOG.DEE
   bef2a:	4f505f50 5f524557 4e574f44 554f4300     P_POWER_DOWN.COU
   bef3a:	4f44544e 545f4e57 52454d49 414c4100     NTDOWN_TIMER.ALA
   bef4a:	66004d52 756c6961 69206572 7075206e     RM.failure in up
   bef5a:	65746164 656b6157 73616552 25206e6f     dateWakeReason %
   bef6a:	61770064 7220656b 6f736165 203d206e     d.wake reason = 
   bef7a:	25007325 2d643430 64323025 3230252d     %s.%04d-%02d-%02
   bef8a:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
   bef9a:	74656700 41637452 206d5473 73007325     .getRtcAsTm %s.s
   befaa:	74527465 54734163 7325206d 69616600     etRtcAsTm %s.fai
   befba:	6572756c 206e6920 52746573 72466374     lure in setRtcFr
   befca:	6d546d6f 00642520 20746573 20435452     omTm %d.set RTC 
   befda:	6d6f7266 6f6c6320 25206475 65730073     from cloud %s.se
   befea:	79732074 6d657473 6f6c6320 66206b63     t system clock f
   beffa:	206d6f72 20435452 66007325 656c6961     rom RTC %s.faile
   bf00a:	6f742064 74656420 20746365 38314241     d to detect AB18
   bf01a:	61003530 612e7070 30383162               05.app.ab1805.

000bf028 <_ZTV6AB1805>:
	...
   bf030:	000b6e79 000b6e7b 000b72d7 000b735d     yn..{n...r..]s..
   bf040:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   bf050:	004b5268                                hRK.

000bf054 <_ZTV19BackgroundPublishRK>:
	...
   bf05c:	000b7895 000b78b1                       .x...x..

000bf064 <_ZTV10JsonBuffer>:
	...
   bf06c:	000b7b95 000b7bb1                       .{...{..

000bf074 <_ZTV10JsonParser>:
	...
   bf07c:	000b7bc5 000b7be9 253a6425 64253a64     .{...{..%d:%d:%d
   bf08c:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   bf09c:	4d003935 252e6425 64252e64 00002c00     59.M%d.%d.%d.,..

000bf0ac <_ZTV9LocalTime>:
	...
   bf0b4:	000b83f5 000b840d                       ........

000bf0bc <_ZTV12LocalTimeHMS>:
	...
   bf0c4:	000b83a3 000b83a7                       ........

000bf0cc <_ZTV15LocalTimeChange>:
	...
   bf0d4:	000b83a5 000b83b5                       ........

000bf0dc <_ZTV22LocalTimePosixTimezone>:
	...
   bf0e4:	000b83c5 000b83e1 656c6966 3d6d754e     ........fileNum=
   bf0f4:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   bf104:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   bf114:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   bf124:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   bf134:	7572726f 64657470 65766520 6e20746e     orrupted event n
   bf144:	20656d61 6420726f 00617461 64616572     ame or data.read
   bf154:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   bf164:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   bf174:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   bf184:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   bf194:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   bf1a4:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   bf1b4:	6c696620 6d754e65 0064253d 63736964      fileNum=%d.disc
   bf1c4:	65647261 76652064 20746e65 72006425     arded event %d.r
   bf1d4:	74657365 20726f20 63736964 656e6e6f     eset or disconne
   bf1e4:	65207463 746e6576 6173202c 66206576     ct event, save f
   bf1f4:	73656c69 206f7420 75657571 61720065     iles to queue.ra
   bf204:	6964006d 72616373 676e6964 726f6320     m.discarding cor
   bf214:	74707572 66206465 20656c69 70006425     rupted file %d.p
   bf224:	696c6275 6e696873 73252067 65766520     ublishing %s eve
   bf234:	253d746e 61642073 253d6174 59530073     nt=%s data=%s.SY
   bf244:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   bf254:	2944454c 20736920 75716572 64657269     LED) is required
   bf264:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   bf274:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   bf284:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   bf294:	61657263 73206574 3a3a6474 75716564     create std::dequ
   bf2a4:	616c2065 72656772 61687420 616d206e     e larger than ma
   bf2b4:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   bf2c4:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   bf2d4:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   bf2e4:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   bf2f4:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   bf304:	63637573 20737365 72006425 766f6d65     success %d.remov
   bf314:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   bf324:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   bf334:	676e6974 206f7420 656c6966 66612073     ting to files af
   bf344:	20726574 6c627570 20687369 6c696166     ter publish fail
   bf354:	00657275 2e707061 71627570 00000000     ure.app.pubq....

000bf364 <_ZTV17PublishQueuePosix>:
	...
   bf36c:	000b9339 000b95f5 000b9619 64383025     9...........%08d
   bf37c:	72002f00 766f6d65 25206465 73250073     ./.removed %s.%s
   bf38c:	69786520 20737473 20646e61 61207369      exists and is a
   bf39c:	72696420 6f746365 66007972 20656c69      directory.file 
   bf3ac:	74206e69 77206568 202c7961 656c6564     in the way, dele
   bf3bc:	676e6974 00732520 74617473 6c696620     ting %s.stat fil
   bf3cc:	65206465 6f6e7272 0064253d 61657263     ed errno=%d.crea
   bf3dc:	20646574 20726964 6d007325 7269646b     ted dir %s.mkdir
   bf3ec:	69616620 2064656c 6e727265 64253d6f      failed errno=%d
   bf3fc:	636e7500 69666e6f 65727567 69642064     .unconfigured di
   bf40c:	74615072 63730068 696e6e61 2520676e     rPath.scanning %
   bf41c:	69772073 70206874 65747461 25206e72     s with pattern %
   bf42c:	64610073 676e6964 206f7420 75657571     s.adding to queu
   bf43c:	64252065 00732520 46746567 46656c69     e %d %s.getFileF
   bf44c:	516d6f72 65756575 74657220 656e7275     romQueue returne
   bf45c:	64252064 70706100 7165732e 656c6966     d %d.app.seqfile
   bf46c:	00000000                                ....

000bf470 <_ZTV14SequentialFile>:
	...
   bf478:	000b9981 000b99ad 000b962d 696c6176     ........-...vali
   bf488:	69746164 6420676e 20617461 657a6973     dating data size
   bf498:	0064253d 3a746f67 67616d20 253d6369     =%d.got: magic=%
   bf4a8:	20783830 73726576 3d6e6f69 78343025     08x version=%04x
   bf4b8:	7a697320 30253d65 68207834 3d687361      size=%04x hash=
   bf4c8:	78383025 70786500 616d203a 3d636967     %08x.exp: magic=
   bf4d8:	78383025 72657620 6e6f6973 3430253d     %08x version=%04
   bf4e8:	69732078 253d657a 20783430 68736168     x size=%04x hash
   bf4f8:	3830253d 61730078 676e6976 74616420     =%08x.saving dat
   bf508:	69732061 253d657a 00000064              a size=%d...

000bf514 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bf51c:	000b9cd9 000b9d41 000b9fdd 000b9cdf     ....A...........
   bf52c:	000b9d07 000b9ed9 000b9fb1              ............

000bf538 <_ZTVN15StorageHelperRK24PersistentDataFileSystemE>:
	...
   bf540:	000b9cd9 000b9d69 000ba029 000b9cdf     ....i...).......
   bf550:	000b9d07 000b9ed9 000b9fb1 000b580d     .............X..
   bf560:	000b58b9                                .X..

000bf564 <_ZTVN5spark13CellularClassE>:
	...
   bf56c:	000baa67 000baa5d 000baa53 000baa09     g...]...S.......
   bf57c:	000baa47 000baa3b 000bc9a9 000bc9b1     G...;...........
   bf58c:	000baa2f 000baa27 000baa1d 000baa13     /...'...........
   bf59c:	000bcae5 000bc9e1 000bc9e9 006e616e     ............nan.
   bf5ac:	00666e69 0066766f                       inf.ovf.

000bf5b4 <_ZTV14CellularSignal>:
	...
   bf5bc:	000baaf5 000bab1d 000baaf7 000bab2d     ............-...
   bf5cc:	000bab61 000bab8d 000babc1 000bad85     a...............
   bf5dc:	000baafb 000bab17 fffffffc 00000000     ................
   bf5ec:	000badd1                                ....

000bf5f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf5f8:	000badf1 000badf7 000bae35 000bae05     ........5.......
   bf608:	000badf3                                ....

000bf60c <_ZTVN5spark13EthernetClassE>:
	...
   bf614:	000bb3fb 000bb3f1 000bb3e7 000bb3dd     ................
   bf624:	000bb3d1 000bb3c5 000bc9a9 000bc9b1     ................
   bf634:	000bb3b9 000bb3b1 000bb3a7 000bb39d     ................
   bf644:	000bcae5 000bc9e1 000bc9e9              ............

000bf650 <_ZTV7TwoWire>:
	...
   bf658:	000bb419 000bb463 000bb43b 000bb41b     ....c...;.......
   bf668:	000bb443 000bb44b 000bb453 000bb45b     C...K...S...[...
   bf678:	000bcd57                                W...

000bf67c <_ZTV9IPAddress>:
	...
   bf684:	000bb5d5 000bb5c5 000bb5c7 34302575     ............u%04
   bf694:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   bf6a4:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   bf6b4:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   bf6c4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   bf6d4:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   bf6e4:	20736c69 0d00203d 6e6c000a 646f6300     ils = ....ln.cod
   bf6f4:	65640065 6c696174 00000000              e.detail....

000bf700 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf708:	000bbb11 000bbb37 000bbae9 000bb6e3     ....7...........

000bf718 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf720:	000bbf21 000bbf39 000bc619 000bc7bd     !...9...........

000bf730 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf738:	000bbf4d 000bbf61 000bc7f5 000bbafd     M...a...........

000bf748 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf750:	000bbb0f 000bbb45 000bc57d 000bbaff     ....E...}.......

000bf760 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf768:	000bbb0d 000bbb53 000bbe89 000bbb75     ....S.......u...

000bf778 <_ZTVN5spark12NetworkClassE>:
	...
   bf780:	000bc969 000bc973 000bc97d 000bc987     i...s...}.......
   bf790:	000bc991 000bc99d 000bc9a9 000bc9b1     ................
   bf7a0:	000bc9b9 000bc9c5 000bc9cd 000bc9d7     ................
   bf7b0:	000bcae5 000bc9e1 000bc9e9 69726977     ............wiri
   bf7c0:	5300676e 65747379 6c73206d 20706565     ng.System sleep 
   bf7d0:	666e6f63 72756769 6f697461 7369206e     configuration is
   bf7e0:	766e6920 64696c61 005a002e 33302b25      invalid..Z.%+03
   bf7f0:	30253a64 25007532 6d252d59 5464252d     d:%02u.%Y-%m-%dT
   bf800:	253a4825 53253a4d 61007a25 69746373     %H:%M:%S%z.ascti
   bf810:	0000656d                                me..

000bf814 <_ZTV11USARTSerial>:
	...
   bf81c:	000bd589 000bd5f5 000bd5cd 000bcc71     ............q...
   bf82c:	000bd59d 000bd5b9 000bd5ab 000bd5c7     ................
   bf83c:	000bcd57 000bd58b 000bd58f              W...........

000bf848 <_ZTV9USBSerial>:
	...
   bf850:	000bd647 000bd6af 000bd685 000bcc71     G...........q...
   bf860:	000bd677 000bd649 000bd659 000bd6a9     w...I...Y.......
   bf870:	000bcd57 000bd669 000bd641              W...i...A...

000bf87c <_ZSt7nothrow>:
   bf87c:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   bf88c:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000bf89d <day_name.1>:
   bf89d:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bf8ad:	61536972                                 riSat

000bf8b2 <mon_name.0>:
   bf8b2:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bf8c2:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bf8d2:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bf8e2:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bf8f2:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bf902:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bf912:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bf922:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bf932:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   bf942:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   bf952:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bf962:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bf972:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bf982:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bf992:	696c6474 61722f62 632e646e               tdlib/rand.c.

000bf99f <_ctype_>:
   bf99f:	20202000 20202020 28282020 20282828     .         ((((( 
   bf9af:	20202020 20202020 20202020 20202020                     
   bf9bf:	10108820 10101010 10101010 10101010      ...............
   bf9cf:	04040410 04040404 10040404 10101010     ................
   bf9df:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bf9ef:	01010101 01010101 01010101 10101010     ................
   bf9ff:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bfa0f:	02020202 02020202 02020202 10101010     ................
   bfa1f:	00000020 00000000 00000000 00000000      ...............
	...

000bfaa0 <link_const_data_end>:
   bfaa0:	000b4f1d 	.word	0x000b4f1d
   bfaa4:	000b601d 	.word	0x000b601d
   bfaa8:	000b67ed 	.word	0x000b67ed
   bfaac:	000b7779 	.word	0x000b7779
   bfab0:	000b95e5 	.word	0x000b95e5
   bfab4:	000b9cc9 	.word	0x000b9cc9
   bfab8:	000ba9f9 	.word	0x000ba9f9
   bfabc:	000baac5 	.word	0x000baac5
   bfac0:	000bb405 	.word	0x000bb405
   bfac4:	000bc609 	.word	0x000bc609
   bfac8:	000bcaf9 	.word	0x000bcaf9
   bfacc:	000bcd0d 	.word	0x000bcd0d
   bfad0:	000bd225 	.word	0x000bd225
   bfad4:	000bd575 	.word	0x000bd575
