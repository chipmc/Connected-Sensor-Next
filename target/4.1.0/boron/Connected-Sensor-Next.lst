
/Users/chipmc/Documents/Maker/Particle/Projects/Connected-Sensor-Next/target/4.1.0/boron/Connected-Sensor-Next.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b9a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf9c0  000bf9c0  0000f9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf9e4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000120  2003e330  000bf9e8  0002e330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003a0  2003e450  2003e450  0003e450  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bfb08  000bfb08  0002fb08  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bfb34  000bfb34  0002fb34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00239f82  00000000  00000000  0002fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00022608  00000000  00000000  00269aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00065755  00000000  00000000  0028c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004730  00000000  00000000  002f1817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011200  00000000  00000000  002f5f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004b3b4  00000000  00000000  00307147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00071346  00000000  00000000  003524fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169cb8  00000000  00000000  003c3841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000d7e4  00000000  00000000  0052d4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fe69 	bl	bdd08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fe8b 	bl	bdd58 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e330 	.word	0x2003e330
   b404c:	000bf9e8 	.word	0x000bf9e8
   b4050:	2003e450 	.word	0x2003e450
   b4054:	2003e450 	.word	0x2003e450
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f008 fe49 	bl	bccf8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf97c 	.word	0x000bf97c
   b4080:	000bf9b4 	.word	0x000bf9b4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba6a 	b.w	b455c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb93 	bl	b47b4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f008 bde9 	b.w	bcc68 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 bebd 	b.w	b9e14 <malloc>

000b409a <_Znaj>:
   b409a:	f005 bebb 	b.w	b9e14 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 bec1 	b.w	b9e24 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fd3e 	bl	b9b2c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b973d 	.word	0x000b973d
   b40b8:	000be2b0 	.word	0x000be2b0

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z18outOfMemoryHandleryi+0x8>)
   b40ce:	601a      	str	r2, [r3, #0]
}
   b40d0:	4770      	bx	lr
   b40d2:	bf00      	nop
   b40d4:	2003e330 	.word	0x2003e330

000b40d8 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z13userSwitchISRv+0x8>)
   b40da:	2201      	movs	r2, #1
   b40dc:	701a      	strb	r2, [r3, #0]
}
   b40de:	4770      	bx	lr
   b40e0:	2003e59c 	.word	0x2003e59c

000b40e4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40e4:	b530      	push	{r4, r5, lr}
   b40e6:	b085      	sub	sp, #20
   b40e8:	4604      	mov	r4, r0
   b40ea:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40ec:	b160      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40ee:	6840      	ldr	r0, [r0, #4]
   b40f0:	b150      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40f2:	6885      	ldr	r5, [r0, #8]
   b40f4:	b145      	cbz	r5, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b40f6:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b40fa:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40fe:	68c4      	ldr	r4, [r0, #12]
   b4100:	ab01      	add	r3, sp, #4
   b4102:	466a      	mov	r2, sp
   b4104:	a902      	add	r1, sp, #8
   b4106:	47a0      	blx	r4
    }
   b4108:	b005      	add	sp, #20
   b410a:	bd30      	pop	{r4, r5, pc}

000b410c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b410c:	b530      	push	{r4, r5, lr}
   b410e:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4110:	6800      	ldr	r0, [r0, #0]
   b4112:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4114:	9301      	str	r3, [sp, #4]
   b4116:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b411a:	6883      	ldr	r3, [r0, #8]
   b411c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4120:	b90b      	cbnz	r3, b4126 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4122:	f008 ff8d 	bl	bd040 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4126:	68c3      	ldr	r3, [r0, #12]
   b4128:	aa01      	add	r2, sp, #4
   b412a:	a902      	add	r1, sp, #8
   b412c:	4798      	blx	r3
      }
   b412e:	b005      	add	sp, #20
   b4130:	bd30      	pop	{r4, r5, pc}

000b4132 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4132:	2a01      	cmp	r2, #1
   b4134:	d102      	bne.n	b413c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4136:	6001      	str	r1, [r0, #0]
      }
   b4138:	2000      	movs	r0, #0
   b413a:	4770      	bx	lr
	  switch (__op)
   b413c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b413e:	bf04      	itt	eq
   b4140:	680b      	ldreq	r3, [r1, #0]
   b4142:	6003      	streq	r3, [r0, #0]
	      break;
   b4144:	e7f8      	b.n	b4138 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4146 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4146:	6803      	ldr	r3, [r0, #0]
   b4148:	6812      	ldr	r2, [r2, #0]
   b414a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b414e:	4718      	bx	r3

000b4150 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4150:	b510      	push	{r4, lr}
      if (_M_manager)
   b4152:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4154:	4604      	mov	r4, r0
      if (_M_manager)
   b4156:	b113      	cbz	r3, b415e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4158:	2203      	movs	r2, #3
   b415a:	4601      	mov	r1, r0
   b415c:	4798      	blx	r3
    }
   b415e:	4620      	mov	r0, r4
   b4160:	bd10      	pop	{r4, pc}

000b4162 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4162:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4164:	4604      	mov	r4, r0
   b4166:	b138      	cbz	r0, b4178 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4168:	f7ff fff2 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b416c:	4620      	mov	r0, r4
   b416e:	2110      	movs	r1, #16
        };
   b4170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4174:	f7ff bf93 	b.w	b409e <_ZdlPvj>
        };
   b4178:	bd10      	pop	{r4, pc}

000b417a <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b417a:	b40e      	push	{r1, r2, r3}
   b417c:	b500      	push	{lr}
   b417e:	b08c      	sub	sp, #48	; 0x30
   b4180:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4182:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4186:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b418a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418c:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4190:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4192:	6801      	ldr	r1, [r0, #0]
   b4194:	aa04      	add	r2, sp, #16
   b4196:	201e      	movs	r0, #30
    attr.flags = 0;
   b4198:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b419c:	f005 fcd6 	bl	b9b4c <log_message_v>
}
   b41a0:	b00c      	add	sp, #48	; 0x30
   b41a2:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a6:	b003      	add	sp, #12
   b41a8:	4770      	bx	lr
	...

000b41ac <_Z22publishStateTransitionv>:
{
   b41ac:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b41ae:	4e13      	ldr	r6, [pc, #76]	; (b41fc <_Z22publishStateTransitionv+0x50>)
   b41b0:	4c13      	ldr	r4, [pc, #76]	; (b4200 <_Z22publishStateTransitionv+0x54>)
   b41b2:	7832      	ldrb	r2, [r6, #0]
   b41b4:	4d13      	ldr	r5, [pc, #76]	; (b4204 <_Z22publishStateTransitionv+0x58>)
   b41b6:	2a02      	cmp	r2, #2
{
   b41b8:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b41ba:	d117      	bne.n	b41ec <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b41bc:	f008 fbfe 	bl	bc9bc <_ZN9TimeClass7isValidEv>
   b41c0:	7832      	ldrb	r2, [r6, #0]
   b41c2:	782b      	ldrb	r3, [r5, #0]
   b41c4:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b41c8:	9200      	str	r2, [sp, #0]
   b41ca:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b41ce:	b998      	cbnz	r0, b41f8 <_Z22publishStateTransitionv+0x4c>
   b41d0:	4a0d      	ldr	r2, [pc, #52]	; (b4208 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b41d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   b41d6:	a802      	add	r0, sp, #8
   b41d8:	f005 fe44 	bl	b9e64 <snprintf>
	oldState = state;
   b41dc:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b41de:	480b      	ldr	r0, [pc, #44]	; (b420c <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b41e0:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b41e2:	a902      	add	r1, sp, #8
   b41e4:	f7ff ffc9 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
}
   b41e8:	b042      	add	sp, #264	; 0x108
   b41ea:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b41ec:	782b      	ldrb	r3, [r5, #0]
   b41ee:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b41f2:	9200      	str	r2, [sp, #0]
   b41f4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b41f8:	4a05      	ldr	r2, [pc, #20]	; (b4210 <_Z22publishStateTransitionv+0x64>)
   b41fa:	e7ea      	b.n	b41d2 <_Z22publishStateTransitionv+0x26>
   b41fc:	2003e592 	.word	0x2003e592
   b4200:	2003e334 	.word	0x2003e334
   b4204:	2003e591 	.word	0x2003e591
   b4208:	000be2c5 	.word	0x000be2c5
   b420c:	2003e644 	.word	0x2003e644
   b4210:	000be2e5 	.word	0x000be2e5

000b4214 <_Z9softDelaym>:
 * @brief soft delay let's us process Particle functions and service the sensor interrupts while pausing
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
   b4214:	b570      	push	{r4, r5, r6, lr}
   b4216:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4218:	f005 fa98 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b421c:	4e06      	ldr	r6, [pc, #24]	; (b4238 <_Z9softDelaym+0x24>)
   b421e:	4604      	mov	r4, r0
   b4220:	f005 fa94 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b4224:	1b00      	subs	r0, r0, r4
   b4226:	42a8      	cmp	r0, r5
   b4228:	d205      	bcs.n	b4236 <_Z9softDelaym+0x22>
		return HAL_Timer_Get_Milli_Seconds();
   b422a:	f005 fa8f 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b422e:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b4230:	f005 fd40 	bl	b9cb4 <spark_process>
   b4234:	e7f4      	b.n	b4220 <_Z9softDelaym+0xc>
   b4236:	bd70      	pop	{r4, r5, r6, pc}
   b4238:	2003e70c 	.word	0x2003e70c

000b423c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b423c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b423e:	2300      	movs	r3, #0
   b4240:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4242:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4244:	4604      	mov	r4, r0
   b4246:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4248:	b12b      	cbz	r3, b4256 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b424a:	2202      	movs	r2, #2
   b424c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b424e:	68eb      	ldr	r3, [r5, #12]
   b4250:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4252:	68ab      	ldr	r3, [r5, #8]
   b4254:	60a3      	str	r3, [r4, #8]
    }
   b4256:	4620      	mov	r0, r4
   b4258:	bd38      	pop	{r3, r4, r5, pc}
	...

000b425c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b425c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4260:	b095      	sub	sp, #84	; 0x54
   b4262:	4605      	mov	r5, r0
        };
   b4264:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4266:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4268:	4690      	mov	r8, r2
   b426a:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b426c:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b426e:	f7ff ffe5 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4272:	a904      	add	r1, sp, #16
   b4274:	a808      	add	r0, sp, #32
   b4276:	f7ff ffe1 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b427a:	a908      	add	r1, sp, #32
   b427c:	4630      	mov	r0, r6
   b427e:	f7ff ffdd 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4282:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4286:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4288:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b428c:	f7ff ff03 	bl	b4096 <_Znwj>
   b4290:	4604      	mov	r4, r0
   b4292:	b1a0      	cbz	r0, b42be <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4294:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4298:	ab01      	add	r3, sp, #4
   b429a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b429e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42a2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b42a6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b42aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b42ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b42ae:	60a3      	str	r3, [r4, #8]
   b42b0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b42b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b42b6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b42ba:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b42bc:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b42be:	4b24      	ldr	r3, [pc, #144]	; (b4350 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b42c0:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b42c2:	4b24      	ldr	r3, [pc, #144]	; (b4354 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b42c4:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b42c6:	2200      	movs	r2, #0
   b42c8:	2300      	movs	r3, #0
   b42ca:	f04f 0900 	mov.w	r9, #0
   b42ce:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b42d2:	4b21      	ldr	r3, [pc, #132]	; (b4358 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b42d4:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b42d8:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42da:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b42dc:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b42e0:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b42e4:	f7ff fed7 	bl	b4096 <_Znwj>
   b42e8:	4604      	mov	r4, r0
   b42ea:	b1d8      	cbz	r0, b4324 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b42ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b42ee:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b42f2:	b133      	cbz	r3, b4302 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b42f4:	2202      	movs	r2, #2
   b42f6:	a910      	add	r1, sp, #64	; 0x40
   b42f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b42fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b42fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b42fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4300:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4302:	4b16      	ldr	r3, [pc, #88]	; (b435c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4304:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4306:	4a16      	ldr	r2, [pc, #88]	; (b4360 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4308:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b430a:	ab01      	add	r3, sp, #4
   b430c:	4640      	mov	r0, r8
   b430e:	4639      	mov	r1, r7
   b4310:	f005 fc66 	bl	b9be0 <system_subscribe_event>
        if (r) {
   b4314:	b1b0      	cbz	r0, b4344 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4316:	4620      	mov	r0, r4
   b4318:	f7ff ff1a 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b431c:	2110      	movs	r1, #16
   b431e:	4620      	mov	r0, r4
   b4320:	f7ff febd 	bl	b409e <_ZdlPvj>
   b4324:	a810      	add	r0, sp, #64	; 0x40
   b4326:	f7ff ff13 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b432a:	4630      	mov	r0, r6
   b432c:	f7ff ff10 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b4330:	a808      	add	r0, sp, #32
   b4332:	f7ff ff0d 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b4336:	a804      	add	r0, sp, #16
   b4338:	f7ff ff0a 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
    }
   b433c:	4628      	mov	r0, r5
   b433e:	b015      	add	sp, #84	; 0x54
   b4340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4344:	9b02      	ldr	r3, [sp, #8]
   b4346:	60ab      	str	r3, [r5, #8]
   b4348:	e9c5 8700 	strd	r8, r7, [r5]
   b434c:	e7ea      	b.n	b4324 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b434e:	bf00      	nop
   b4350:	000b410d 	.word	0x000b410d
   b4354:	000b4365 	.word	0x000b4365
   b4358:	000c0002 	.word	0x000c0002
   b435c:	000b4163 	.word	0x000b4163
   b4360:	000b40e5 	.word	0x000b40e5

000b4364 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4364:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4366:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4368:	4604      	mov	r4, r0
	switch (__op)
   b436a:	d104      	bne.n	b4376 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b436c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b436e:	6003      	str	r3, [r0, #0]
      }
   b4370:	2000      	movs	r0, #0
   b4372:	b003      	add	sp, #12
   b4374:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4376:	2a02      	cmp	r2, #2
   b4378:	d00c      	beq.n	b4394 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b437a:	2a03      	cmp	r2, #3
   b437c:	d1f8      	bne.n	b4370 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b437e:	6804      	ldr	r4, [r0, #0]
   b4380:	2c00      	cmp	r4, #0
   b4382:	d0f5      	beq.n	b4370 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4384:	4620      	mov	r0, r4
   b4386:	f7ff fee3 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b438a:	2110      	movs	r1, #16
   b438c:	4620      	mov	r0, r4
   b438e:	f7ff fe86 	bl	b409e <_ZdlPvj>
   b4392:	e7ed      	b.n	b4370 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4394:	6809      	ldr	r1, [r1, #0]
   b4396:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4398:	2010      	movs	r0, #16
   b439a:	f7ff fe7c 	bl	b4096 <_Znwj>
   b439e:	4605      	mov	r5, r0
   b43a0:	b110      	cbz	r0, b43a8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b43a2:	9901      	ldr	r1, [sp, #4]
   b43a4:	f7ff ff4a 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b43a8:	6025      	str	r5, [r4, #0]
	}
   b43aa:	e7e1      	b.n	b4370 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b43ac:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b43ae:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b43b0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b43b2:	b17c      	cbz	r4, b43d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b43b4:	6863      	ldr	r3, [r4, #4]
   b43b6:	3b01      	subs	r3, #1
   b43b8:	6063      	str	r3, [r4, #4]
   b43ba:	b95b      	cbnz	r3, b43d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b43bc:	6823      	ldr	r3, [r4, #0]
   b43be:	4620      	mov	r0, r4
   b43c0:	689b      	ldr	r3, [r3, #8]
   b43c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43c4:	68a3      	ldr	r3, [r4, #8]
   b43c6:	3b01      	subs	r3, #1
   b43c8:	60a3      	str	r3, [r4, #8]
   b43ca:	b91b      	cbnz	r3, b43d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b43cc:	6823      	ldr	r3, [r4, #0]
   b43ce:	4620      	mov	r0, r4
   b43d0:	68db      	ldr	r3, [r3, #12]
   b43d2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b43d4:	4628      	mov	r0, r5
   b43d6:	bd38      	pop	{r3, r4, r5, pc}

000b43d8 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b43d8:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   b43da:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b43dc:	b094      	sub	sp, #80	; 0x50
   b43de:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   b43e0:	b9f3      	cbnz	r3, b4420 <_Z14UbidotsHandlerPKcS0_+0x48>
    snprintf(responseString, sizeof(responseString),"No Data");
   b43e2:	4922      	ldr	r1, [pc, #136]	; (b446c <_Z14UbidotsHandlerPKcS0_+0x94>)
   b43e4:	a804      	add	r0, sp, #16
   b43e6:	f009 fd0e 	bl	bde06 <strcpy>
  if (sysStatus.get_verboseMode() && Particle.connected()) {
   b43ea:	f000 fd85 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b43ee:	f000 fe96 	bl	b511e <_ZNK13sysStatusData15get_verboseModeEv>
   b43f2:	b178      	cbz	r0, b4414 <_Z14UbidotsHandlerPKcS0_+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43f4:	f005 fc6e 	bl	b9cd4 <spark_cloud_flag_connected>
   b43f8:	b160      	cbz	r0, b4414 <_Z14UbidotsHandlerPKcS0_+0x3c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b43fa:	4b1d      	ldr	r3, [pc, #116]	; (b4470 <_Z14UbidotsHandlerPKcS0_+0x98>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43fc:	491d      	ldr	r1, [pc, #116]	; (b4474 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   b43fe:	781b      	ldrb	r3, [r3, #0]
   b4400:	f88d 3000 	strb.w	r3, [sp]
   b4404:	a802      	add	r0, sp, #8
   b4406:	233c      	movs	r3, #60	; 0x3c
   b4408:	aa04      	add	r2, sp, #16
   b440a:	f006 f84f 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b440e:	a803      	add	r0, sp, #12
   b4410:	f7ff ffcc 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info(responseString);
   b4414:	4818      	ldr	r0, [pc, #96]	; (b4478 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   b4416:	a904      	add	r1, sp, #16
   b4418:	f7ff feaf 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
}
   b441c:	b014      	add	sp, #80	; 0x50
   b441e:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4420:	4608      	mov	r0, r1
   b4422:	f009 fc47 	bl	bdcb4 <atoi>
   b4426:	28c8      	cmp	r0, #200	; 0xc8
   b4428:	d111      	bne.n	b444e <_Z14UbidotsHandlerPKcS0_+0x76>
    snprintf(responseString, sizeof(responseString),"Response Received");
   b442a:	4914      	ldr	r1, [pc, #80]	; (b447c <_Z14UbidotsHandlerPKcS0_+0xa4>)
   b442c:	a804      	add	r0, sp, #16
   b442e:	f009 fcea 	bl	bde06 <strcpy>
	dataInFlight = false;											 // We have received a response - so we can send another
   b4432:	4b13      	ldr	r3, [pc, #76]	; (b4480 <_Z14UbidotsHandlerPKcS0_+0xa8>)
   b4434:	2200      	movs	r2, #0
   b4436:	701a      	strb	r2, [r3, #0]
    sysStatus.set_lastHookResponse(Time.now());                          // Record the last successful Webhook Response
   b4438:	f000 fd5e 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b443c:	4604      	mov	r4, r0
   b443e:	f008 fada 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b4442:	4602      	mov	r2, r0
   b4444:	17c3      	asrs	r3, r0, #31
   b4446:	4620      	mov	r0, r4
   b4448:	f000 fef6 	bl	b5238 <_ZN13sysStatusData20set_lastHookResponseEx>
   b444c:	e7cd      	b.n	b43ea <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b444e:	4620      	mov	r0, r4
   b4450:	f009 fc30 	bl	bdcb4 <atoi>
   b4454:	28c9      	cmp	r0, #201	; 0xc9
   b4456:	d0e8      	beq.n	b442a <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   b4458:	4620      	mov	r0, r4
   b445a:	f009 fc2b 	bl	bdcb4 <atoi>
   b445e:	4a09      	ldr	r2, [pc, #36]	; (b4484 <_Z14UbidotsHandlerPKcS0_+0xac>)
   b4460:	4603      	mov	r3, r0
   b4462:	2140      	movs	r1, #64	; 0x40
   b4464:	a804      	add	r0, sp, #16
   b4466:	f005 fcfd 	bl	b9e64 <snprintf>
   b446a:	e7be      	b.n	b43ea <_Z14UbidotsHandlerPKcS0_+0x12>
   b446c:	000be2f3 	.word	0x000be2f3
   b4470:	2003e454 	.word	0x2003e454
   b4474:	000be32a 	.word	0x000be32a
   b4478:	2003e644 	.word	0x2003e644
   b447c:	000be2fb 	.word	0x000be2fb
   b4480:	2003e590 	.word	0x2003e590
   b4484:	000be30d 	.word	0x000be30d

000b4488 <_Z12dailyCleanupv>:
void dailyCleanup() {
   b4488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b448a:	f005 fc23 	bl	b9cd4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Daily Cleanup","Running", PRIVATE);   // Make sure this is being run
   b448e:	b160      	cbz	r0, b44aa <_Z12dailyCleanupv+0x22>
   b4490:	4b12      	ldr	r3, [pc, #72]	; (b44dc <_Z12dailyCleanupv+0x54>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4492:	4a13      	ldr	r2, [pc, #76]	; (b44e0 <_Z12dailyCleanupv+0x58>)
   b4494:	781b      	ldrb	r3, [r3, #0]
   b4496:	f88d 3000 	strb.w	r3, [sp]
   b449a:	a802      	add	r0, sp, #8
   b449c:	4911      	ldr	r1, [pc, #68]	; (b44e4 <_Z12dailyCleanupv+0x5c>)
   b449e:	233c      	movs	r3, #60	; 0x3c
   b44a0:	f006 f804 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b44a4:	a803      	add	r0, sp, #12
   b44a6:	f7ff ff81 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info("Running Daily Cleanup");
   b44aa:	490f      	ldr	r1, [pc, #60]	; (b44e8 <_Z12dailyCleanupv+0x60>)
   b44ac:	480f      	ldr	r0, [pc, #60]	; (b44ec <_Z12dailyCleanupv+0x64>)
   b44ae:	f7ff fe64 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_verboseMode(false);                                       // Saves bandwidth - keep extra chatter off
   b44b2:	f000 fd21 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b44b6:	2100      	movs	r1, #0
   b44b8:	f000 fe5d 	bl	b5176 <_ZN13sysStatusData15set_verboseModeEb>
  if (sysStatus.get_solarPowerMode() || current.get_stateOfCharge() <= 65) {     // If Solar or if the battery is being discharged
   b44bc:	f000 fd1c 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b44c0:	f000 fe32 	bl	b5128 <_ZNK13sysStatusData18get_solarPowerModeEv>
   b44c4:	b918      	cbnz	r0, b44ce <_Z12dailyCleanupv+0x46>
   b44c6:	f000 fd75 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b44ca:	f001 f839 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
  current.resetEverything();                                                   // If so, we need to Zero the counts for the new day
   b44ce:	f000 fd71 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
}
   b44d2:	b005      	add	sp, #20
   b44d4:	f85d eb04 	ldr.w	lr, [sp], #4
  current.resetEverything();                                                   // If so, we need to Zero the counts for the new day
   b44d8:	f000 beb8 	b.w	b524c <_ZN17currentStatusData15resetEverythingEv>
   b44dc:	2003e454 	.word	0x2003e454
   b44e0:	000be337 	.word	0x000be337
   b44e4:	000be347 	.word	0x000be347
   b44e8:	000be33f 	.word	0x000be33f
   b44ec:	2003e644 	.word	0x2003e644

000b44f0 <_GLOBAL__sub_I_currentPointRelease>:
        val_(val) {
   b44f0:	4b15      	ldr	r3, [pc, #84]	; (b4548 <_GLOBAL__sub_I_currentPointRelease+0x58>)
   b44f2:	b510      	push	{r4, lr}
   b44f4:	2401      	movs	r4, #1
   b44f6:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b44f8:	f008 fc30 	bl	bcd5c <spark_protocol_instance>
   b44fc:	2300      	movs	r3, #0
   b44fe:	461a      	mov	r2, r3
   b4500:	4621      	mov	r1, r4
   b4502:	f008 fc3b 	bl	bcd7c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4506:	f008 fc29 	bl	bcd5c <spark_protocol_instance>
   b450a:	2300      	movs	r3, #0
   b450c:	210d      	movs	r1, #13
   b450e:	461a      	mov	r2, r3
   b4510:	f008 fc2c 	bl	bcd6c <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4514:	4b0d      	ldr	r3, [pc, #52]	; (b454c <_GLOBAL__sub_I_currentPointRelease+0x5c>)
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b4516:	480e      	ldr	r0, [pc, #56]	; (b4550 <_GLOBAL__sub_I_currentPointRelease+0x60>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b4518:	751c      	strb	r4, [r3, #20]
        : config_(config) {
   b451a:	1d1a      	adds	r2, r3, #4
   b451c:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b451e:	4a0d      	ldr	r2, [pc, #52]	; (b4554 <_GLOBAL__sub_I_currentPointRelease+0x64>)
   b4520:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4522:	2200      	movs	r2, #0
   b4524:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4528:	611a      	str	r2, [r3, #16]
   b452a:	2306      	movs	r3, #6
   b452c:	f840 3b04 	str.w	r3, [r0], #4
   b4530:	f002 ff12 	bl	b7358 <_ZN22LocalTimePosixTimezoneC1Ev>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4534:	f008 fcf2 	bl	bcf1c <_Z19__fetch_global_Wirev>
   b4538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b453c:	4601      	mov	r1, r0
   b453e:	2269      	movs	r2, #105	; 0x69
   b4540:	4805      	ldr	r0, [pc, #20]	; (b4558 <_GLOBAL__sub_I_currentPointRelease+0x68>)
   b4542:	f004 bc21 	b.w	b8d88 <_ZN6AB1805C1ER7TwoWireh>
   b4546:	bf00      	nop
   b4548:	2003e454 	.word	0x2003e454
   b454c:	2003e488 	.word	0x2003e488
   b4550:	2003e4a0 	.word	0x2003e4a0
   b4554:	00030010 	.word	0x00030010
   b4558:	2003e468 	.word	0x2003e468

000b455c <setup>:
void setup() {
   b455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4560:	b0c0      	sub	sp, #256	; 0x100
        return spark_deviceID();
   b4562:	a806      	add	r0, sp, #24
   b4564:	f005 fbbe 	bl	b9ce4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4568:	2300      	movs	r3, #0
   b456a:	227d      	movs	r2, #125	; 0x7d
   b456c:	a920      	add	r1, sp, #128	; 0x80
   b456e:	a806      	add	r0, sp, #24
   b4570:	f007 ffae 	bl	bc4d0 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4574:	2300      	movs	r3, #0
   b4576:	497c      	ldr	r1, [pc, #496]	; (b4768 <setup+0x20c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4578:	4f7c      	ldr	r7, [pc, #496]	; (b476c <setup+0x210>)
	    _M_invoker = &_My_handler::_M_invoke;
   b457a:	4d7d      	ldr	r5, [pc, #500]	; (b4770 <setup+0x214>)
	    _M_manager = &_My_handler::_M_manager;
   b457c:	4c7d      	ldr	r4, [pc, #500]	; (b4774 <setup+0x218>)
   b457e:	461a      	mov	r2, r3
   b4580:	e9cd 3300 	strd	r3, r3, [sp]
   b4584:	a820      	add	r0, sp, #128	; 0x80
   b4586:	f005 fbbd 	bl	b9d04 <spark_subscribe>
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b458a:	ab0a      	add	r3, sp, #40	; 0x28
   b458c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4590:	9300      	str	r3, [sp, #0]
   b4592:	a802      	add	r0, sp, #8
   b4594:	2300      	movs	r3, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4596:	970a      	str	r7, [sp, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
   b4598:	950d      	str	r5, [sp, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
   b459a:	940c      	str	r4, [sp, #48]	; 0x30
   b459c:	f7ff fe5e 	bl	b425c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b45a0:	a80a      	add	r0, sp, #40	; 0x28
   b45a2:	f7ff fdd5 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	Particle_Functions::instance().setup();			// Initialize Particle Functions and Variables
   b45a6:	f001 f8af 	bl	b5708 <_ZN18Particle_Functions8instanceEv>
   b45aa:	f001 f8bf 	bl	b572c <_ZN18Particle_Functions5setupEv>
    initializePinModes();                           // Sets the pinModes
   b45ae:	f001 fcfd 	bl	b5fac <_Z18initializePinModesv>
	digitalWrite(BLUE_LED, HIGH);					// Turn on the Blue LED for setup
   b45b2:	4b71      	ldr	r3, [pc, #452]	; (b4778 <setup+0x21c>)
   b45b4:	881e      	ldrh	r6, [r3, #0]
   b45b6:	2101      	movs	r1, #1
   b45b8:	4630      	mov	r0, r6
   b45ba:	f008 fc36 	bl	bce2a <digitalWrite>
    initializePowerCfg();                           // Sets the power configuration for solar
   b45be:	f001 fd19 	bl	b5ff4 <_Z18initializePowerCfgv>
	softDelay(2000);								// This helps us get a battery measurment
   b45c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b45c6:	f7ff fe25 	bl	b4214 <_Z9softDelaym>
	sysStatus.setup();								// Initialize persistent storage
   b45ca:	f000 fc95 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b45ce:	6803      	ldr	r3, [r0, #0]
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	4798      	blx	r3
	current.setup();
   b45d4:	f000 fcee 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b45d8:	6803      	ldr	r3, [r0, #0]
   b45da:	681b      	ldr	r3, [r3, #0]
   b45dc:	4798      	blx	r3
  	PublishQueuePosix::instance().setup();          // Start the Publish Queue
   b45de:	f003 fa2b 	bl	b7a38 <_ZN17PublishQueuePosix8instanceEv>
   b45e2:	f003 fc35 	bl	b7e50 <_ZN17PublishQueuePosix5setupEv>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b45e6:	4865      	ldr	r0, [pc, #404]	; (b477c <setup+0x220>)
   b45e8:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b45ea:	2101      	movs	r1, #1
   b45ec:	8143      	strh	r3, [r0, #10]
   b45ee:	f004 ffbb 	bl	b9568 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b45f2:	217c      	movs	r1, #124	; 0x7c
   b45f4:	4861      	ldr	r0, [pc, #388]	; (b477c <setup+0x220>)
   b45f6:	f004 fcb7 	bl	b8f68 <_ZN6AB18056setWDTEi>
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b45fa:	ab0a      	add	r3, sp, #40	; 0x28
   b45fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4600:	9300      	str	r3, [sp, #0]
   b4602:	a802      	add	r0, sp, #8
   b4604:	2300      	movs	r3, #0
	    _M_manager = &_My_handler::_M_manager;
   b4606:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b460a:	970a      	str	r7, [sp, #40]	; 0x28
   b460c:	f7ff fe26 	bl	b425c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4610:	a80a      	add	r0, sp, #40	; 0x28
   b4612:	f7ff fd9d 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
  	takeMeasurements();                             // Populates values so you can read them before the hour
   b4616:	f001 fe1f 	bl	b6258 <_Z16takeMeasurementsv>
	if (!digitalRead(BUTTON_PIN)) {						// The user will press this button at startup to reset settings
   b461a:	4b59      	ldr	r3, [pc, #356]	; (b4780 <setup+0x224>)
   b461c:	4d59      	ldr	r5, [pc, #356]	; (b4784 <setup+0x228>)
   b461e:	881f      	ldrh	r7, [r3, #0]
   b4620:	4638      	mov	r0, r7
   b4622:	f008 fc1b 	bl	bce5c <digitalRead>
   b4626:	b950      	cbnz	r0, b463e <setup+0xe2>
		Log.info("User button pressed at startup - setting defaults");
   b4628:	4957      	ldr	r1, [pc, #348]	; (b4788 <setup+0x22c>)
   b462a:	4858      	ldr	r0, [pc, #352]	; (b478c <setup+0x230>)
   b462c:	f7ff fda5 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b4630:	2304      	movs	r3, #4
   b4632:	702b      	strb	r3, [r5, #0]
		sysStatus.initialize();                  	// Make sure the device wakes up and connects - reset to defaults and exit low power mode
   b4634:	f000 fc60 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4638:	6803      	ldr	r3, [r0, #0]
   b463a:	699b      	ldr	r3, [r3, #24]
   b463c:	4798      	blx	r3
	if (Time.day(sysStatus.get_lastConnection() != Time.day())) {
   b463e:	f000 fc5b 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4642:	f000 fdcc 	bl	b51de <_ZNK13sysStatusData18get_lastConnectionEv>
   b4646:	460c      	mov	r4, r1
   b4648:	4680      	mov	r8, r0
   b464a:	f008 f9f1 	bl	bca30 <_ZN9TimeClass3dayEv>
   b464e:	17c3      	asrs	r3, r0, #31
   b4650:	42a3      	cmp	r3, r4
   b4652:	bf08      	it	eq
   b4654:	4540      	cmpeq	r0, r8
   b4656:	bf14      	ite	ne
   b4658:	2001      	movne	r0, #1
   b465a:	2000      	moveq	r0, #0
   b465c:	2100      	movs	r1, #0
   b465e:	f008 f8a9 	bl	bc7b4 <_ZN9TimeClass3dayEx>
   b4662:	b128      	cbz	r0, b4670 <setup+0x114>
		Log.info("New day, resetting counts");
   b4664:	494a      	ldr	r1, [pc, #296]	; (b4790 <setup+0x234>)
   b4666:	4849      	ldr	r0, [pc, #292]	; (b478c <setup+0x230>)
   b4668:	f7ff fd87 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
		dailyCleanup();
   b466c:	f7ff ff0c 	bl	b4488 <_Z12dailyCleanupv>
	if (!Time.isValid()) {
   b4670:	f008 f9a4 	bl	bc9bc <_ZN9TimeClass7isValidEv>
   b4674:	2800      	cmp	r0, #0
   b4676:	d167      	bne.n	b4748 <setup+0x1ec>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4678:	f008 f9bd 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b467c:	17c3      	asrs	r3, r0, #31
   b467e:	4602      	mov	r2, r0
   b4680:	a80a      	add	r0, sp, #40	; 0x28
   b4682:	f008 f8b3 	bl	bc7ec <_ZN9TimeClass7timeStrEx>
		Log.info("Time is invalid -  %s so connecting", Time.timeStr().c_str());
   b4686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4688:	4942      	ldr	r1, [pc, #264]	; (b4794 <setup+0x238>)
   b468a:	4840      	ldr	r0, [pc, #256]	; (b478c <setup+0x230>)
   b468c:	f7ff fd75 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b4690:	a80a      	add	r0, sp, #40	; 0x28
   b4692:	f007 fde5 	bl	bc260 <_ZN6StringD1Ev>
		state = CONNECTING_STATE;
   b4696:	2304      	movs	r3, #4
   b4698:	702b      	strb	r3, [r5, #0]
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b469a:	f002 ff3b 	bl	b7514 <_ZN9LocalTime8instanceEv>
   b469e:	493e      	ldr	r1, [pc, #248]	; (b4798 <setup+0x23c>)
   b46a0:	4604      	mov	r4, r0
   b46a2:	a80a      	add	r0, sp, #40	; 0x28
   b46a4:	f002 ff0a 	bl	b74bc <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b46a8:	a90b      	add	r1, sp, #44	; 0x2c
   b46aa:	f104 0008 	add.w	r0, r4, #8
   b46ae:	f007 fe5e 	bl	bc36e <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b46b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b46b4:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b46b6:	a911      	add	r1, sp, #68	; 0x44
   b46b8:	f104 0020 	add.w	r0, r4, #32
   b46bc:	f007 fe57 	bl	bc36e <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b46c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b46c2:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b46c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b46c6:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b46c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b46ca:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b46cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b46ce:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b46d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b46d2:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b46d4:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   b46d8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b46dc:	a80a      	add	r0, sp, #40	; 0x28
   b46de:	f002 fccd 	bl	b707c <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b46e2:	f008 f988 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b46e6:	4b2d      	ldr	r3, [pc, #180]	; (b479c <setup+0x240>)
   b46e8:	17c2      	asrs	r2, r0, #31
   b46ea:	e9c3 0218 	strd	r0, r2, [r3, #96]	; 0x60
	conv.withCurrentTime().convert();  	
   b46ee:	4618      	mov	r0, r3
   b46f0:	f002 ff88 	bl	b7604 <_ZN16LocalTimeConvert7convertEv>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b46f4:	2200      	movs	r2, #0
   b46f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b46fa:	4929      	ldr	r1, [pc, #164]	; (b47a0 <setup+0x244>)
   b46fc:	9200      	str	r2, [sp, #0]
   b46fe:	4638      	mov	r0, r7
   b4700:	f006 f92a 	bl	ba958 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b4704:	782b      	ldrb	r3, [r5, #0]
   b4706:	b90b      	cbnz	r3, b470c <setup+0x1b0>
   b4708:	2303      	movs	r3, #3
   b470a:	702b      	strb	r3, [r5, #0]
  	Log.info("Startup complete with last connect %s", Time.format(sysStatus.get_lastConnection(), "%T").c_str());
   b470c:	f000 fbf4 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4710:	f000 fd65 	bl	b51de <_ZNK13sysStatusData18get_lastConnectionEv>
   b4714:	460b      	mov	r3, r1
   b4716:	4923      	ldr	r1, [pc, #140]	; (b47a4 <setup+0x248>)
   b4718:	9100      	str	r1, [sp, #0]
   b471a:	4602      	mov	r2, r0
   b471c:	4922      	ldr	r1, [pc, #136]	; (b47a8 <setup+0x24c>)
   b471e:	a80a      	add	r0, sp, #40	; 0x28
   b4720:	f008 f90a 	bl	bc938 <_ZN9TimeClass6formatExPKc>
   b4724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4726:	4921      	ldr	r1, [pc, #132]	; (b47ac <setup+0x250>)
   b4728:	4818      	ldr	r0, [pc, #96]	; (b478c <setup+0x230>)
   b472a:	f7ff fd26 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b472e:	a80a      	add	r0, sp, #40	; 0x28
   b4730:	f007 fd96 	bl	bc260 <_ZN6StringD1Ev>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4734:	2100      	movs	r1, #0
   b4736:	4630      	mov	r0, r6
   b4738:	f008 fb77 	bl	bce2a <digitalWrite>
	String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   b473c:	a806      	add	r0, sp, #24
   b473e:	f007 fd8f 	bl	bc260 <_ZN6StringD1Ev>
}
   b4742:	b040      	add	sp, #256	; 0x100
   b4744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4748:	f008 f955 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b474c:	17c3      	asrs	r3, r0, #31
   b474e:	4602      	mov	r2, r0
   b4750:	a80a      	add	r0, sp, #40	; 0x28
   b4752:	f008 f84b 	bl	bc7ec <_ZN9TimeClass7timeStrEx>
	else Log.info("Time is valid - %s", Time.timeStr().c_str());
   b4756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4758:	4915      	ldr	r1, [pc, #84]	; (b47b0 <setup+0x254>)
   b475a:	480c      	ldr	r0, [pc, #48]	; (b478c <setup+0x230>)
   b475c:	f7ff fd0d 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b4760:	a80a      	add	r0, sp, #40	; 0x28
   b4762:	f007 fd7d 	bl	bc260 <_ZN6StringD1Ev>
   b4766:	e798      	b.n	b469a <setup+0x13e>
   b4768:	000b43d9 	.word	0x000b43d9
   b476c:	000b40cd 	.word	0x000b40cd
   b4770:	000b4147 	.word	0x000b4147
   b4774:	000b4133 	.word	0x000b4133
   b4778:	000bec3a 	.word	0x000bec3a
   b477c:	2003e468 	.word	0x2003e468
   b4780:	000bec3c 	.word	0x000bec3c
   b4784:	2003e592 	.word	0x2003e592
   b4788:	000be355 	.word	0x000be355
   b478c:	2003e644 	.word	0x2003e644
   b4790:	000be387 	.word	0x000be387
   b4794:	000be3a1 	.word	0x000be3a1
   b4798:	000be3d8 	.word	0x000be3d8
   b479c:	2003e4a0 	.word	0x2003e4a0
   b47a0:	000b40d9 	.word	0x000b40d9
   b47a4:	000be3ff 	.word	0x000be3ff
   b47a8:	2003e698 	.word	0x2003e698
   b47ac:	000be402 	.word	0x000be402
   b47b0:	000be3c5 	.word	0x000be3c5

000b47b4 <loop>:
void loop() {
   b47b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b47b8:	4ca9      	ldr	r4, [pc, #676]	; (b4a60 <loop+0x2ac>)
void loop() {
   b47ba:	ed2d 8b02 	vpush	{d8}
   b47be:	7823      	ldrb	r3, [r4, #0]
   b47c0:	3b01      	subs	r3, #1
   b47c2:	b099      	sub	sp, #100	; 0x64
   b47c4:	2b06      	cmp	r3, #6
   b47c6:	d82b      	bhi.n	b4820 <loop+0x6c>
   b47c8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b47cc:	0007024d 	.word	0x0007024d
   b47d0:	01e50048 	.word	0x01e50048
   b47d4:	011b002a 	.word	0x011b002a
   b47d8:	01bf      	.short	0x01bf
			if (state != oldState) publishStateTransition();
   b47da:	4ba2      	ldr	r3, [pc, #648]	; (b4a64 <loop+0x2b0>)
   b47dc:	781b      	ldrb	r3, [r3, #0]
   b47de:	2b02      	cmp	r3, #2
   b47e0:	d001      	beq.n	b47e6 <loop+0x32>
   b47e2:	f7ff fce3 	bl	b41ac <_Z22publishStateTransitionv>
			if (sysStatus.get_lowPowerMode() && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;         // When in low power mode, we can nap between taps
   b47e6:	f000 fb87 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b47ea:	f000 fca2 	bl	b5132 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b47ee:	b150      	cbz	r0, b4806 <loop+0x52>
   b47f0:	f004 ffac 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
   b47f4:	4b9c      	ldr	r3, [pc, #624]	; (b4a68 <loop+0x2b4>)
   b47f6:	681b      	ldr	r3, [r3, #0]
   b47f8:	1ac0      	subs	r0, r0, r3
   b47fa:	4b9c      	ldr	r3, [pc, #624]	; (b4a6c <loop+0x2b8>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	4298      	cmp	r0, r3
   b4800:	bf84      	itt	hi
   b4802:	2303      	movhi	r3, #3
   b4804:	7023      	strbhi	r3, [r4, #0]
			if (Time.hour() != Time.hour(sysStatus.get_lastReport())) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   b4806:	f008 f907 	bl	bca18 <_ZN9TimeClass4hourEv>
   b480a:	4605      	mov	r5, r0
   b480c:	f000 fb74 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4810:	f000 fce0 	bl	b51d4 <_ZNK13sysStatusData14get_lastReportEv>
   b4814:	f007 ffc6 	bl	bc7a4 <_ZN9TimeClass4hourEx>
   b4818:	4285      	cmp	r5, r0
   b481a:	d001      	beq.n	b4820 <loop+0x6c>
   b481c:	2306      	movs	r3, #6
					state = ERROR_STATE;
   b481e:	7023      	strb	r3, [r4, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4820:	4893      	ldr	r0, [pc, #588]	; (b4a70 <loop+0x2bc>)
   b4822:	f004 fe4f 	bl	b94c4 <_ZN6AB18054loopEv>
	current.loop();
   b4826:	f000 fbc5 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b482a:	f000 fbdd 	bl	b4fe8 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b482e:	f000 fb63 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4832:	f000 fb7b 	bl	b4f2c <_ZN13sysStatusData4loopEv>
	PublishQueuePosix::instance().loop();                                // Check to see if we need to tend to the message queue
   b4836:	f003 f8ff 	bl	b7a38 <_ZN17PublishQueuePosix8instanceEv>
   b483a:	f002 ffef 	bl	b781c <_ZN17PublishQueuePosix4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b483e:	4b8d      	ldr	r3, [pc, #564]	; (b4a74 <loop+0x2c0>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	2b00      	cmp	r3, #0
   b4844:	db05      	blt.n	b4852 <loop+0x9e>
		Log.info("Resetting due to low memory");
   b4846:	498c      	ldr	r1, [pc, #560]	; (b4a78 <loop+0x2c4>)
   b4848:	488c      	ldr	r0, [pc, #560]	; (b4a7c <loop+0x2c8>)
   b484a:	f7ff fc96 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
		state = ERROR_STATE;
   b484e:	2301      	movs	r3, #1
   b4850:	7023      	strb	r3, [r4, #0]
}
   b4852:	b019      	add	sp, #100	; 0x64
   b4854:	ecbd 8b02 	vpop	{d8}
   b4858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b485c:	4b81      	ldr	r3, [pc, #516]	; (b4a64 <loop+0x2b0>)
   b485e:	781b      	ldrb	r3, [r3, #0]
   b4860:	2b03      	cmp	r3, #3
   b4862:	d001      	beq.n	b4868 <loop+0xb4>
   b4864:	f7ff fca2 	bl	b41ac <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4868:	f005 fa34 	bl	b9cd4 <spark_cloud_flag_connected>
			if (Particle.connected() || !Cellular.isOff()) {
   b486c:	b130      	cbz	r0, b487c <loop+0xc8>
				if (!Particle_Functions::instance().disconnectFromParticle()) {                                 // Disconnect cleanly from Particle and power down the modem
   b486e:	f000 ff4b 	bl	b5708 <_ZN18Particle_Functions8instanceEv>
   b4872:	f001 fb03 	bl	b5e7c <_ZN18Particle_Functions22disconnectFromParticleEv>
   b4876:	b930      	cbnz	r0, b4886 <loop+0xd2>
					state = ERROR_STATE;
   b4878:	2301      	movs	r3, #1
   b487a:	e7d0      	b.n	b481e <loop+0x6a>
			if (Particle.connected() || !Cellular.isOff()) {
   b487c:	4880      	ldr	r0, [pc, #512]	; (b4a80 <loop+0x2cc>)
   b487e:	f007 fa41 	bl	bbd04 <_ZN5spark12NetworkClass5isOffEv>
   b4882:	2800      	cmp	r0, #0
   b4884:	d0f3      	beq.n	b486e <loop+0xba>
			int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary) + 1;;	// Figure out how long to sleep 		
   b4886:	f008 f8b6 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b488a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b488e:	4d7d      	ldr	r5, [pc, #500]	; (b4a84 <loop+0x2d0>)
   b4890:	fb90 f2f6 	sdiv	r2, r0, r6
   b4894:	fb02 0616 	mls	r6, r2, r6, r0
   b4898:	f5c6 6661 	rsb	r6, r6, #3600	; 0xe10
   b489c:	f5b6 6f61 	cmp.w	r6, #3600	; 0xe10
   b48a0:	7d2b      	ldrb	r3, [r5, #20]
   b48a2:	bfa8      	it	ge
   b48a4:	f44f 6661 	movge.w	r6, #3600	; 0xe10
   b48a8:	3601      	adds	r6, #1
   b48aa:	b10b      	cbz	r3, b48b0 <loop+0xfc>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b48ac:	2202      	movs	r2, #2
   b48ae:	722a      	strb	r2, [r5, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b48b0:	4a75      	ldr	r2, [pc, #468]	; (b4a88 <loop+0x2d4>)
   b48b2:	f8b2 8000 	ldrh.w	r8, [r2]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
   b48b6:	2b00      	cmp	r3, #0
   b48b8:	d04b      	beq.n	b4952 <loop+0x19e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b48ba:	682b      	ldr	r3, [r5, #0]
   b48bc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b48be:	b1f3      	cbz	r3, b48fe <loop+0x14a>
            if (start->type == type) {
   b48c0:	889a      	ldrh	r2, [r3, #4]
   b48c2:	2a01      	cmp	r2, #1
   b48c4:	d006      	beq.n	b48d4 <loop+0x120>
            start = start->next;
   b48c6:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b48c8:	e7f9      	b.n	b48be <loop+0x10a>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b48ca:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b48cc:	b1bb      	cbz	r3, b48fe <loop+0x14a>
            if (start->type == type) {
   b48ce:	889a      	ldrh	r2, [r3, #4]
   b48d0:	2a01      	cmp	r2, #1
   b48d2:	d1fa      	bne.n	b48ca <loop+0x116>
                if (gpioWakeup->pin == pin) {
   b48d4:	899a      	ldrh	r2, [r3, #12]
   b48d6:	4542      	cmp	r2, r8
   b48d8:	d1f7      	bne.n	b48ca <loop+0x116>
                    gpioWakeup->mode = mode;
   b48da:	2200      	movs	r2, #0
   b48dc:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b48de:	7d2b      	ldrb	r3, [r5, #20]
   b48e0:	2b00      	cmp	r3, #0
   b48e2:	d036      	beq.n	b4952 <loop+0x19e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b48e4:	682b      	ldr	r3, [r5, #0]
				.duration(wakeInSeconds * 1000L);
   b48e6:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
   b48ea:	68db      	ldr	r3, [r3, #12]
   b48ec:	fb09 f906 	mul.w	r9, r9, r6
        if (!start) {
   b48f0:	b1db      	cbz	r3, b492a <loop+0x176>
            if (start->type == type) {
   b48f2:	889a      	ldrh	r2, [r3, #4]
   b48f4:	2a04      	cmp	r2, #4
   b48f6:	f000 81de 	beq.w	b4cb6 <loop+0x502>
            start = start->next;
   b48fa:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b48fc:	e7f8      	b.n	b48f0 <loop+0x13c>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b48fe:	4963      	ldr	r1, [pc, #396]	; (b4a8c <loop+0x2d8>)
   b4900:	2010      	movs	r0, #16
   b4902:	f008 fb93 	bl	bd02c <_ZnwjRKSt9nothrow_t>
   b4906:	4607      	mov	r7, r0
   b4908:	2800      	cmp	r0, #0
   b490a:	f000 81d7 	beq.w	b4cbc <loop+0x508>
   b490e:	2210      	movs	r2, #16
   b4910:	2100      	movs	r1, #0
   b4912:	f009 fa21 	bl	bdd58 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4916:	4b5e      	ldr	r3, [pc, #376]	; (b4a90 <loop+0x2dc>)
   b4918:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b491a:	2301      	movs	r3, #1
   b491c:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b491e:	692b      	ldr	r3, [r5, #16]
   b4920:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b4922:	f8a7 800c 	strh.w	r8, [r7, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4926:	612f      	str	r7, [r5, #16]
   b4928:	e7d9      	b.n	b48de <loop+0x12a>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b492a:	4958      	ldr	r1, [pc, #352]	; (b4a8c <loop+0x2d8>)
   b492c:	2010      	movs	r0, #16
   b492e:	f008 fb7d 	bl	bd02c <_ZnwjRKSt9nothrow_t>
   b4932:	4607      	mov	r7, r0
   b4934:	2800      	cmp	r0, #0
   b4936:	f000 81c1 	beq.w	b4cbc <loop+0x508>
   b493a:	2210      	movs	r2, #16
   b493c:	2100      	movs	r1, #0
   b493e:	f009 fa0b 	bl	bdd58 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4942:	4b53      	ldr	r3, [pc, #332]	; (b4a90 <loop+0x2dc>)
   b4944:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4946:	2304      	movs	r3, #4
   b4948:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b494a:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b494c:	612f      	str	r7, [r5, #16]
            wakeupSource->ms = ms;
   b494e:	e9c7 3902 	strd	r3, r9, [r7, #8]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4952:	2100      	movs	r1, #0
   b4954:	4846      	ldr	r0, [pc, #280]	; (b4a70 <loop+0x2bc>)
   b4956:	f004 fb07 	bl	b8f68 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b495a:	494a      	ldr	r1, [pc, #296]	; (b4a84 <loop+0x2d0>)
   b495c:	a805      	add	r0, sp, #20
   b495e:	f007 fe59 	bl	bc614 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4962:	4843      	ldr	r0, [pc, #268]	; (b4a70 <loop+0x2bc>)
   b4964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4968:	f004 fafe 	bl	b8f68 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b496c:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b496e:	b343      	cbz	r3, b49c2 <loop+0x20e>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4970:	889a      	ldrh	r2, [r3, #4]
   b4972:	2a01      	cmp	r2, #1
   b4974:	d125      	bne.n	b49c2 <loop+0x20e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4976:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4978:	4598      	cmp	r8, r3
   b497a:	d125      	bne.n	b49c8 <loop+0x214>
				Log.info("Woke with user button - Resetting hours and going to connect");
   b497c:	4945      	ldr	r1, [pc, #276]	; (b4a94 <loop+0x2e0>)
   b497e:	483f      	ldr	r0, [pc, #252]	; (b4a7c <loop+0x2c8>)
   b4980:	f7ff fbfb 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_lowPowerMode(false);
   b4984:	f000 fab8 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4988:	2100      	movs	r1, #0
   b498a:	f000 fc00 	bl	b518e <_ZN13sysStatusData16set_lowPowerModeEb>
				sysStatus.set_closeTime(24);
   b498e:	f000 fab3 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4992:	2118      	movs	r1, #24
   b4994:	f000 fb9f 	bl	b50d6 <_ZN13sysStatusData13set_closeTimeEh>
				sysStatus.set_openTime(0);
   b4998:	f000 faae 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b499c:	2100      	movs	r1, #0
   b499e:	f000 fb94 	bl	b50ca <_ZN13sysStatusData12set_openTimeEh>
				stayAwake = stayAwakeLong;
   b49a2:	4b32      	ldr	r3, [pc, #200]	; (b4a6c <loop+0x2b8>)
   b49a4:	4a3c      	ldr	r2, [pc, #240]	; (b4a98 <loop+0x2e4>)
   b49a6:	601a      	str	r2, [r3, #0]
   b49a8:	f004 fed0 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();
   b49ac:	4b2e      	ldr	r3, [pc, #184]	; (b4a68 <loop+0x2b4>)
   b49ae:	6018      	str	r0, [r3, #0]
				state = CONNECTING_STATE;
   b49b0:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b49b2:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b49b4:	7023      	strb	r3, [r4, #0]
   b49b6:	2800      	cmp	r0, #0
   b49b8:	f43f af32 	beq.w	b4820 <loop+0x6c>
            free(wakeupSource_);
   b49bc:	f005 fa32 	bl	b9e24 <free>
		} break;
   b49c0:	e72e      	b.n	b4820 <loop+0x6c>
            return std::numeric_limits<pin_t>::max();
   b49c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b49c6:	e7d7      	b.n	b4978 <loop+0x1c4>
				softDelay(2000);											// Gives the device a couple seconds to get the battery reading
   b49c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b49cc:	f7ff fc22 	bl	b4214 <_Z9softDelaym>
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b49d0:	f008 f811 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b49d4:	4b31      	ldr	r3, [pc, #196]	; (b4a9c <loop+0x2e8>)
   b49d6:	4932      	ldr	r1, [pc, #200]	; (b4aa0 <loop+0x2ec>)
   b49d8:	9300      	str	r3, [sp, #0]
   b49da:	1982      	adds	r2, r0, r6
   b49dc:	17d3      	asrs	r3, r2, #31
   b49de:	a808      	add	r0, sp, #32
   b49e0:	f007 ffaa 	bl	bc938 <_ZN9TimeClass6formatExPKc>
	const char * c_str() const { return buffer; }
   b49e4:	9a08      	ldr	r2, [sp, #32]
   b49e6:	9203      	str	r2, [sp, #12]
   b49e8:	f007 fe74 	bl	bc6d4 <_ZN11SystemClass10freeMemoryEv>
   b49ec:	9a03      	ldr	r2, [sp, #12]
   b49ee:	492d      	ldr	r1, [pc, #180]	; (b4aa4 <loop+0x2f0>)
   b49f0:	4603      	mov	r3, r0
   b49f2:	4822      	ldr	r0, [pc, #136]	; (b4a7c <loop+0x2c8>)
   b49f4:	f7ff fbc1 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b49f8:	a808      	add	r0, sp, #32
   b49fa:	f007 fc31 	bl	bc260 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b49fe:	2302      	movs	r3, #2
   b4a00:	e7d7      	b.n	b49b2 <loop+0x1fe>
			if (state != oldState) publishStateTransition();
   b4a02:	4b18      	ldr	r3, [pc, #96]	; (b4a64 <loop+0x2b0>)
   b4a04:	781b      	ldrb	r3, [r3, #0]
   b4a06:	2b06      	cmp	r3, #6
   b4a08:	d001      	beq.n	b4a0e <loop+0x25a>
   b4a0a:	f7ff fbcf 	bl	b41ac <_Z22publishStateTransitionv>
			sysStatus.set_lastReport(Time.now());                              // We are only going to report once each hour from the IDLE state.  We may or may not connect to Particle
   b4a0e:	f000 fa73 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4a12:	4605      	mov	r5, r0
   b4a14:	f007 ffef 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b4a18:	4602      	mov	r2, r0
   b4a1a:	17c3      	asrs	r3, r0, #31
   b4a1c:	4628      	mov	r0, r5
   b4a1e:	f000 fc01 	bl	b5224 <_ZN13sysStatusData14set_lastReportEx>
			takeMeasurements();                                                // Take Measurements here for reporting
   b4a22:	f001 fc19 	bl	b6258 <_Z16takeMeasurementsv>
			if (Time.hour() == sysStatus.get_openTime()) dailyCleanup();       // Once a day, clean house and publish to Google Sheets
   b4a26:	f007 fff7 	bl	bca18 <_ZN9TimeClass4hourEv>
   b4a2a:	4605      	mov	r5, r0
   b4a2c:	f000 fa64 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4a30:	f000 fb13 	bl	b505a <_ZNK13sysStatusData12get_openTimeEv>
   b4a34:	4285      	cmp	r5, r0
   b4a36:	d101      	bne.n	b4a3c <loop+0x288>
   b4a38:	f7ff fd26 	bl	b4488 <_Z12dailyCleanupv>
			Particle_Functions::instance().sendEvent();                        // Publish hourly but not at opening time as there is nothing to publish
   b4a3c:	f000 fe64 	bl	b5708 <_ZN18Particle_Functions8instanceEv>
   b4a40:	f000 feb6 	bl	b57b0 <_ZN18Particle_Functions9sendEventEv>
			state = CONNECTING_STATE;                                          // Default behaviour would be to connect and send report to Ubidots
   b4a44:	2304      	movs	r3, #4
   b4a46:	7023      	strb	r3, [r4, #0]
   b4a48:	f005 f944 	bl	b9cd4 <spark_cloud_flag_connected>
			if (Particle.connected()) {                                        // We are already connected go to response wait
   b4a4c:	b360      	cbz	r0, b4aa8 <loop+0x2f4>
				stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   b4a4e:	4b07      	ldr	r3, [pc, #28]	; (b4a6c <loop+0x2b8>)
   b4a50:	4a11      	ldr	r2, [pc, #68]	; (b4a98 <loop+0x2e4>)
   b4a52:	601a      	str	r2, [r3, #0]
   b4a54:	f004 fe7a 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();
   b4a58:	4b03      	ldr	r3, [pc, #12]	; (b4a68 <loop+0x2b4>)
   b4a5a:	6018      	str	r0, [r3, #0]
				(retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE; // so, if we are connecting to report - next step is response wait - otherwise IDLE
   b4a5c:	2307      	movs	r3, #7
   b4a5e:	e6de      	b.n	b481e <loop+0x6a>
   b4a60:	2003e592 	.word	0x2003e592
   b4a64:	2003e591 	.word	0x2003e591
   b4a68:	2003e598 	.word	0x2003e598
   b4a6c:	2003e594 	.word	0x2003e594
   b4a70:	2003e468 	.word	0x2003e468
   b4a74:	2003e330 	.word	0x2003e330
   b4a78:	000be58a 	.word	0x000be58a
   b4a7c:	2003e644 	.word	0x2003e644
   b4a80:	2003e600 	.word	0x2003e600
   b4a84:	2003e488 	.word	0x2003e488
   b4a88:	000bec3c 	.word	0x000bec3c
   b4a8c:	000bf758 	.word	0x000bf758
   b4a90:	00030010 	.word	0x00030010
   b4a94:	000be428 	.word	0x000be428
   b4a98:	00015f90 	.word	0x00015f90
   b4a9c:	000be3ff 	.word	0x000be3ff
   b4aa0:	2003e698 	.word	0x2003e698
   b4aa4:	000be465 	.word	0x000be465
			else if (sysStatus.get_lowBatteryMode() && digitalRead(BUTTON_PIN)) {
   b4aa8:	f000 fa26 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4aac:	f000 fb46 	bl	b513c <_ZNK13sysStatusData18get_lowBatteryModeEv>
   b4ab0:	b9e8      	cbnz	r0, b4aee <loop+0x33a>
			else if (sysStatus.get_lowPowerMode() && digitalRead(BUTTON_PIN)) {      // Low power mode and user switch not pressed
   b4ab2:	f000 fa21 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4ab6:	f000 fb3c 	bl	b5132 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b4aba:	2800      	cmp	r0, #0
   b4abc:	f43f aeb0 	beq.w	b4820 <loop+0x6c>
   b4ac0:	4b7f      	ldr	r3, [pc, #508]	; (b4cc0 <loop+0x50c>)
   b4ac2:	8818      	ldrh	r0, [r3, #0]
   b4ac4:	f008 f9ca 	bl	bce5c <digitalRead>
   b4ac8:	2800      	cmp	r0, #0
   b4aca:	f43f aea9 	beq.w	b4820 <loop+0x6c>
				if (current.get_stateOfCharge() > 65) {
   b4ace:	f000 fa71 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b4ad2:	f000 fd35 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4ad6:	ed9f 8a7b 	vldr	s16, [pc, #492]	; b4cc4 <loop+0x510>
   b4ada:	eeb4 0ac8 	vcmpe.f32	s0, s16
   b4ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ae2:	dd10      	ble.n	b4b06 <loop+0x352>
					Log.info("Sufficient battery power connecting");
   b4ae4:	4978      	ldr	r1, [pc, #480]	; (b4cc8 <loop+0x514>)
   b4ae6:	4879      	ldr	r0, [pc, #484]	; (b4ccc <loop+0x518>)
   b4ae8:	f7ff fb47 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b4aec:	e698      	b.n	b4820 <loop+0x6c>
			else if (sysStatus.get_lowBatteryMode() && digitalRead(BUTTON_PIN)) {
   b4aee:	4b74      	ldr	r3, [pc, #464]	; (b4cc0 <loop+0x50c>)
   b4af0:	8818      	ldrh	r0, [r3, #0]
   b4af2:	f008 f9b3 	bl	bce5c <digitalRead>
   b4af6:	2800      	cmp	r0, #0
   b4af8:	d0db      	beq.n	b4ab2 <loop+0x2fe>
				Log.info("Not connecting - low battery mode");
   b4afa:	4975      	ldr	r1, [pc, #468]	; (b4cd0 <loop+0x51c>)
					Log.info("Not connecting - 50-65%% charge - two hour schedule");
   b4afc:	4873      	ldr	r0, [pc, #460]	; (b4ccc <loop+0x518>)
   b4afe:	f7ff fb3c 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
      			state = IDLE_STATE;
   b4b02:	2302      	movs	r3, #2
   b4b04:	e68b      	b.n	b481e <loop+0x6a>
				else if (current.get_stateOfCharge() <= 50 && (Time.hour() % 4)) {   // If the battery level is <50%, only connect every fourth hour
   b4b06:	f000 fa55 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b4b0a:	f000 fd19 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4b0e:	eddf 7a71 	vldr	s15, [pc, #452]	; b4cd4 <loop+0x520>
   b4b12:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b4b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b1a:	d910      	bls.n	b4b3e <loop+0x38a>
				else if (current.get_stateOfCharge() <= 65 && (Time.hour() % 2)) {   // If the battery level is 50% -  65%, only connect every other hour
   b4b1c:	f000 fa4a 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b4b20:	f000 fd0e 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4b24:	eeb4 0ac8 	vcmpe.f32	s0, s16
   b4b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b2c:	f63f ae78 	bhi.w	b4820 <loop+0x6c>
   b4b30:	f007 ff72 	bl	bca18 <_ZN9TimeClass4hourEv>
   b4b34:	07c3      	lsls	r3, r0, #31
   b4b36:	f57f ae73 	bpl.w	b4820 <loop+0x6c>
					Log.info("Not connecting - 50-65%% charge - two hour schedule");
   b4b3a:	4967      	ldr	r1, [pc, #412]	; (b4cd8 <loop+0x524>)
   b4b3c:	e7de      	b.n	b4afc <loop+0x348>
				else if (current.get_stateOfCharge() <= 50 && (Time.hour() % 4)) {   // If the battery level is <50%, only connect every fourth hour
   b4b3e:	f007 ff6b 	bl	bca18 <_ZN9TimeClass4hourEv>
   b4b42:	0782      	lsls	r2, r0, #30
   b4b44:	d0ea      	beq.n	b4b1c <loop+0x368>
					Log.info("Not connecting - <50%% charge - four hour schedule");
   b4b46:	4965      	ldr	r1, [pc, #404]	; (b4cdc <loop+0x528>)
   b4b48:	e7d8      	b.n	b4afc <loop+0x348>
    		if (state != oldState) {
   b4b4a:	4b65      	ldr	r3, [pc, #404]	; (b4ce0 <loop+0x52c>)
   b4b4c:	4d65      	ldr	r5, [pc, #404]	; (b4ce4 <loop+0x530>)
   b4b4e:	781b      	ldrb	r3, [r3, #0]
   b4b50:	2b07      	cmp	r3, #7
   b4b52:	d007      	beq.n	b4b64 <loop+0x3b0>
   b4b54:	f004 fdfa 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
      			webhookTimeStamp = millis();                                     // We are connected and we have published, head to the response wait state
   b4b58:	4b63      	ldr	r3, [pc, #396]	; (b4ce8 <loop+0x534>)
   b4b5a:	6018      	str	r0, [r3, #0]
      			dataInFlight = true;                                             // set the data inflight flag
   b4b5c:	2301      	movs	r3, #1
   b4b5e:	702b      	strb	r3, [r5, #0]
      			publishStateTransition();
   b4b60:	f7ff fb24 	bl	b41ac <_Z22publishStateTransitionv>
    		if (!dataInFlight)  {                                              // Response received --> back to IDLE state
   b4b64:	782b      	ldrb	r3, [r5, #0]
   b4b66:	b93b      	cbnz	r3, b4b78 <loop+0x3c4>
				stayAwake = stayAwakeLong;
   b4b68:	4b60      	ldr	r3, [pc, #384]	; (b4cec <loop+0x538>)
   b4b6a:	4a61      	ldr	r2, [pc, #388]	; (b4cf0 <loop+0x53c>)
   b4b6c:	601a      	str	r2, [r3, #0]
   b4b6e:	f004 fded 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();
   b4b72:	4b60      	ldr	r3, [pc, #384]	; (b4cf4 <loop+0x540>)
   b4b74:	6018      	str	r0, [r3, #0]
   b4b76:	e7c4      	b.n	b4b02 <loop+0x34e>
   b4b78:	f004 fde8 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
    		else if (millis() - webhookTimeStamp > webhookWait) {              // If it takes too long - will need to reset
   b4b7c:	4b5a      	ldr	r3, [pc, #360]	; (b4ce8 <loop+0x534>)
   b4b7e:	681b      	ldr	r3, [r3, #0]
   b4b80:	1ac0      	subs	r0, r0, r3
   b4b82:	f247 5330 	movw	r3, #30000	; 0x7530
   b4b86:	4298      	cmp	r0, r3
   b4b88:	f67f ae4a 	bls.w	b4820 <loop+0x6c>
				Log.info("Webhook timeout - resetting");
   b4b8c:	495a      	ldr	r1, [pc, #360]	; (b4cf8 <loop+0x544>)
   b4b8e:	484f      	ldr	r0, [pc, #316]	; (b4ccc <loop+0x518>)
   b4b90:	f7ff faf3 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
      			state = ERROR_STATE;                                             // Go to the ERROR state to decide our fate
   b4b94:	e670      	b.n	b4878 <loop+0xc4>
			if (state != oldState) {                                           // Non-blocking function - these are first time items
   b4b96:	4b52      	ldr	r3, [pc, #328]	; (b4ce0 <loop+0x52c>)
   b4b98:	4e58      	ldr	r6, [pc, #352]	; (b4cfc <loop+0x548>)
   b4b9a:	781b      	ldrb	r3, [r3, #0]
   b4b9c:	2b04      	cmp	r3, #4
   b4b9e:	d00d      	beq.n	b4bbc <loop+0x408>
			retainedOldState = oldState;                                     // Keep track for where to go next
   b4ba0:	4a57      	ldr	r2, [pc, #348]	; (b4d00 <loop+0x54c>)
   b4ba2:	7013      	strb	r3, [r2, #0]
			sysStatus.set_lastConnectionDuration(0);                            // Will exit with 0 if we do not connect or are already connected.  If we need to connect, this will record connection time.
   b4ba4:	f000 f9a8 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4ba8:	2100      	movs	r1, #0
   b4baa:	f000 fc1b 	bl	b53e4 <_ZN13sysStatusData26set_lastConnectionDurationEt>
			publishStateTransition();
   b4bae:	f7ff fafd 	bl	b41ac <_Z22publishStateTransitionv>
   b4bb2:	f004 fdcb 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
			connectionStartTimeStamp = millis();                             // Have to use millis as the clock may get reset on connect
   b4bb6:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
   b4bb8:	f005 f884 	bl	b9cc4 <spark_cloud_flag_connect>
			sysStatus.set_lastConnectionDuration(int((millis() - connectionStartTimeStamp)/1000));
   b4bbc:	f000 f99c 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4bc0:	4605      	mov	r5, r0
   b4bc2:	f004 fdc3 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
   b4bc6:	6831      	ldr	r1, [r6, #0]
   b4bc8:	1a41      	subs	r1, r0, r1
   b4bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4bce:	fbb1 f1f0 	udiv	r1, r1, r0
   b4bd2:	4628      	mov	r0, r5
   b4bd4:	b289      	uxth	r1, r1
   b4bd6:	f000 fc05 	bl	b53e4 <_ZN13sysStatusData26set_lastConnectionDurationEt>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4bda:	f005 f87b 	bl	b9cd4 <spark_cloud_flag_connected>
			if (Particle.connected()) {
   b4bde:	2800      	cmp	r0, #0
   b4be0:	d038      	beq.n	b4c54 <loop+0x4a0>
				sysStatus.set_lastConnection(Time.now());                           // This is the last time we last connected
   b4be2:	f000 f989 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4be6:	4605      	mov	r5, r0
   b4be8:	f007 ff05 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b4bec:	4602      	mov	r2, r0
   b4bee:	17c3      	asrs	r3, r0, #31
   b4bf0:	4628      	mov	r0, r5
   b4bf2:	f000 fb1c 	bl	b522e <_ZN13sysStatusData18set_lastConnectionEx>
				stayAwake = stayAwakeLong;                                       // Keeps device awake after reconnection - allows us some time to catch the device before it sleeps
   b4bf6:	4b3d      	ldr	r3, [pc, #244]	; (b4cec <loop+0x538>)
   b4bf8:	4a3d      	ldr	r2, [pc, #244]	; (b4cf0 <loop+0x53c>)
   b4bfa:	601a      	str	r2, [r3, #0]
   b4bfc:	f004 fda6 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
				stayAwakeTimeStamp = millis();                                   // Start the stay awake timer now
   b4c00:	4b3c      	ldr	r3, [pc, #240]	; (b4cf4 <loop+0x540>)
   b4c02:	6018      	str	r0, [r3, #0]
				getSignalStrength();                                             // Test signal strength since the cellular modem is on and ready
   b4c04:	f001 fa68 	bl	b60d8 <_Z17getSignalStrengthv>
				snprintf(data, sizeof(data),"Connected in %i secs",sysStatus.get_lastConnectionDuration());  // Make up connection string and publish
   b4c08:	f000 f976 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4c0c:	f000 fb56 	bl	b52bc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b4c10:	4a3c      	ldr	r2, [pc, #240]	; (b4d04 <loop+0x550>)
   b4c12:	4603      	mov	r3, r0
   b4c14:	2140      	movs	r1, #64	; 0x40
   b4c16:	a808      	add	r0, sp, #32
   b4c18:	f005 f924 	bl	b9e64 <snprintf>
				Log.info(data);
   b4c1c:	a908      	add	r1, sp, #32
   b4c1e:	482b      	ldr	r0, [pc, #172]	; (b4ccc <loop+0x518>)
   b4c20:	f7ff faab 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
				if (sysStatus.get_verboseMode()) Particle.publish("Cellular",data,PRIVATE);
   b4c24:	f000 f968 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4c28:	f000 fa79 	bl	b511e <_ZNK13sysStatusData15get_verboseModeEv>
   b4c2c:	b160      	cbz	r0, b4c48 <loop+0x494>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4c2e:	4b36      	ldr	r3, [pc, #216]	; (b4d08 <loop+0x554>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4c30:	4936      	ldr	r1, [pc, #216]	; (b4d0c <loop+0x558>)
   b4c32:	781b      	ldrb	r3, [r3, #0]
   b4c34:	f88d 3000 	strb.w	r3, [sp]
   b4c38:	a805      	add	r0, sp, #20
   b4c3a:	233c      	movs	r3, #60	; 0x3c
   b4c3c:	aa08      	add	r2, sp, #32
   b4c3e:	f005 fc35 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4c42:	a806      	add	r0, sp, #24
   b4c44:	f7ff fbb2 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
				(retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE; // so, if we are connecting to report - next step is response wait - otherwise IDLE
   b4c48:	4b2d      	ldr	r3, [pc, #180]	; (b4d00 <loop+0x54c>)
   b4c4a:	781b      	ldrb	r3, [r3, #0]
   b4c4c:	2b06      	cmp	r3, #6
   b4c4e:	f47f af58 	bne.w	b4b02 <loop+0x34e>
   b4c52:	e703      	b.n	b4a5c <loop+0x2a8>
			else if (sysStatus.get_lastConnectionDuration() > 600) { // What happens if we do not connect
   b4c54:	f000 f950 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4c58:	f000 fb30 	bl	b52bc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b4c5c:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   b4c60:	f67f adde 	bls.w	b4820 <loop+0x6c>
   b4c64:	e608      	b.n	b4878 <loop+0xc4>
			if (state != oldState) {
   b4c66:	4b1e      	ldr	r3, [pc, #120]	; (b4ce0 <loop+0x52c>)
   b4c68:	781b      	ldrb	r3, [r3, #0]
   b4c6a:	2b01      	cmp	r3, #1
   b4c6c:	d005      	beq.n	b4c7a <loop+0x4c6>
				publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4c6e:	f7ff fa9d 	bl	b41ac <_Z22publishStateTransitionv>
				Log.info("Error state - resetting");
   b4c72:	4927      	ldr	r1, [pc, #156]	; (b4d10 <loop+0x55c>)
   b4c74:	4815      	ldr	r0, [pc, #84]	; (b4ccc <loop+0x518>)
   b4c76:	f7ff fa80 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
			static unsigned long resetTimer = millis();
   b4c7a:	4d26      	ldr	r5, [pc, #152]	; (b4d14 <loop+0x560>)
   b4c7c:	4e26      	ldr	r6, [pc, #152]	; (b4d18 <loop+0x564>)
   b4c7e:	782b      	ldrb	r3, [r5, #0]
   b4c80:	f3bf 8f5b 	dmb	ish
   b4c84:	f013 0f01 	tst.w	r3, #1
   b4c88:	d109      	bne.n	b4c9e <loop+0x4ea>
   b4c8a:	4628      	mov	r0, r5
   b4c8c:	f7ff fa16 	bl	b40bc <__cxa_guard_acquire>
   b4c90:	b128      	cbz	r0, b4c9e <loop+0x4ea>
   b4c92:	f004 fd5b 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
   b4c96:	6030      	str	r0, [r6, #0]
   b4c98:	4628      	mov	r0, r5
   b4c9a:	f7ff fa14 	bl	b40c6 <__cxa_guard_release>
   b4c9e:	f004 fd55 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimer > resetWait) System.reset();
   b4ca2:	6833      	ldr	r3, [r6, #0]
   b4ca4:	1ac0      	subs	r0, r0, r3
   b4ca6:	f247 5330 	movw	r3, #30000	; 0x7530
   b4caa:	4298      	cmp	r0, r3
   b4cac:	f67f adb8 	bls.w	b4820 <loop+0x6c>
   b4cb0:	f007 fcad 	bl	bc60e <_ZN11SystemClass5resetEv>
   b4cb4:	e5b4      	b.n	b4820 <loop+0x6c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4cb6:	f8c3 900c 	str.w	r9, [r3, #12]
                return *this;
   b4cba:	e64a      	b.n	b4952 <loop+0x19e>
                valid_ = false;
   b4cbc:	752f      	strb	r7, [r5, #20]
                return *this;
   b4cbe:	e648      	b.n	b4952 <loop+0x19e>
   b4cc0:	000bec3c 	.word	0x000bec3c
   b4cc4:	42820000 	.word	0x42820000
   b4cc8:	000be4ad 	.word	0x000be4ad
   b4ccc:	2003e644 	.word	0x2003e644
   b4cd0:	000be48b 	.word	0x000be48b
   b4cd4:	42480000 	.word	0x42480000
   b4cd8:	000be504 	.word	0x000be504
   b4cdc:	000be4d1 	.word	0x000be4d1
   b4ce0:	2003e591 	.word	0x2003e591
   b4ce4:	2003e590 	.word	0x2003e590
   b4ce8:	2003e460 	.word	0x2003e460
   b4cec:	2003e594 	.word	0x2003e594
   b4cf0:	00015f90 	.word	0x00015f90
   b4cf4:	2003e598 	.word	0x2003e598
   b4cf8:	000be538 	.word	0x000be538
   b4cfc:	2003e464 	.word	0x2003e464
   b4d00:	2003e45c 	.word	0x2003e45c
   b4d04:	000be554 	.word	0x000be554
   b4d08:	2003e454 	.word	0x2003e454
   b4d0c:	000be569 	.word	0x000be569
   b4d10:	000be572 	.word	0x000be572
   b4d14:	2003e450 	.word	0x2003e450
   b4d18:	2003e458 	.word	0x2003e458

000b4d1c <_ZN15StorageHelperRK15FileSystemPosixD1Ev>:
         */
        FileSystemPosix() {
        }

        virtual ~FileSystemPosix() {
        }
   b4d1c:	4770      	bx	lr

000b4d1e <_ZN15StorageHelperRK15FileSystemPosixD0Ev>:
        virtual ~FileSystemPosix() {
   b4d1e:	b510      	push	{r4, lr}
        }
   b4d20:	2108      	movs	r1, #8
        virtual ~FileSystemPosix() {
   b4d22:	4604      	mov	r4, r0
        }
   b4d24:	f7ff f9bb 	bl	b409e <_ZdlPvj>
   b4d28:	4620      	mov	r0, r4
   b4d2a:	bd10      	pop	{r4, pc}

000b4d2c <_ZN15StorageHelperRK15FileSystemPosix9getLengthEv>:
        }

        /**
         * @brief Get length of the file or a negative error code
         */
        virtual int getLength() {
   b4d2c:	b500      	push	{lr}
   b4d2e:	b097      	sub	sp, #92	; 0x5c
            struct stat sb;

            fstat(fd, &sb);
   b4d30:	4669      	mov	r1, sp
   b4d32:	6840      	ldr	r0, [r0, #4]
   b4d34:	f009 f990 	bl	be058 <fstat>
            return sb.st_size;
        }
   b4d38:	9804      	ldr	r0, [sp, #16]
   b4d3a:	b017      	add	sp, #92	; 0x5c
   b4d3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d40 <_ZN15StorageHelperRK15FileSystemPosix5writeEPKhj>:
        virtual size_t write(const uint8_t *buffer, size_t length) {
   b4d40:	b508      	push	{r3, lr}
            int count = ::write(fd, buffer, length);
   b4d42:	6840      	ldr	r0, [r0, #4]
   b4d44:	f009 f9c0 	bl	be0c8 <write>
        }
   b4d48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d4c:	bd08      	pop	{r3, pc}

000b4d4e <_ZN15StorageHelperRK15FileSystemPosix4readEPhj>:
        virtual size_t read(uint8_t *buffer, size_t length) {
   b4d4e:	b508      	push	{r3, lr}
            int count = ::read(fd, buffer, length);
   b4d50:	6840      	ldr	r0, [r0, #4]
   b4d52:	f009 f9a7 	bl	be0a4 <read>
        }
   b4d56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d5a:	bd08      	pop	{r3, pc}

000b4d5c <_ZN15StorageHelperRK15FileSystemPosix8truncateEj>:

        /**
         * @brief Truncate a file to a specified length in bytes
         *
         */
        virtual bool truncate(size_t size) {
   b4d5c:	b508      	push	{r3, lr}
            // Note: This requires Device OS 2.0.0-rc.3 or later!
            return ftruncate(fd, (int)size) == 0;
   b4d5e:	6840      	ldr	r0, [r0, #4]
   b4d60:	f004 fe4c 	bl	b99fc <ftruncate>
        }
   b4d64:	fab0 f080 	clz	r0, r0
   b4d68:	0940      	lsrs	r0, r0, #5
   b4d6a:	bd08      	pop	{r3, pc}

000b4d6c <_ZN15StorageHelperRK15FileSystemPosix5closeEv>:
        virtual bool close() {
   b4d6c:	b510      	push	{r4, lr}
   b4d6e:	4604      	mov	r4, r0
            if (fd != -1) {
   b4d70:	6840      	ldr	r0, [r0, #4]
   b4d72:	1c43      	adds	r3, r0, #1
   b4d74:	d004      	beq.n	b4d80 <_ZN15StorageHelperRK15FileSystemPosix5closeEv+0x14>
                ::close(fd);
   b4d76:	f009 f967 	bl	be048 <close>
                fd = -1;
   b4d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d7e:	6063      	str	r3, [r4, #4]
        }
   b4d80:	2001      	movs	r0, #1
   b4d82:	bd10      	pop	{r4, pc}

000b4d84 <_ZN15StorageHelperRK15FileSystemPosix4openEPKci>:
        virtual bool open(const char *filename, int mode = O_RDWR | O_CREAT) {
   b4d84:	b510      	push	{r4, lr}
   b4d86:	4604      	mov	r4, r0
   b4d88:	4608      	mov	r0, r1
   b4d8a:	4611      	mov	r1, r2
            fd = ::open(filename, mode, 0666);
   b4d8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   b4d90:	f009 f974 	bl	be07c <open>
   b4d94:	6060      	str	r0, [r4, #4]
        }
   b4d96:	3001      	adds	r0, #1
   b4d98:	bf18      	it	ne
   b4d9a:	2001      	movne	r0, #1
   b4d9c:	bd10      	pop	{r4, pc}

000b4d9e <_ZN15StorageHelperRK15FileSystemPosix4seekEi>:
        virtual bool seek(int seekTo) {
   b4d9e:	b508      	push	{r3, lr}
            if (seekTo >= 0) {
   b4da0:	2900      	cmp	r1, #0
                return lseek(fd, seekTo, SEEK_SET) >= 0;
   b4da2:	bfae      	itee	ge
   b4da4:	2200      	movge	r2, #0
                return lseek(fd, 0, SEEK_END) >= 0;
   b4da6:	2202      	movlt	r2, #2
   b4da8:	2100      	movlt	r1, #0
                return lseek(fd, seekTo, SEEK_SET) >= 0;
   b4daa:	6840      	ldr	r0, [r0, #4]
                return lseek(fd, 0, SEEK_END) >= 0;
   b4dac:	f009 f95c 	bl	be068 <lseek>
   b4db0:	43c0      	mvns	r0, r0
   b4db2:	0fc0      	lsrs	r0, r0, #31
        }
   b4db4:	bd08      	pop	{r3, pc}

000b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b4db6:	b510      	push	{r4, lr}
            if (!handle_) {
   b4db8:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b4dba:	4604      	mov	r4, r0
            if (!handle_) {
   b4dbc:	b90b      	cbnz	r3, b4dc2 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b4dbe:	f004 fc75 	bl	b96ac <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b4dc2:	6820      	ldr	r0, [r4, #0]
        }
   b4dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b4dc8:	f004 bc80 	b.w	b96cc <os_mutex_recursive_lock>

000b4dcc <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev>:
         */
        PersistentDataFileSystem(FileSystemBase *fs, const char *filename, SavedDataHeader *savedDataHeader, size_t savedDataSize, uint32_t savedDataMagic, uint16_t savedDataVersion) : 
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
        };

        virtual ~PersistentDataFileSystem() {
   b4dcc:	b510      	push	{r4, lr}
   b4dce:	4b0a      	ldr	r3, [pc, #40]	; (b4df8 <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x2c>)
   b4dd0:	6003      	str	r3, [r0, #0]
   b4dd2:	4604      	mov	r4, r0
            delete fs;
   b4dd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b4dd6:	b110      	cbz	r0, b4dde <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x12>
   b4dd8:	6803      	ldr	r3, [r0, #0]
   b4dda:	685b      	ldr	r3, [r3, #4]
   b4ddc:	4798      	blx	r3
        virtual ~PersistentDataFileSystem() {
   b4dde:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4de2:	f007 fa3d 	bl	bc260 <_ZN6StringD1Ev>
            if (handle_) {
   b4de6:	6860      	ldr	r0, [r4, #4]
    class PersistentDataBase : public CustomRecursiveMutex {
   b4de8:	4b04      	ldr	r3, [pc, #16]	; (b4dfc <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x30>)
   b4dea:	6023      	str	r3, [r4, #0]
            if (handle_) {
   b4dec:	b108      	cbz	r0, b4df2 <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev+0x26>
                os_mutex_recursive_destroy(handle_);
   b4dee:	f004 fc65 	bl	b96bc <os_mutex_recursive_destroy>
        }
   b4df2:	4620      	mov	r0, r4
   b4df4:	bd10      	pop	{r4, pc}
   b4df6:	bf00      	nop
   b4df8:	000bf244 	.word	0x000bf244
   b4dfc:	000bf220 	.word	0x000bf220

000b4e00 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>:
    #if HAL_PLATFORM_FILESYSTEM || defined(UNITTEST) || defined(DOXYGEN_BUILD)
    /**
     * @brief Class for persistent data stored in a file on the POSIX file system on Gen 3, P2, and Photon 2
     * 
     */
    class PersistentDataFile : public PersistentDataFileSystem {
   b4e00:	b510      	push	{r4, lr}
   b4e02:	4b03      	ldr	r3, [pc, #12]	; (b4e10 <_ZN15StorageHelperRK18PersistentDataFileD1Ev+0x10>)
   b4e04:	6003      	str	r3, [r0, #0]
   b4e06:	4604      	mov	r4, r0
   b4e08:	f7ff ffe0 	bl	b4dcc <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev>
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	bd10      	pop	{r4, pc}
   b4e10:	000be6bc 	.word	0x000be6bc

000b4e14 <_ZN15StorageHelperRK18PersistentDataFileD0Ev>:
   b4e14:	b510      	push	{r4, lr}
   b4e16:	4604      	mov	r4, r0
   b4e18:	f7ff fff2 	bl	b4e00 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>
   b4e1c:	4620      	mov	r0, r4
   b4e1e:	2138      	movs	r1, #56	; 0x38
   b4e20:	f7ff f93d 	bl	b409e <_ZdlPvj>
   b4e24:	4620      	mov	r0, r4
   b4e26:	bd10      	pop	{r4, pc}

000b4e28 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathSystem, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b4e28:	b510      	push	{r4, lr}
   b4e2a:	4b03      	ldr	r3, [pc, #12]	; (b4e38 <_ZN13sysStatusDataD1Ev+0x10>)
   b4e2c:	6003      	str	r3, [r0, #0]
   b4e2e:	4604      	mov	r4, r0
   b4e30:	f7ff ffe6 	bl	b4e00 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>
}
   b4e34:	4620      	mov	r0, r4
   b4e36:	bd10      	pop	{r4, pc}
   b4e38:	000be728 	.word	0x000be728

000b4e3c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b4e3c:	b510      	push	{r4, lr}
   b4e3e:	4604      	mov	r4, r0
}
   b4e40:	f7ff fff2 	bl	b4e28 <_ZN13sysStatusDataD1Ev>
   b4e44:	4620      	mov	r0, r4
   b4e46:	2198      	movs	r1, #152	; 0x98
   b4e48:	f7ff f929 	bl	b409e <_ZdlPvj>
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	bd10      	pop	{r4, pc}

000b4e50 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathCurrent, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b4e50:	b510      	push	{r4, lr}
   b4e52:	4b03      	ldr	r3, [pc, #12]	; (b4e60 <_ZN17currentStatusDataD1Ev+0x10>)
   b4e54:	6003      	str	r3, [r0, #0]
   b4e56:	4604      	mov	r4, r0
   b4e58:	f7ff ffd2 	bl	b4e00 <_ZN15StorageHelperRK18PersistentDataFileD1Ev>
}
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	bd10      	pop	{r4, pc}
   b4e60:	000be754 	.word	0x000be754

000b4e64 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b4e64:	b510      	push	{r4, lr}
   b4e66:	4604      	mov	r4, r0
}
   b4e68:	f7ff fff2 	bl	b4e50 <_ZN17currentStatusDataD1Ev>
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	2178      	movs	r1, #120	; 0x78
   b4e70:	f7ff f915 	bl	b409e <_ZdlPvj>
   b4e74:	4620      	mov	r0, r4
   b4e76:	bd10      	pop	{r4, pc}

000b4e78 <_ZN15StorageHelperRK24PersistentDataFileSystemD0Ev>:
        virtual ~PersistentDataFileSystem() {
   b4e78:	b510      	push	{r4, lr}
   b4e7a:	4604      	mov	r4, r0
        }
   b4e7c:	f7ff ffa6 	bl	b4dcc <_ZN15StorageHelperRK24PersistentDataFileSystemD1Ev>
   b4e80:	4620      	mov	r0, r4
   b4e82:	2138      	movs	r1, #56	; 0x38
   b4e84:	f7ff f90b 	bl	b409e <_ZdlPvj>
   b4e88:	4620      	mov	r0, r4
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathSystem, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b4e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4e8e:	4b15      	ldr	r3, [pc, #84]	; (b4ee4 <_ZN13sysStatusDataC1Ev+0x58>)
   b4e90:	4604      	mov	r4, r0
   b4e92:	6819      	ldr	r1, [r3, #0]
   b4e94:	9101      	str	r1, [sp, #4]
   b4e96:	f100 0538 	add.w	r5, r0, #56	; 0x38
         * @param savedDataSize size of the whole structure, including the user data after it 
         * @param savedDataMagic Magic bytes to use for this data
         * @param savedDataVersion Version to use for this data
         */
        PersistentDataFile(const char *filename, SavedDataHeader *savedDataHeader, size_t savedDataSize, uint32_t savedDataMagic, uint16_t savedDataVersion) : 
            PersistentDataFileSystem(new FileSystemPosix(), filename, savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   b4e9a:	2008      	movs	r0, #8
   b4e9c:	f7ff f8fb 	bl	b4096 <_Znwj>
   b4ea0:	9901      	ldr	r1, [sp, #4]
   b4ea2:	b120      	cbz	r0, b4eae <_ZN13sysStatusDataC1Ev+0x22>
        FileSystemPosix() {
   b4ea4:	4b10      	ldr	r3, [pc, #64]	; (b4ee8 <_ZN13sysStatusDataC1Ev+0x5c>)
   b4ea6:	6003      	str	r3, [r0, #0]
   b4ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4eac:	6043      	str	r3, [r0, #4]
        CustomRecursiveMutex() : handle_(nullptr) {
   b4eae:	2300      	movs	r3, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b4eb0:	4a0e      	ldr	r2, [pc, #56]	; (b4eec <_ZN13sysStatusDataC1Ev+0x60>)
   b4eb2:	61a3      	str	r3, [r4, #24]
   b4eb4:	e9c4 3501 	strd	r3, r5, [r4, #4]
   b4eb8:	2560      	movs	r5, #96	; 0x60
   b4eba:	e9c4 5203 	strd	r5, r2, [r4, #12]
   b4ebe:	2202      	movs	r2, #2
   b4ec0:	82a2      	strh	r2, [r4, #20]
   b4ec2:	f884 3020 	strb.w	r3, [r4, #32]
   b4ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b4eca:	4b09      	ldr	r3, [pc, #36]	; (b4ef0 <_ZN13sysStatusDataC1Ev+0x64>)
   b4ecc:	6023      	str	r3, [r4, #0]
   b4ece:	6260      	str	r0, [r4, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b4ed0:	61e2      	str	r2, [r4, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b4ed2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4ed6:	f007 fa0e 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4eda:	4b06      	ldr	r3, [pc, #24]	; (b4ef4 <_ZN13sysStatusDataC1Ev+0x68>)
   b4edc:	6023      	str	r3, [r4, #0]
};
   b4ede:	4620      	mov	r0, r4
   b4ee0:	b003      	add	sp, #12
   b4ee2:	bd30      	pop	{r4, r5, pc}
   b4ee4:	2003e3b8 	.word	0x2003e3b8
   b4ee8:	000be690 	.word	0x000be690
   b4eec:	20a99e75 	.word	0x20a99e75
   b4ef0:	000bf244 	.word	0x000bf244
   b4ef4:	000be728 	.word	0x000be728

000b4ef8 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b4ef8:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b4efa:	4d06      	ldr	r5, [pc, #24]	; (b4f14 <_ZN13sysStatusData8instanceEv+0x1c>)
   b4efc:	682b      	ldr	r3, [r5, #0]
   b4efe:	b93b      	cbnz	r3, b4f10 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b4f00:	2098      	movs	r0, #152	; 0x98
   b4f02:	f7ff f8c8 	bl	b4096 <_Znwj>
   b4f06:	4604      	mov	r4, r0
   b4f08:	b108      	cbz	r0, b4f0e <_ZN13sysStatusData8instanceEv+0x16>
   b4f0a:	f7ff ffbf 	bl	b4e8c <_ZN13sysStatusDataC1Ev>
   b4f0e:	602c      	str	r4, [r5, #0]
}
   b4f10:	6828      	ldr	r0, [r5, #0]
   b4f12:	bd38      	pop	{r3, r4, r5, pc}
   b4f14:	2003e5a0 	.word	0x2003e5a0

000b4f18 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b4f18:	b510      	push	{r4, lr}
    sysStatus
   b4f1a:	f7ff ffed 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b4f1e:	2264      	movs	r2, #100	; 0x64
        .load();
   b4f20:	6803      	ldr	r3, [r0, #0]
   b4f22:	61c2      	str	r2, [r0, #28]
}
   b4f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b4f28:	685b      	ldr	r3, [r3, #4]
   b4f2a:	4718      	bx	r3

000b4f2c <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b4f2c:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b4f2e:	f7ff ffe3 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b4f32:	6803      	ldr	r3, [r0, #0]
}
   b4f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b4f38:	68db      	ldr	r3, [r3, #12]
   b4f3a:	2100      	movs	r1, #0
   b4f3c:	4718      	bx	r3

000b4f3e <_ZN13sysStatusData15set_timeZoneStrEPKc>:
bool sysStatusData::set_timeZoneStr(const char *str) {
   b4f3e:	460b      	mov	r3, r1
	return setValueString(offsetof(SysData, timeZoneStr), sizeof(SysData::timeZoneStr), str);
   b4f40:	2227      	movs	r2, #39	; 0x27
   b4f42:	2116      	movs	r1, #22
   b4f44:	f003 be22 	b.w	b8b8c <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b4f48 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFile(persistentDataPathCurrent, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b4f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4f4a:	4b15      	ldr	r3, [pc, #84]	; (b4fa0 <_ZN17currentStatusDataC1Ev+0x58>)
   b4f4c:	4604      	mov	r4, r0
   b4f4e:	6819      	ldr	r1, [r3, #0]
   b4f50:	9101      	str	r1, [sp, #4]
   b4f52:	f100 0538 	add.w	r5, r0, #56	; 0x38
            PersistentDataFileSystem(new FileSystemPosix(), filename, savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   b4f56:	2008      	movs	r0, #8
   b4f58:	f7ff f89d 	bl	b4096 <_Znwj>
   b4f5c:	9901      	ldr	r1, [sp, #4]
   b4f5e:	b120      	cbz	r0, b4f6a <_ZN17currentStatusDataC1Ev+0x22>
        FileSystemPosix() {
   b4f60:	4b10      	ldr	r3, [pc, #64]	; (b4fa4 <_ZN17currentStatusDataC1Ev+0x5c>)
   b4f62:	6003      	str	r3, [r0, #0]
   b4f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4f68:	6043      	str	r3, [r0, #4]
        CustomRecursiveMutex() : handle_(nullptr) {
   b4f6a:	2300      	movs	r3, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b4f6c:	4a0e      	ldr	r2, [pc, #56]	; (b4fa8 <_ZN17currentStatusDataC1Ev+0x60>)
   b4f6e:	61a3      	str	r3, [r4, #24]
   b4f70:	e9c4 3501 	strd	r3, r5, [r4, #4]
   b4f74:	2540      	movs	r5, #64	; 0x40
   b4f76:	e9c4 5203 	strd	r5, r2, [r4, #12]
   b4f7a:	2202      	movs	r2, #2
   b4f7c:	82a2      	strh	r2, [r4, #20]
   b4f7e:	f884 3020 	strb.w	r3, [r4, #32]
   b4f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b4f86:	4b09      	ldr	r3, [pc, #36]	; (b4fac <_ZN17currentStatusDataC1Ev+0x64>)
   b4f88:	6023      	str	r3, [r4, #0]
   b4f8a:	6260      	str	r0, [r4, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b4f8c:	61e2      	str	r2, [r4, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fs(fs), filename(filename) {
   b4f8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4f92:	f007 f9b0 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f96:	4b06      	ldr	r3, [pc, #24]	; (b4fb0 <_ZN17currentStatusDataC1Ev+0x68>)
   b4f98:	6023      	str	r3, [r4, #0]
};
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	b003      	add	sp, #12
   b4f9e:	bd30      	pop	{r4, r5, pc}
   b4fa0:	2003e3b4 	.word	0x2003e3b4
   b4fa4:	000be690 	.word	0x000be690
   b4fa8:	20a99e74 	.word	0x20a99e74
   b4fac:	000bf244 	.word	0x000bf244
   b4fb0:	000be754 	.word	0x000be754

000b4fb4 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b4fb4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b4fb6:	4d06      	ldr	r5, [pc, #24]	; (b4fd0 <_ZN17currentStatusData8instanceEv+0x1c>)
   b4fb8:	682b      	ldr	r3, [r5, #0]
   b4fba:	b93b      	cbnz	r3, b4fcc <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b4fbc:	2078      	movs	r0, #120	; 0x78
   b4fbe:	f7ff f86a 	bl	b4096 <_Znwj>
   b4fc2:	4604      	mov	r4, r0
   b4fc4:	b108      	cbz	r0, b4fca <_ZN17currentStatusData8instanceEv+0x16>
   b4fc6:	f7ff ffbf 	bl	b4f48 <_ZN17currentStatusDataC1Ev>
   b4fca:	602c      	str	r4, [r5, #0]
}
   b4fcc:	6828      	ldr	r0, [r5, #0]
   b4fce:	bd38      	pop	{r3, r4, r5, pc}
   b4fd0:	2003e5a4 	.word	0x2003e5a4

000b4fd4 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b4fd4:	b510      	push	{r4, lr}
    current
   b4fd6:	f7ff ffed 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b4fda:	22fa      	movs	r2, #250	; 0xfa
    //    .withLogData(true)
        .withSaveDelayMs(250)
        .load();
   b4fdc:	6803      	ldr	r3, [r0, #0]
   b4fde:	61c2      	str	r2, [r0, #28]
}
   b4fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b4fe4:	685b      	ldr	r3, [r3, #4]
   b4fe6:	4718      	bx	r3

000b4fe8 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b4fe8:	b510      	push	{r4, lr}
    current.flush(false);
   b4fea:	f7ff ffe3 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b4fee:	6803      	ldr	r3, [r0, #0]
}
   b4ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b4ff4:	68db      	ldr	r3, [r3, #12]
   b4ff6:	2100      	movs	r1, #0
   b4ff8:	4718      	bx	r3

000b4ffa <_ZN17currentStatusData13set_alertCodeEa>:

int8_t currentStatusData::get_alertCode() const {
    return getValue<int8_t>(offsetof(CurrentData, alertCode));
}

void currentStatusData::set_alertCode(int8_t value) {
   b4ffa:	b538      	push	{r3, r4, r5, lr}
   b4ffc:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b4ffe:	3004      	adds	r0, #4
   b5000:	460d      	mov	r5, r1
   b5002:	f7ff fed8 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5006:	68e3      	ldr	r3, [r4, #12]
   b5008:	3b01      	subs	r3, #1
   b500a:	2b27      	cmp	r3, #39	; 0x27
   b500c:	d909      	bls.n	b5022 <_ZN17currentStatusData13set_alertCodeEa+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b500e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5010:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   b5014:	42aa      	cmp	r2, r5
   b5016:	d004      	beq.n	b5022 <_ZN17currentStatusData13set_alertCodeEa+0x28>
                        *(T *)p = value;
   b5018:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
                        updateHash();
   b501c:	4620      	mov	r0, r4
   b501e:	f003 fda9 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5022:	6860      	ldr	r0, [r4, #4]
    setValue<int8_t>(offsetof(CurrentData, alertCode), value);
}
   b5024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5028:	f004 bb58 	b.w	b96dc <os_mutex_recursive_unlock>

000b502c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b502c:	b538      	push	{r3, r4, r5, lr}
   b502e:	4604      	mov	r4, r0
   b5030:	3004      	adds	r0, #4
   b5032:	460d      	mov	r5, r1
   b5034:	f7ff febf 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5038:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b503a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b503c:	3b01      	subs	r3, #1
   b503e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5040:	bf26      	itte	cs
   b5042:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5044:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5046:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5048:	f004 fb48 	bl	b96dc <os_mutex_recursive_unlock>
        }
   b504c:	4628      	mov	r0, r5
   b504e:	bd38      	pop	{r3, r4, r5, pc}

000b5050 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const  {
   b5050:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,resetCount));
   b5052:	2115      	movs	r1, #21
   b5054:	f7ff ffea 	bl	b502c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5058:	bd08      	pop	{r3, pc}

000b505a <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const  {
   b505a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,openTime));
   b505c:	213d      	movs	r1, #61	; 0x3d
   b505e:	f7ff ffe5 	bl	b502c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5062:	bd08      	pop	{r3, pc}

000b5064 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const  {
   b5064:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,closeTime));
   b5066:	213e      	movs	r1, #62	; 0x3e
   b5068:	f7ff ffe0 	bl	b502c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b506c:	bd08      	pop	{r3, pc}

000b506e <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const  {
   b506e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData,sensorType));
   b5070:	215a      	movs	r1, #90	; 0x5a
   b5072:	f7ff ffdb 	bl	b502c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5076:	bd08      	pop	{r3, pc}

000b5078 <_ZNK17currentStatusData16get_batteryStateEv>:
}
void currentStatusData::set_stateOfCharge(float value) {
    setValue<float>(offsetof(CurrentData, stateOfCharge), value);
}

uint8_t currentStatusData::get_batteryState() const  {
   b5078:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b507a:	213c      	movs	r1, #60	; 0x3c
   b507c:	f7ff ffd6 	bl	b502c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5080:	bd08      	pop	{r3, pc}

000b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5082:	b570      	push	{r4, r5, r6, lr}
   b5084:	4604      	mov	r4, r0
   b5086:	3004      	adds	r0, #4
   b5088:	460d      	mov	r5, r1
   b508a:	4616      	mov	r6, r2
   b508c:	f7ff fe93 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5090:	68e3      	ldr	r3, [r4, #12]
   b5092:	3b01      	subs	r3, #1
   b5094:	42ab      	cmp	r3, r5
   b5096:	d307      	bcc.n	b50a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5098:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b509a:	5d5a      	ldrb	r2, [r3, r5]
   b509c:	42b2      	cmp	r2, r6
   b509e:	d003      	beq.n	b50a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b50a0:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b50a2:	4620      	mov	r0, r4
   b50a4:	f003 fd66 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b50a8:	6860      	ldr	r0, [r4, #4]
        }
   b50aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b50ae:	f004 bb15 	b.w	b96dc <os_mutex_recursive_unlock>

000b50b2 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b50b2:	b508      	push	{r3, lr}
   b50b4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b50b6:	2110      	movs	r1, #16
   b50b8:	f7ff ffe3 	bl	b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b50bc:	bd08      	pop	{r3, pc}

000b50be <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b50be:	b508      	push	{r3, lr}
   b50c0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b50c2:	2115      	movs	r1, #21
   b50c4:	f7ff ffdd 	bl	b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b50c8:	bd08      	pop	{r3, pc}

000b50ca <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b50ca:	b508      	push	{r3, lr}
   b50cc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b50ce:	213d      	movs	r1, #61	; 0x3d
   b50d0:	f7ff ffd7 	bl	b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b50d4:	bd08      	pop	{r3, pc}

000b50d6 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b50d6:	b508      	push	{r3, lr}
   b50d8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b50da:	213e      	movs	r1, #62	; 0x3e
   b50dc:	f7ff ffd1 	bl	b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b50e0:	bd08      	pop	{r3, pc}

000b50e2 <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b50e2:	b508      	push	{r3, lr}
   b50e4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b50e6:	215a      	movs	r1, #90	; 0x5a
   b50e8:	f7ff ffcb 	bl	b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b50ec:	bd08      	pop	{r3, pc}

000b50ee <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b50ee:	b508      	push	{r3, lr}
   b50f0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b50f2:	213c      	movs	r1, #60	; 0x3c
   b50f4:	f7ff ffc5 	bl	b5082 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b50f8:	bd08      	pop	{r3, pc}

000b50fa <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b50fa:	b538      	push	{r3, r4, r5, lr}
   b50fc:	4604      	mov	r4, r0
   b50fe:	3004      	adds	r0, #4
   b5100:	460d      	mov	r5, r1
   b5102:	f7ff fe58 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5106:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5108:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b510a:	3b01      	subs	r3, #1
   b510c:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b510e:	bf26      	itte	cs
   b5110:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5112:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5114:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5116:	f004 fae1 	bl	b96dc <os_mutex_recursive_unlock>
        }
   b511a:	4628      	mov	r0, r5
   b511c:	bd38      	pop	{r3, r4, r5, pc}

000b511e <_ZNK13sysStatusData15get_verboseModeEv>:
bool sysStatusData::get_verboseMode() const {
   b511e:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData,verboseMode));
   b5120:	2111      	movs	r1, #17
   b5122:	f7ff ffea 	bl	b50fa <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5126:	bd08      	pop	{r3, pc}

000b5128 <_ZNK13sysStatusData18get_solarPowerModeEv>:
bool sysStatusData::get_solarPowerMode() const  {
   b5128:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData,solarPowerMode ));
   b512a:	2112      	movs	r1, #18
   b512c:	f7ff ffe5 	bl	b50fa <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5130:	bd08      	pop	{r3, pc}

000b5132 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const  {
   b5132:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData,lowPowerMode ));
   b5134:	2113      	movs	r1, #19
   b5136:	f7ff ffe0 	bl	b50fa <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b513a:	bd08      	pop	{r3, pc}

000b513c <_ZNK13sysStatusData18get_lowBatteryModeEv>:
bool sysStatusData::get_lowBatteryMode() const  {
   b513c:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowBatteryMode));
   b513e:	2114      	movs	r1, #20
   b5140:	f7ff ffdb 	bl	b50fa <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5144:	bd08      	pop	{r3, pc}

000b5146 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5146:	b570      	push	{r4, r5, r6, lr}
   b5148:	4604      	mov	r4, r0
   b514a:	3004      	adds	r0, #4
   b514c:	460d      	mov	r5, r1
   b514e:	4616      	mov	r6, r2
   b5150:	f7ff fe31 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5154:	68e3      	ldr	r3, [r4, #12]
   b5156:	3b01      	subs	r3, #1
   b5158:	42ab      	cmp	r3, r5
   b515a:	d307      	bcc.n	b516c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b515c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b515e:	5d5a      	ldrb	r2, [r3, r5]
   b5160:	42b2      	cmp	r2, r6
   b5162:	d003      	beq.n	b516c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                        *(T *)p = value;
   b5164:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b5166:	4620      	mov	r0, r4
   b5168:	f003 fd04 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b516c:	6860      	ldr	r0, [r4, #4]
        }
   b516e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5172:	f004 bab3 	b.w	b96dc <os_mutex_recursive_unlock>

000b5176 <_ZN13sysStatusData15set_verboseModeEb>:
void sysStatusData::set_verboseMode(bool value) {
   b5176:	b508      	push	{r3, lr}
   b5178:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verboseMode), value);
   b517a:	2111      	movs	r1, #17
   b517c:	f7ff ffe3 	bl	b5146 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5180:	bd08      	pop	{r3, pc}

000b5182 <_ZN13sysStatusData18set_solarPowerModeEb>:
void sysStatusData::set_solarPowerMode(bool value) {
   b5182:	b508      	push	{r3, lr}
   b5184:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, solarPowerMode), value);
   b5186:	2112      	movs	r1, #18
   b5188:	f7ff ffdd 	bl	b5146 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b518c:	bd08      	pop	{r3, pc}

000b518e <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b518e:	b508      	push	{r3, lr}
   b5190:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b5192:	2113      	movs	r1, #19
   b5194:	f7ff ffd7 	bl	b5146 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5198:	bd08      	pop	{r3, pc}

000b519a <_ZN13sysStatusData18set_lowBatteryModeEb>:
void sysStatusData::set_lowBatteryMode(bool value) {
   b519a:	b508      	push	{r3, lr}
   b519c:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowBatteryMode), value);
   b519e:	2114      	movs	r1, #20
   b51a0:	f7ff ffd1 	bl	b5146 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b51a4:	bd08      	pop	{r3, pc}

000b51a6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b51a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51a8:	4604      	mov	r4, r0
   b51aa:	3004      	adds	r0, #4
   b51ac:	460d      	mov	r5, r1
   b51ae:	f7ff fe02 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b51b2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b51b4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b51b6:	3b08      	subs	r3, #8
   b51b8:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b51ba:	bf23      	ittte	cs
   b51bc:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b51be:	1949      	addcs	r1, r1, r5
   b51c0:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b51c4:	2600      	movcc	r6, #0
   b51c6:	bf38      	it	cc
   b51c8:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b51ca:	f004 fa87 	bl	b96dc <os_mutex_recursive_unlock>
        }
   b51ce:	4630      	mov	r0, r6
   b51d0:	4639      	mov	r1, r7
   b51d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51d4 <_ZNK13sysStatusData14get_lastReportEv>:
time_t sysStatusData::get_lastReport() const  {
   b51d4:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData,lastReport));
   b51d6:	2140      	movs	r1, #64	; 0x40
   b51d8:	f7ff ffe5 	bl	b51a6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b51dc:	bd08      	pop	{r3, pc}

000b51de <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const  {
   b51de:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData,lastConnection));
   b51e0:	2148      	movs	r1, #72	; 0x48
   b51e2:	f7ff ffe0 	bl	b51a6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b51e6:	bd08      	pop	{r3, pc}

000b51e8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b51e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51ea:	4604      	mov	r4, r0
   b51ec:	3004      	adds	r0, #4
   b51ee:	460d      	mov	r5, r1
   b51f0:	461e      	mov	r6, r3
   b51f2:	4617      	mov	r7, r2
   b51f4:	f7ff fddf 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b51f8:	68e3      	ldr	r3, [r4, #12]
   b51fa:	3b08      	subs	r3, #8
   b51fc:	42ab      	cmp	r3, r5
   b51fe:	d30c      	bcc.n	b521a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5200:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5202:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5204:	5958      	ldr	r0, [r3, r5]
   b5206:	6851      	ldr	r1, [r2, #4]
   b5208:	42b1      	cmp	r1, r6
   b520a:	bf08      	it	eq
   b520c:	42b8      	cmpeq	r0, r7
   b520e:	d004      	beq.n	b521a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b5210:	515f      	str	r7, [r3, r5]
                        updateHash();
   b5212:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5214:	6056      	str	r6, [r2, #4]
                        updateHash();
   b5216:	f003 fcad 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b521a:	6860      	ldr	r0, [r4, #4]
        }
   b521c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5220:	f004 ba5c 	b.w	b96dc <os_mutex_recursive_unlock>

000b5224 <_ZN13sysStatusData14set_lastReportEx>:
void sysStatusData::set_lastReport(time_t value) {
   b5224:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastReport), value);
   b5226:	2140      	movs	r1, #64	; 0x40
   b5228:	f7ff ffde 	bl	b51e8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b522c:	bd08      	pop	{r3, pc}

000b522e <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b522e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5230:	2148      	movs	r1, #72	; 0x48
   b5232:	f7ff ffd9 	bl	b51e8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5236:	bd08      	pop	{r3, pc}

000b5238 <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b5238:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b523a:	2150      	movs	r1, #80	; 0x50
   b523c:	f7ff ffd4 	bl	b51e8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5240:	bd08      	pop	{r3, pc}

000b5242 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5242:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5244:	2118      	movs	r1, #24
   b5246:	f7ff ffcf 	bl	b51e8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b524a:	bd08      	pop	{r3, pc}

000b524c <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b524c:	b510      	push	{r4, lr}
  current.set_lastCountTime(Time.now());
   b524e:	f7ff feb1 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b5252:	4604      	mov	r4, r0
   b5254:	f007 fbcf 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b5258:	4602      	mov	r2, r0
   b525a:	17c3      	asrs	r3, r0, #31
   b525c:	4620      	mov	r0, r4
   b525e:	f7ff fff0 	bl	b5242 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5262:	f7ff fe49 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
}
   b5266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b526a:	2100      	movs	r1, #0
   b526c:	f7ff bf27 	b.w	b50be <_ZN13sysStatusData14set_resetCountEh>

000b5270 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b5270:	b510      	push	{r4, lr}
   b5272:	4604      	mov	r4, r0
    PersistentDataFile::initialize();
   b5274:	f003 fd26 	bl	b8cc4 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b5278:	4905      	ldr	r1, [pc, #20]	; (b5290 <_ZN17currentStatusData10initializeEv+0x20>)
   b527a:	4806      	ldr	r0, [pc, #24]	; (b5294 <_ZN17currentStatusData10initializeEv+0x24>)
   b527c:	f7fe ff7d 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b5280:	4620      	mov	r0, r4
   b5282:	f7ff ffe3 	bl	b524c <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b5286:	4620      	mov	r0, r4
}
   b5288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b528c:	f003 bc72 	b.w	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b5290:	000be5a6 	.word	0x000be5a6
   b5294:	2003e644 	.word	0x2003e644

000b5298 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5298:	b538      	push	{r3, r4, r5, lr}
   b529a:	4604      	mov	r4, r0
   b529c:	3004      	adds	r0, #4
   b529e:	460d      	mov	r5, r1
   b52a0:	f7ff fd89 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b52a4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b52a6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b52a8:	3b02      	subs	r3, #2
   b52aa:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b52ac:	bf26      	itte	cs
   b52ae:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b52b0:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b52b2:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b52b4:	f004 fa12 	bl	b96dc <os_mutex_recursive_unlock>
        }
   b52b8:	4628      	mov	r0, r5
   b52ba:	bd38      	pop	{r3, r4, r5, pc}

000b52bc <_ZNK13sysStatusData26get_lastConnectionDurationEv>:
uint16_t sysStatusData::get_lastConnectionDuration() const  {
   b52bc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,lastConnectionDuration));
   b52be:	2158      	movs	r1, #88	; 0x58
   b52c0:	f7ff ffea 	bl	b5298 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52c4:	bd08      	pop	{r3, pc}
	...

000b52c8 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b52c8:	b510      	push	{r4, lr}
    bool valid = PersistentDataFile::validate(dataSize);
   b52ca:	f003 fc8f 	bl	b8bec <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b52ce:	4604      	mov	r4, r0
   b52d0:	b198      	cbz	r0, b52fa <_ZN13sysStatusData8validateEj+0x32>
        if (sysStatus.get_openTime() < 0 || sysStatus.get_openTime() > 12) {
   b52d2:	f7ff fe11 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b52d6:	f7ff fec0 	bl	b505a <_ZNK13sysStatusData12get_openTimeEv>
   b52da:	f7ff fe0d 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b52de:	f7ff febc 	bl	b505a <_ZNK13sysStatusData12get_openTimeEv>
   b52e2:	280c      	cmp	r0, #12
   b52e4:	d90b      	bls.n	b52fe <_ZN13sysStatusData8validateEj+0x36>
            Log.info("data not valid open time =%d", sysStatus.get_openTime());
   b52e6:	f7ff fe07 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b52ea:	f7ff feb6 	bl	b505a <_ZNK13sysStatusData12get_openTimeEv>
   b52ee:	4911      	ldr	r1, [pc, #68]	; (b5334 <_ZN13sysStatusData8validateEj+0x6c>)
   b52f0:	4602      	mov	r2, r0
            Log.info("data not valid last connection duration =%d", sysStatus.get_lastConnectionDuration());
   b52f2:	4811      	ldr	r0, [pc, #68]	; (b5338 <_ZN13sysStatusData8validateEj+0x70>)
   b52f4:	f7fe ff41 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b52f8:	2400      	movs	r4, #0
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b52fa:	4a10      	ldr	r2, [pc, #64]	; (b533c <_ZN13sysStatusData8validateEj+0x74>)
   b52fc:	e014      	b.n	b5328 <_ZN13sysStatusData8validateEj+0x60>
        else if (sysStatus.get_lastConnection() < 0 || sysStatus.get_lastConnectionDuration() > 900) {
   b52fe:	f7ff fdfb 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5302:	f7ff ff6c 	bl	b51de <_ZNK13sysStatusData18get_lastConnectionEv>
   b5306:	2900      	cmp	r1, #0
   b5308:	da06      	bge.n	b5318 <_ZN13sysStatusData8validateEj+0x50>
            Log.info("data not valid last connection duration =%d", sysStatus.get_lastConnectionDuration());
   b530a:	f7ff fdf5 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b530e:	f7ff ffd5 	bl	b52bc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b5312:	490b      	ldr	r1, [pc, #44]	; (b5340 <_ZN13sysStatusData8validateEj+0x78>)
   b5314:	4602      	mov	r2, r0
   b5316:	e7ec      	b.n	b52f2 <_ZN13sysStatusData8validateEj+0x2a>
        else if (sysStatus.get_lastConnection() < 0 || sysStatus.get_lastConnectionDuration() > 900) {
   b5318:	f7ff fdee 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b531c:	f7ff ffce 	bl	b52bc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b5320:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
   b5324:	d8f1      	bhi.n	b530a <_ZN13sysStatusData8validateEj+0x42>
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b5326:	4a07      	ldr	r2, [pc, #28]	; (b5344 <_ZN13sysStatusData8validateEj+0x7c>)
   b5328:	4907      	ldr	r1, [pc, #28]	; (b5348 <_ZN13sysStatusData8validateEj+0x80>)
   b532a:	4803      	ldr	r0, [pc, #12]	; (b5338 <_ZN13sysStatusData8validateEj+0x70>)
   b532c:	f7fe ff25 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
}
   b5330:	4620      	mov	r0, r4
   b5332:	bd10      	pop	{r4, pc}
   b5334:	000be5c9 	.word	0x000be5c9
   b5338:	2003e644 	.word	0x2003e644
   b533c:	000be5bf 	.word	0x000be5bf
   b5340:	000be5e6 	.word	0x000be5e6
   b5344:	000be5c3 	.word	0x000be5c3
   b5348:	000be612 	.word	0x000be612

000b534c <_ZNK17currentStatusData12get_distanceEv>:
uint16_t currentStatusData::get_distance() const {
   b534c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, distance));
   b534e:	2110      	movs	r1, #16
   b5350:	f7ff ffa2 	bl	b5298 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5354:	bd08      	pop	{r3, pc}
	...

000b5358 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b5358:	b510      	push	{r4, lr}
    bool valid = PersistentDataFile::validate(dataSize);
   b535a:	f003 fc47 	bl	b8bec <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b535e:	4604      	mov	r4, r0
   b5360:	b1a0      	cbz	r0, b538c <_ZN17currentStatusData8validateEj+0x34>
        if (current.get_distance() < 0 || current.get_distance()  > 1024) {
   b5362:	f7ff fe27 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b5366:	f7ff fff1 	bl	b534c <_ZNK17currentStatusData12get_distanceEv>
   b536a:	f7ff fe23 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b536e:	f7ff ffed 	bl	b534c <_ZNK17currentStatusData12get_distanceEv>
   b5372:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b5376:	d910      	bls.n	b539a <_ZN17currentStatusData8validateEj+0x42>
            Log.info("current distance not valid =%d cm" , current.get_distance());
   b5378:	f7ff fe1c 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b537c:	f7ff ffe6 	bl	b534c <_ZNK17currentStatusData12get_distanceEv>
   b5380:	4907      	ldr	r1, [pc, #28]	; (b53a0 <_ZN17currentStatusData8validateEj+0x48>)
   b5382:	4602      	mov	r2, r0
   b5384:	4807      	ldr	r0, [pc, #28]	; (b53a4 <_ZN17currentStatusData8validateEj+0x4c>)
   b5386:	f7fe fef8 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b538a:	2400      	movs	r4, #0
    Log.info("current distance is %s",(valid) ? "valid": "not valid");
   b538c:	4a06      	ldr	r2, [pc, #24]	; (b53a8 <_ZN17currentStatusData8validateEj+0x50>)
   b538e:	4907      	ldr	r1, [pc, #28]	; (b53ac <_ZN17currentStatusData8validateEj+0x54>)
   b5390:	4804      	ldr	r0, [pc, #16]	; (b53a4 <_ZN17currentStatusData8validateEj+0x4c>)
   b5392:	f7fe fef2 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
}
   b5396:	4620      	mov	r0, r4
   b5398:	bd10      	pop	{r4, pc}
    Log.info("current distance is %s",(valid) ? "valid": "not valid");
   b539a:	4a05      	ldr	r2, [pc, #20]	; (b53b0 <_ZN17currentStatusData8validateEj+0x58>)
   b539c:	e7f7      	b.n	b538e <_ZN17currentStatusData8validateEj+0x36>
   b539e:	bf00      	nop
   b53a0:	000be627 	.word	0x000be627
   b53a4:	2003e644 	.word	0x2003e644
   b53a8:	000be5bf 	.word	0x000be5bf
   b53ac:	000be649 	.word	0x000be649
   b53b0:	000be5c3 	.word	0x000be5c3

000b53b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b53b4:	b570      	push	{r4, r5, r6, lr}
   b53b6:	4604      	mov	r4, r0
   b53b8:	3004      	adds	r0, #4
   b53ba:	460d      	mov	r5, r1
   b53bc:	4616      	mov	r6, r2
   b53be:	f7ff fcfa 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53c2:	68e3      	ldr	r3, [r4, #12]
   b53c4:	3b02      	subs	r3, #2
   b53c6:	42ab      	cmp	r3, r5
   b53c8:	d307      	bcc.n	b53da <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b53ca:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b53cc:	5b5a      	ldrh	r2, [r3, r5]
   b53ce:	42b2      	cmp	r2, r6
   b53d0:	d003      	beq.n	b53da <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b53d2:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b53d4:	4620      	mov	r0, r4
   b53d6:	f003 fbcd 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b53da:	6860      	ldr	r0, [r4, #4]
        }
   b53dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b53e0:	f004 b97c 	b.w	b96dc <os_mutex_recursive_unlock>

000b53e4 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b53e4:	b508      	push	{r3, lr}
   b53e6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, lastConnectionDuration), value);
   b53e8:	2158      	movs	r1, #88	; 0x58
   b53ea:	f7ff ffe3 	bl	b53b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b53ee:	bd08      	pop	{r3, pc}

000b53f0 <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b53f0:	b570      	push	{r4, r5, r6, lr}
   b53f2:	b08c      	sub	sp, #48	; 0x30
    PersistentDataFile::initialize();
   b53f4:	f003 fc66 	bl	b8cc4 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    const char message[26] = "Loading System Defaults";
   b53f8:	4b35      	ldr	r3, [pc, #212]	; (b54d0 <_ZN13sysStatusData10initializeEv+0xe0>)
   b53fa:	ac05      	add	r4, sp, #20
   b53fc:	f103 0618 	add.w	r6, r3, #24
   b5400:	4622      	mov	r2, r4
   b5402:	6818      	ldr	r0, [r3, #0]
   b5404:	6859      	ldr	r1, [r3, #4]
   b5406:	4625      	mov	r5, r4
   b5408:	c503      	stmia	r5!, {r0, r1}
   b540a:	3308      	adds	r3, #8
   b540c:	42b3      	cmp	r3, r6
   b540e:	462c      	mov	r4, r5
   b5410:	d1f7      	bne.n	b5402 <_ZN13sysStatusData10initializeEv+0x12>
   b5412:	2300      	movs	r3, #0
    Log.info(message);
   b5414:	4611      	mov	r1, r2
   b5416:	482f      	ldr	r0, [pc, #188]	; (b54d4 <_ZN13sysStatusData10initializeEv+0xe4>)
    const char message[26] = "Loading System Defaults";
   b5418:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    Log.info(message);
   b541c:	f7fe fead 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5420:	f004 fc58 	bl	b9cd4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode",message, PRIVATE);
   b5424:	aa05      	add	r2, sp, #20
   b5426:	b1d0      	cbz	r0, b545e <_ZN13sysStatusData10initializeEv+0x6e>
   b5428:	4b2b      	ldr	r3, [pc, #172]	; (b54d8 <_ZN13sysStatusData10initializeEv+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b542a:	492c      	ldr	r1, [pc, #176]	; (b54dc <_ZN13sysStatusData10initializeEv+0xec>)
   b542c:	781b      	ldrb	r3, [r3, #0]
   b542e:	f88d 3000 	strb.w	r3, [sp]
   b5432:	a803      	add	r0, sp, #12
   b5434:	233c      	movs	r3, #60	; 0x3c
   b5436:	f005 f839 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b543a:	9c04      	ldr	r4, [sp, #16]
   b543c:	b17c      	cbz	r4, b545e <_ZN13sysStatusData10initializeEv+0x6e>
      if (--_M_use_count == 0)
   b543e:	6863      	ldr	r3, [r4, #4]
   b5440:	3b01      	subs	r3, #1
   b5442:	6063      	str	r3, [r4, #4]
   b5444:	b95b      	cbnz	r3, b545e <_ZN13sysStatusData10initializeEv+0x6e>
          _M_dispose();
   b5446:	6823      	ldr	r3, [r4, #0]
   b5448:	4620      	mov	r0, r4
   b544a:	689b      	ldr	r3, [r3, #8]
   b544c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b544e:	68a3      	ldr	r3, [r4, #8]
   b5450:	3b01      	subs	r3, #1
   b5452:	60a3      	str	r3, [r4, #8]
   b5454:	b91b      	cbnz	r3, b545e <_ZN13sysStatusData10initializeEv+0x6e>
            _M_destroy();
   b5456:	6823      	ldr	r3, [r4, #0]
   b5458:	4620      	mov	r0, r4
   b545a:	68db      	ldr	r3, [r3, #12]
   b545c:	4798      	blx	r3
    Log.info("Loading system defaults");
   b545e:	4920      	ldr	r1, [pc, #128]	; (b54e0 <_ZN13sysStatusData10initializeEv+0xf0>)
   b5460:	481c      	ldr	r0, [pc, #112]	; (b54d4 <_ZN13sysStatusData10initializeEv+0xe4>)
   b5462:	f7fe fe8a 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_structuresVersion(1);
   b5466:	f7ff fd47 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b546a:	2101      	movs	r1, #1
   b546c:	f7ff fe21 	bl	b50b2 <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_verboseMode(false);
   b5470:	f7ff fd42 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5474:	2100      	movs	r1, #0
   b5476:	f7ff fe7e 	bl	b5176 <_ZN13sysStatusData15set_verboseModeEb>
    sysStatus.set_lowBatteryMode(false);
   b547a:	f7ff fd3d 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b547e:	2100      	movs	r1, #0
   b5480:	f7ff fe8b 	bl	b519a <_ZN13sysStatusData18set_lowBatteryModeEb>
    sysStatus.set_solarPowerMode(true);
   b5484:	f7ff fd38 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5488:	2101      	movs	r1, #1
   b548a:	f7ff fe7a 	bl	b5182 <_ZN13sysStatusData18set_solarPowerModeEb>
    sysStatus.set_lowPowerMode(false);          // This should be changed to true once we have tested
   b548e:	f7ff fd33 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5492:	2100      	movs	r1, #0
   b5494:	f7ff fe7b 	bl	b518e <_ZN13sysStatusData16set_lowPowerModeEb>
    sysStatus.set_timeZoneStr("ANAT-12");     // NZ Time
   b5498:	f7ff fd2e 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b549c:	4911      	ldr	r1, [pc, #68]	; (b54e4 <_ZN13sysStatusData10initializeEv+0xf4>)
   b549e:	f7ff fd4e 	bl	b4f3e <_ZN13sysStatusData15set_timeZoneStrEPKc>
    sysStatus.set_sensorType(1);                // PIR sensor
   b54a2:	f7ff fd29 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b54a6:	2101      	movs	r1, #1
   b54a8:	f7ff fe1b 	bl	b50e2 <_ZN13sysStatusData14set_sensorTypeEh>
    sysStatus.set_openTime(0);
   b54ac:	f7ff fd24 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b54b0:	2100      	movs	r1, #0
   b54b2:	f7ff fe0a 	bl	b50ca <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(24);                                           // New standard with v20
   b54b6:	f7ff fd1f 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b54ba:	2118      	movs	r1, #24
   b54bc:	f7ff fe0b 	bl	b50d6 <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_lastConnectionDuration(0);                               // New measure
   b54c0:	f7ff fd1a 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b54c4:	2100      	movs	r1, #0
   b54c6:	f7ff ff8d 	bl	b53e4 <_ZN13sysStatusData26set_lastConnectionDurationEt>
}
   b54ca:	b00c      	add	sp, #48	; 0x30
   b54cc:	bd70      	pop	{r4, r5, r6, pc}
   b54ce:	bf00      	nop
   b54d0:	000be704 	.word	0x000be704
   b54d4:	2003e644 	.word	0x2003e644
   b54d8:	2003e59d 	.word	0x2003e59d
   b54dc:	000be660 	.word	0x000be660
   b54e0:	000be665 	.word	0x000be665
   b54e4:	000be67d 	.word	0x000be67d

000b54e8 <_ZN17currentStatusData12set_distanceEt>:
void currentStatusData::set_distance(uint16_t value) {
   b54e8:	b508      	push	{r3, lr}
   b54ea:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, distance), value);
   b54ec:	2110      	movs	r1, #16
   b54ee:	f7ff ff61 	bl	b53b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54f2:	bd08      	pop	{r3, pc}

000b54f4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>:
        T getValue(size_t offset) const {
   b54f4:	b538      	push	{r3, r4, r5, lr}
   b54f6:	4604      	mov	r4, r0
   b54f8:	ed2d 8b02 	vpush	{d8}
   b54fc:	3004      	adds	r0, #4
   b54fe:	460d      	mov	r5, r1
   b5500:	f7ff fc59 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5504:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5506:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5508:	3b04      	subs	r3, #4
   b550a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b550c:	bf29      	itett	cs
   b550e:	68a1      	ldrcs	r1, [r4, #8]
            T result = 0;
   b5510:	ed9f 8a05 	vldrcc	s16, [pc, #20]	; b5528 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j+0x34>
                    result = *(const T *)p;
   b5514:	1949      	addcs	r1, r1, r5
   b5516:	ed91 8a00 	vldrcs	s16, [r1]
            os_mutex_recursive_unlock(handle_); 
   b551a:	f004 f8df 	bl	b96dc <os_mutex_recursive_unlock>
        }
   b551e:	eeb0 0a48 	vmov.f32	s0, s16
   b5522:	ecbd 8b02 	vpop	{d8}
   b5526:	bd38      	pop	{r3, r4, r5, pc}
   b5528:	00000000 	.word	0x00000000

000b552c <_ZNK17currentStatusData17get_internalTempCEv>:
float currentStatusData::get_internalTempC() const {
   b552c:	b508      	push	{r3, lr}
    return getValue<float>(offsetof(CurrentData, internalTempC));
   b552e:	2120      	movs	r1, #32
   b5530:	f7ff ffe0 	bl	b54f4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>
}
   b5534:	bd08      	pop	{r3, pc}

000b5536 <_ZNK17currentStatusData17get_externalTempCEv>:
float currentStatusData::get_externalTempC() const {
   b5536:	b508      	push	{r3, lr}
    return getValue<float>(offsetof(CurrentData, externalTempC));
   b5538:	2124      	movs	r1, #36	; 0x24
   b553a:	f7ff ffdb 	bl	b54f4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>
}
   b553e:	bd08      	pop	{r3, pc}

000b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>:
float currentStatusData::get_stateOfCharge() const  {
   b5540:	b508      	push	{r3, lr}
    return getValue<float>(offsetof(CurrentData,stateOfCharge));
   b5542:	2138      	movs	r1, #56	; 0x38
   b5544:	f7ff ffd6 	bl	b54f4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIfEET_j>
}
   b5548:	bd08      	pop	{r3, pc}

000b554a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>:
        void setValue(size_t offset, T value)  {
   b554a:	b538      	push	{r3, r4, r5, lr}
   b554c:	4604      	mov	r4, r0
   b554e:	ed2d 8b02 	vpush	{d8}
   b5552:	3004      	adds	r0, #4
   b5554:	460d      	mov	r5, r1
   b5556:	eeb0 8a40 	vmov.f32	s16, s0
   b555a:	f7ff fc2c 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b555e:	68e3      	ldr	r3, [r4, #12]
   b5560:	3b04      	subs	r3, #4
   b5562:	42ab      	cmp	r3, r5
   b5564:	d30d      	bcc.n	b5582 <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_+0x38>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5566:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5568:	1959      	adds	r1, r3, r5
                    if (oldValue != value) {
   b556a:	edd1 7a00 	vldr	s15, [r1]
   b556e:	eef4 7a48 	vcmp.f32	s15, s16
   b5572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5576:	d004      	beq.n	b5582 <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_+0x38>
                        *(T *)p = value;
   b5578:	ed81 8a00 	vstr	s16, [r1]
                        updateHash();
   b557c:	4620      	mov	r0, r4
   b557e:	f003 faf9 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
        }
   b5582:	ecbd 8b02 	vpop	{d8}
            os_mutex_recursive_unlock(handle_); 
   b5586:	6860      	ldr	r0, [r4, #4]
        }
   b5588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b558c:	f004 b8a6 	b.w	b96dc <os_mutex_recursive_unlock>

000b5590 <_ZN17currentStatusData17set_internalTempCEf>:
void currentStatusData::set_internalTempC(float value) {
   b5590:	b508      	push	{r3, lr}
    setValue<float>(offsetof(CurrentData, internalTempC), value);
   b5592:	2120      	movs	r1, #32
   b5594:	f7ff ffd9 	bl	b554a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>
}
   b5598:	bd08      	pop	{r3, pc}

000b559a <_ZN17currentStatusData17set_externalTempCEf>:
void currentStatusData::set_externalTempC(float value) {
   b559a:	b508      	push	{r3, lr}
    setValue<float>(offsetof(CurrentData, externalTempC), value);
   b559c:	2124      	movs	r1, #36	; 0x24
   b559e:	f7ff ffd4 	bl	b554a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>
}
   b55a2:	bd08      	pop	{r3, pc}

000b55a4 <_ZN17currentStatusData17set_stateOfChargeEf>:
void currentStatusData::set_stateOfCharge(float value) {
   b55a4:	b508      	push	{r3, lr}
    setValue<float>(offsetof(CurrentData, stateOfCharge), value);
   b55a6:	2138      	movs	r1, #56	; 0x38
   b55a8:	f7ff ffcf 	bl	b554a <_ZN15StorageHelperRK18PersistentDataBase8setValueIfEEvjT_>
}
   b55ac:	bd08      	pop	{r3, pc}

000b55ae <_ZNK15StorageHelperRK18PersistentDataBase8getValueIaEET_j>:
        T getValue(size_t offset) const {
   b55ae:	b538      	push	{r3, r4, r5, lr}
   b55b0:	4604      	mov	r4, r0
   b55b2:	3004      	adds	r0, #4
   b55b4:	460d      	mov	r5, r1
   b55b6:	f7ff fbfe 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55ba:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b55bc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b55be:	3b01      	subs	r3, #1
   b55c0:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b55c2:	bf26      	itte	cs
   b55c4:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b55c6:	575d      	ldrsbcs	r5, [r3, r5]
            T result = 0;
   b55c8:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b55ca:	f004 f887 	bl	b96dc <os_mutex_recursive_unlock>
        }
   b55ce:	4628      	mov	r0, r5
   b55d0:	bd38      	pop	{r3, r4, r5, pc}

000b55d2 <_ZNK17currentStatusData13get_alertCodeEv>:
int8_t currentStatusData::get_alertCode() const {
   b55d2:	b508      	push	{r3, lr}
    return getValue<int8_t>(offsetof(CurrentData, alertCode));
   b55d4:	2128      	movs	r1, #40	; 0x28
   b55d6:	f7ff ffea 	bl	b55ae <_ZNK15StorageHelperRK18PersistentDataBase8getValueIaEET_j>
}
   b55da:	bd08      	pop	{r3, pc}

000b55dc <_GLOBAL__sub_I_persistentDataPathSystem>:
        val_(val) {
   b55dc:	4b01      	ldr	r3, [pc, #4]	; (b55e4 <_GLOBAL__sub_I_persistentDataPathSystem+0x8>)
   b55de:	2201      	movs	r2, #1
   b55e0:	701a      	strb	r2, [r3, #0]
}
   b55e2:	4770      	bx	lr
   b55e4:	2003e59d 	.word	0x2003e59d

000b55e8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b55e8:	4770      	bx	lr

000b55ea <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b55ea:	6a00      	ldr	r0, [r0, #32]
   b55ec:	6803      	ldr	r3, [r0, #0]
   b55ee:	68db      	ldr	r3, [r3, #12]
   b55f0:	4718      	bx	r3

000b55f2 <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b55f2:	4770      	bx	lr

000b55f4 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b55f4:	b510      	push	{r4, lr}
}
   b55f6:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b55f8:	4604      	mov	r4, r0
}
   b55fa:	f7fe fd50 	bl	b409e <_ZdlPvj>
   b55fe:	4620      	mov	r0, r4
   b5600:	bd10      	pop	{r4, pc}
	...

000b5604 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b5604:	b510      	push	{r4, lr}
   b5606:	4b03      	ldr	r3, [pc, #12]	; (b5614 <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b5608:	6003      	str	r3, [r0, #0]
   b560a:	4604      	mov	r4, r0
   b560c:	f001 f936 	bl	b687c <_ZN10JsonParserD1Ev>
   b5610:	4620      	mov	r0, r4
   b5612:	bd10      	pop	{r4, pc}
   b5614:	000beb8c 	.word	0x000beb8c

000b5618 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b5618:	b510      	push	{r4, lr}
   b561a:	4604      	mov	r4, r0
   b561c:	f7ff fff2 	bl	b5604 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b5620:	4620      	mov	r0, r4
   b5622:	f640 112c 	movw	r1, #2348	; 0x92c
   b5626:	f7fe fd3a 	bl	b409e <_ZdlPvj>
   b562a:	4620      	mov	r0, r4
   b562c:	bd10      	pop	{r4, pc}

000b562e <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b562e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b5630:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b5632:	6853      	ldr	r3, [r2, #4]
   b5634:	6890      	ldr	r0, [r2, #8]
   b5636:	6814      	ldr	r4, [r2, #0]
   b5638:	105e      	asrs	r6, r3, #1
   b563a:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b563e:	07db      	lsls	r3, r3, #31
   b5640:	bf48      	it	mi
   b5642:	5983      	ldrmi	r3, [r0, r6]
   b5644:	4668      	mov	r0, sp
   b5646:	bf48      	it	mi
   b5648:	591c      	ldrmi	r4, [r3, r4]
   b564a:	f006 fe85 	bl	bc358 <_ZN6StringC1EOS_>
   b564e:	4669      	mov	r1, sp
   b5650:	4628      	mov	r0, r5
   b5652:	47a0      	blx	r4
   b5654:	4604      	mov	r4, r0
   b5656:	4668      	mov	r0, sp
   b5658:	f006 fe02 	bl	bc260 <_ZN6StringD1Ev>
      }
   b565c:	4620      	mov	r0, r4
   b565e:	b004      	add	sp, #16
   b5660:	bd70      	pop	{r4, r5, r6, pc}

000b5662 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5662:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5664:	b538      	push	{r3, r4, r5, lr}
   b5666:	4604      	mov	r4, r0
	switch (__op)
   b5668:	d102      	bne.n	b5670 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b566a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b566c:	6023      	str	r3, [r4, #0]
	}
   b566e:	e003      	b.n	b5678 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b5670:	2a02      	cmp	r2, #2
   b5672:	d003      	beq.n	b567c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b5674:	2a03      	cmp	r2, #3
   b5676:	d00d      	beq.n	b5694 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b5678:	2000      	movs	r0, #0
   b567a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b567c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b567e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5680:	f7fe fd09 	bl	b4096 <_Znwj>
   b5684:	4603      	mov	r3, r0
   b5686:	2800      	cmp	r0, #0
   b5688:	d0f0      	beq.n	b566c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b568a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b568e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5692:	e7eb      	b.n	b566c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5694:	6800      	ldr	r0, [r0, #0]
   b5696:	2800      	cmp	r0, #0
   b5698:	d0ee      	beq.n	b5678 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b569a:	210c      	movs	r1, #12
   b569c:	f7fe fcff 	bl	b409e <_ZdlPvj>
   b56a0:	e7ea      	b.n	b5678 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b56a2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b56a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b56a4:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b56a6:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b56a8:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b56aa:	f001 fa7f 	bl	b6bac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b56ae:	b120      	cbz	r0, b56ba <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b56b0:	9901      	ldr	r1, [sp, #4]
   b56b2:	462a      	mov	r2, r5
   b56b4:	4620      	mov	r0, r4
   b56b6:	f001 fa5b 	bl	b6b70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b56ba:	b003      	add	sp, #12
   b56bc:	bd30      	pop	{r4, r5, pc}
	...

000b56c0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b56c0:	4b0a      	ldr	r3, [pc, #40]	; (b56ec <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b56c2:	b510      	push	{r4, lr}
   b56c4:	4604      	mov	r4, r0
   b56c6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b56c8:	f005 fd14 	bl	bb0f4 <_ZN5spark10LogManager8instanceEv>
   b56cc:	4621      	mov	r1, r4
   b56ce:	f005 ff18 	bl	bb502 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b56d2:	f007 fa81 	bl	bcbd8 <_Z16_fetch_usbserialv>
   b56d6:	f007 fa73 	bl	bcbc0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b56da:	4620      	mov	r0, r4
   b56dc:	4b04      	ldr	r3, [pc, #16]	; (b56f0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b56de:	f840 3b04 	str.w	r3, [r0], #4
   b56e2:	f005 fda9 	bl	bb238 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b56e6:	4620      	mov	r0, r4
   b56e8:	bd10      	pop	{r4, pc}
   b56ea:	bf00      	nop
   b56ec:	000beb74 	.word	0x000beb74
   b56f0:	000beb5c 	.word	0x000beb5c

000b56f4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b56f4:	b510      	push	{r4, lr}
   b56f6:	4604      	mov	r4, r0
    }
   b56f8:	f7ff ffe2 	bl	b56c0 <_ZN5spark16SerialLogHandlerD1Ev>
   b56fc:	4620      	mov	r0, r4
   b56fe:	2124      	movs	r1, #36	; 0x24
   b5700:	f7fe fccd 	bl	b409e <_ZdlPvj>
   b5704:	4620      	mov	r0, r4
   b5706:	bd10      	pop	{r4, pc}

000b5708 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b5708:	b510      	push	{r4, lr}
    if (!_instance) {
   b570a:	4c06      	ldr	r4, [pc, #24]	; (b5724 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b570c:	6823      	ldr	r3, [r4, #0]
   b570e:	b933      	cbnz	r3, b571e <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b5710:	2004      	movs	r0, #4
   b5712:	f7fe fcc0 	bl	b4096 <_Znwj>
   b5716:	b108      	cbz	r0, b571c <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b5718:	4b03      	ldr	r3, [pc, #12]	; (b5728 <_ZN18Particle_Functions8instanceEv+0x20>)
   b571a:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b571c:	6020      	str	r0, [r4, #0]
}
   b571e:	6820      	ldr	r0, [r4, #0]
   b5720:	bd10      	pop	{r4, pc}
   b5722:	bf00      	nop
   b5724:	2003e5b8 	.word	0x2003e5b8
   b5728:	000bebd8 	.word	0x000bebd8

000b572c <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b572c:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b572e:	4919      	ldr	r1, [pc, #100]	; (b5794 <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b5730:	b085      	sub	sp, #20
   b5732:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5734:	4818      	ldr	r0, [pc, #96]	; (b5798 <_ZN18Particle_Functions5setupEv+0x6c>)
   b5736:	f7fe fd20 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b573a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b573c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b573e:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5740:	f7fe fca9 	bl	b4096 <_Znwj>
   b5744:	b118      	cbz	r0, b574e <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5746:	4b15      	ldr	r3, [pc, #84]	; (b579c <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5748:	6084      	str	r4, [r0, #8]
   b574a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b574e:	4b14      	ldr	r3, [pc, #80]	; (b57a0 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5750:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b5752:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b5754:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b5756:	4b13      	ldr	r3, [pc, #76]	; (b57a4 <_ZN18Particle_Functions5setupEv+0x78>)
   b5758:	9302      	str	r3, [sp, #8]
   b575a:	f7fe fc9c 	bl	b4096 <_Znwj>
   b575e:	4604      	mov	r4, r0
   b5760:	b178      	cbz	r0, b5782 <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b5762:	2300      	movs	r3, #0
   b5764:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5766:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b5768:	b133      	cbz	r3, b5778 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b576a:	2202      	movs	r2, #2
   b576c:	4669      	mov	r1, sp
   b576e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5770:	9b03      	ldr	r3, [sp, #12]
   b5772:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5774:	9b02      	ldr	r3, [sp, #8]
   b5776:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b5778:	4a0b      	ldr	r2, [pc, #44]	; (b57a8 <_ZN18Particle_Functions5setupEv+0x7c>)
   b577a:	480c      	ldr	r0, [pc, #48]	; (b57ac <_ZN18Particle_Functions5setupEv+0x80>)
   b577c:	4621      	mov	r1, r4
   b577e:	f004 fd84 	bl	ba28a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b5782:	9b02      	ldr	r3, [sp, #8]
   b5784:	b11b      	cbz	r3, b578e <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5786:	4669      	mov	r1, sp
   b5788:	2203      	movs	r2, #3
   b578a:	4608      	mov	r0, r1
   b578c:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b578e:	b005      	add	sp, #20
   b5790:	bd30      	pop	{r4, r5, pc}
   b5792:	bf00      	nop
   b5794:	000be778 	.word	0x000be778
   b5798:	2003e644 	.word	0x2003e644
   b579c:	000b5891 	.word	0x000b5891
   b57a0:	000b562f 	.word	0x000b562f
   b57a4:	000b5663 	.word	0x000b5663
   b57a8:	000be7a6 	.word	0x000be7a6
   b57ac:	000ba263 	.word	0x000ba263

000b57b0 <_ZN18Particle_Functions9sendEventEv>:
 * @details This idea is that this is called regardless of connected status.  We want to send regardless and connect if we can later
 * The time stamp is the time of the last count or the beginning of the hour if there is a zero hourly count for that period
 *
 *
 */
void Particle_Functions::sendEvent() {
   b57b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57b4:	b0cd      	sub	sp, #308	; 0x134
  char data[256];                                                     // Store the date in this character array - not global
  unsigned long timeStampValue;                                       // Going to start sending timestamps - and will modify for midnight to fix reporting issue
  timeStampValue = Time.now();                                        // Set the timestamp (may need to adjust for midnight)
   b57b6:	f007 f91e 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b57ba:	4680      	mov	r8, r0

  snprintf(data, sizeof(data), "{\"distance\":%i, \"battery\":%4.2f,\"key1\":\"%s\", \"temp\":%4.2f, \"resets\":%i, \"alerts\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.get_distance(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],current.get_internalTempC(), sysStatus.get_resetCount(), current.get_alertCode(), sysStatus.get_lastConnectionDuration(), timeStampValue);
   b57bc:	f7ff fbfa 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b57c0:	f7ff fdc4 	bl	b534c <_ZNK17currentStatusData12get_distanceEv>
   b57c4:	900b      	str	r0, [sp, #44]	; 0x2c
   b57c6:	f7ff fbf5 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b57ca:	f7ff feb9 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b57ce:	ee10 4a10 	vmov	r4, s0
   b57d2:	f7ff fbef 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b57d6:	f7ff fc4f 	bl	b5078 <_ZNK17currentStatusData16get_batteryStateEv>
   b57da:	4a26      	ldr	r2, [pc, #152]	; (b5874 <_ZN18Particle_Functions9sendEventEv+0xc4>)
   b57dc:	f852 9020 	ldr.w	r9, [r2, r0, lsl #2]
   b57e0:	f7ff fbe8 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b57e4:	f7ff fea2 	bl	b552c <_ZNK17currentStatusData17get_internalTempCEv>
   b57e8:	ee10 5a10 	vmov	r5, s0
   b57ec:	f7ff fb84 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b57f0:	f7ff fc2e 	bl	b5050 <_ZNK13sysStatusData14get_resetCountEv>
   b57f4:	4606      	mov	r6, r0
   b57f6:	f7ff fbdd 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b57fa:	f7ff feea 	bl	b55d2 <_ZNK17currentStatusData13get_alertCodeEv>
   b57fe:	4607      	mov	r7, r0
   b5800:	f7ff fb7a 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5804:	f7ff fd5a 	bl	b52bc <_ZNK13sysStatusData26get_lastConnectionDurationEv>
   b5808:	e9cd 0808 	strd	r0, r8, [sp, #32]
   b580c:	4628      	mov	r0, r5
   b580e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   b5812:	f007 fe83 	bl	bd51c <__aeabi_f2d>
   b5816:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b581a:	4620      	mov	r0, r4
   b581c:	f8cd 9008 	str.w	r9, [sp, #8]
   b5820:	f007 fe7c 	bl	bd51c <__aeabi_f2d>
   b5824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5826:	4a14      	ldr	r2, [pc, #80]	; (b5878 <_ZN18Particle_Functions9sendEventEv+0xc8>)
   b5828:	e9cd 0100 	strd	r0, r1, [sp]
   b582c:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5830:	a80c      	add	r0, sp, #48	; 0x30
   b5832:	f004 fb17 	bl	b9e64 <snprintf>
  PublishQueuePosix::instance().publish("Ubidots_Level_Hook_v1", data, PRIVATE | WITH_ACK);
   b5836:	f002 f8ff 	bl	b7a38 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b583a:	4b10      	ldr	r3, [pc, #64]	; (b587c <_ZN18Particle_Functions9sendEventEv+0xcc>)
   b583c:	4a10      	ldr	r2, [pc, #64]	; (b5880 <_ZN18Particle_Functions9sendEventEv+0xd0>)
   b583e:	781b      	ldrb	r3, [r3, #0]
   b5840:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5842:	4910      	ldr	r1, [pc, #64]	; (b5884 <_ZN18Particle_Functions9sendEventEv+0xd4>)
   b5844:	4313      	orrs	r3, r2
   b5846:	2400      	movs	r4, #0
   b5848:	6802      	ldr	r2, [r0, #0]
   b584a:	f88d 3000 	strb.w	r3, [sp]
   b584e:	f88d 4004 	strb.w	r4, [sp, #4]
   b5852:	233c      	movs	r3, #60	; 0x3c
   b5854:	6815      	ldr	r5, [r2, #0]
   b5856:	aa0c      	add	r2, sp, #48	; 0x30
   b5858:	47a8      	blx	r5
  Log.info("Ubidots Webhook: %s", data);                              // For monitoring via serial
   b585a:	aa0c      	add	r2, sp, #48	; 0x30
   b585c:	490a      	ldr	r1, [pc, #40]	; (b5888 <_ZN18Particle_Functions9sendEventEv+0xd8>)
   b585e:	480b      	ldr	r0, [pc, #44]	; (b588c <_ZN18Particle_Functions9sendEventEv+0xdc>)
   b5860:	f7fe fc8b 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
  current.set_alertCode(0);                                                 // Reset the alert after publish
   b5864:	f7ff fba6 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b5868:	4621      	mov	r1, r4
   b586a:	f7ff fbc6 	bl	b4ffa <_ZN17currentStatusData13set_alertCodeEa>
}
   b586e:	b04d      	add	sp, #308	; 0x134
   b5870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5874:	2003e3bc 	.word	0x2003e3bc
   b5878:	000be7af 	.word	0x000be7af
   b587c:	2003e5b5 	.word	0x2003e5b5
   b5880:	2003e5b4 	.word	0x2003e5b4
   b5884:	000be828 	.word	0x000be828
   b5888:	000be83e 	.word	0x000be83e
   b588c:	2003e644 	.word	0x2003e644

000b5890 <_ZN18Particle_Functions18jsonFunctionParserE6String>:
int Particle_Functions::jsonFunctionParser(String command) {
   b5890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5894:	f6ad 2d4c 	subw	sp, sp, #2636	; 0xa4c
   b5898:	460c      	mov	r4, r1
   b589a:	4607      	mov	r7, r0
	String variable;
   b589c:	49af      	ldr	r1, [pc, #700]	; (b5b5c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b589e:	a80b      	add	r0, sp, #44	; 0x2c
   b58a0:	f006 fd29 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b58a4:	49ad      	ldr	r1, [pc, #692]	; (b5b5c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b58a6:	a80f      	add	r0, sp, #60	; 0x3c
   b58a8:	f006 fd25 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
  char messaging[64]=" ";
   b58ac:	2320      	movs	r3, #32
   b58ae:	223c      	movs	r2, #60	; 0x3c
   b58b0:	2100      	movs	r1, #0
   b58b2:	a818      	add	r0, sp, #96	; 0x60
   b58b4:	9317      	str	r3, [sp, #92]	; 0x5c
   b58b6:	f008 fa4f 	bl	bdd58 <memset>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b58ba:	2350      	movs	r3, #80	; 0x50
   b58bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b58c0:	9300      	str	r3, [sp, #0]
   b58c2:	a952      	add	r1, sp, #328	; 0x148
   b58c4:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
   b58c8:	a847      	add	r0, sp, #284	; 0x11c
   b58ca:	f001 f82f 	bl	b692c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b58ce:	4ba4      	ldr	r3, [pc, #656]	; (b5b60 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
  Log.info(command.c_str());
   b58d0:	6821      	ldr	r1, [r4, #0]
   b58d2:	48a4      	ldr	r0, [pc, #656]	; (b5b64 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b58d4:	9347      	str	r3, [sp, #284]	; 0x11c
   b58d6:	f7fe fc50 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();
   b58da:	a847      	add	r0, sp, #284	; 0x11c
   b58dc:	f001 f81c 	bl	b6918 <_ZN10JsonBuffer5clearEv>
   b58e0:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b58e2:	9107      	str	r1, [sp, #28]
   b58e4:	4608      	mov	r0, r1
   b58e6:	f008 fab4 	bl	bde52 <strlen>
   b58ea:	9907      	ldr	r1, [sp, #28]
   b58ec:	4602      	mov	r2, r0
   b58ee:	a847      	add	r0, sp, #284	; 0x11c
   b58f0:	f000 fff5 	bl	b68de <_ZN10JsonBuffer7addDataEPKcj>
	if (!jp.parse()) {
   b58f4:	a847      	add	r0, sp, #284	; 0x11c
   b58f6:	f001 fb63 	bl	b6fc0 <_ZN10JsonParser5parseEv>
   b58fa:	4604      	mov	r4, r0
   b58fc:	b990      	cbnz	r0, b5924 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x94>
		Log.info("Parsing failed - check syntax");
   b58fe:	499a      	ldr	r1, [pc, #616]	; (b5b68 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b5900:	4898      	ldr	r0, [pc, #608]	; (b5b64 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b5902:	f7fe fc3a 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5906:	4b99      	ldr	r3, [pc, #612]	; (b5b6c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5908:	4a97      	ldr	r2, [pc, #604]	; (b5b68 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b590a:	781b      	ldrb	r3, [r3, #0]
   b590c:	f88d 3000 	strb.w	r3, [sp]
   b5910:	a827      	add	r0, sp, #156	; 0x9c
   b5912:	4997      	ldr	r1, [pc, #604]	; (b5b70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b5914:	233c      	movs	r3, #60	; 0x3c
   b5916:	f004 fdc9 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   b591a:	a828      	add	r0, sp, #160	; 0xa0
   b591c:	f7fe fd46 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return success;
   b5920:	4625      	mov	r5, r4
   b5922:	e016      	b.n	b5952 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xc2>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b5924:	a847      	add	r0, sp, #284	; 0x11c
   b5926:	f001 f811 	bl	b694c <_ZNK10JsonParser14getOuterObjectEv>
   b592a:	4a91      	ldr	r2, [pc, #580]	; (b5b70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b592c:	f8df 9298 	ldr.w	r9, [pc, #664]	; b5bc8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x338>
   b5930:	f8df 8238 	ldr.w	r8, [pc, #568]	; b5b6c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b5934:	4601      	mov	r1, r0
   b5936:	ab0a      	add	r3, sp, #40	; 0x28
   b5938:	a847      	add	r0, sp, #284	; 0x11c
   b593a:	f001 f937 	bl	b6bac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b593e:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b5940:	990a      	ldr	r1, [sp, #40]	; 0x28
   b5942:	462a      	mov	r2, r5
   b5944:	a847      	add	r0, sp, #284	; 0x11c
   b5946:	f001 f823 	bl	b6990 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b594a:	4601      	mov	r1, r0
   b594c:	b978      	cbnz	r0, b596e <_ZN18Particle_Functions18jsonFunctionParserE6String+0xde>
      if (i == 0) return 0;                                       // No valid entries
   b594e:	2d00      	cmp	r5, #0
   b5950:	d1e6      	bne.n	b5920 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x90>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b5952:	a847      	add	r0, sp, #284	; 0x11c
   b5954:	f7ff fe56 	bl	b5604 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b5958:	a80f      	add	r0, sp, #60	; 0x3c
   b595a:	f006 fc81 	bl	bc260 <_ZN6StringD1Ev>
	String variable;
   b595e:	a80b      	add	r0, sp, #44	; 0x2c
   b5960:	f006 fc7e 	bl	bc260 <_ZN6StringD1Ev>
}
   b5964:	4628      	mov	r0, r5
   b5966:	f60d 2d4c 	addw	sp, sp, #2636	; 0xa4c
   b596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b596e:	ab0b      	add	r3, sp, #44	; 0x2c
   b5970:	464a      	mov	r2, r9
   b5972:	9007      	str	r0, [sp, #28]
   b5974:	a847      	add	r0, sp, #284	; 0x11c
   b5976:	f7ff fe94 	bl	b56a2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b597a:	9907      	ldr	r1, [sp, #28]
   b597c:	4a7d      	ldr	r2, [pc, #500]	; (b5b74 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b597e:	a847      	add	r0, sp, #284	; 0x11c
   b5980:	ab0f      	add	r3, sp, #60	; 0x3c
   b5982:	f7ff fe8e 	bl	b56a2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5986:	497c      	ldr	r1, [pc, #496]	; (b5b78 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b5988:	a80f      	add	r0, sp, #60	; 0x3c
   b598a:	f006 fd7a 	bl	bc482 <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b598e:	2800      	cmp	r0, #0
   b5990:	d036      	beq.n	b5a00 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x170>
   b5992:	497a      	ldr	r1, [pc, #488]	; (b5b7c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b5994:	a80b      	add	r0, sp, #44	; 0x2c
   b5996:	f006 fd74 	bl	bc482 <_ZNK6String6equalsEPKc>
      if (variable == "all") {
   b599a:	b360      	cbz	r0, b59f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x166>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b599c:	4978      	ldr	r1, [pc, #480]	; (b5b80 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b599e:	a817      	add	r0, sp, #92	; 0x5c
   b59a0:	f008 fa31 	bl	bde06 <strcpy>
          sysStatus.initialize();                     // All will reset system values as well
   b59a4:	f7ff faa8 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b59a8:	6803      	ldr	r3, [r0, #0]
   b59aa:	699b      	ldr	r3, [r3, #24]
   b59ac:	4798      	blx	r3
          current.resetEverything();
   b59ae:	f7ff fb01 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b59b2:	f7ff fc4b 	bl	b524c <_ZN17currentStatusData15resetEverythingEv>
      current.resetEverything();
   b59b6:	f7ff fafd 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b59ba:	f7ff fc47 	bl	b524c <_ZN17currentStatusData15resetEverythingEv>
    if (!(strncmp(messaging," ",1) == 0)) {
   b59be:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   b59c2:	2b20      	cmp	r3, #32
   b59c4:	d013      	beq.n	b59ee <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15e>
      Log.info(messaging);
   b59c6:	4867      	ldr	r0, [pc, #412]	; (b5b64 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b59c8:	a917      	add	r1, sp, #92	; 0x5c
   b59ca:	f7fe fbd6 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b59ce:	f004 f981 	bl	b9cd4 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b59d2:	b160      	cbz	r0, b59ee <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15e>
   b59d4:	f898 3000 	ldrb.w	r3, [r8]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b59d8:	f88d 3000 	strb.w	r3, [sp]
   b59dc:	a827      	add	r0, sp, #156	; 0x9c
   b59de:	4964      	ldr	r1, [pc, #400]	; (b5b70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b59e0:	233c      	movs	r3, #60	; 0x3c
   b59e2:	aa17      	add	r2, sp, #92	; 0x5c
   b59e4:	f004 fd62 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b59e8:	a828      	add	r0, sp, #160	; 0xa0
   b59ea:	f7fe fcdf 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b59ee:	3501      	adds	r5, #1
   b59f0:	2d0a      	cmp	r5, #10
   b59f2:	d1a5      	bne.n	b5940 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb0>
   b59f4:	e794      	b.n	b5920 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x90>
      else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b59f6:	4963      	ldr	r1, [pc, #396]	; (b5b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b59f8:	a817      	add	r0, sp, #92	; 0x5c
   b59fa:	f008 fa04 	bl	bde06 <strcpy>
   b59fe:	e7da      	b.n	b59b6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x126>
   b5a00:	4961      	ldr	r1, [pc, #388]	; (b5b88 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b5a02:	a80f      	add	r0, sp, #60	; 0x3c
   b5a04:	f006 fd3d 	bl	bc482 <_ZNK6String6equalsEPKc>
    else if (function == "status") {
   b5a08:	2800      	cmp	r0, #0
   b5a0a:	d07d      	beq.n	b5b08 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x278>
      takeMeasurements();
   b5a0c:	f000 fc24 	bl	b6258 <_Z16takeMeasurementsv>
      snprintf(data, sizeof(data),"Distance: %d, Sensor: %s, Battery: %4.2f and %s",current.get_distance(), (sysStatus.get_sensorType()) ? "Level" : "Trail", current.get_stateOfCharge(), batteryContext[current.get_batteryState()]);
   b5a10:	f7ff fad0 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b5a14:	f7ff fc9a 	bl	b534c <_ZNK17currentStatusData12get_distanceEv>
   b5a18:	9007      	str	r0, [sp, #28]
   b5a1a:	f7ff fa6d 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5a1e:	f7ff fb26 	bl	b506e <_ZNK13sysStatusData14get_sensorTypeEv>
   b5a22:	4e5a      	ldr	r6, [pc, #360]	; (b5b8c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b5a24:	4a5a      	ldr	r2, [pc, #360]	; (b5b90 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b5a26:	2800      	cmp	r0, #0
   b5a28:	bf08      	it	eq
   b5a2a:	4616      	moveq	r6, r2
   b5a2c:	f7ff fac2 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b5a30:	f7ff fd86 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5a34:	ee10 aa10 	vmov	sl, s0
   b5a38:	f7ff fabc 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b5a3c:	f7ff fb1c 	bl	b5078 <_ZNK17currentStatusData16get_batteryStateEv>
   b5a40:	4a54      	ldr	r2, [pc, #336]	; (b5b94 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b5a42:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   b5a46:	9204      	str	r2, [sp, #16]
   b5a48:	4650      	mov	r0, sl
   b5a4a:	f007 fd67 	bl	bd51c <__aeabi_f2d>
   b5a4e:	9b07      	ldr	r3, [sp, #28]
   b5a50:	4a51      	ldr	r2, [pc, #324]	; (b5b98 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b5a52:	9600      	str	r6, [sp, #0]
   b5a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5a58:	2180      	movs	r1, #128	; 0x80
   b5a5a:	a827      	add	r0, sp, #156	; 0x9c
   b5a5c:	f004 fa02 	bl	b9e64 <snprintf>
      Log.info(data);
   b5a60:	4840      	ldr	r0, [pc, #256]	; (b5b64 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b5a62:	a927      	add	r1, sp, #156	; 0x9c
   b5a64:	f7fe fb89 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b5a68:	f898 3000 	ldrb.w	r3, [r8]
   b5a6c:	4946      	ldr	r1, [pc, #280]	; (b5b88 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b5a6e:	f88d 3000 	strb.w	r3, [sp]
   b5a72:	aa27      	add	r2, sp, #156	; 0x9c
   b5a74:	233c      	movs	r3, #60	; 0x3c
   b5a76:	a813      	add	r0, sp, #76	; 0x4c
   b5a78:	f004 fd18 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5a7c:	a814      	add	r0, sp, #80	; 0x50
   b5a7e:	f7fe fc95 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a82:	4946      	ldr	r1, [pc, #280]	; (b5b9c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>)
   b5a84:	a80b      	add	r0, sp, #44	; 0x2c
   b5a86:	f006 fcfc 	bl	bc482 <_ZNK6String6equalsEPKc>
      if (variable == "long") {
   b5a8a:	2800      	cmp	r0, #0
   b5a8c:	d097      	beq.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(data,sizeof(data),"Time: %s, open: %d, close: %d, mode %s", Time.format(Time.now(), "%T").c_str(), sysStatus.get_openTime(), sysStatus.get_closeTime(), (sysStatus.get_lowPowerMode()) ? "low power":"not low power");
   b5a8e:	f006 ffb2 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b5a92:	4b43      	ldr	r3, [pc, #268]	; (b5ba0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>)
   b5a94:	4943      	ldr	r1, [pc, #268]	; (b5ba4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>)
   b5a96:	9300      	str	r3, [sp, #0]
   b5a98:	4602      	mov	r2, r0
   b5a9a:	17c3      	asrs	r3, r0, #31
   b5a9c:	a813      	add	r0, sp, #76	; 0x4c
   b5a9e:	f006 ff4b 	bl	bc938 <_ZN9TimeClass6formatExPKc>
	const char * c_str() const { return buffer; }
   b5aa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5aa4:	9307      	str	r3, [sp, #28]
   b5aa6:	f7ff fa27 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5aaa:	f7ff fad6 	bl	b505a <_ZNK13sysStatusData12get_openTimeEv>
   b5aae:	4606      	mov	r6, r0
   b5ab0:	f7ff fa22 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5ab4:	f7ff fad6 	bl	b5064 <_ZNK13sysStatusData13get_closeTimeEv>
   b5ab8:	4682      	mov	sl, r0
   b5aba:	f7ff fa1d 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5abe:	f7ff fb38 	bl	b5132 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5ac2:	4939      	ldr	r1, [pc, #228]	; (b5ba8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>)
   b5ac4:	4a39      	ldr	r2, [pc, #228]	; (b5bac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x31c>)
   b5ac6:	9b07      	ldr	r3, [sp, #28]
   b5ac8:	9600      	str	r6, [sp, #0]
   b5aca:	2800      	cmp	r0, #0
   b5acc:	bf08      	it	eq
   b5ace:	460a      	moveq	r2, r1
   b5ad0:	e9cd a201 	strd	sl, r2, [sp, #4]
   b5ad4:	2180      	movs	r1, #128	; 0x80
   b5ad6:	4a36      	ldr	r2, [pc, #216]	; (b5bb0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x320>)
   b5ad8:	a827      	add	r0, sp, #156	; 0x9c
   b5ada:	f004 f9c3 	bl	b9e64 <snprintf>
   b5ade:	a813      	add	r0, sp, #76	; 0x4c
   b5ae0:	f006 fbbe 	bl	bc260 <_ZN6StringD1Ev>
        Log.info(data);
   b5ae4:	a927      	add	r1, sp, #156	; 0x9c
   b5ae6:	481f      	ldr	r0, [pc, #124]	; (b5b64 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b5ae8:	f7fe fb47 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b5aec:	f898 3000 	ldrb.w	r3, [r8]
   b5af0:	f88d 3000 	strb.w	r3, [sp]
   b5af4:	a813      	add	r0, sp, #76	; 0x4c
   b5af6:	4924      	ldr	r1, [pc, #144]	; (b5b88 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b5af8:	233c      	movs	r3, #60	; 0x3c
   b5afa:	aa27      	add	r2, sp, #156	; 0x9c
   b5afc:	f004 fcd6 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5b00:	a814      	add	r0, sp, #80	; 0x50
   b5b02:	f7fe fc53 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b06:	e75a      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5b08:	492a      	ldr	r1, [pc, #168]	; (b5bb4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x324>)
   b5b0a:	a80f      	add	r0, sp, #60	; 0x3c
   b5b0c:	f006 fcb9 	bl	bc482 <_ZNK6String6equalsEPKc>
    else if (function == "send") {
   b5b10:	4606      	mov	r6, r0
   b5b12:	b128      	cbz	r0, b5b20 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x290>
      takeMeasurements();
   b5b14:	f000 fba0 	bl	b6258 <_Z16takeMeasurementsv>
      Particle_Functions::sendEvent();
   b5b18:	4638      	mov	r0, r7
   b5b1a:	f7ff fe49 	bl	b57b0 <_ZN18Particle_Functions9sendEventEv>
   b5b1e:	e74e      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b5b20:	4925      	ldr	r1, [pc, #148]	; (b5bb8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x328>)
   b5b22:	a80f      	add	r0, sp, #60	; 0x3c
   b5b24:	f006 fcad 	bl	bc482 <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b5b28:	4683      	mov	fp, r0
   b5b2a:	2800      	cmp	r0, #0
   b5b2c:	d04e      	beq.n	b5bcc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x33c>
   b5b2e:	4923      	ldr	r1, [pc, #140]	; (b5bbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x32c>)
   b5b30:	a80b      	add	r0, sp, #44	; 0x2c
   b5b32:	f006 fca6 	bl	bc482 <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b5b36:	b148      	cbz	r0, b5b4c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>
        snprintf(messaging,sizeof(messaging),"Going to keep the device online");
   b5b38:	4921      	ldr	r1, [pc, #132]	; (b5bc0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x330>)
   b5b3a:	a817      	add	r0, sp, #92	; 0x5c
   b5b3c:	f008 f963 	bl	bde06 <strcpy>
        sysStatus.set_lowPowerMode(false);
   b5b40:	f7ff f9da 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5b44:	4631      	mov	r1, r6
        sysStatus.set_lowPowerMode(true);
   b5b46:	f7ff fb22 	bl	b518e <_ZN13sysStatusData16set_lowPowerModeEb>
   b5b4a:	e738      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b5b4c:	491d      	ldr	r1, [pc, #116]	; (b5bc4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x334>)
   b5b4e:	a817      	add	r0, sp, #92	; 0x5c
   b5b50:	f008 f959 	bl	bde06 <strcpy>
        sysStatus.set_lowPowerMode(true);
   b5b54:	f7ff f9d0 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5b58:	2101      	movs	r1, #1
   b5b5a:	e7f4      	b.n	b5b46 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b6>
   b5b5c:	000bf5cd 	.word	0x000bf5cd
   b5b60:	000beb8c 	.word	0x000beb8c
   b5b64:	2003e644 	.word	0x2003e644
   b5b68:	000be877 	.word	0x000be877
   b5b6c:	2003e5b4 	.word	0x2003e5b4
   b5b70:	000be895 	.word	0x000be895
   b5b74:	000be89d 	.word	0x000be89d
   b5b78:	000be8a0 	.word	0x000be8a0
   b5b7c:	000be8a6 	.word	0x000be8a6
   b5b80:	000be8aa 	.word	0x000be8aa
   b5b84:	000be8da 	.word	0x000be8da
   b5b88:	000be8ff 	.word	0x000be8ff
   b5b8c:	000be852 	.word	0x000be852
   b5b90:	000be858 	.word	0x000be858
   b5b94:	2003e3bc 	.word	0x2003e3bc
   b5b98:	000be906 	.word	0x000be906
   b5b9c:	000be936 	.word	0x000be936
   b5ba0:	000be3ff 	.word	0x000be3ff
   b5ba4:	2003e698 	.word	0x2003e698
   b5ba8:	000be85e 	.word	0x000be85e
   b5bac:	000be862 	.word	0x000be862
   b5bb0:	000be93b 	.word	0x000be93b
   b5bb4:	000be962 	.word	0x000be962
   b5bb8:	000be967 	.word	0x000be967
   b5bbc:	000be96c 	.word	0x000be96c
   b5bc0:	000be971 	.word	0x000be971
   b5bc4:	000be991 	.word	0x000be991
   b5bc8:	000be899 	.word	0x000be899
   b5bcc:	4933      	ldr	r1, [pc, #204]	; (b5c9c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x40c>)
   b5bce:	a80f      	add	r0, sp, #60	; 0x3c
   b5bd0:	f006 fc57 	bl	bc482 <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b5bd4:	4682      	mov	sl, r0
   b5bd6:	b1c8      	cbz	r0, b5c0c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x37c>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b5bd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b5bda:	220a      	movs	r2, #10
   b5bdc:	a909      	add	r1, sp, #36	; 0x24
   b5bde:	f008 fa29 	bl	be034 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b5be2:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b5be4:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b5be6:	d80b      	bhi.n	b5c00 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x370>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b5be8:	4603      	mov	r3, r0
   b5bea:	4a2d      	ldr	r2, [pc, #180]	; (b5ca0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x410>)
   b5bec:	2140      	movs	r1, #64	; 0x40
   b5bee:	a817      	add	r0, sp, #92	; 0x5c
   b5bf0:	f004 f938 	bl	b9e64 <snprintf>
        sysStatus.set_openTime(tempValue);
   b5bf4:	f7ff f980 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5bf8:	b2f1      	uxtb	r1, r6
   b5bfa:	f7ff fa66 	bl	b50ca <_ZN13sysStatusData12set_openTimeEh>
   b5bfe:	e6de      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b5c00:	4928      	ldr	r1, [pc, #160]	; (b5ca4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x414>)
        snprintf(messaging,sizeof(messaging),"Sensor number out of range (0-2)");
   b5c02:	a817      	add	r0, sp, #92	; 0x5c
   b5c04:	f008 f8ff 	bl	bde06 <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b5c08:	465c      	mov	r4, fp
   b5c0a:	e6d8      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b5c0c:	4926      	ldr	r1, [pc, #152]	; (b5ca8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x418>)
   b5c0e:	a80f      	add	r0, sp, #60	; 0x3c
   b5c10:	f006 fc37 	bl	bc482 <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b5c14:	4683      	mov	fp, r0
   b5c16:	b1d8      	cbz	r0, b5c50 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3c0>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b5c18:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b5c1a:	220a      	movs	r2, #10
   b5c1c:	a909      	add	r1, sp, #36	; 0x24
   b5c1e:	f008 fa09 	bl	be034 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b5c22:	f1a0 030d 	sub.w	r3, r0, #13
   b5c26:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b5c28:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b5c2a:	d80b      	bhi.n	b5c44 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3b4>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b5c2c:	4603      	mov	r3, r0
   b5c2e:	4a1f      	ldr	r2, [pc, #124]	; (b5cac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x41c>)
   b5c30:	2140      	movs	r1, #64	; 0x40
   b5c32:	a817      	add	r0, sp, #92	; 0x5c
   b5c34:	f004 f916 	bl	b9e64 <snprintf>
        sysStatus.set_closeTime(tempValue);
   b5c38:	f7ff f95e 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5c3c:	b2f1      	uxtb	r1, r6
   b5c3e:	f7ff fa4a 	bl	b50d6 <_ZN13sysStatusData13set_closeTimeEh>
   b5c42:	e6bc      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b5c44:	491a      	ldr	r1, [pc, #104]	; (b5cb0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x420>)
   b5c46:	a817      	add	r0, sp, #92	; 0x5c
   b5c48:	f008 f8dd 	bl	bde06 <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b5c4c:	4654      	mov	r4, sl
   b5c4e:	e6b6      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b5c50:	4918      	ldr	r1, [pc, #96]	; (b5cb4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x424>)
   b5c52:	a80f      	add	r0, sp, #60	; 0x3c
   b5c54:	f006 fc15 	bl	bc482 <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b5c58:	4606      	mov	r6, r0
   b5c5a:	b1c8      	cbz	r0, b5c90 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x400>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b5c5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b5c5e:	220a      	movs	r2, #10
   b5c60:	a909      	add	r1, sp, #36	; 0x24
   b5c62:	f008 f9e7 	bl	be034 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b5c66:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b5c68:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b5c6a:	d80f      	bhi.n	b5c8c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3fc>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %s counter", (tempValue ==0) ? "car":"person");
   b5c6c:	4a12      	ldr	r2, [pc, #72]	; (b5cb8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x428>)
   b5c6e:	4b13      	ldr	r3, [pc, #76]	; (b5cbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x42c>)
   b5c70:	2140      	movs	r1, #64	; 0x40
   b5c72:	2800      	cmp	r0, #0
   b5c74:	bf08      	it	eq
   b5c76:	4613      	moveq	r3, r2
   b5c78:	4a11      	ldr	r2, [pc, #68]	; (b5cc0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x430>)
   b5c7a:	a817      	add	r0, sp, #92	; 0x5c
   b5c7c:	f004 f8f2 	bl	b9e64 <snprintf>
        sysStatus.set_sensorType(tempValue);
   b5c80:	f7ff f93a 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b5c84:	b2f1      	uxtb	r1, r6
   b5c86:	f7ff fa2c 	bl	b50e2 <_ZN13sysStatusData14set_sensorTypeEh>
   b5c8a:	e698      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
        snprintf(messaging,sizeof(messaging),"Sensor number out of range (0-2)");
   b5c8c:	490d      	ldr	r1, [pc, #52]	; (b5cc4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x434>)
   b5c8e:	e7b8      	b.n	b5c02 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x372>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b5c90:	490d      	ldr	r1, [pc, #52]	; (b5cc8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x438>)
   b5c92:	a817      	add	r0, sp, #92	; 0x5c
   b5c94:	f008 f8b7 	bl	bde06 <strcpy>
      success = false;
   b5c98:	4634      	mov	r4, r6
   b5c9a:	e690      	b.n	b59be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12e>
   b5c9c:	000be9b3 	.word	0x000be9b3
   b5ca0:	000be9b8 	.word	0x000be9b8
   b5ca4:	000be9d6 	.word	0x000be9d6
   b5ca8:	000be9ef 	.word	0x000be9ef
   b5cac:	000be9f5 	.word	0x000be9f5
   b5cb0:	000bea13 	.word	0x000bea13
   b5cb4:	000bea2e 	.word	0x000bea2e
   b5cb8:	000be86c 	.word	0x000be86c
   b5cbc:	000be870 	.word	0x000be870
   b5cc0:	000bea33 	.word	0x000bea33
   b5cc4:	000bea55 	.word	0x000bea55
   b5cc8:	000bea76 	.word	0x000bea76

000b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ccc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5cce:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5cd2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5cd4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5cd6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5cda:	42ae      	cmp	r6, r5
   b5cdc:	d004      	beq.n	b5ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5cde:	4628      	mov	r0, r5
   b5ce0:	f006 fabe 	bl	bc260 <_ZN6StringD1Ev>
   b5ce4:	3514      	adds	r5, #20
   b5ce6:	e7f8      	b.n	b5cda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5ce8:	6820      	ldr	r0, [r4, #0]
   b5cea:	f004 f89b 	bl	b9e24 <free>
    AllocatorT::free(data_);
}
   b5cee:	4620      	mov	r0, r4
   b5cf0:	bd70      	pop	{r4, r5, r6, pc}

000b5cf2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5cf2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cf6:	4604      	mov	r4, r0
   b5cf8:	460d      	mov	r5, r1
   b5cfa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5cfc:	d916      	bls.n	b5d2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5cfe:	4290      	cmp	r0, r2
   b5d00:	d215      	bcs.n	b5d2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5d02:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5d06:	1a75      	subs	r5, r6, r1
   b5d08:	f1a1 0714 	sub.w	r7, r1, #20
   b5d0c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d0e:	42b7      	cmp	r7, r6
   b5d10:	d01c      	beq.n	b5d4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5d12:	b12c      	cbz	r4, b5d20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5d14:	4631      	mov	r1, r6
   b5d16:	4620      	mov	r0, r4
   b5d18:	f006 fb1e 	bl	bc358 <_ZN6StringC1EOS_>
   b5d1c:	7c33      	ldrb	r3, [r6, #16]
   b5d1e:	7423      	strb	r3, [r4, #16]
   b5d20:	4630      	mov	r0, r6
   b5d22:	f006 fa9d 	bl	bc260 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5d26:	3e14      	subs	r6, #20
   b5d28:	3c14      	subs	r4, #20
   b5d2a:	e7f0      	b.n	b5d0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d2c:	d00e      	beq.n	b5d4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5d2e:	42b5      	cmp	r5, r6
   b5d30:	d00c      	beq.n	b5d4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5d32:	b12c      	cbz	r4, b5d40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5d34:	4629      	mov	r1, r5
   b5d36:	4620      	mov	r0, r4
   b5d38:	f006 fb0e 	bl	bc358 <_ZN6StringC1EOS_>
   b5d3c:	7c2b      	ldrb	r3, [r5, #16]
   b5d3e:	7423      	strb	r3, [r4, #16]
   b5d40:	4628      	mov	r0, r5
   b5d42:	f006 fa8d 	bl	bc260 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d46:	3514      	adds	r5, #20
   b5d48:	3414      	adds	r4, #20
   b5d4a:	e7f0      	b.n	b5d2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5d52:	2300      	movs	r3, #0
   b5d54:	e9c0 3300 	strd	r3, r3, [r0]
   b5d58:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d5a:	684f      	ldr	r7, [r1, #4]
   b5d5c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d5e:	4604      	mov	r4, r0
   b5d60:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d62:	dd23      	ble.n	b5dac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5d64:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5d68:	fb08 f007 	mul.w	r0, r8, r7
   b5d6c:	f004 f852 	bl	b9e14 <malloc>
            if (!d) {
   b5d70:	4605      	mov	r5, r0
   b5d72:	b1d8      	cbz	r0, b5dac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5d74:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5d78:	fb08 1202 	mla	r2, r8, r2, r1
   b5d7c:	f7ff ffb9 	bl	b5cf2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5d80:	6820      	ldr	r0, [r4, #0]
   b5d82:	f004 f84f 	bl	b9e24 <free>
        data_ = d;
   b5d86:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5d88:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5d8a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5d8e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5d92:	45b8      	cmp	r8, r7
   b5d94:	d008      	beq.n	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5d96:	4639      	mov	r1, r7
   b5d98:	4628      	mov	r0, r5
   b5d9a:	f006 faf7 	bl	bc38c <_ZN6StringC1ERKS_>
   b5d9e:	7c3b      	ldrb	r3, [r7, #16]
   b5da0:	742b      	strb	r3, [r5, #16]
   b5da2:	3714      	adds	r7, #20
   b5da4:	3514      	adds	r5, #20
   b5da6:	e7f4      	b.n	b5d92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5da8:	6873      	ldr	r3, [r6, #4]
   b5daa:	6063      	str	r3, [r4, #4]
}
   b5dac:	4620      	mov	r0, r4
   b5dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5db4 <_GLOBAL__sub_I_openTimeStr>:
        val_(val) {
   b5db4:	4b29      	ldr	r3, [pc, #164]	; (b5e5c <_GLOBAL__sub_I_openTimeStr+0xa8>)
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
}
   b5db6:	b570      	push	{r4, r5, r6, lr}
   b5db8:	2501      	movs	r5, #1
   b5dba:	701d      	strb	r5, [r3, #0]
   b5dbc:	4b28      	ldr	r3, [pc, #160]	; (b5e60 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b5dbe:	2208      	movs	r2, #8
   b5dc0:	701a      	strb	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5dc2:	4b28      	ldr	r3, [pc, #160]	; (b5e64 <_GLOBAL__sub_I_openTimeStr+0xb0>)
    SleepResult() {}
   b5dc4:	4a28      	ldr	r2, [pc, #160]	; (b5e68 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b5dc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5dc8:	2400      	movs	r4, #0
   b5dca:	b08c      	sub	sp, #48	; 0x30
   b5dcc:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5dd0:	2002      	movs	r0, #2
   b5dd2:	f003 fef5 	bl	b9bc0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5dd6:	4621      	mov	r1, r4
   b5dd8:	4628      	mov	r0, r5
   b5dda:	f003 ff09 	bl	b9bf0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5dde:	4629      	mov	r1, r5
   b5de0:	2004      	movs	r0, #4
   b5de2:	f003 fc93 	bl	b970c <HAL_Feature_Set>
        capacity_(0) {
   b5de6:	e9cd 4400 	strd	r4, r4, [sp]
   b5dea:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5dec:	f006 fef4 	bl	bcbd8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5df0:	4c1e      	ldr	r4, [pc, #120]	; (b5e6c <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b5df2:	4605      	mov	r5, r0
   b5df4:	4669      	mov	r1, sp
   b5df6:	a803      	add	r0, sp, #12
   b5df8:	f7ff ffa9 	bl	b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5dfc:	4626      	mov	r6, r4
        stream_(&stream) {
   b5dfe:	a903      	add	r1, sp, #12
   b5e00:	a806      	add	r0, sp, #24
   b5e02:	f7ff ffa4 	bl	b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e06:	4b1a      	ldr	r3, [pc, #104]	; (b5e70 <_GLOBAL__sub_I_openTimeStr+0xbc>)
   b5e08:	f846 3b04 	str.w	r3, [r6], #4
   b5e0c:	a906      	add	r1, sp, #24
   b5e0e:	a809      	add	r0, sp, #36	; 0x24
   b5e10:	f7ff ff9d 	bl	b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e14:	aa09      	add	r2, sp, #36	; 0x24
   b5e16:	211e      	movs	r1, #30
   b5e18:	4630      	mov	r0, r6
   b5e1a:	f005 fc55 	bl	bb6c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e1e:	a809      	add	r0, sp, #36	; 0x24
   b5e20:	f7ff ff54 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5e24:	a806      	add	r0, sp, #24
   b5e26:	f7ff ff51 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e2a:	4b12      	ldr	r3, [pc, #72]	; (b5e74 <_GLOBAL__sub_I_openTimeStr+0xc0>)
   b5e2c:	6023      	str	r3, [r4, #0]
   b5e2e:	6225      	str	r5, [r4, #32]
   b5e30:	a803      	add	r0, sp, #12
   b5e32:	f7ff ff4b 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e36:	4b10      	ldr	r3, [pc, #64]	; (b5e78 <_GLOBAL__sub_I_openTimeStr+0xc4>)
   b5e38:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5e3a:	f006 fecd 	bl	bcbd8 <_Z16_fetch_usbserialv>
   b5e3e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5e42:	f006 feb9 	bl	bcbb8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5e46:	f005 f955 	bl	bb0f4 <_ZN5spark10LogManager8instanceEv>
   b5e4a:	4621      	mov	r1, r4
   b5e4c:	f005 fb12 	bl	bb474 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b5e50:	4668      	mov	r0, sp
   b5e52:	f7ff ff3b 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b5e56:	b00c      	add	sp, #48	; 0x30
   b5e58:	bd70      	pop	{r4, r5, r6, pc}
   b5e5a:	bf00      	nop
   b5e5c:	2003e5b4 	.word	0x2003e5b4
   b5e60:	2003e5b5 	.word	0x2003e5b5
   b5e64:	2003e5a8 	.word	0x2003e5a8
   b5e68:	ffff0000 	.word	0xffff0000
   b5e6c:	2003e5bc 	.word	0x2003e5bc
   b5e70:	000beb5c 	.word	0x000beb5c
   b5e74:	000bf600 	.word	0x000bf600
   b5e78:	000beb74 	.word	0x000beb74

000b5e7c <_ZN18Particle_Functions22disconnectFromParticleEv>:
bool Particle_Functions::disconnectFromParticle() {                    // Ensures we disconnect cleanly from Particle
   b5e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e80:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b5e82:	f006 fdb8 	bl	bc9f6 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b5e86:	4941      	ldr	r1, [pc, #260]	; (b5f8c <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b5e88:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b5e8a:	4841      	ldr	r0, [pc, #260]	; (b5f90 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b5e8c:	f7fe f975 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5e90:	2400      	movs	r4, #0
  Particle.disconnect();                                               		// Disconnect from Particle
   b5e92:	a801      	add	r0, sp, #4
   b5e94:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b5e98:	f8ad 400c 	strh.w	r4, [sp, #12]
   b5e9c:	f004 fa06 	bl	ba2ac <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b5ea0:	4620      	mov	r0, r4
   b5ea2:	f003 fc63 	bl	b976c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5ea6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b5eaa:	4604      	mov	r4, r0
   b5eac:	2000      	movs	r0, #0
   b5eae:	f003 fc5d 	bl	b976c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5eb2:	1b03      	subs	r3, r0, r4
   b5eb4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5eb8:	42b3      	cmp	r3, r6
   b5eba:	f171 0300 	sbcs.w	r3, r1, #0
   b5ebe:	d205      	bcs.n	b5ecc <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5ec0:	f003 ff08 	bl	b9cd4 <spark_cloud_flag_connected>
   b5ec4:	b110      	cbz	r0, b5ecc <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b5ec6:	f003 fef5 	bl	b9cb4 <spark_process>
        while (_while() && !_condition()) {
   b5eca:	e7ef      	b.n	b5eac <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b5ecc:	f003 ff02 	bl	b9cd4 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   b5ed0:	f003 fc3c 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5ed4:	4f2f      	ldr	r7, [pc, #188]	; (b5f94 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b5ed6:	6038      	str	r0, [r7, #0]
            return spark_process();
   b5ed8:	f003 feec 	bl	b9cb4 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5edc:	f003 fefa 	bl	b9cd4 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      							// As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b5ee0:	4604      	mov	r4, r0
   b5ee2:	b140      	cbz	r0, b5ef6 <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b5ee4:	492c      	ldr	r1, [pc, #176]	; (b5f98 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b5ee6:	482a      	ldr	r0, [pc, #168]	; (b5f90 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b5ee8:	f7fe f947 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b5eec:	2400      	movs	r4, #0
}
   b5eee:	4620      	mov	r0, r4
   b5ef0:	b005      	add	sp, #20
   b5ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b5ef6:	f006 fd7e 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b5efa:	4928      	ldr	r1, [pc, #160]	; (b5f9c <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5efc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b5fa0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b5f00:	1b42      	subs	r2, r0, r5
   b5f02:	4823      	ldr	r0, [pc, #140]	; (b5f90 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b5f04:	f7fe f939 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b5f08:	f006 fd75 	bl	bc9f6 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f0c:	4622      	mov	r2, r4
   b5f0e:	2102      	movs	r1, #2
   b5f10:	4606      	mov	r6, r0
   b5f12:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5f16:	f003 ff2d 	bl	b9d74 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b5f1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5f1e:	4623      	mov	r3, r4
   b5f20:	4622      	mov	r2, r4
   b5f22:	4621      	mov	r1, r4
   b5f24:	f003 ff3e 	bl	b9da4 <network_off>
        return hal_timer_millis(nullptr);
   b5f28:	4620      	mov	r0, r4
   b5f2a:	f003 fc1f 	bl	b976c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5f2e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b5f32:	4605      	mov	r5, r0
   b5f34:	2000      	movs	r0, #0
   b5f36:	f003 fc19 	bl	b976c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5f3a:	1b43      	subs	r3, r0, r5
   b5f3c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5f40:	454b      	cmp	r3, r9
   b5f42:	f171 0300 	sbcs.w	r3, r1, #0
   b5f46:	d206      	bcs.n	b5f56 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b5f48:	4640      	mov	r0, r8
   b5f4a:	f005 fedb 	bl	bbd04 <_ZN5spark12NetworkClass5isOffEv>
   b5f4e:	b910      	cbnz	r0, b5f56 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b5f50:	f003 feb0 	bl	b9cb4 <spark_process>
        while (_while() && !_condition()) {
   b5f54:	e7ee      	b.n	b5f34 <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b5f56:	4812      	ldr	r0, [pc, #72]	; (b5fa0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b5f58:	f005 fed4 	bl	bbd04 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b5f5c:	f003 fbf6 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5f60:	6038      	str	r0, [r7, #0]
            return spark_process();
   b5f62:	f003 fea7 	bl	b9cb4 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b5f66:	480e      	ldr	r0, [pc, #56]	; (b5fa0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b5f68:	f005 fec8 	bl	bbcfc <_ZN5spark12NetworkClass4isOnEv>
   b5f6c:	b120      	cbz	r0, b5f78 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b5f6e:	490d      	ldr	r1, [pc, #52]	; (b5fa4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b5f70:	4807      	ldr	r0, [pc, #28]	; (b5f90 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b5f72:	f7fe f902 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b5f76:	e7ba      	b.n	b5eee <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b5f78:	f006 fd3d 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b5f7c:	490a      	ldr	r1, [pc, #40]	; (b5fa8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b5f7e:	1b82      	subs	r2, r0, r6
   b5f80:	4803      	ldr	r0, [pc, #12]	; (b5f90 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b5f82:	f7fe f8fa 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b5f86:	2401      	movs	r4, #1
   b5f88:	e7b1      	b.n	b5eee <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b5f8a:	bf00      	nop
   b5f8c:	000bea8a 	.word	0x000bea8a
   b5f90:	2003e644 	.word	0x2003e644
   b5f94:	2003e70c 	.word	0x2003e70c
   b5f98:	000beab3 	.word	0x000beab3
   b5f9c:	000bead6 	.word	0x000bead6
   b5fa0:	2003e600 	.word	0x2003e600
   b5fa4:	000beaff 	.word	0x000beaff
   b5fa8:	000beb25 	.word	0x000beb25

000b5fac <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t DISTANCE_PIN = A1;                   // May need to change this
extern const pin_t EXTERNAL_TEMP_PIN = A2;          // External temp sensor
const pin_t LED_POWER_PIN = A3;                    // Not use for this sketch

bool initializePinModes() {
   b5fac:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5fae:	490f      	ldr	r1, [pc, #60]	; (b5fec <_Z18initializePinModesv+0x40>)
   b5fb0:	480f      	ldr	r0, [pc, #60]	; (b5ff0 <_Z18initializePinModesv+0x44>)
   b5fb2:	f7fe f8e2 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5fb6:	2102      	movs	r1, #2
   b5fb8:	2004      	movs	r0, #4
   b5fba:	f006 ff25 	bl	bce08 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5fbe:	2100      	movs	r1, #0
   b5fc0:	2008      	movs	r0, #8
   b5fc2:	f006 ff21 	bl	bce08 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5fc6:	2101      	movs	r1, #1
   b5fc8:	2007      	movs	r0, #7
   b5fca:	f006 ff1d 	bl	bce08 <pinMode>
    pinMode(DISTANCE_PIN, INPUT);
   b5fce:	2100      	movs	r1, #0
   b5fd0:	2012      	movs	r0, #18
   b5fd2:	f006 ff19 	bl	bce08 <pinMode>
    pinMode(EXTERNAL_TEMP_PIN, INPUT);
   b5fd6:	2100      	movs	r1, #0
   b5fd8:	2011      	movs	r0, #17
   b5fda:	f006 ff15 	bl	bce08 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b5fde:	2101      	movs	r1, #1
   b5fe0:	2010      	movs	r0, #16
   b5fe2:	f006 ff11 	bl	bce08 <pinMode>

    return true;
}
   b5fe6:	2001      	movs	r0, #1
   b5fe8:	bd08      	pop	{r3, pc}
   b5fea:	bf00      	nop
   b5fec:	000bebe0 	.word	0x000bebe0
   b5ff0:	2003e644 	.word	0x2003e644

000b5ff4 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   b5ff4:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5ff6:	491c      	ldr	r1, [pc, #112]	; (b6068 <_Z18initializePowerCfgv+0x74>)
   b5ff8:	481c      	ldr	r0, [pc, #112]	; (b606c <_Z18initializePowerCfgv+0x78>)
bool initializePowerCfg() {
   b5ffa:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5ffc:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b5ffe:	f7fe f8bc 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b6002:	4622      	mov	r2, r4
   b6004:	2100      	movs	r1, #0
   b6006:	4668      	mov	r0, sp
   b6008:	f007 fea6 	bl	bdd58 <memset>
   b600c:	4622      	mov	r2, r4
   b600e:	2100      	movs	r1, #0
   b6010:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6014:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b6018:	f007 fe9e 	bl	bdd58 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b601c:	2100      	movs	r1, #0
   b601e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6022:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b6026:	f003 fe1f 	bl	b9c68 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b602a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b602e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b6032:	4b0f      	ldr	r3, [pc, #60]	; (b6070 <_Z18initializePowerCfgv+0x7c>)
   b6034:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b6036:	f241 0370 	movw	r3, #4208	; 0x1070
   b603a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b603e:	9b00      	ldr	r3, [sp, #0]
   b6040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6044:	f043 0301 	orr.w	r3, r3, #1
   b6048:	2100      	movs	r1, #0
   b604a:	4668      	mov	r0, sp
   b604c:	9300      	str	r3, [sp, #0]
   b604e:	f003 fe0b 	bl	b9c68 <system_power_management_set_config>
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST); // For the cases where the device is powered through VIN
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    if (res == 0) Log.info("Power configuration process succcesful");
   b6052:	4604      	mov	r4, r0
   b6054:	b918      	cbnz	r0, b605e <_Z18initializePowerCfgv+0x6a>
   b6056:	4907      	ldr	r1, [pc, #28]	; (b6074 <_Z18initializePowerCfgv+0x80>)
   b6058:	4804      	ldr	r0, [pc, #16]	; (b606c <_Z18initializePowerCfgv+0x78>)
   b605a:	f7fe f88e 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    return res;
}
   b605e:	1e20      	subs	r0, r4, #0
   b6060:	bf18      	it	ne
   b6062:	2001      	movne	r0, #1
   b6064:	b010      	add	sp, #64	; 0x40
   b6066:	bd10      	pop	{r4, pc}
   b6068:	000bebf9 	.word	0x000bebf9
   b606c:	2003e644 	.word	0x2003e644
   b6070:	03840384 	.word	0x03840384
   b6074:	000bec13 	.word	0x000bec13

000b6078 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6078:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b607a:	2101      	movs	r1, #1
   b607c:	a801      	add	r0, sp, #4
   b607e:	f005 fed6 	bl	bbe2e <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6082:	f7fe ff97 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b6086:	f7ff fa51 	bl	b552c <_ZNK17currentStatusData17get_internalTempCEv>
   b608a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b608e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6092:	d50e      	bpl.n	b60b2 <_Z16isItSafeToChargev+0x3a>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6094:	a801      	add	r0, sp, #4
   b6096:	f005 ff5d 	bl	bbf54 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b609a:	f7fe ff8b 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b609e:	2101      	movs	r1, #1
   b60a0:	f7ff f825 	bl	b50ee <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b60a4:	2400      	movs	r4, #0
  PMIC pmic(true);
   b60a6:	a801      	add	r0, sp, #4
   b60a8:	f005 fed0 	bl	bbe4c <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b60ac:	4620      	mov	r0, r4
   b60ae:	b002      	add	sp, #8
   b60b0:	bd10      	pop	{r4, pc}
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b60b2:	f7fe ff7f 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b60b6:	f7ff fa39 	bl	b552c <_ZNK17currentStatusData17get_internalTempCEv>
   b60ba:	eddf 7a06 	vldr	s15, [pc, #24]	; b60d4 <_Z16isItSafeToChargev+0x5c>
   b60be:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b60c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b60c6:	dce5      	bgt.n	b6094 <_Z16isItSafeToChargev+0x1c>
    pmic.enableCharging();                          // It is safe to charge the battery
   b60c8:	a801      	add	r0, sp, #4
   b60ca:	f005 ff28 	bl	bbf1e <_ZN4PMIC14enableChargingEv>
    return true;
   b60ce:	2401      	movs	r4, #1
   b60d0:	e7e9      	b.n	b60a6 <_Z16isItSafeToChargev+0x2e>
   b60d2:	bf00      	nop
   b60d4:	42140000 	.word	0x42140000

000b60d8 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b60d8:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b60da:	4d1b      	ldr	r5, [pc, #108]	; (b6148 <_Z17getSignalStrengthv+0x70>)
   b60dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b60de:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b60e0:	ac10      	add	r4, sp, #64	; 0x40
   b60e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60e8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b60ec:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b60f0:	4916      	ldr	r1, [pc, #88]	; (b614c <_Z17getSignalStrengthv+0x74>)
   b60f2:	a808      	add	r0, sp, #32
   b60f4:	f003 ff88 	bl	ba008 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b60f8:	a808      	add	r0, sp, #32
   b60fa:	f003 ffc8 	bl	ba08e <_ZNK14CellularSignal19getAccessTechnologyEv>
   b60fe:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6100:	a808      	add	r0, sp, #32
   b6102:	f003 fffd 	bl	ba100 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6106:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b6108:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b610c:	f004 f828 	bl	ba160 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6110:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b6112:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6116:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b611a:	f007 f9ff 	bl	bd51c <__aeabi_f2d>
   b611e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6122:	4628      	mov	r0, r5
   b6124:	f007 f9fa 	bl	bd51c <__aeabi_f2d>
   b6128:	e9cd 0100 	strd	r0, r1, [sp]
   b612c:	2110      	movs	r1, #16
   b612e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6132:	4a07      	ldr	r2, [pc, #28]	; (b6150 <_Z17getSignalStrengthv+0x78>)
   b6134:	eb0d 0001 	add.w	r0, sp, r1
   b6138:	f003 fe94 	bl	b9e64 <snprintf>
  Log.info(signalStr);
   b613c:	4805      	ldr	r0, [pc, #20]	; (b6154 <_Z17getSignalStrengthv+0x7c>)
   b613e:	a904      	add	r1, sp, #16
   b6140:	f7fe f81b 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
}
   b6144:	b01b      	add	sp, #108	; 0x6c
   b6146:	bd30      	pop	{r4, r5, pc}
   b6148:	000bed1c 	.word	0x000bed1c
   b614c:	2003e600 	.word	0x2003e600
   b6150:	000bec82 	.word	0x000bec82
   b6154:	2003e644 	.word	0x2003e644

000b6158 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6158:	b530      	push	{r4, r5, lr}
   b615a:	b085      	sub	sp, #20
   b615c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b615e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6160:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6162:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6164:	f003 fd1a 	bl	b9b9c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6168:	b990      	cbnz	r0, b6190 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b616a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b616c:	b10c      	cbz	r4, b6172 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b616e:	6923      	ldr	r3, [r4, #16]
   b6170:	b923      	cbnz	r3, b617c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6172:	4a08      	ldr	r2, [pc, #32]	; (b6194 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6174:	4908      	ldr	r1, [pc, #32]	; (b6198 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6176:	200a      	movs	r0, #10
   b6178:	f003 fcd8 	bl	b9b2c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b617c:	230c      	movs	r3, #12
   b617e:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6182:	2304      	movs	r3, #4
   b6184:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6186:	aa01      	add	r2, sp, #4
   b6188:	6923      	ldr	r3, [r4, #16]
   b618a:	2101      	movs	r1, #1
   b618c:	4620      	mov	r0, r4
   b618e:	4798      	blx	r3
}
   b6190:	b005      	add	sp, #20
   b6192:	bd30      	pop	{r4, r5, pc}
   b6194:	000b973d 	.word	0x000b973d
   b6198:	000bec9b 	.word	0x000bec9b

000b619c <_Z12batteryStatev>:
bool batteryState() {
   b619c:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b619e:	f7fe ff09 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b61a2:	a901      	add	r1, sp, #4
   b61a4:	4604      	mov	r4, r0
   b61a6:	2007      	movs	r0, #7
   b61a8:	f7ff ffd6 	bl	b6158 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b61ac:	1e01      	subs	r1, r0, #0
        return val;
   b61ae:	bfa8      	it	ge
   b61b0:	9901      	ldrge	r1, [sp, #4]
   b61b2:	4620      	mov	r0, r4
   b61b4:	b2c9      	uxtb	r1, r1
   b61b6:	f7fe ff9a 	bl	b50ee <_ZN17currentStatusData16set_batteryStateEh>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b61ba:	f7fe fefb 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b61be:	a901      	add	r1, sp, #4
   b61c0:	4604      	mov	r4, r0
   b61c2:	2003      	movs	r0, #3
   b61c4:	f7ff ffc8 	bl	b6158 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b61c8:	bbb8      	cbnz	r0, b623a <_Z12batteryStatev+0x9e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b61ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b61ce:	ee00 3a10 	vmov	s0, r3
   b61d2:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
   b61d6:	4620      	mov	r0, r4
   b61d8:	f7ff f9e4 	bl	b55a4 <_ZN17currentStatusData17set_stateOfChargeEf>
   b61dc:	a901      	add	r1, sp, #4
   b61de:	2003      	movs	r0, #3
   b61e0:	f7ff ffba 	bl	b6158 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   b61e4:	bb60      	cbnz	r0, b6240 <_Z12batteryStatev+0xa4>
   b61e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b61ea:	ee07 3a90 	vmov	s15, r3
   b61ee:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  Log.info("Battery state of charge %4.2f%%",System.batteryCharge());
   b61f2:	ee17 0a90 	vmov	r0, s15
   b61f6:	f007 f991 	bl	bd51c <__aeabi_f2d>
   b61fa:	4602      	mov	r2, r0
   b61fc:	460b      	mov	r3, r1
   b61fe:	4813      	ldr	r0, [pc, #76]	; (b624c <_Z12batteryStatev+0xb0>)
   b6200:	4913      	ldr	r1, [pc, #76]	; (b6250 <_Z12batteryStatev+0xb4>)
   b6202:	f7fd ffba 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
  if (current.get_stateOfCharge() > 60 || current.get_stateOfCharge() == -1 ) return true;  // Bad battery reading should not put device in low power mode
   b6206:	f7fe fed5 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b620a:	f7ff f999 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b620e:	eddf 7a11 	vldr	s15, [pc, #68]	; b6254 <_Z12batteryStatev+0xb8>
   b6212:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b621a:	dc14      	bgt.n	b6246 <_Z12batteryStatev+0xaa>
   b621c:	f7fe feca 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b6220:	f7ff f98e 	bl	b5540 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6224:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6228:	eeb4 0a67 	vcmp.f32	s0, s15
   b622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6230:	bf0c      	ite	eq
   b6232:	2001      	moveq	r0, #1
   b6234:	2000      	movne	r0, #0
}
   b6236:	b002      	add	sp, #8
   b6238:	bd10      	pop	{r4, pc}
            return -1.0f;
   b623a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b623e:	e7ca      	b.n	b61d6 <_Z12batteryStatev+0x3a>
   b6240:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6244:	e7d5      	b.n	b61f2 <_Z12batteryStatev+0x56>
  if (current.get_stateOfCharge() > 60 || current.get_stateOfCharge() == -1 ) return true;  // Bad battery reading should not put device in low power mode
   b6246:	2001      	movs	r0, #1
   b6248:	e7f5      	b.n	b6236 <_Z12batteryStatev+0x9a>
   b624a:	bf00      	nop
   b624c:	2003e644 	.word	0x2003e644
   b6250:	000becc1 	.word	0x000becc1
   b6254:	42700000 	.word	0x42700000

000b6258 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!batteryState()) sysStatus.set_lowPowerMode(true);
   b625c:	f7ff ff9e 	bl	b619c <_Z12batteryStatev>
   b6260:	b920      	cbnz	r0, b626c <_Z16takeMeasurementsv+0x14>
   b6262:	f7fe fe49 	bl	b4ef8 <_ZN13sysStatusData8instanceEv>
   b6266:	2101      	movs	r1, #1
   b6268:	f7fe ff91 	bl	b518e <_ZN13sysStatusData16set_lowPowerModeEb>
    isItSafeToCharge();
   b626c:	f7ff ff04 	bl	b6078 <_Z16isItSafeToChargev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6270:	f003 fd30 	bl	b9cd4 <spark_cloud_flag_connected>
    if (Particle.connected()) getSignalStrength();
   b6274:	b108      	cbz	r0, b627a <_Z16takeMeasurementsv+0x22>
   b6276:	f7ff ff2f 	bl	b60d8 <_Z17getSignalStrengthv>
    current.set_externalTempC((analogRead(EXTERNAL_TEMP_PIN) * 3.3 / 4096.0 - 0.5) * 100.0);  // 10mV/degC, 0.5V @ 0degC
   b627a:	f7fe fe9b 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b627e:	4b66      	ldr	r3, [pc, #408]	; (b6418 <_Z16takeMeasurementsv+0x1c0>)
   b6280:	4604      	mov	r4, r0
   b6282:	8818      	ldrh	r0, [r3, #0]
   b6284:	f006 fdfd 	bl	bce82 <analogRead>
   b6288:	f007 f936 	bl	bd4f8 <__aeabi_i2d>
   b628c:	a356      	add	r3, pc, #344	; (adr r3, b63e8 <_Z16takeMeasurementsv+0x190>)
   b628e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6292:	f007 f99b 	bl	bd5cc <__aeabi_dmul>
   b6296:	4b61      	ldr	r3, [pc, #388]	; (b641c <_Z16takeMeasurementsv+0x1c4>)
   b6298:	2200      	movs	r2, #0
   b629a:	f007 f997 	bl	bd5cc <__aeabi_dmul>
   b629e:	4b60      	ldr	r3, [pc, #384]	; (b6420 <_Z16takeMeasurementsv+0x1c8>)
   b62a0:	2200      	movs	r2, #0
   b62a2:	f006 ffdb 	bl	bd25c <__aeabi_dsub>
   b62a6:	4b5f      	ldr	r3, [pc, #380]	; (b6424 <_Z16takeMeasurementsv+0x1cc>)
   b62a8:	2200      	movs	r2, #0
   b62aa:	f007 f98f 	bl	bd5cc <__aeabi_dmul>
   b62ae:	f007 fc85 	bl	bdbbc <__aeabi_d2f>
   b62b2:	ee00 0a10 	vmov	s0, r0
   b62b6:	4620      	mov	r0, r4
   b62b8:	f7ff f96f 	bl	b559a <_ZN17currentStatusData17set_externalTempCEf>
    Log.info("External Temp: %4.2fC",current.get_externalTempC());
   b62bc:	f7fe fe7a 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b62c0:	f7ff f939 	bl	b5536 <_ZNK17currentStatusData17get_externalTempCEv>
   b62c4:	ee10 0a10 	vmov	r0, s0
   b62c8:	f007 f928 	bl	bd51c <__aeabi_f2d>
   b62cc:	4602      	mov	r2, r0
   b62ce:	460b      	mov	r3, r1
   b62d0:	4855      	ldr	r0, [pc, #340]	; (b6428 <_Z16takeMeasurementsv+0x1d0>)
   b62d2:	4956      	ldr	r1, [pc, #344]	; (b642c <_Z16takeMeasurementsv+0x1d4>)
   b62d4:	f7fd ff51 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    current.set_distance(((analogRead(DISTANCE_PIN)*(3.3/4096)/(3.3/2048)*(29e-6)) * (20.05*sqrt(current.get_externalTempC()+273.15)/2))*100.0);      // Distance in cm
   b62d8:	f7fe fe6c 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b62dc:	4b54      	ldr	r3, [pc, #336]	; (b6430 <_Z16takeMeasurementsv+0x1d8>)
   b62de:	4604      	mov	r4, r0
   b62e0:	8818      	ldrh	r0, [r3, #0]
   b62e2:	f006 fdce 	bl	bce82 <analogRead>
   b62e6:	4605      	mov	r5, r0
   b62e8:	f7fe fe64 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b62ec:	f7ff f923 	bl	b5536 <_ZNK17currentStatusData17get_externalTempCEv>
   b62f0:	ee10 0a10 	vmov	r0, s0
   b62f4:	f007 f912 	bl	bd51c <__aeabi_f2d>
   b62f8:	a33d      	add	r3, pc, #244	; (adr r3, b63f0 <_Z16takeMeasurementsv+0x198>)
   b62fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62fe:	f006 ffaf 	bl	bd260 <__adddf3>
   b6302:	ec41 0b10 	vmov	d0, r0, r1
   b6306:	f006 fe9f 	bl	bd048 <sqrt>
   b630a:	4628      	mov	r0, r5
   b630c:	ec59 8b10 	vmov	r8, r9, d0
   b6310:	f007 f8f2 	bl	bd4f8 <__aeabi_i2d>
   b6314:	a338      	add	r3, pc, #224	; (adr r3, b63f8 <_Z16takeMeasurementsv+0x1a0>)
   b6316:	e9d3 2300 	ldrd	r2, r3, [r3]
   b631a:	f007 f957 	bl	bd5cc <__aeabi_dmul>
   b631e:	a338      	add	r3, pc, #224	; (adr r3, b6400 <_Z16takeMeasurementsv+0x1a8>)
   b6320:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6324:	f007 fa7c 	bl	bd820 <__aeabi_ddiv>
   b6328:	a337      	add	r3, pc, #220	; (adr r3, b6408 <_Z16takeMeasurementsv+0x1b0>)
   b632a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b632e:	f007 f94d 	bl	bd5cc <__aeabi_dmul>
   b6332:	a337      	add	r3, pc, #220	; (adr r3, b6410 <_Z16takeMeasurementsv+0x1b8>)
   b6334:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6338:	4606      	mov	r6, r0
   b633a:	460f      	mov	r7, r1
   b633c:	4640      	mov	r0, r8
   b633e:	4649      	mov	r1, r9
   b6340:	f007 f944 	bl	bd5cc <__aeabi_dmul>
   b6344:	4b36      	ldr	r3, [pc, #216]	; (b6420 <_Z16takeMeasurementsv+0x1c8>)
   b6346:	2200      	movs	r2, #0
   b6348:	f007 f940 	bl	bd5cc <__aeabi_dmul>
   b634c:	4602      	mov	r2, r0
   b634e:	460b      	mov	r3, r1
   b6350:	4630      	mov	r0, r6
   b6352:	4639      	mov	r1, r7
   b6354:	f007 f93a 	bl	bd5cc <__aeabi_dmul>
   b6358:	4b32      	ldr	r3, [pc, #200]	; (b6424 <_Z16takeMeasurementsv+0x1cc>)
   b635a:	2200      	movs	r2, #0
   b635c:	f007 f936 	bl	bd5cc <__aeabi_dmul>
   b6360:	f007 fc0c 	bl	bdb7c <__aeabi_d2uiz>
   b6364:	b281      	uxth	r1, r0
   b6366:	4620      	mov	r0, r4
   b6368:	f7ff f8be 	bl	b54e8 <_ZN17currentStatusData12set_distanceEt>
    Log.info("Distance: %dcm",current.get_distance());
   b636c:	f7fe fe22 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b6370:	f7fe ffec 	bl	b534c <_ZNK17currentStatusData12get_distanceEv>
   b6374:	492f      	ldr	r1, [pc, #188]	; (b6434 <_Z16takeMeasurementsv+0x1dc>)
   b6376:	4602      	mov	r2, r0
   b6378:	482b      	ldr	r0, [pc, #172]	; (b6428 <_Z16takeMeasurementsv+0x1d0>)
   b637a:	f7fd fefe 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    current.set_internalTempC((analogRead(INTERNAL_TEMP_PIN) * 3.3 / 4096.0 - 0.5) * 100.0);  // 10mV/degC, 0.5V @ 0degC
   b637e:	f7fe fe19 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b6382:	4b2d      	ldr	r3, [pc, #180]	; (b6438 <_Z16takeMeasurementsv+0x1e0>)
   b6384:	4604      	mov	r4, r0
   b6386:	8818      	ldrh	r0, [r3, #0]
   b6388:	f006 fd7b 	bl	bce82 <analogRead>
   b638c:	f007 f8b4 	bl	bd4f8 <__aeabi_i2d>
   b6390:	a315      	add	r3, pc, #84	; (adr r3, b63e8 <_Z16takeMeasurementsv+0x190>)
   b6392:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6396:	f007 f919 	bl	bd5cc <__aeabi_dmul>
   b639a:	4b20      	ldr	r3, [pc, #128]	; (b641c <_Z16takeMeasurementsv+0x1c4>)
   b639c:	2200      	movs	r2, #0
   b639e:	f007 f915 	bl	bd5cc <__aeabi_dmul>
   b63a2:	4b1f      	ldr	r3, [pc, #124]	; (b6420 <_Z16takeMeasurementsv+0x1c8>)
   b63a4:	2200      	movs	r2, #0
   b63a6:	f006 ff59 	bl	bd25c <__aeabi_dsub>
   b63aa:	4b1e      	ldr	r3, [pc, #120]	; (b6424 <_Z16takeMeasurementsv+0x1cc>)
   b63ac:	2200      	movs	r2, #0
   b63ae:	f007 f90d 	bl	bd5cc <__aeabi_dmul>
   b63b2:	f007 fc03 	bl	bdbbc <__aeabi_d2f>
   b63b6:	ee00 0a10 	vmov	s0, r0
   b63ba:	4620      	mov	r0, r4
   b63bc:	f7ff f8e8 	bl	b5590 <_ZN17currentStatusData17set_internalTempCEf>
    Log.info("Internal Temp: %4.2fC",current.get_internalTempC());
   b63c0:	f7fe fdf8 	bl	b4fb4 <_ZN17currentStatusData8instanceEv>
   b63c4:	f7ff f8b2 	bl	b552c <_ZNK17currentStatusData17get_internalTempCEv>
   b63c8:	ee10 0a10 	vmov	r0, s0
   b63cc:	f007 f8a6 	bl	bd51c <__aeabi_f2d>
   b63d0:	4602      	mov	r2, r0
   b63d2:	460b      	mov	r3, r1
   b63d4:	4814      	ldr	r0, [pc, #80]	; (b6428 <_Z16takeMeasurementsv+0x1d0>)
   b63d6:	4919      	ldr	r1, [pc, #100]	; (b643c <_Z16takeMeasurementsv+0x1e4>)
   b63d8:	f7fd fecf 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
}
   b63dc:	2001      	movs	r0, #1
   b63de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b63e2:	bf00      	nop
   b63e4:	f3af 8000 	nop.w
   b63e8:	66666666 	.word	0x66666666
   b63ec:	400a6666 	.word	0x400a6666
   b63f0:	66666666 	.word	0x66666666
   b63f4:	40711266 	.word	0x40711266
   b63f8:	66666666 	.word	0x66666666
   b63fc:	3f4a6666 	.word	0x3f4a6666
   b6400:	66666666 	.word	0x66666666
   b6404:	3f5a6666 	.word	0x3f5a6666
   b6408:	d349be90 	.word	0xd349be90
   b640c:	3efe68a0 	.word	0x3efe68a0
   b6410:	cccccccd 	.word	0xcccccccd
   b6414:	40340ccc 	.word	0x40340ccc
   b6418:	000bec40 	.word	0x000bec40
   b641c:	3f300000 	.word	0x3f300000
   b6420:	3fe00000 	.word	0x3fe00000
   b6424:	40590000 	.word	0x40590000
   b6428:	2003e644 	.word	0x2003e644
   b642c:	000bece1 	.word	0x000bece1
   b6430:	000bec3e 	.word	0x000bec3e
   b6434:	000becf7 	.word	0x000becf7
   b6438:	000bec42 	.word	0x000bec42
   b643c:	000bed06 	.word	0x000bed06

000b6440 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6440:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b6442:	2301      	movs	r3, #1
   b6444:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b6446:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6448:	4604      	mov	r4, r0
        if (th->func) {
   b644a:	b143      	cbz	r3, b645e <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b644c:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b644e:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6450:	2301      	movs	r3, #1
   b6452:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6454:	2000      	movs	r0, #0
    }
   b6456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b645a:	f003 b947 	b.w	b96ec <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b645e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6460:	2800      	cmp	r0, #0
   b6462:	d0f5      	beq.n	b6450 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6464:	6883      	ldr	r3, [r0, #8]
   b6466:	b90b      	cbnz	r3, b646c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6468:	f006 fdea 	bl	bd040 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b646c:	68c3      	ldr	r3, [r0, #12]
   b646e:	e7ee      	b.n	b644e <_ZN6Thread3runEPv+0xe>

000b6470 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6470:	2a01      	cmp	r2, #1
   b6472:	d102      	bne.n	b647a <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6474:	6001      	str	r1, [r0, #0]
      }
   b6476:	2000      	movs	r0, #0
   b6478:	4770      	bx	lr
	  switch (__op)
   b647a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b647c:	bf04      	itt	eq
   b647e:	680b      	ldreq	r3, [r1, #0]
   b6480:	6003      	streq	r3, [r0, #0]
	      break;
   b6482:	e7f8      	b.n	b6476 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6484 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b6484:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6486:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b6488:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b648a:	b135      	cbz	r5, b649a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b648c:	4628      	mov	r0, r5
   b648e:	f7fd fe5f 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6492:	2110      	movs	r1, #16
   b6494:	4628      	mov	r0, r5
   b6496:	f7fd fe02 	bl	b409e <_ZdlPvj>
   b649a:	4620      	mov	r0, r4
   b649c:	2114      	movs	r1, #20
      }
   b649e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b64a2:	f7fd bdfc 	b.w	b409e <_ZdlPvj>

000b64a6 <_ZN6Thread7disposeEv>:
    void dispose()
   b64a6:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b64a8:	6803      	ldr	r3, [r0, #0]
   b64aa:	4604      	mov	r4, r0
        if (!isValid())
   b64ac:	b1ab      	cbz	r3, b64da <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b64ae:	6858      	ldr	r0, [r3, #4]
   b64b0:	f003 f8cc 	bl	b964c <os_thread_is_current>
   b64b4:	b988      	cbnz	r0, b64da <_ZN6Thread7disposeEv+0x34>
   b64b6:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b64b8:	7c5a      	ldrb	r2, [r3, #17]
   b64ba:	b912      	cbnz	r2, b64c2 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b64bc:	6858      	ldr	r0, [r3, #4]
   b64be:	f003 f8cd 	bl	b965c <os_thread_join>
        os_thread_cleanup(d_->handle);
   b64c2:	6823      	ldr	r3, [r4, #0]
   b64c4:	6858      	ldr	r0, [r3, #4]
   b64c6:	f003 f8d1 	bl	b966c <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b64ca:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b64cc:	2300      	movs	r3, #0
   b64ce:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b64d0:	b118      	cbz	r0, b64da <_ZN6Thread7disposeEv+0x34>
    }
   b64d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b64d6:	f7ff bfd5 	b.w	b6484 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b64da:	bd10      	pop	{r4, pc}

000b64dc <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b64dc:	4a05      	ldr	r2, [pc, #20]	; (b64f4 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b64de:	6002      	str	r2, [r0, #0]
   b64e0:	2200      	movs	r2, #0
   b64e2:	6042      	str	r2, [r0, #4]
   b64e4:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b64e6:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b64ea:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b64ee:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b64f2:	4770      	bx	lr
   b64f4:	000bed60 	.word	0x000bed60

000b64f8 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b64f8:	b510      	push	{r4, lr}
    if (!_instance) {
   b64fa:	4c07      	ldr	r4, [pc, #28]	; (b6518 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b64fc:	6823      	ldr	r3, [r4, #0]
   b64fe:	b943      	cbnz	r3, b6512 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b6500:	f240 4064 	movw	r0, #1124	; 0x464
   b6504:	f7fd fdc7 	bl	b4096 <_Znwj>
   b6508:	4603      	mov	r3, r0
   b650a:	b108      	cbz	r0, b6510 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b650c:	f7ff ffe6 	bl	b64dc <_ZN19BackgroundPublishRKC1Ev>
   b6510:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b6512:	6820      	ldr	r0, [r4, #0]
   b6514:	bd10      	pop	{r4, pc}
   b6516:	bf00      	nop
   b6518:	2003e5e0 	.word	0x2003e5e0

000b651c <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b651c:	b538      	push	{r3, r4, r5, lr}
   b651e:	4604      	mov	r4, r0
    if(thread)
   b6520:	6840      	ldr	r0, [r0, #4]
   b6522:	b190      	cbz	r0, b654a <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b6524:	2302      	movs	r3, #2
   b6526:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b6528:	f7ff ffbd 	bl	b64a6 <_ZN6Thread7disposeEv>
        delete thread;
   b652c:	6865      	ldr	r5, [r4, #4]
   b652e:	b155      	cbz	r5, b6546 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b6530:	4628      	mov	r0, r5
   b6532:	f7ff ffb8 	bl	b64a6 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b6536:	6828      	ldr	r0, [r5, #0]
   b6538:	b108      	cbz	r0, b653e <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b653a:	f7ff ffa3 	bl	b6484 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b653e:	2104      	movs	r1, #4
   b6540:	4628      	mov	r0, r5
   b6542:	f7fd fdac 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b6546:	2300      	movs	r3, #0
   b6548:	6063      	str	r3, [r4, #4]
    }
}
   b654a:	bd38      	pop	{r3, r4, r5, pc}

000b654c <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b654c:	b510      	push	{r4, lr}
   b654e:	4b05      	ldr	r3, [pc, #20]	; (b6564 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b6550:	6003      	str	r3, [r0, #0]
   b6552:	4604      	mov	r4, r0
    stop();
   b6554:	f7ff ffe2 	bl	b651c <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b6558:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b655c:	f7fd fdf8 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
}
   b6560:	4620      	mov	r0, r4
   b6562:	bd10      	pop	{r4, pc}
   b6564:	000bed60 	.word	0x000bed60

000b6568 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6568:	b510      	push	{r4, lr}
   b656a:	4604      	mov	r4, r0
}
   b656c:	f7ff ffee 	bl	b654c <_ZN19BackgroundPublishRKD1Ev>
   b6570:	4620      	mov	r0, r4
   b6572:	f240 4164 	movw	r1, #1124	; 0x464
   b6576:	f7fd fd92 	bl	b409e <_ZdlPvj>
   b657a:	4620      	mov	r0, r4
   b657c:	bd10      	pop	{r4, pc}

000b657e <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b657e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6580:	4604      	mov	r4, r0
   b6582:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b6584:	f100 060d 	add.w	r6, r0, #13
   b6588:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b658c:	7b23      	ldrb	r3, [r4, #12]
   b658e:	b91b      	cbnz	r3, b6598 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b6590:	2001      	movs	r0, #1
   b6592:	f003 fcbf 	bl	b9f14 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6596:	e7f9      	b.n	b658c <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b6598:	7b23      	ldrb	r3, [r4, #12]
   b659a:	2b02      	cmp	r3, #2
   b659c:	d064      	beq.n	b6668 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b659e:	68a0      	ldr	r0, [r4, #8]
   b65a0:	f003 f874 	bl	b968c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b65a4:	68a0      	ldr	r0, [r4, #8]
   b65a6:	f003 f879 	bl	b969c <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b65aa:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b65ae:	f88d 3000 	strb.w	r3, [sp]
   b65b2:	463a      	mov	r2, r7
   b65b4:	233c      	movs	r3, #60	; 0x3c
   b65b6:	4631      	mov	r1, r6
   b65b8:	a806      	add	r0, sp, #24
   b65ba:	f003 ff77 	bl	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b65be:	9d06      	ldr	r5, [sp, #24]
   b65c0:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b65c2:	b933      	cbnz	r3, b65d2 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b65c4:	7b23      	ldrb	r3, [r4, #12]
   b65c6:	2b02      	cmp	r3, #2
   b65c8:	d003      	beq.n	b65d2 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b65ca:	2001      	movs	r0, #1
   b65cc:	f003 fca2 	bl	b9f14 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b65d0:	e7f5      	b.n	b65be <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b65d2:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b65d6:	b31b      	cbz	r3, b6620 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b65d8:	2000      	movs	r0, #0
   b65da:	f003 fb11 	bl	b9c00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b65de:	b120      	cbz	r0, b65ea <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b65e0:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b65e2:	b913      	cbnz	r3, b65ea <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b65e4:	f003 fb66 	bl	b9cb4 <spark_process>
    }
   b65e8:	e7fa      	b.n	b65e0 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b65ea:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b65ec:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b65f0:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b65f2:	1e59      	subs	r1, r3, #1
   b65f4:	424b      	negs	r3, r1
   b65f6:	414b      	adcs	r3, r1
   b65f8:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b65fc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6600:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b6604:	b90b      	cbnz	r3, b660a <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b6606:	f006 fd1b 	bl	bd040 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b660a:	ab05      	add	r3, sp, #20
   b660c:	9300      	str	r3, [sp, #0]
   b660e:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b6612:	ab04      	add	r3, sp, #16
   b6614:	aa03      	add	r2, sp, #12
   b6616:	f10d 010b 	add.w	r1, sp, #11
   b661a:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b661e:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b6620:	68a0      	ldr	r0, [r4, #8]
   b6622:	f003 f833 	bl	b968c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b6626:	7b23      	ldrb	r3, [r4, #12]
   b6628:	2b02      	cmp	r3, #2
   b662a:	d017      	beq.n	b665c <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b662c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b6630:	2500      	movs	r5, #0
   b6632:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b6636:	b143      	cbz	r3, b664a <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b6638:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b663c:	2203      	movs	r2, #3
   b663e:	4608      	mov	r0, r1
   b6640:	4798      	blx	r3
	    _M_manager = nullptr;
   b6642:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b6646:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b664a:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b664c:	68a0      	ldr	r0, [r4, #8]
   b664e:	7323      	strb	r3, [r4, #12]
   b6650:	f003 f824 	bl	b969c <os_mutex_unlock>
   b6654:	a807      	add	r0, sp, #28
   b6656:	f7fd fea9 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b665a:	e797      	b.n	b658c <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b665c:	68a0      	ldr	r0, [r4, #8]
   b665e:	f003 f81d 	bl	b969c <os_mutex_unlock>
   b6662:	a807      	add	r0, sp, #28
   b6664:	f7fd fea2 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b6668:	b009      	add	sp, #36	; 0x24
   b666a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b666c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b666c:	6800      	ldr	r0, [r0, #0]
   b666e:	f7ff bf86 	b.w	b657e <_ZN19BackgroundPublishRK8thread_fEv>

000b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6672:	b513      	push	{r0, r1, r4, lr}
   b6674:	460b      	mov	r3, r1
   b6676:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6678:	e9d0 0100 	ldrd	r0, r1, [r0]
   b667c:	466c      	mov	r4, sp
   b667e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6682:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6686:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b668a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b668e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6692:	b002      	add	sp, #8
   b6694:	bd10      	pop	{r4, pc}
	...

000b6698 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b6698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b669c:	4606      	mov	r6, r0
   b669e:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b66a0:	2014      	movs	r0, #20
   b66a2:	4926      	ldr	r1, [pc, #152]	; (b673c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b66a4:	4617      	mov	r7, r2
   b66a6:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b66a8:	f006 fcc0 	bl	bd02c <_ZnwjRKSt9nothrow_t>
   b66ac:	4604      	mov	r4, r0
   b66ae:	b130      	cbz	r0, b66be <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b66b0:	2000      	movs	r0, #0
            exited(false) {
   b66b2:	e9c4 0000 	strd	r0, r0, [r4]
   b66b6:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b66ba:	7420      	strb	r0, [r4, #16]
   b66bc:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b66be:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b66c0:	2c00      	cmp	r4, #0
   b66c2:	d031      	beq.n	b6728 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b66c4:	491d      	ldr	r1, [pc, #116]	; (b673c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b66c6:	2010      	movs	r0, #16
   b66c8:	f006 fcb0 	bl	bd02c <_ZnwjRKSt9nothrow_t>
   b66cc:	4605      	mov	r5, r0
   b66ce:	b168      	cbz	r0, b66ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b66d0:	2300      	movs	r3, #0
   b66d2:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b66d4:	4601      	mov	r1, r0
   b66d6:	4638      	mov	r0, r7
   b66d8:	f7ff ffcb 	bl	b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66dc:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b66de:	68aa      	ldr	r2, [r5, #8]
   b66e0:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b66e2:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b66e4:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66e6:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b66e8:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b66ea:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b66ec:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b66ee:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b66f0:	b137      	cbz	r7, b6700 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b66f2:	4638      	mov	r0, r7
   b66f4:	f7fd fd2c 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b66f8:	2110      	movs	r1, #16
   b66fa:	4638      	mov	r0, r7
   b66fc:	f7fd fccf 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6700:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b6702:	6803      	ldr	r3, [r0, #0]
   b6704:	b183      	cbz	r3, b6728 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6708:	464a      	mov	r2, r9
   b670a:	e9cd 0300 	strd	r0, r3, [sp]
   b670e:	4641      	mov	r1, r8
   b6710:	4b0b      	ldr	r3, [pc, #44]	; (b6740 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b6712:	3004      	adds	r0, #4
   b6714:	f002 ff92 	bl	b963c <os_thread_create>
   b6718:	b930      	cbnz	r0, b6728 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b671a:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b671c:	7c1b      	ldrb	r3, [r3, #16]
   b671e:	b94b      	cbnz	r3, b6734 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b6720:	2001      	movs	r0, #1
   b6722:	f003 f803 	bl	b972c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6726:	e7f8      	b.n	b671a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b6728:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b672a:	2300      	movs	r3, #0
   b672c:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b672e:	b108      	cbz	r0, b6734 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b6730:	f7ff fea8 	bl	b6484 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b6734:	4630      	mov	r0, r6
   b6736:	b003      	add	sp, #12
   b6738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b673c:	000bf758 	.word	0x000bf758
   b6740:	000b6441 	.word	0x000b6441

000b6744 <_ZN19BackgroundPublishRK5startEv>:
{
   b6744:	b530      	push	{r4, r5, lr}
    if(!thread)
   b6746:	6843      	ldr	r3, [r0, #4]
{
   b6748:	b087      	sub	sp, #28
   b674a:	4604      	mov	r4, r0
    if(!thread)
   b674c:	b9c3      	cbnz	r3, b6780 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b674e:	3008      	adds	r0, #8
   b6750:	f002 ff94 	bl	b967c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b6754:	4b0b      	ldr	r3, [pc, #44]	; (b6784 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b6756:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b6758:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b675a:	4b0b      	ldr	r3, [pc, #44]	; (b6788 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b675c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b675e:	9304      	str	r3, [sp, #16]
   b6760:	f7fd fc99 	bl	b4096 <_Znwj>
   b6764:	4605      	mov	r5, r0
   b6766:	b138      	cbz	r0, b6778 <_ZN19BackgroundPublishRK5startEv+0x34>
   b6768:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b676c:	9300      	str	r3, [sp, #0]
   b676e:	4907      	ldr	r1, [pc, #28]	; (b678c <_ZN19BackgroundPublishRK5startEv+0x48>)
   b6770:	2302      	movs	r3, #2
   b6772:	aa02      	add	r2, sp, #8
   b6774:	f7ff ff90 	bl	b6698 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b6778:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b677a:	a802      	add	r0, sp, #8
   b677c:	f7fd fce8 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
}
   b6780:	b007      	add	sp, #28
   b6782:	bd30      	pop	{r4, r5, pc}
   b6784:	000b666d 	.word	0x000b666d
   b6788:	000b6471 	.word	0x000b6471
   b678c:	000bed44 	.word	0x000bed44

000b6790 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b6790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6794:	4604      	mov	r4, r0
   b6796:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b6798:	6880      	ldr	r0, [r0, #8]
   b679a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b679c:	4698      	mov	r8, r3
   b679e:	460d      	mov	r5, r1
   b67a0:	4616      	mov	r6, r2
   b67a2:	f002 ff73 	bl	b968c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b67a6:	6863      	ldr	r3, [r4, #4]
   b67a8:	b11b      	cbz	r3, b67b2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b67aa:	7b23      	ldrb	r3, [r4, #12]
   b67ac:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b67b0:	b133      	cbz	r3, b67c0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b67b2:	68a0      	ldr	r0, [r4, #8]
   b67b4:	f002 ff72 	bl	b969c <os_mutex_unlock>
    {
        return false;
   b67b8:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b67ba:	b005      	add	sp, #20
   b67bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b67c0:	68a0      	ldr	r0, [r4, #8]
   b67c2:	f002 ff6b 	bl	b969c <os_mutex_unlock>
    if(!name)
   b67c6:	2d00      	cmp	r5, #0
   b67c8:	d03d      	beq.n	b6846 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b67ca:	2240      	movs	r2, #64	; 0x40
   b67cc:	4629      	mov	r1, r5
   b67ce:	f104 000d 	add.w	r0, r4, #13
   b67d2:	f007 fb5a 	bl	bde8a <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b67d6:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b67da:	b38e      	cbz	r6, b6840 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b67dc:	f240 4201 	movw	r2, #1025	; 0x401
   b67e0:	4631      	mov	r1, r6
   b67e2:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b67e6:	f007 fb50 	bl	bde8a <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b67ea:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b67ee:	2300      	movs	r3, #0
   b67f0:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b67f2:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b67f4:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b67f8:	b13b      	cbz	r3, b680a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b67fa:	2202      	movs	r2, #2
   b67fc:	4639      	mov	r1, r7
   b67fe:	4668      	mov	r0, sp
   b6800:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6802:	68fb      	ldr	r3, [r7, #12]
   b6804:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b6806:	68bb      	ldr	r3, [r7, #8]
   b6808:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b680a:	4629      	mov	r1, r5
   b680c:	4668      	mov	r0, sp
   b680e:	f7ff ff30 	bl	b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6812:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6814:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b6818:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b681c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b681e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b6820:	4668      	mov	r0, sp
   b6822:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b6826:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b682a:	9203      	str	r2, [sp, #12]
   b682c:	f7fd fc90 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b6830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6832:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b6836:	2001      	movs	r0, #1
    event_flags = flags;
   b6838:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b683c:	7320      	strb	r0, [r4, #12]
    return true;
   b683e:	e7bc      	b.n	b67ba <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b6840:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b6844:	e7d3      	b.n	b67ee <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b6846:	4628      	mov	r0, r5
   b6848:	e7b7      	b.n	b67ba <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b684c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b684c:	b510      	push	{r4, lr}
   b684e:	4b05      	ldr	r3, [pc, #20]	; (b6864 <_ZN10JsonBufferD1Ev+0x18>)
   b6850:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6852:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6854:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6856:	b91b      	cbnz	r3, b6860 <_ZN10JsonBufferD1Ev+0x14>
   b6858:	6840      	ldr	r0, [r0, #4]
   b685a:	b108      	cbz	r0, b6860 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b685c:	f003 fae2 	bl	b9e24 <free>
	}
}
   b6860:	4620      	mov	r0, r4
   b6862:	bd10      	pop	{r4, pc}
   b6864:	000bed70 	.word	0x000bed70

000b6868 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6868:	b510      	push	{r4, lr}
   b686a:	4604      	mov	r4, r0
}
   b686c:	f7ff ffee 	bl	b684c <_ZN10JsonBufferD1Ev>
   b6870:	4620      	mov	r0, r4
   b6872:	2114      	movs	r1, #20
   b6874:	f7fd fc13 	bl	b409e <_ZdlPvj>
   b6878:	4620      	mov	r0, r4
   b687a:	bd10      	pop	{r4, pc}

000b687c <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   b687c:	b510      	push	{r4, lr}
   b687e:	4b07      	ldr	r3, [pc, #28]	; (b689c <_ZN10JsonParserD1Ev+0x20>)
   b6880:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6882:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6884:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b6886:	b91b      	cbnz	r3, b6890 <_ZN10JsonParserD1Ev+0x14>
   b6888:	6940      	ldr	r0, [r0, #20]
   b688a:	b108      	cbz	r0, b6890 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b688c:	f003 faca 	bl	b9e24 <free>
JsonParser::~JsonParser() {
   b6890:	4620      	mov	r0, r4
   b6892:	f7ff ffdb 	bl	b684c <_ZN10JsonBufferD1Ev>
	}
}
   b6896:	4620      	mov	r0, r4
   b6898:	bd10      	pop	{r4, pc}
   b689a:	bf00      	nop
   b689c:	000bed80 	.word	0x000bed80

000b68a0 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b68a0:	b510      	push	{r4, lr}
   b68a2:	4604      	mov	r4, r0
}
   b68a4:	f7ff ffea 	bl	b687c <_ZN10JsonParserD1Ev>
   b68a8:	4620      	mov	r0, r4
   b68aa:	212c      	movs	r1, #44	; 0x2c
   b68ac:	f7fd fbf7 	bl	b409e <_ZdlPvj>
   b68b0:	4620      	mov	r0, r4
   b68b2:	bd10      	pop	{r4, pc}

000b68b4 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b68b4:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b68b6:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b68b8:	4604      	mov	r4, r0
   b68ba:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b68bc:	b10b      	cbz	r3, b68c2 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b68be:	2000      	movs	r0, #0
}
   b68c0:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b68c2:	6840      	ldr	r0, [r0, #4]
   b68c4:	b138      	cbz	r0, b68d6 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b68c6:	f003 fab5 	bl	b9e34 <realloc>
		if (newBuffer) {
   b68ca:	2800      	cmp	r0, #0
   b68cc:	d0f7      	beq.n	b68be <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b68ce:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b68d2:	2001      	movs	r0, #1
   b68d4:	e7f4      	b.n	b68c0 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b68d6:	4608      	mov	r0, r1
   b68d8:	f003 fa9c 	bl	b9e14 <malloc>
   b68dc:	e7f5      	b.n	b68ca <_ZN10JsonBuffer8allocateEj+0x16>

000b68de <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b68de:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b68e0:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b68e2:	460e      	mov	r6, r1
   b68e4:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b68e6:	18d1      	adds	r1, r2, r3
   b68e8:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b68ea:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b68ec:	b172      	cbz	r2, b690c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b68ee:	6882      	ldr	r2, [r0, #8]
   b68f0:	428a      	cmp	r2, r1
   b68f2:	d30b      	bcc.n	b690c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b68f4:	6860      	ldr	r0, [r4, #4]
   b68f6:	68e3      	ldr	r3, [r4, #12]
   b68f8:	462a      	mov	r2, r5
   b68fa:	4631      	mov	r1, r6
   b68fc:	4418      	add	r0, r3
   b68fe:	f007 fa03 	bl	bdd08 <memcpy>
	offset += dataLen;
   b6902:	68e2      	ldr	r2, [r4, #12]
   b6904:	442a      	add	r2, r5
   b6906:	60e2      	str	r2, [r4, #12]
	return true;
   b6908:	2001      	movs	r0, #1
}
   b690a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b690c:	4620      	mov	r0, r4
   b690e:	f7ff ffd1 	bl	b68b4 <_ZN10JsonBuffer8allocateEj>
   b6912:	2800      	cmp	r0, #0
   b6914:	d1ee      	bne.n	b68f4 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6916:	e7f8      	b.n	b690a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6918 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6918:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b691a:	2100      	movs	r1, #0
   b691c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b691e:	b123      	cbz	r3, b692a <_ZN10JsonBuffer5clearEv+0x12>
   b6920:	6882      	ldr	r2, [r0, #8]
   b6922:	b112      	cbz	r2, b692a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6924:	4618      	mov	r0, r3
   b6926:	f007 ba17 	b.w	bdd58 <memset>
}
   b692a:	4770      	bx	lr

000b692c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b692c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b692e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6932:	2200      	movs	r2, #0
   b6934:	60c2      	str	r2, [r0, #12]
   b6936:	2201      	movs	r2, #1
   b6938:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b693a:	6143      	str	r3, [r0, #20]
   b693c:	4a02      	ldr	r2, [pc, #8]	; (b6948 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b693e:	9b02      	ldr	r3, [sp, #8]
   b6940:	6002      	str	r2, [r0, #0]
   b6942:	61c3      	str	r3, [r0, #28]
}
   b6944:	bd10      	pop	{r4, pc}
   b6946:	bf00      	nop
   b6948:	000bed80 	.word	0x000bed80

000b694c <_ZNK10JsonParser14getOuterObjectEv>:
	return 0;
}


const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b694c:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b6950:	4298      	cmp	r0, r3
   b6952:	d204      	bcs.n	b695e <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b6954:	7803      	ldrb	r3, [r0, #0]
		return &tokens[0];
	}
	else {
		return 0;
   b6956:	2b01      	cmp	r3, #1
   b6958:	bf18      	it	ne
   b695a:	2000      	movne	r0, #0
   b695c:	4770      	bx	lr
   b695e:	2000      	movs	r0, #0
	}
}
   b6960:	4770      	bx	lr

000b6962 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6962:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6964:	6813      	ldr	r3, [r2, #0]
   b6966:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6968:	6813      	ldr	r3, [r2, #0]
   b696a:	f103 0410 	add.w	r4, r3, #16
   b696e:	6014      	str	r4, [r2, #0]
   b6970:	6986      	ldr	r6, [r0, #24]
   b6972:	42b4      	cmp	r4, r6
   b6974:	d20a      	bcs.n	b698c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6976:	699b      	ldr	r3, [r3, #24]
   b6978:	688c      	ldr	r4, [r1, #8]
   b697a:	42a3      	cmp	r3, r4
   b697c:	da01      	bge.n	b6982 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b697e:	42ab      	cmp	r3, r5
   b6980:	ddf2      	ble.n	b6968 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   b6982:	42a3      	cmp	r3, r4
   b6984:	bfcc      	ite	gt
   b6986:	2000      	movgt	r0, #0
   b6988:	2001      	movle	r0, #1
   b698a:	e000      	b.n	b698e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		// No object after index
		return false;
   b698c:	2000      	movs	r0, #0
	}
	return true;
}
   b698e:	bd70      	pop	{r4, r5, r6, pc}

000b6990 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b6990:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6992:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b6996:	4604      	mov	r4, r0
   b6998:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b699a:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b699c:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b699e:	9801      	ldr	r0, [sp, #4]
   b69a0:	69a3      	ldr	r3, [r4, #24]
   b69a2:	4283      	cmp	r3, r0
   b69a4:	d90b      	bls.n	b69be <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b69a6:	6882      	ldr	r2, [r0, #8]
   b69a8:	688b      	ldr	r3, [r1, #8]
   b69aa:	429a      	cmp	r2, r3
   b69ac:	da07      	bge.n	b69be <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b69ae:	42b5      	cmp	r5, r6
   b69b0:	d006      	beq.n	b69c0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b69b2:	aa01      	add	r2, sp, #4
   b69b4:	4620      	mov	r0, r4
		index++;
   b69b6:	3501      	adds	r5, #1
		skipObject(container, token);
   b69b8:	f7ff ffd3 	bl	b6962 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b69bc:	e7ef      	b.n	b699e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b69be:	2000      	movs	r0, #0
}
   b69c0:	b002      	add	sp, #8
   b69c2:	bd70      	pop	{r4, r5, r6, pc}

000b69c4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b69c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b69c8:	9d08      	ldr	r5, [sp, #32]
   b69ca:	4698      	mov	r8, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b69cc:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b69d0:	4604      	mov	r4, r0
   b69d2:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b69d4:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b69d6:	2600      	movs	r6, #0

	while(token < tokensEnd && token->end < container->end) {
   b69d8:	9801      	ldr	r0, [sp, #4]
   b69da:	69a3      	ldr	r3, [r4, #24]
   b69dc:	4283      	cmp	r3, r0
   b69de:	d91a      	bls.n	b6a16 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b69e0:	6882      	ldr	r2, [r0, #8]
   b69e2:	688b      	ldr	r3, [r1, #8]
   b69e4:	429a      	cmp	r2, r3
   b69e6:	da16      	bge.n	b6a16 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b69e8:	42ae      	cmp	r6, r5
   b69ea:	d10b      	bne.n	b6a04 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b69ec:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b69ee:	aa01      	add	r2, sp, #4
   b69f0:	4620      	mov	r0, r4
   b69f2:	f7ff ffb6 	bl	b6962 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b69f6:	b128      	cbz	r0, b6a04 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b69f8:	9b01      	ldr	r3, [sp, #4]
   b69fa:	f8c8 3000 	str.w	r3, [r8]
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
}
   b69fe:	b002      	add	sp, #8
   b6a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6a04:	aa01      	add	r2, sp, #4
   b6a06:	4620      	mov	r0, r4
   b6a08:	f7ff ffab 	bl	b6962 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b6a0c:	4620      	mov	r0, r4
		index++;
   b6a0e:	3601      	adds	r6, #1
		skipObject(container, token);
   b6a10:	f7ff ffa7 	bl	b6962 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6a14:	e7e0      	b.n	b69d8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6a16:	2000      	movs	r0, #0
   b6a18:	e7f1      	b.n	b69fe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6a1a <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b6a1a:	b510      	push	{r4, lr}
   b6a1c:	4604      	mov	r4, r0
	if (str) {
   b6a1e:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b6a20:	460b      	mov	r3, r1
	if (str) {
   b6a22:	b128      	cbz	r0, b6a30 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b6a24:	f005 fcff 	bl	bc426 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b6a28:	68e3      	ldr	r3, [r4, #12]
   b6a2a:	3301      	adds	r3, #1
   b6a2c:	60e3      	str	r3, [r4, #12]
	}
}
   b6a2e:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b6a30:	6860      	ldr	r0, [r4, #4]
   b6a32:	2800      	cmp	r0, #0
   b6a34:	d0f8      	beq.n	b6a28 <_ZN16JsonParserString6appendEc+0xe>
   b6a36:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b6a3a:	3a01      	subs	r2, #1
   b6a3c:	428a      	cmp	r2, r1
			buf[length] = ch;
   b6a3e:	bf88      	it	hi
   b6a40:	5443      	strbhi	r3, [r0, r1]
   b6a42:	e7f1      	b.n	b6a28 <_ZN16JsonParserString6appendEc+0xe>

000b6a44 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6a44:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b6a46:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a4a:	4608      	mov	r0, r1
		str.append((char)unicode);
   b6a4c:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b6a4e:	d804      	bhi.n	b6a5a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b6a50:	b003      	add	sp, #12
   b6a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b6a56:	f7ff bfe0 	b.w	b6a1a <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b6a5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b6a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b6a62:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b6a66:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b6a6a:	d207      	bcs.n	b6a7c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b6a6c:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b6a70:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b6a72:	f7ff ffd2 	bl	b6a1a <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b6a76:	9801      	ldr	r0, [sp, #4]
   b6a78:	4621      	mov	r1, r4
   b6a7a:	e7e9      	b.n	b6a50 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b6a7c:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b6a7e:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b6a82:	9001      	str	r0, [sp, #4]
   b6a84:	f7ff ffc9 	bl	b6a1a <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b6a88:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b6a8c:	9801      	ldr	r0, [sp, #4]
   b6a8e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b6a92:	e7ee      	b.n	b6a72 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b6a94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b6a98:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b6a9a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6a9c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b6b6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6aa0:	4680      	mov	r8, r0
   b6aa2:	460f      	mov	r7, r1
   b6aa4:	4615      	mov	r5, r2
			escape = false;
   b6aa6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b6aa8:	68b8      	ldr	r0, [r7, #8]
   b6aaa:	42b0      	cmp	r0, r6
   b6aac:	dd5a      	ble.n	b6b64 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b6aae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6ab2:	5d99      	ldrb	r1, [r3, r6]
   b6ab4:	199a      	adds	r2, r3, r6
		if (escape) {
   b6ab6:	2c00      	cmp	r4, #0
   b6ab8:	d04b      	beq.n	b6b52 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b6aba:	2975      	cmp	r1, #117	; 0x75
   b6abc:	d805      	bhi.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6abe:	296d      	cmp	r1, #109	; 0x6d
   b6ac0:	d807      	bhi.n	b6ad2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b6ac2:	2962      	cmp	r1, #98	; 0x62
   b6ac4:	d01e      	beq.n	b6b04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b6ac6:	2966      	cmp	r1, #102	; 0x66
   b6ac8:	d01e      	beq.n	b6b08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b6aca:	4628      	mov	r0, r5
   b6acc:	f7ff ffa5 	bl	b6a1a <_ZN16JsonParserString6appendEc>
				break;
   b6ad0:	e03d      	b.n	b6b4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6ad2:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b6ad6:	2c07      	cmp	r4, #7
   b6ad8:	d8f7      	bhi.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6ada:	f20f 0c08 	addw	ip, pc, #8
   b6ade:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b6ae2:	bf00      	nop
   b6ae4:	000b6b0d 	.word	0x000b6b0d
   b6ae8:	000b6acb 	.word	0x000b6acb
   b6aec:	000b6acb 	.word	0x000b6acb
   b6af0:	000b6acb 	.word	0x000b6acb
   b6af4:	000b6b11 	.word	0x000b6b11
   b6af8:	000b6acb 	.word	0x000b6acb
   b6afc:	000b6b15 	.word	0x000b6b15
   b6b00:	000b6b19 	.word	0x000b6b19
				str.append('\b');
   b6b04:	2108      	movs	r1, #8
   b6b06:	e7e0      	b.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b6b08:	210c      	movs	r1, #12
   b6b0a:	e7de      	b.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b6b0c:	210a      	movs	r1, #10
   b6b0e:	e7dc      	b.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b6b10:	210d      	movs	r1, #13
   b6b12:	e7da      	b.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b6b14:	2109      	movs	r1, #9
   b6b16:	e7d8      	b.n	b6aca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b6b18:	1d31      	adds	r1, r6, #4
   b6b1a:	4288      	cmp	r0, r1
   b6b1c:	dd17      	ble.n	b6b4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6b1e:	a902      	add	r1, sp, #8
   b6b20:	3304      	adds	r3, #4
   b6b22:	4433      	add	r3, r6
   b6b24:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b6b26:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b6b2a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b6b2e:	429a      	cmp	r2, r3
   b6b30:	d1f9      	bne.n	b6b26 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6b32:	aa01      	add	r2, sp, #4
   b6b34:	4651      	mov	r1, sl
					tmp[4] = 0;
   b6b36:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6b3a:	f003 f98b 	bl	b9e54 <sscanf>
   b6b3e:	2801      	cmp	r0, #1
   b6b40:	d105      	bne.n	b6b4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b6b42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b6b46:	4629      	mov	r1, r5
   b6b48:	f7ff ff7c 	bl	b6a44 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b6b4c:	3605      	adds	r6, #5
			escape = false;
   b6b4e:	2400      	movs	r4, #0
   b6b50:	e004      	b.n	b6b5c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b6b52:	295c      	cmp	r1, #92	; 0x5c
   b6b54:	d004      	beq.n	b6b60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b6b56:	4628      	mov	r0, r5
   b6b58:	f7ff ff5f 	bl	b6a1a <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b6b5c:	3601      	adds	r6, #1
   b6b5e:	e7a3      	b.n	b6aa8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b6b60:	2401      	movs	r4, #1
   b6b62:	e7fb      	b.n	b6b5c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b6b64:	2001      	movs	r0, #1
   b6b66:	b004      	add	sp, #16
   b6b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6b6c:	000bf571 	.word	0x000bf571

000b6b70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6b72:	460c      	mov	r4, r1
   b6b74:	4606      	mov	r6, r0
	result = "";
   b6b76:	490c      	ldr	r1, [pc, #48]	; (b6ba8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b6b78:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6b7a:	4615      	mov	r5, r2
	result = "";
   b6b7c:	f005 fc19 	bl	bc3b2 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b6b80:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b6b84:	1ac9      	subs	r1, r1, r3
   b6b86:	3101      	adds	r1, #1
   b6b88:	4628      	mov	r0, r5
   b6b8a:	f005 fb87 	bl	bc29c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6b8e:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b6b90:	466a      	mov	r2, sp
   b6b92:	4621      	mov	r1, r4
   b6b94:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6b96:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6b9a:	9500      	str	r5, [sp, #0]
   b6b9c:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b6b9e:	f7ff ff79 	bl	b6a94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b6ba2:	b004      	add	sp, #16
   b6ba4:	bd70      	pop	{r4, r5, r6, pc}
   b6ba6:	bf00      	nop
   b6ba8:	000bf5cd 	.word	0x000bf5cd

000b6bac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6bb0:	b089      	sub	sp, #36	; 0x24
   b6bb2:	4605      	mov	r5, r0
   b6bb4:	4688      	mov	r8, r1
	String keyName;
   b6bb6:	a804      	add	r0, sp, #16
   b6bb8:	4912      	ldr	r1, [pc, #72]	; (b6c04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6bba:	4616      	mov	r6, r2
   b6bbc:	4699      	mov	r9, r3
	String keyName;
   b6bbe:	f005 fb9a 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6bc2:	2700      	movs	r7, #0
   b6bc4:	9700      	str	r7, [sp, #0]
   b6bc6:	464b      	mov	r3, r9
   b6bc8:	aa03      	add	r2, sp, #12
   b6bca:	4641      	mov	r1, r8
   b6bcc:	4628      	mov	r0, r5
   b6bce:	f7ff fef9 	bl	b69c4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b6bd2:	4604      	mov	r4, r0
   b6bd4:	b170      	cbz	r0, b6bf4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6bd6:	9903      	ldr	r1, [sp, #12]
   b6bd8:	aa04      	add	r2, sp, #16
   b6bda:	4628      	mov	r0, r5
   b6bdc:	f7ff ffc8 	bl	b6b70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b6be0:	4604      	mov	r4, r0
   b6be2:	b908      	cbnz	r0, b6be8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6be4:	3701      	adds	r7, #1
   b6be6:	e7ed      	b.n	b6bc4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b6be8:	4631      	mov	r1, r6
   b6bea:	a804      	add	r0, sp, #16
   b6bec:	f005 fc49 	bl	bc482 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6bf0:	2800      	cmp	r0, #0
   b6bf2:	d0f7      	beq.n	b6be4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b6bf4:	a804      	add	r0, sp, #16
   b6bf6:	f005 fb33 	bl	bc260 <_ZN6StringD1Ev>
}
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	b009      	add	sp, #36	; 0x24
   b6bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6c02:	bf00      	nop
   b6c04:	000bf5cd 	.word	0x000bf5cd

000b6c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b6c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b6c0c:	6844      	ldr	r4, [r0, #4]
   b6c0e:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b6c12:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6c16:	f8d0 e000 	ldr.w	lr, [r0]
   b6c1a:	4596      	cmp	lr, r2
   b6c1c:	f080 81b9 	bcs.w	b6f92 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b6c20:	f811 800e 	ldrb.w	r8, [r1, lr]
   b6c24:	f1b8 0f00 	cmp.w	r8, #0
   b6c28:	f000 81b3 	beq.w	b6f92 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b6c2c:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b6c30:	f000 8098 	beq.w	b6d64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b6c34:	d833      	bhi.n	b6c9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b6c36:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b6c3a:	f000 80a6 	beq.w	b6d8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b6c3e:	d810      	bhi.n	b6c62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b6c40:	f1a8 0809 	sub.w	r8, r8, #9
   b6c44:	fa5f f888 	uxtb.w	r8, r8
   b6c48:	f1b8 0f17 	cmp.w	r8, #23
   b6c4c:	d80d      	bhi.n	b6c6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b6c4e:	4d9f      	ldr	r5, [pc, #636]	; (b6ecc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b6c50:	fa0c f808 	lsl.w	r8, ip, r8
   b6c54:	ea18 0f05 	tst.w	r8, r5
   b6c58:	d007      	beq.n	b6c6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6c5a:	6805      	ldr	r5, [r0, #0]
   b6c5c:	3501      	adds	r5, #1
   b6c5e:	6005      	str	r5, [r0, #0]
   b6c60:	e7d9      	b.n	b6c16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b6c62:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b6c66:	f000 8133 	beq.w	b6ed0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6c6a:	f8d0 8000 	ldr.w	r8, [r0]
   b6c6e:	4542      	cmp	r2, r8
   b6c70:	d90e      	bls.n	b6c90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6c72:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6c76:	b15d      	cbz	r5, b6c90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b6c78:	2d3a      	cmp	r5, #58	; 0x3a
   b6c7a:	f200 8169 	bhi.w	b6f50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b6c7e:	2d1f      	cmp	r5, #31
   b6c80:	f200 8151 	bhi.w	b6f26 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b6c84:	2d0a      	cmp	r5, #10
   b6c86:	f200 8160 	bhi.w	b6f4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b6c8a:	2d08      	cmp	r5, #8
   b6c8c:	f240 8156 	bls.w	b6f3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b6c90:	2b00      	cmp	r3, #0
   b6c92:	f040 8162 	bne.w	b6f5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b6c96:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b6c9a:	6005      	str	r5, [r0, #0]
   b6c9c:	e0a5      	b.n	b6dea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b6c9e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6ca2:	d037      	beq.n	b6d14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6ca4:	d82e      	bhi.n	b6d04 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b6ca6:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b6caa:	d033      	beq.n	b6d14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6cac:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b6cb0:	d1db      	bne.n	b6c6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b6cb2:	2b00      	cmp	r3, #0
   b6cb4:	d0d1      	beq.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b6cb6:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6cba:	6845      	ldr	r5, [r0, #4]
   b6cbc:	3d01      	subs	r5, #1
   b6cbe:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b6cc2:	2d00      	cmp	r5, #0
   b6cc4:	db55      	blt.n	b6d72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b6cc6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b6cca:	3701      	adds	r7, #1
   b6ccc:	d04d      	beq.n	b6d6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b6cce:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b6cd2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b6cd6:	d148      	bne.n	b6d6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b6cd8:	f898 b000 	ldrb.w	fp, [r8]
   b6cdc:	45cb      	cmp	fp, r9
   b6cde:	d14b      	bne.n	b6d78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b6ce0:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b6ce4:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b6ce8:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b6cec:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b6cf0:	f8de 7004 	ldr.w	r7, [lr, #4]
   b6cf4:	3701      	adds	r7, #1
   b6cf6:	d042      	beq.n	b6d7e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b6cf8:	f8de 7008 	ldr.w	r7, [lr, #8]
   b6cfc:	3701      	adds	r7, #1
   b6cfe:	d13e      	bne.n	b6d7e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b6d00:	6085      	str	r5, [r0, #8]
				break;
   b6d02:	e7aa      	b.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b6d04:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b6d08:	d1af      	bne.n	b6c6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b6d0a:	2b00      	cmp	r3, #0
   b6d0c:	d0a5      	beq.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b6d0e:	f04f 0901 	mov.w	r9, #1
   b6d12:	e7d2      	b.n	b6cba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b6d14:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b6d16:	2b00      	cmp	r3, #0
   b6d18:	d09f      	beq.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b6d1a:	6845      	ldr	r5, [r0, #4]
   b6d1c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6d1e:	42af      	cmp	r7, r5
   b6d20:	d94a      	bls.n	b6db8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b6d22:	f105 0e01 	add.w	lr, r5, #1
   b6d26:	f8c0 e004 	str.w	lr, [r0, #4]
   b6d2a:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b6d2e:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b6d32:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b6d36:	2500      	movs	r5, #0
   b6d38:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b6d3c:	6885      	ldr	r5, [r0, #8]
   b6d3e:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b6d40:	bf1f      	itttt	ne
   b6d42:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b6d46:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b6d4a:	3501      	addne	r5, #1
   b6d4c:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b6d50:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6d54:	bf0c      	ite	eq
   b6d56:	2501      	moveq	r5, #1
   b6d58:	2502      	movne	r5, #2
   b6d5a:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b6d5e:	6805      	ldr	r5, [r0, #0]
   b6d60:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b6d64:	6845      	ldr	r5, [r0, #4]
   b6d66:	3d01      	subs	r5, #1
   b6d68:	e7ca      	b.n	b6d00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6d6a:	3d01      	subs	r5, #1
   b6d6c:	f1a8 0810 	sub.w	r8, r8, #16
   b6d70:	e7a7      	b.n	b6cc2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b6d72:	3501      	adds	r5, #1
   b6d74:	f47f af71 	bne.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b6d78:	f06f 0401 	mvn.w	r4, #1
   b6d7c:	e01e      	b.n	b6dbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b6d7e:	3d01      	subs	r5, #1
   b6d80:	1c6f      	adds	r7, r5, #1
   b6d82:	f1ae 0e10 	sub.w	lr, lr, #16
   b6d86:	d1b3      	bne.n	b6cf0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b6d88:	e767      	b.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b6d8a:	f10e 0901 	add.w	r9, lr, #1
   b6d8e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6d92:	f8d0 8000 	ldr.w	r8, [r0]
   b6d96:	4542      	cmp	r2, r8
   b6d98:	f240 8093 	bls.w	b6ec2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b6d9c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6da0:	2d00      	cmp	r5, #0
   b6da2:	f000 808e 	beq.w	b6ec2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b6da6:	2d22      	cmp	r5, #34	; 0x22
   b6da8:	d130      	bne.n	b6e0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b6daa:	b1f3      	cbz	r3, b6dea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b6dac:	6845      	ldr	r5, [r0, #4]
   b6dae:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6db0:	42af      	cmp	r7, r5
   b6db2:	d806      	bhi.n	b6dc2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b6db4:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b6db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b6dc2:	f105 0e01 	add.w	lr, r5, #1
   b6dc6:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b6dca:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6dce:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b6dd2:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6dd6:	2700      	movs	r7, #0
   b6dd8:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b6dda:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b6dde:	f04f 0a03 	mov.w	sl, #3
   b6de2:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b6de6:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b6dea:	6885      	ldr	r5, [r0, #8]
   b6dec:	1c6f      	adds	r7, r5, #1
				count++;
   b6dee:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b6df2:	f43f af32 	beq.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6df6:	2b00      	cmp	r3, #0
   b6df8:	f43f af2f 	beq.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b6dfc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6e00:	f8de 500c 	ldr.w	r5, [lr, #12]
   b6e04:	3501      	adds	r5, #1
   b6e06:	f8ce 500c 	str.w	r5, [lr, #12]
   b6e0a:	e726      	b.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b6e0c:	2d5c      	cmp	r5, #92	; 0x5c
   b6e0e:	d111      	bne.n	b6e34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b6e10:	f108 0501 	add.w	r5, r8, #1
   b6e14:	42aa      	cmp	r2, r5
   b6e16:	d90d      	bls.n	b6e34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b6e18:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b6e1a:	5d4d      	ldrb	r5, [r1, r5]
   b6e1c:	2d75      	cmp	r5, #117	; 0x75
   b6e1e:	d82b      	bhi.n	b6e78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6e20:	2d6d      	cmp	r5, #109	; 0x6d
   b6e22:	d80b      	bhi.n	b6e3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b6e24:	2d66      	cmp	r5, #102	; 0x66
   b6e26:	d827      	bhi.n	b6e78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6e28:	2d5b      	cmp	r5, #91	; 0x5b
   b6e2a:	d81d      	bhi.n	b6e68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b6e2c:	2d22      	cmp	r5, #34	; 0x22
   b6e2e:	d001      	beq.n	b6e34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b6e30:	2d2f      	cmp	r5, #47	; 0x2f
   b6e32:	d121      	bne.n	b6e78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6e34:	6805      	ldr	r5, [r0, #0]
   b6e36:	3501      	adds	r5, #1
   b6e38:	6005      	str	r5, [r0, #0]
   b6e3a:	e7aa      	b.n	b6d92 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b6e3c:	3d6e      	subs	r5, #110	; 0x6e
   b6e3e:	2d07      	cmp	r5, #7
   b6e40:	d81a      	bhi.n	b6e78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6e42:	a701      	add	r7, pc, #4	; (adr r7, b6e48 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b6e44:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b6e48:	000b6e35 	.word	0x000b6e35
   b6e4c:	000b6e79 	.word	0x000b6e79
   b6e50:	000b6e79 	.word	0x000b6e79
   b6e54:	000b6e79 	.word	0x000b6e79
   b6e58:	000b6e35 	.word	0x000b6e35
   b6e5c:	000b6e79 	.word	0x000b6e79
   b6e60:	000b6e35 	.word	0x000b6e35
   b6e64:	000b6e7f 	.word	0x000b6e7f
   b6e68:	3d5c      	subs	r5, #92	; 0x5c
   b6e6a:	b2ed      	uxtb	r5, r5
   b6e6c:	fa0c f505 	lsl.w	r5, ip, r5
   b6e70:	f240 4741 	movw	r7, #1089	; 0x441
   b6e74:	423d      	tst	r5, r7
   b6e76:	d1dd      	bne.n	b6e34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b6e78:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b6e7c:	e77c      	b.n	b6d78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b6e7e:	f108 0502 	add.w	r5, r8, #2
   b6e82:	6005      	str	r5, [r0, #0]
   b6e84:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6e88:	f8d0 8000 	ldr.w	r8, [r0]
   b6e8c:	4542      	cmp	r2, r8
   b6e8e:	d803      	bhi.n	b6e98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b6e90:	6805      	ldr	r5, [r0, #0]
   b6e92:	3d01      	subs	r5, #1
   b6e94:	6005      	str	r5, [r0, #0]
					break;
   b6e96:	e7cd      	b.n	b6e34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6e98:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6e9c:	2d00      	cmp	r5, #0
   b6e9e:	d0f7      	beq.n	b6e90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b6ea0:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b6ea4:	f1bb 0f09 	cmp.w	fp, #9
   b6ea8:	d904      	bls.n	b6eb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b6eaa:	f025 0520 	bic.w	r5, r5, #32
   b6eae:	3d41      	subs	r5, #65	; 0x41
   b6eb0:	2d05      	cmp	r5, #5
   b6eb2:	d8e1      	bhi.n	b6e78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b6eb4:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6eb8:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b6ebc:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6ebe:	d1e3      	bne.n	b6e88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b6ec0:	e7e6      	b.n	b6e90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b6ec2:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b6ec6:	f06f 0402 	mvn.w	r4, #2
   b6eca:	e777      	b.n	b6dbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b6ecc:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b6ed0:	2b00      	cmp	r3, #0
   b6ed2:	f43f aec2 	beq.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6ed6:	6885      	ldr	r5, [r0, #8]
   b6ed8:	1c6f      	adds	r7, r5, #1
   b6eda:	f43f aebe 	beq.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b6ede:	012d      	lsls	r5, r5, #4
   b6ee0:	5d5d      	ldrb	r5, [r3, r5]
   b6ee2:	3d01      	subs	r5, #1
   b6ee4:	2d01      	cmp	r5, #1
   b6ee6:	f67f aeb8 	bls.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6eea:	6845      	ldr	r5, [r0, #4]
   b6eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b6ef0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6ef4:	f1b8 0f00 	cmp.w	r8, #0
   b6ef8:	f6ff aeaf 	blt.w	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b6efc:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b6f00:	3d01      	subs	r5, #1
   b6f02:	2d01      	cmp	r5, #1
   b6f04:	d80a      	bhi.n	b6f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6f06:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b6f0a:	3501      	adds	r5, #1
   b6f0c:	d006      	beq.n	b6f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b6f0e:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b6f12:	3501      	adds	r5, #1
   b6f14:	d102      	bne.n	b6f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b6f16:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b6f1a:	e69e      	b.n	b6c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6f1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6f20:	f1ae 0e10 	sub.w	lr, lr, #16
   b6f24:	e7e6      	b.n	b6ef4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b6f26:	f1a5 0920 	sub.w	r9, r5, #32
   b6f2a:	4f24      	ldr	r7, [pc, #144]	; (b6fbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b6f2c:	fa5f f989 	uxtb.w	r9, r9
   b6f30:	fa0c f909 	lsl.w	r9, ip, r9
   b6f34:	ea19 0f07 	tst.w	r9, r7
   b6f38:	f47f aeaa 	bne.w	b6c90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b6f3c:	3d20      	subs	r5, #32
   b6f3e:	2d5e      	cmp	r5, #94	; 0x5e
   b6f40:	d89a      	bhi.n	b6e78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6f42:	f108 0501 	add.w	r5, r8, #1
   b6f46:	6005      	str	r5, [r0, #0]
   b6f48:	e68f      	b.n	b6c6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b6f4a:	2d0d      	cmp	r5, #13
   b6f4c:	d1f6      	bne.n	b6f3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b6f4e:	e69f      	b.n	b6c90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6f50:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b6f54:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b6f58:	e7f8      	b.n	b6f4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b6f5a:	6845      	ldr	r5, [r0, #4]
   b6f5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6f5e:	42af      	cmp	r7, r5
   b6f60:	f67f af28 	bls.w	b6db4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b6f64:	f105 0801 	add.w	r8, r5, #1
   b6f68:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b6f6c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6f70:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b6f74:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6f78:	2700      	movs	r7, #0
   b6f7a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b6f7c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b6f80:	f04f 0a04 	mov.w	sl, #4
   b6f84:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b6f88:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b6f8c:	6805      	ldr	r5, [r0, #0]
   b6f8e:	3d01      	subs	r5, #1
   b6f90:	e683      	b.n	b6c9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b6f92:	2b00      	cmp	r3, #0
   b6f94:	f43f af12 	beq.w	b6dbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6f98:	6842      	ldr	r2, [r0, #4]
   b6f9a:	1e51      	subs	r1, r2, #1
   b6f9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b6fa0:	2900      	cmp	r1, #0
   b6fa2:	f6ff af0b 	blt.w	b6dbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6fa6:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b6faa:	3201      	adds	r2, #1
   b6fac:	d003      	beq.n	b6fb6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b6fae:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b6fb2:	3201      	adds	r2, #1
   b6fb4:	d087      	beq.n	b6ec6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6fb6:	3901      	subs	r1, #1
   b6fb8:	3b10      	subs	r3, #16
   b6fba:	e7f1      	b.n	b6fa0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b6fbc:	04001001 	.word	0x04001001

000b6fc0 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b6fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b6fc2:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b6fc4:	4604      	mov	r4, r0
	if (offset == 0) {
   b6fc6:	b912      	cbnz	r2, b6fce <_ZN10JsonParser5parseEv+0xe>
		return false;
   b6fc8:	2000      	movs	r0, #0
}
   b6fca:	b003      	add	sp, #12
   b6fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b6fce:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b6fd0:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b6fd4:	b1ab      	cbz	r3, b7002 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b6fd6:	2100      	movs	r1, #0
	parser->toknext = 0;
   b6fd8:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b6fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b6fe0:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6fe2:	69c1      	ldr	r1, [r0, #28]
   b6fe4:	9100      	str	r1, [sp, #0]
   b6fe6:	6841      	ldr	r1, [r0, #4]
   b6fe8:	4630      	mov	r0, r6
   b6fea:	f7ff fe0d 	bl	b6c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b6fee:	1c43      	adds	r3, r0, #1
   b6ff0:	d128      	bne.n	b7044 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b6ff2:	7c25      	ldrb	r5, [r4, #16]
   b6ff4:	2d00      	cmp	r5, #0
   b6ff6:	d1e7      	bne.n	b6fc8 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b6ff8:	6960      	ldr	r0, [r4, #20]
   b6ffa:	f002 ff13 	bl	b9e24 <free>
			tokens = 0;
   b6ffe:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b7000:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b7002:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b7004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7008:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b700c:	68e2      	ldr	r2, [r4, #12]
   b700e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7010:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7012:	9500      	str	r5, [sp, #0]
   b7014:	462b      	mov	r3, r5
   b7016:	4630      	mov	r0, r6
   b7018:	f7ff fdf6 	bl	b6c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b701c:	2800      	cmp	r0, #0
   b701e:	dbd3      	blt.n	b6fc8 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7020:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b7022:	d017      	beq.n	b7054 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7024:	0100      	lsls	r0, r0, #4
   b7026:	f002 fef5 	bl	b9e14 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b702a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b702c:	6160      	str	r0, [r4, #20]
   b702e:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7030:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b7032:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7036:	68e2      	ldr	r2, [r4, #12]
   b7038:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b703a:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b703c:	4630      	mov	r0, r6
   b703e:	f7ff fde3 	bl	b6c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b7042:	e001      	b.n	b7048 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b7044:	2800      	cmp	r0, #0
   b7046:	dbbf      	blt.n	b6fc8 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7048:	6963      	ldr	r3, [r4, #20]
   b704a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b704e:	61a0      	str	r0, [r4, #24]
	return true;
   b7050:	2001      	movs	r0, #1
   b7052:	e7ba      	b.n	b6fca <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b7054:	6963      	ldr	r3, [r4, #20]
   b7056:	61a3      	str	r3, [r4, #24]
   b7058:	e7fa      	b.n	b7050 <_ZN10JsonParser5parseEv+0x90>

000b705a <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b705a:	4770      	bx	lr

000b705c <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b705c:	4770      	bx	lr

000b705e <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b705e:	b510      	push	{r4, lr}
}
   b7060:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b7062:	4604      	mov	r4, r0
}
   b7064:	f7fd f81b 	bl	b409e <_ZdlPvj>
   b7068:	4620      	mov	r0, r4
   b706a:	bd10      	pop	{r4, pc}

000b706c <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b706c:	b510      	push	{r4, lr}
}
   b706e:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b7070:	4604      	mov	r4, r0
}
   b7072:	f7fd f814 	bl	b409e <_ZdlPvj>
   b7076:	4620      	mov	r0, r4
   b7078:	bd10      	pop	{r4, pc}
	...

000b707c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b707c:	b510      	push	{r4, lr}
   b707e:	4b05      	ldr	r3, [pc, #20]	; (b7094 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b7080:	4604      	mov	r4, r0
   b7082:	f840 3b1c 	str.w	r3, [r0], #28
   b7086:	f005 f8eb 	bl	bc260 <_ZN6StringD1Ev>
   b708a:	1d20      	adds	r0, r4, #4
   b708c:	f005 f8e8 	bl	bc260 <_ZN6StringD1Ev>
}
   b7090:	4620      	mov	r0, r4
   b7092:	bd10      	pop	{r4, pc}
   b7094:	000bede8 	.word	0x000bede8

000b7098 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7098:	b510      	push	{r4, lr}
   b709a:	4604      	mov	r4, r0
}
   b709c:	f7ff ffee 	bl	b707c <_ZN22LocalTimePosixTimezoneD1Ev>
   b70a0:	4620      	mov	r0, r4
   b70a2:	2158      	movs	r1, #88	; 0x58
   b70a4:	f7fc fffb 	bl	b409e <_ZdlPvj>
   b70a8:	4620      	mov	r0, r4
   b70aa:	bd10      	pop	{r4, pc}

000b70ac <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b70ac:	b510      	push	{r4, lr}
   b70ae:	4b04      	ldr	r3, [pc, #16]	; (b70c0 <_ZN9LocalTimeD1Ev+0x14>)
   b70b0:	4604      	mov	r4, r0
   b70b2:	f840 3b04 	str.w	r3, [r0], #4
   b70b6:	f7ff ffe1 	bl	b707c <_ZN22LocalTimePosixTimezoneD1Ev>
   b70ba:	4620      	mov	r0, r4
   b70bc:	bd10      	pop	{r4, pc}
   b70be:	bf00      	nop
   b70c0:	000bedb8 	.word	0x000bedb8

000b70c4 <_ZN9LocalTimeD0Ev>:
   b70c4:	b510      	push	{r4, lr}
   b70c6:	4604      	mov	r4, r0
   b70c8:	f7ff fff0 	bl	b70ac <_ZN9LocalTimeD1Ev>
   b70cc:	4620      	mov	r0, r4
   b70ce:	2160      	movs	r1, #96	; 0x60
   b70d0:	f7fc ffe5 	bl	b409e <_ZdlPvj>
   b70d4:	4620      	mov	r0, r4
   b70d6:	bd10      	pop	{r4, pc}

000b70d8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b70d8:	f020 0302 	bic.w	r3, r0, #2
   b70dc:	2b01      	cmp	r3, #1
   b70de:	d003      	beq.n	b70e8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b70e0:	1f43      	subs	r3, r0, #5
   b70e2:	4258      	negs	r0, r3
   b70e4:	4158      	adcs	r0, r3
   b70e6:	4770      	bx	lr
   b70e8:	4618      	mov	r0, r3
   b70ea:	4770      	bx	lr

000b70ec <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b70ec:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b70f0:	7103      	strb	r3, [r0, #4]
   b70f2:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b70f6:	7143      	strb	r3, [r0, #5]
   b70f8:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b70fc:	7183      	strb	r3, [r0, #6]
   b70fe:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b7102:	71c3      	strb	r3, [r0, #7]
   b7104:	4770      	bx	lr

000b7106 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b7106:	b538      	push	{r3, r4, r5, lr}
   b7108:	4604      	mov	r4, r0
   b710a:	460d      	mov	r5, r1
   b710c:	3004      	adds	r0, #4
   b710e:	3104      	adds	r1, #4
   b7110:	f005 f92d 	bl	bc36e <_ZN6StringaSERKS_>
   b7114:	f105 0114 	add.w	r1, r5, #20
   b7118:	f104 0014 	add.w	r0, r4, #20
   b711c:	f7ff ffe6 	bl	b70ec <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7120:	f105 011c 	add.w	r1, r5, #28
   b7124:	f104 001c 	add.w	r0, r4, #28
   b7128:	f005 f921 	bl	bc36e <_ZN6StringaSERKS_>
   b712c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b7130:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7134:	f7ff ffda 	bl	b70ec <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b7138:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b713c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b7140:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b7144:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b7148:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b714c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b7150:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b7154:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b7158:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b715c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7160:	f7ff ffc4 	bl	b70ec <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7164:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b7168:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b716c:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b7170:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b7174:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b7178:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b717c:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b7180:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b7184:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b7188:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b718c:	f7ff ffae 	bl	b70ec <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b7190:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b7194:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b7198:	bd38      	pop	{r3, r4, r5, pc}

000b719a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b719a:	680b      	ldr	r3, [r1, #0]
   b719c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b719e:	684b      	ldr	r3, [r1, #4]
   b71a0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b71a2:	b113      	cbz	r3, b71aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b71a4:	685a      	ldr	r2, [r3, #4]
   b71a6:	3201      	adds	r2, #1
   b71a8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b71aa:	4770      	bx	lr

000b71ac <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b71ac:	4a02      	ldr	r2, [pc, #8]	; (b71b8 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b71ae:	6002      	str	r2, [r0, #0]
   b71b0:	684a      	ldr	r2, [r1, #4]
   b71b2:	6042      	str	r2, [r0, #4]
   b71b4:	4770      	bx	lr
   b71b6:	bf00      	nop
   b71b8:	000bedc8 	.word	0x000bedc8

000b71bc <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b71bc:	4a02      	ldr	r2, [pc, #8]	; (b71c8 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b71be:	6002      	str	r2, [r0, #0]
   b71c0:	2200      	movs	r2, #0
   b71c2:	6042      	str	r2, [r0, #4]
}
   b71c4:	4770      	bx	lr
   b71c6:	bf00      	nop
   b71c8:	000bedc8 	.word	0x000bedc8

000b71cc <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b71cc:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b71ce:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b71d0:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b71d2:	8083      	strh	r3, [r0, #4]
   b71d4:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b71d6:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b71d8:	ab05      	add	r3, sp, #20
   b71da:	9300      	str	r3, [sp, #0]
   b71dc:	4913      	ldr	r1, [pc, #76]	; (b722c <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b71de:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b71e0:	ab04      	add	r3, sp, #16
   b71e2:	aa03      	add	r2, sp, #12
   b71e4:	4628      	mov	r0, r5
   b71e6:	f002 fe35 	bl	b9e54 <sscanf>
   b71ea:	2803      	cmp	r0, #3
   b71ec:	d107      	bne.n	b71fe <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b71ee:	9b03      	ldr	r3, [sp, #12]
   b71f0:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b71f2:	9b04      	ldr	r3, [sp, #16]
   b71f4:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b71f6:	9b05      	ldr	r3, [sp, #20]
   b71f8:	71a3      	strb	r3, [r4, #6]
}
   b71fa:	b007      	add	sp, #28
   b71fc:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b71fe:	490c      	ldr	r1, [pc, #48]	; (b7230 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b7200:	ab04      	add	r3, sp, #16
   b7202:	aa03      	add	r2, sp, #12
   b7204:	4628      	mov	r0, r5
   b7206:	f002 fe25 	bl	b9e54 <sscanf>
   b720a:	2802      	cmp	r0, #2
   b720c:	d104      	bne.n	b7218 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b720e:	9b03      	ldr	r3, [sp, #12]
   b7210:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7212:	9b04      	ldr	r3, [sp, #16]
   b7214:	7163      	strb	r3, [r4, #5]
   b7216:	e7f0      	b.n	b71fa <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b7218:	4906      	ldr	r1, [pc, #24]	; (b7234 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b721a:	aa03      	add	r2, sp, #12
   b721c:	4628      	mov	r0, r5
   b721e:	f002 fe19 	bl	b9e54 <sscanf>
   b7222:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b7224:	bf04      	itt	eq
   b7226:	9b03      	ldreq	r3, [sp, #12]
   b7228:	7123      	strbeq	r3, [r4, #4]
}
   b722a:	e7e6      	b.n	b71fa <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b722c:	000bed88 	.word	0x000bed88
   b7230:	000bed8b 	.word	0x000bed8b
   b7234:	000bf2ff 	.word	0x000bf2ff

000b7238 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b7238:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b723c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7240:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b7244:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7246:	bfb8      	it	lt
   b7248:	4808      	ldrlt	r0, [pc, #32]	; (b726c <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b724a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b724e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b7252:	bfbd      	ittte	lt
   b7254:	fb00 3002 	mlalt	r0, r0, r2, r3
   b7258:	1840      	addlt	r0, r0, r1
   b725a:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b725c:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b7260:	bfa4      	itt	ge
   b7262:	fb00 3002 	mlage	r0, r0, r2, r3
   b7266:	1840      	addge	r0, r0, r1
}
   b7268:	4770      	bx	lr
   b726a:	bf00      	nop
   b726c:	fffff1f0 	.word	0xfffff1f0

000b7270 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7270:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b7274:	b943      	cbnz	r3, b7288 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b7276:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b727a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b727c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7280:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b7282:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b7286:	600b      	str	r3, [r1, #0]
}
   b7288:	4770      	bx	lr

000b728a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b728a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b728e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7290:	b9b3      	cbnz	r3, b72c0 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b7292:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b7296:	688c      	ldr	r4, [r1, #8]
   b7298:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b729a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b729e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b72a0:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b72a4:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b72a6:	bfb5      	itete	lt
   b72a8:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b72aa:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b72ac:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b72ae:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b72b0:	bfb5      	itete	lt
   b72b2:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b72b6:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b72ba:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b72bc:	189b      	addge	r3, r3, r2
   b72be:	600b      	str	r3, [r1, #0]
}
   b72c0:	bd30      	pop	{r4, r5, pc}
	...

000b72c4 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4a05      	ldr	r2, [pc, #20]	; (b72dc <_ZN15LocalTimeChangeC1Ev+0x18>)
   b72c8:	6002      	str	r2, [r0, #0]
   b72ca:	2200      	movs	r2, #0
   b72cc:	4603      	mov	r3, r0
   b72ce:	6042      	str	r2, [r0, #4]
   b72d0:	3008      	adds	r0, #8
   b72d2:	f7ff ff73 	bl	b71bc <_ZN12LocalTimeHMSC1Ev>
}
   b72d6:	4618      	mov	r0, r3
   b72d8:	bd08      	pop	{r3, pc}
   b72da:	bf00      	nop
   b72dc:	000bedd8 	.word	0x000bedd8

000b72e0 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b72e0:	2300      	movs	r3, #0
   b72e2:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b72e4:	8183      	strh	r3, [r0, #12]
   b72e6:	7383      	strb	r3, [r0, #14]
}
   b72e8:	4770      	bx	lr
	...

000b72ec <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b72ec:	b530      	push	{r4, r5, lr}
   b72ee:	4604      	mov	r4, r0
   b72f0:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b72f2:	460d      	mov	r5, r1
   b72f4:	b111      	cbz	r1, b72fc <_ZN15LocalTimeChange5parseEPKc+0x10>
   b72f6:	780b      	ldrb	r3, [r1, #0]
   b72f8:	2b4d      	cmp	r3, #77	; 0x4d
   b72fa:	d005      	beq.n	b7308 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b72fc:	4620      	mov	r0, r4
}
   b72fe:	b007      	add	sp, #28
   b7300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b7304:	f7ff bfec 	b.w	b72e0 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b7308:	ab05      	add	r3, sp, #20
   b730a:	9300      	str	r3, [sp, #0]
   b730c:	4911      	ldr	r1, [pc, #68]	; (b7354 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b730e:	ab04      	add	r3, sp, #16
   b7310:	aa03      	add	r2, sp, #12
   b7312:	4628      	mov	r0, r5
   b7314:	f002 fd9e 	bl	b9e54 <sscanf>
   b7318:	2803      	cmp	r0, #3
   b731a:	d116      	bne.n	b734a <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b731c:	9b03      	ldr	r3, [sp, #12]
   b731e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b7320:	9b04      	ldr	r3, [sp, #16]
   b7322:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b7324:	9b05      	ldr	r3, [sp, #20]
   b7326:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b7328:	212f      	movs	r1, #47	; 0x2f
   b732a:	4628      	mov	r0, r5
   b732c:	f006 fd4a 	bl	bddc4 <strchr>
        if (cp) {
   b7330:	b140      	cbz	r0, b7344 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b7332:	1c41      	adds	r1, r0, #1
   b7334:	f104 0008 	add.w	r0, r4, #8
   b7338:	f7ff ff48 	bl	b71cc <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b733c:	2301      	movs	r3, #1
   b733e:	71e3      	strb	r3, [r4, #7]
}
   b7340:	b007      	add	sp, #28
   b7342:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b7344:	81a0      	strh	r0, [r4, #12]
   b7346:	73a0      	strb	r0, [r4, #14]
}
   b7348:	e7f8      	b.n	b733c <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b734a:	4620      	mov	r0, r4
   b734c:	f7ff ffc8 	bl	b72e0 <_ZN15LocalTimeChange5clearEv>
   b7350:	e7f6      	b.n	b7340 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b7352:	bf00      	nop
   b7354:	000beda3 	.word	0x000beda3

000b7358 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7358:	4b10      	ldr	r3, [pc, #64]	; (b739c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b735a:	4911      	ldr	r1, [pc, #68]	; (b73a0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b735c:	b510      	push	{r4, lr}
   b735e:	4604      	mov	r4, r0
   b7360:	f840 3b04 	str.w	r3, [r0], #4
   b7364:	f004 ffc7 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b7368:	f104 0014 	add.w	r0, r4, #20
   b736c:	f7ff ff26 	bl	b71bc <_ZN12LocalTimeHMSC1Ev>
   b7370:	490b      	ldr	r1, [pc, #44]	; (b73a0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7372:	f104 001c 	add.w	r0, r4, #28
   b7376:	f004 ffbe 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b737a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b737e:	f7ff ff1d 	bl	b71bc <_ZN12LocalTimeHMSC1Ev>
   b7382:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7386:	f7ff ff9d 	bl	b72c4 <_ZN15LocalTimeChangeC1Ev>
   b738a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b738e:	f7ff ff99 	bl	b72c4 <_ZN15LocalTimeChangeC1Ev>
   b7392:	2300      	movs	r3, #0
   b7394:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7398:	4620      	mov	r0, r4
   b739a:	bd10      	pop	{r4, pc}
   b739c:	000bede8 	.word	0x000bede8
   b73a0:	000bf5cd 	.word	0x000bf5cd

000b73a4 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b73a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b73a8:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b73aa:	4608      	mov	r0, r1
   b73ac:	f006 fd34 	bl	bde18 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b73b0:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b73b2:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b73b4:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b73b6:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b73ba:	493f      	ldr	r1, [pc, #252]	; (b74b8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b73bc:	9801      	ldr	r0, [sp, #4]
   b73be:	aa01      	add	r2, sp, #4
   b73c0:	f006 fdb2 	bl	bdf28 <strtok_r>
   b73c4:	4601      	mov	r1, r0
   b73c6:	2800      	cmp	r0, #0
   b73c8:	d062      	beq.n	b7490 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b73ca:	2d01      	cmp	r5, #1
   b73cc:	f105 0301 	add.w	r3, r5, #1
   b73d0:	d053      	beq.n	b747a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b73d2:	2d02      	cmp	r5, #2
   b73d4:	d056      	beq.n	b7484 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b73d6:	2d00      	cmp	r5, #0
   b73d8:	d146      	bne.n	b7468 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b73da:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b73dc:	f892 9000 	ldrb.w	r9, [r2]
   b73e0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b73e4:	4615      	mov	r5, r2
   b73e6:	4617      	mov	r7, r2
   b73e8:	f102 0201 	add.w	r2, r2, #1
   b73ec:	d8f6      	bhi.n	b73dc <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b73ee:	2200      	movs	r2, #0
   b73f0:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b73f2:	f104 001c 	add.w	r0, r4, #28
   b73f6:	f004 ffdc 	bl	bc3b2 <_ZN6StringaSEPKc>
                valid = true;
   b73fa:	2201      	movs	r2, #1
                *cp = save2;
   b73fc:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b7400:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b7404:	782a      	ldrb	r2, [r5, #0]
   b7406:	b36a      	cbz	r2, b7464 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b7408:	f897 a000 	ldrb.w	sl, [r7]
   b740c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b7410:	2a3f      	cmp	r2, #63	; 0x3f
   b7412:	46b9      	mov	r9, r7
   b7414:	46bb      	mov	fp, r7
   b7416:	f107 0701 	add.w	r7, r7, #1
   b741a:	d9f5      	bls.n	b7408 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b741c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b741e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b7422:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b7426:	4629      	mov	r1, r5
   b7428:	4638      	mov	r0, r7
   b742a:	f7ff fecf 	bl	b71cc <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b742e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b7432:	f1ba 0f00 	cmp.w	sl, #0
   b7436:	d015      	beq.n	b7464 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b7438:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b743a:	f81b ab01 	ldrb.w	sl, [fp], #1
   b743e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b7442:	d8f9      	bhi.n	b7438 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b7444:	2200      	movs	r2, #0
   b7446:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b7448:	4649      	mov	r1, r9
   b744a:	1d20      	adds	r0, r4, #4
   b744c:	f004 ffb1 	bl	bc3b2 <_ZN6StringaSEPKc>
                        *cp = save2;
   b7450:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b7454:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7458:	f1ba 0f00 	cmp.w	sl, #0
   b745c:	d006      	beq.n	b746c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b745e:	4629      	mov	r1, r5
   b7460:	f7ff feb4 	bl	b71cc <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b7464:	2501      	movs	r5, #1
   b7466:	e7a8      	b.n	b73ba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7468:	461d      	mov	r5, r3
   b746a:	e7a6      	b.n	b73ba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b746c:	4639      	mov	r1, r7
   b746e:	f7ff fe3d 	bl	b70ec <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b7472:	7e23      	ldrb	r3, [r4, #24]
   b7474:	3b01      	subs	r3, #1
   b7476:	7623      	strb	r3, [r4, #24]
   b7478:	e7f4      	b.n	b7464 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b747a:	4640      	mov	r0, r8
   b747c:	f7ff ff36 	bl	b72ec <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7480:	2502      	movs	r5, #2
   b7482:	e79a      	b.n	b73ba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b7484:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7488:	f7ff ff30 	bl	b72ec <_ZN15LocalTimeChange5parseEPKc>
                break;
   b748c:	2503      	movs	r5, #3
   b748e:	e794      	b.n	b73ba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b7490:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b7494:	b143      	cbz	r3, b74a8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b7496:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b749a:	b92a      	cbnz	r2, b74a8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b749c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b74a0:	f7ff ff1e 	bl	b72e0 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b74a4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b74a8:	4630      	mov	r0, r6
   b74aa:	f002 fcbb 	bl	b9e24 <free>

    return valid;
}
   b74ae:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b74b2:	b003      	add	sp, #12
   b74b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b74b8:	000bedad 	.word	0x000bedad

000b74bc <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b74bc:	b538      	push	{r3, r4, r5, lr}
   b74be:	4b13      	ldr	r3, [pc, #76]	; (b750c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b74c0:	4604      	mov	r4, r0
   b74c2:	460d      	mov	r5, r1
   b74c4:	f840 3b04 	str.w	r3, [r0], #4
   b74c8:	4911      	ldr	r1, [pc, #68]	; (b7510 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b74ca:	f004 ff14 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b74ce:	f104 0014 	add.w	r0, r4, #20
   b74d2:	f7ff fe73 	bl	b71bc <_ZN12LocalTimeHMSC1Ev>
   b74d6:	490e      	ldr	r1, [pc, #56]	; (b7510 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b74d8:	f104 001c 	add.w	r0, r4, #28
   b74dc:	f004 ff0b 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b74e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b74e4:	f7ff fe6a 	bl	b71bc <_ZN12LocalTimeHMSC1Ev>
   b74e8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b74ec:	f7ff feea 	bl	b72c4 <_ZN15LocalTimeChangeC1Ev>
   b74f0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b74f4:	f7ff fee6 	bl	b72c4 <_ZN15LocalTimeChangeC1Ev>
   b74f8:	2300      	movs	r3, #0
   b74fa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b74fe:	4629      	mov	r1, r5
   b7500:	4620      	mov	r0, r4
   b7502:	f7ff ff4f 	bl	b73a4 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b7506:	4620      	mov	r0, r4
   b7508:	bd38      	pop	{r3, r4, r5, pc}
   b750a:	bf00      	nop
   b750c:	000bede8 	.word	0x000bede8
   b7510:	000bf5cd 	.word	0x000bf5cd

000b7514 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b7514:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7516:	4d09      	ldr	r5, [pc, #36]	; (b753c <_ZN9LocalTime8instanceEv+0x28>)
   b7518:	682b      	ldr	r3, [r5, #0]
   b751a:	b963      	cbnz	r3, b7536 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b751c:	2060      	movs	r0, #96	; 0x60
   b751e:	f7fc fdba 	bl	b4096 <_Znwj>
   b7522:	4604      	mov	r4, r0
   b7524:	b130      	cbz	r0, b7534 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b7526:	4b06      	ldr	r3, [pc, #24]	; (b7540 <_ZN9LocalTime8instanceEv+0x2c>)
   b7528:	f840 3b04 	str.w	r3, [r0], #4
   b752c:	f7ff ff14 	bl	b7358 <_ZN22LocalTimePosixTimezoneC1Ev>
   b7530:	2364      	movs	r3, #100	; 0x64
   b7532:	65e3      	str	r3, [r4, #92]	; 0x5c
   b7534:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b7536:	6828      	ldr	r0, [r5, #0]
   b7538:	bd38      	pop	{r3, r4, r5, pc}
   b753a:	bf00      	nop
   b753c:	2003e5e4 	.word	0x2003e5e4
   b7540:	000bedb8 	.word	0x000bedb8

000b7544 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b7544:	f002 bcde 	b.w	b9f04 <mktime>

000b7548 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b7548:	3901      	subs	r1, #1
   b754a:	290b      	cmp	r1, #11
   b754c:	d815      	bhi.n	b757a <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b754e:	e8df f001 	tbb	[pc, r1]
   b7552:	0816      	.short	0x0816
   b7554:	06160616 	.word	0x06160616
   b7558:	16061616 	.word	0x16061616
   b755c:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b755e:	201e      	movs	r0, #30
   b7560:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b7562:	0783      	lsls	r3, r0, #30
   b7564:	d10d      	bne.n	b7582 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b7566:	2364      	movs	r3, #100	; 0x64
   b7568:	fb90 f2f3 	sdiv	r2, r0, r3
   b756c:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b7570:	2800      	cmp	r0, #0
   b7572:	bf0c      	ite	eq
   b7574:	201c      	moveq	r0, #28
   b7576:	201d      	movne	r0, #29
   b7578:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b757a:	2000      	movs	r0, #0
   b757c:	4770      	bx	lr
            return 31;
   b757e:	201f      	movs	r0, #31
   b7580:	4770      	bx	lr
                return 28;
   b7582:	201c      	movs	r0, #28
}
   b7584:	4770      	bx	lr

000b7586 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b7588:	2301      	movs	r3, #1
   b758a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b758c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7590:	3b01      	subs	r3, #1
   b7592:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7594:	2300      	movs	r3, #0
   b7596:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b759a:	4606      	mov	r6, r0
   b759c:	460c      	mov	r4, r1
   b759e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b75a0:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b75a2:	4620      	mov	r0, r4
   b75a4:	f7ff ffce 	bl	b7544 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b75a8:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b75ac:	69a2      	ldr	r2, [r4, #24]
   b75ae:	429a      	cmp	r2, r3
   b75b0:	d003      	beq.n	b75ba <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b75b2:	68e3      	ldr	r3, [r4, #12]
   b75b4:	3301      	adds	r3, #1
   b75b6:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b75b8:	e7f3      	b.n	b75a2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b75ba:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b75be:	2d01      	cmp	r5, #1
   b75c0:	d013      	beq.n	b75ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b75c2:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b75c4:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b75c6:	3d01      	subs	r5, #1
   b75c8:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b75cc:	441d      	add	r5, r3
   b75ce:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b75d0:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b75d4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b75d8:	f7ff ffb6 	bl	b7548 <_ZN9LocalTime14lastDayOfMonthEii>
   b75dc:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b75de:	bfc4      	itt	gt
   b75e0:	3d07      	subgt	r5, #7
   b75e2:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b75e4:	4620      	mov	r0, r4
   b75e6:	f7ff ffad 	bl	b7544 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b75ea:	4621      	mov	r1, r4
   b75ec:	f106 0008 	add.w	r0, r6, #8
   b75f0:	f7ff fe3e 	bl	b7270 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b75f4:	4638      	mov	r0, r7
   b75f6:	f7ff fe48 	bl	b728a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b75fa:	4620      	mov	r0, r4
}
   b75fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b7600:	f002 bc80 	b.w	b9f04 <mktime>

000b7604 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b7604:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b7606:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b760a:	b085      	sub	sp, #20
   b760c:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b760e:	b92b      	cbnz	r3, b761c <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b7610:	f7ff ff80 	bl	b7514 <_ZN9LocalTime8instanceEv>
   b7614:	1d01      	adds	r1, r0, #4
   b7616:	1d20      	adds	r0, r4, #4
   b7618:	f7ff fd75 	bl	b7106 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b761c:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b7620:	2b00      	cmp	r3, #0
   b7622:	d065      	beq.n	b76f0 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b7624:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b7628:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b762c:	4639      	mov	r1, r7
   b762e:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b7630:	463e      	mov	r6, r7
   b7632:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7636:	f002 fc55 	bl	b9ee4 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b763a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b763c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b7640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7642:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7646:	6833      	ldr	r3, [r6, #0]
   b7648:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b764a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b764e:	a802      	add	r0, sp, #8
   b7650:	f7ff fdac 	bl	b71ac <_ZN12LocalTimeHMSC1ERKS_>
   b7654:	aa02      	add	r2, sp, #8
   b7656:	4639      	mov	r1, r7
   b7658:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b765c:	f7ff ff93 	bl	b7586 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b7660:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b7664:	f104 0118 	add.w	r1, r4, #24
   b7668:	a802      	add	r0, sp, #8
   b766a:	f7ff fd9f 	bl	b71ac <_ZN12LocalTimeHMSC1ERKS_>
   b766e:	aa02      	add	r2, sp, #8
   b7670:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b7674:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b7678:	f7ff ff85 	bl	b7586 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b767c:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b7680:	4286      	cmp	r6, r0
   b7682:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b7686:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b768a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b768e:	da23      	bge.n	b76d8 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b7690:	42b2      	cmp	r2, r6
   b7692:	eb73 0505 	sbcs.w	r5, r3, r5
   b7696:	da19      	bge.n	b76cc <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b7698:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b769a:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b769c:	6820      	ldr	r0, [r4, #0]
   b769e:	f7ff fd1b 	bl	b70d8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b76a2:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b76a6:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b76aa:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b76ac:	bb10      	cbnz	r0, b76f4 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b76ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b76b2:	f7ff fdc1 	bl	b7238 <_ZNK12LocalTimeHMS9toSecondsEv>
   b76b6:	1a2d      	subs	r5, r5, r0
   b76b8:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b76bc:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b76c0:	9901      	ldr	r1, [sp, #4]
   b76c2:	a802      	add	r0, sp, #8
   b76c4:	f002 fc0e 	bl	b9ee4 <localtime_r>
}
   b76c8:	b005      	add	sp, #20
   b76ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b76cc:	4282      	cmp	r2, r0
   b76ce:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b76d0:	bfb4      	ite	lt
   b76d2:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b76d4:	2302      	movge	r3, #2
   b76d6:	e7e0      	b.n	b769a <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b76d8:	4282      	cmp	r2, r0
   b76da:	eb73 0101 	sbcs.w	r1, r3, r1
   b76de:	da01      	bge.n	b76e4 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b76e0:	2303      	movs	r3, #3
   b76e2:	e7da      	b.n	b769a <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b76e4:	42b2      	cmp	r2, r6
   b76e6:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b76e8:	bfb4      	ite	lt
   b76ea:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b76ec:	2305      	movge	r3, #5
   b76ee:	e7d4      	b.n	b769a <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b76f0:	2306      	movs	r3, #6
   b76f2:	e7d2      	b.n	b769a <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b76f4:	f104 0018 	add.w	r0, r4, #24
   b76f8:	e7db      	b.n	b76b2 <_ZN16LocalTimeConvert7convertEv+0xae>

000b76fa <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b76fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b76fc:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b76fe:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7700:	4668      	mov	r0, sp
   b7702:	f7ff fd4a 	bl	b719a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b7706:	466a      	mov	r2, sp
   b7708:	4629      	mov	r1, r5
   b770a:	4620      	mov	r0, r4
   b770c:	f003 faae 	bl	bac6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7710:	a801      	add	r0, sp, #4
   b7712:	f7fc fe4b 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7716:	4620      	mov	r0, r4
   b7718:	b003      	add	sp, #12
   b771a:	bd30      	pop	{r4, r5, pc}

000b771c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b771c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b771e:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7720:	4604      	mov	r4, r0
   b7722:	4668      	mov	r0, sp
   b7724:	f7ff fd39 	bl	b719a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7728:	466a      	mov	r2, sp
   b772a:	4629      	mov	r1, r5
   b772c:	4620      	mov	r0, r4
   b772e:	f003 fa79 	bl	bac24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7732:	a801      	add	r0, sp, #4
   b7734:	f7fc fe3a 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7738:	4620      	mov	r0, r4
   b773a:	b003      	add	sp, #12
   b773c:	bd30      	pop	{r4, r5, pc}

000b773e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b773e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b7740:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7742:	4604      	mov	r4, r0
   b7744:	4668      	mov	r0, sp
   b7746:	f7ff fd28 	bl	b719a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b774a:	466a      	mov	r2, sp
   b774c:	4629      	mov	r1, r5
   b774e:	4620      	mov	r0, r4
   b7750:	f003 fa11 	bl	bab76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7754:	a801      	add	r0, sp, #4
   b7756:	f7fc fe29 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b775a:	4620      	mov	r0, r4
   b775c:	b003      	add	sp, #12
   b775e:	bd30      	pop	{r4, r5, pc}

000b7760 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b7760:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7762:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b7764:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b7768:	2101      	movs	r1, #1
   b776a:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b776e:	4770      	bx	lr

000b7770 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7770:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b7772:	6842      	ldr	r2, [r0, #4]
   b7774:	4603      	mov	r3, r0
   b7776:	1054      	asrs	r4, r2, #1
   b7778:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b777c:	07d2      	lsls	r2, r2, #31
   b777e:	bf48      	it	mi
   b7780:	590a      	ldrmi	r2, [r1, r4]
   b7782:	681b      	ldr	r3, [r3, #0]
      }
   b7784:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7788:	bf48      	it	mi
   b778a:	58d3      	ldrmi	r3, [r2, r3]
   b778c:	4718      	bx	r3

000b778e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b778e:	2a01      	cmp	r2, #1
   b7790:	d102      	bne.n	b7798 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7792:	6001      	str	r1, [r0, #0]
      }
   b7794:	2000      	movs	r0, #0
   b7796:	4770      	bx	lr
	  switch (__op)
   b7798:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b779a:	bf04      	itt	eq
   b779c:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b77a0:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b77a4:	e7f6      	b.n	b7794 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b77a6 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b77a6:	2a01      	cmp	r2, #1
   b77a8:	d102      	bne.n	b77b0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b77aa:	6001      	str	r1, [r0, #0]
      }
   b77ac:	2000      	movs	r0, #0
   b77ae:	4770      	bx	lr
	  switch (__op)
   b77b0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b77b2:	bf04      	itt	eq
   b77b4:	680b      	ldreq	r3, [r1, #0]
   b77b6:	6003      	streq	r3, [r0, #0]
	      break;
   b77b8:	e7f8      	b.n	b77ac <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b77ba <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b77ba:	b510      	push	{r4, lr}
   b77bc:	4604      	mov	r4, r0
   b77be:	b08a      	sub	sp, #40	; 0x28
   b77c0:	4608      	mov	r0, r1
    attr.flags = 0;
   b77c2:	f04f 0c20 	mov.w	ip, #32
   b77c6:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b77c8:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b77cc:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b77d0:	460b      	mov	r3, r1
   b77d2:	aa02      	add	r2, sp, #8
   b77d4:	6821      	ldr	r1, [r4, #0]
   b77d6:	f002 f9b9 	bl	b9b4c <log_message_v>
}
   b77da:	b00a      	add	sp, #40	; 0x28
   b77dc:	bd10      	pop	{r4, pc}

000b77de <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b77de:	b40e      	push	{r1, r2, r3}
   b77e0:	b503      	push	{r0, r1, lr}
   b77e2:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b77e4:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b77e6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b77ea:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b77ec:	f7ff ffe5 	bl	b77ba <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b77f0:	b002      	add	sp, #8
   b77f2:	f85d eb04 	ldr.w	lr, [sp], #4
   b77f6:	b003      	add	sp, #12
   b77f8:	4770      	bx	lr

000b77fa <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b77fa:	b40e      	push	{r1, r2, r3}
   b77fc:	b503      	push	{r0, r1, lr}
   b77fe:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b7800:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b7802:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7806:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b7808:	f7ff ffd7 	bl	b77ba <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b780c:	b002      	add	sp, #8
   b780e:	f85d eb04 	ldr.w	lr, [sp], #4
   b7812:	b003      	add	sp, #12
   b7814:	4770      	bx	lr

000b7816 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b7816:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b7818:	f001 bf58 	b.w	b96cc <os_mutex_recursive_lock>

000b781c <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b781c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b7820:	4601      	mov	r1, r0
    if (stateHandler) {
   b7822:	b11b      	cbz	r3, b782c <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7824:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b7828:	30c0      	adds	r0, #192	; 0xc0
   b782a:	4718      	bx	r3
}
   b782c:	4770      	bx	lr
	...

000b7830 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b7832:	4d12      	ldr	r5, [pc, #72]	; (b787c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7834:	4608      	mov	r0, r1
        eventData = "";
   b7836:	2a00      	cmp	r2, #0
   b7838:	bf18      	it	ne
   b783a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b783c:	460e      	mov	r6, r1
   b783e:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7840:	f006 fb07 	bl	bde52 <strlen>
   b7844:	2840      	cmp	r0, #64	; 0x40
   b7846:	d816      	bhi.n	b7876 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b7848:	4628      	mov	r0, r5
   b784a:	f006 fb02 	bl	bde52 <strlen>
   b784e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b7852:	d810      	bhi.n	b7876 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b7854:	3043      	adds	r0, #67	; 0x43
   b7856:	f7fc fc20 	bl	b409a <_Znaj>
    if (event) {
   b785a:	4604      	mov	r4, r0
   b785c:	b148      	cbz	r0, b7872 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b785e:	4631      	mov	r1, r6
        event->flags = flags;
   b7860:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b7864:	f006 facf 	bl	bde06 <strcpy>
        strcpy(event->eventData, eventData);
   b7868:	4629      	mov	r1, r5
   b786a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b786e:	f006 faca 	bl	bde06 <strcpy>
}
   b7872:	4620      	mov	r0, r4
   b7874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b7876:	2400      	movs	r4, #0
   b7878:	e7fb      	b.n	b7872 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b787a:	bf00      	nop
   b787c:	000bf5cd 	.word	0x000bf5cd

000b7880 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7880:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7882:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7884:	460a      	mov	r2, r1
   b7886:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7888:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b788a:	1d01      	adds	r1, r0, #4
   b788c:	a808      	add	r0, sp, #32
   b788e:	f000 fe41 	bl	b8514 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b7892:	9808      	ldr	r0, [sp, #32]
   b7894:	2100      	movs	r1, #0
   b7896:	f006 fbf1 	bl	be07c <open>
   b789a:	4605      	mov	r5, r0
   b789c:	a808      	add	r0, sp, #32
   b789e:	f004 fcdf 	bl	bc260 <_ZN6StringD1Ev>
    if (fd) {
   b78a2:	2d00      	cmp	r5, #0
   b78a4:	d060      	beq.n	b7968 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b78a6:	a908      	add	r1, sp, #32
   b78a8:	4628      	mov	r0, r5
   b78aa:	f006 fbd5 	bl	be058 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b78ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b78b0:	492e      	ldr	r1, [pc, #184]	; (b796c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b78b2:	482f      	ldr	r0, [pc, #188]	; (b7970 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b78b4:	4632      	mov	r2, r6
   b78b6:	f7ff ff92 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b78ba:	2200      	movs	r2, #0
   b78bc:	4611      	mov	r1, r2
   b78be:	4628      	mov	r0, r5
   b78c0:	f006 fbd2 	bl	be068 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b78c4:	2208      	movs	r2, #8
   b78c6:	a906      	add	r1, sp, #24
   b78c8:	4628      	mov	r0, r5
   b78ca:	f006 fbeb 	bl	be0a4 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b78ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b78d0:	2f4a      	cmp	r7, #74	; 0x4a
   b78d2:	dd39      	ble.n	b7948 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b78d4:	4b27      	ldr	r3, [pc, #156]	; (b7974 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b78d6:	9a06      	ldr	r2, [sp, #24]
   b78d8:	429a      	cmp	r2, r3
   b78da:	d135      	bne.n	b7948 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b78dc:	4b26      	ldr	r3, [pc, #152]	; (b7978 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b78de:	9a07      	ldr	r2, [sp, #28]
   b78e0:	429a      	cmp	r2, r3
   b78e2:	d131      	bne.n	b7948 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b78e4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b78e8:	4610      	mov	r0, r2
   b78ea:	9205      	str	r2, [sp, #20]
   b78ec:	f7fc fbd5 	bl	b409a <_Znaj>
            if (result) {
   b78f0:	4604      	mov	r4, r0
   b78f2:	b1c0      	cbz	r0, b7926 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b78f4:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b78f6:	4601      	mov	r1, r0
   b78f8:	9a05      	ldr	r2, [sp, #20]
   b78fa:	4628      	mov	r0, r5
   b78fc:	f006 fbd2 	bl	be0a4 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7900:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b7904:	b9ab      	cbnz	r3, b7932 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b7906:	1c63      	adds	r3, r4, #1
   b7908:	4618      	mov	r0, r3
   b790a:	9305      	str	r3, [sp, #20]
   b790c:	f006 faa1 	bl	bde52 <strlen>
   b7910:	283f      	cmp	r0, #63	; 0x3f
   b7912:	9b05      	ldr	r3, [sp, #20]
   b7914:	d80d      	bhi.n	b7932 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b7916:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b791a:	9200      	str	r2, [sp, #0]
   b791c:	4917      	ldr	r1, [pc, #92]	; (b797c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b791e:	4814      	ldr	r0, [pc, #80]	; (b7970 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7920:	4632      	mov	r2, r6
   b7922:	f7ff ff5c 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b7926:	4628      	mov	r0, r5
   b7928:	f006 fb8e 	bl	be048 <close>
}
   b792c:	4620      	mov	r0, r4
   b792e:	b01f      	add	sp, #124	; 0x7c
   b7930:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b7932:	4913      	ldr	r1, [pc, #76]	; (b7980 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b7934:	480e      	ldr	r0, [pc, #56]	; (b7970 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7936:	4632      	mov	r2, r6
   b7938:	f7ff ff51 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b793c:	2143      	movs	r1, #67	; 0x43
   b793e:	4620      	mov	r0, r4
   b7940:	f7fc fbad 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b7944:	2400      	movs	r4, #0
   b7946:	e7ee      	b.n	b7926 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b7948:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b794c:	9302      	str	r3, [sp, #8]
   b794e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7952:	9301      	str	r3, [sp, #4]
   b7954:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b7958:	9300      	str	r3, [sp, #0]
   b795a:	490a      	ldr	r1, [pc, #40]	; (b7984 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b795c:	9b06      	ldr	r3, [sp, #24]
   b795e:	4804      	ldr	r0, [pc, #16]	; (b7970 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7960:	4632      	mov	r2, r6
   b7962:	f7ff ff3c 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
   b7966:	e7ed      	b.n	b7944 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b7968:	462c      	mov	r4, r5
    return result;
   b796a:	e7df      	b.n	b792c <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b796c:	000bedf0 	.word	0x000bedf0
   b7970:	2003e5e8 	.word	0x2003e5e8
   b7974:	31b67663 	.word	0x31b67663
   b7978:	00410801 	.word	0x00410801
   b797c:	000bee04 	.word	0x000bee04
   b7980:	000bee26 	.word	0x000bee26
   b7984:	000bee54 	.word	0x000bee54

000b7988 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b7988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b798c:	4680      	mov	r8, r0
   b798e:	4b28      	ldr	r3, [pc, #160]	; (b7a30 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b7990:	f848 3b04 	str.w	r3, [r8], #4
   b7994:	4604      	mov	r4, r0
   b7996:	4640      	mov	r0, r8
   b7998:	f000 fcd4 	bl	b8344 <_ZN14SequentialFileC1Ev>
   b799c:	2202      	movs	r2, #2
   b799e:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b79a0:	2500      	movs	r5, #0
   b79a2:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b79a6:	2308      	movs	r3, #8
   b79a8:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b79aa:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b79ae:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b79b2:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b79b6:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b79ba:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b79bc:	2020      	movs	r0, #32
   b79be:	f7fc fb6a 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b79c2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b79c4:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b79c6:	3e01      	subs	r6, #1
   b79c8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b79ca:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b79ce:	4607      	mov	r7, r0
   b79d0:	f44f 7000 	mov.w	r0, #512	; 0x200
   b79d4:	f7fc fb5f 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b79d8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b79dc:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b79e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b79e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b79e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b79ec:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b79f0:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b79f4:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b79f8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b79fc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b7a00:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b7a04:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b7a08:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b7a0c:	4909      	ldr	r1, [pc, #36]	; (b7a34 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b7a0e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b7a12:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b7a16:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b7a1a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b7a1e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b7a22:	4640      	mov	r0, r8
   b7a24:	f000 fcd4 	bl	b83d0 <_ZN14SequentialFile11withDirPathEPKc>
}
   b7a28:	4620      	mov	r0, r4
   b7a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7a2e:	bf00      	nop
   b7a30:	000bf070 	.word	0x000bf070
   b7a34:	000bee99 	.word	0x000bee99

000b7a38 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b7a38:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7a3a:	4d06      	ldr	r5, [pc, #24]	; (b7a54 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b7a3c:	682b      	ldr	r3, [r5, #0]
   b7a3e:	b93b      	cbnz	r3, b7a50 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b7a40:	20d0      	movs	r0, #208	; 0xd0
   b7a42:	f7fc fb28 	bl	b4096 <_Znwj>
   b7a46:	4604      	mov	r4, r0
   b7a48:	b108      	cbz	r0, b7a4e <_ZN17PublishQueuePosix8instanceEv+0x16>
   b7a4a:	f7ff ff9d 	bl	b7988 <_ZN17PublishQueuePosixC1Ev>
   b7a4e:	602c      	str	r4, [r5, #0]
}
   b7a50:	6828      	ldr	r0, [r5, #0]
   b7a52:	bd38      	pop	{r3, r4, r5, pc}
   b7a54:	2003e5ec 	.word	0x2003e5ec

000b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b7a58:	6942      	ldr	r2, [r0, #20]
   b7a5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7a5c:	1a9b      	subs	r3, r3, r2
   b7a5e:	109b      	asrs	r3, r3, #2
   b7a60:	1e5a      	subs	r2, r3, #1
   b7a62:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b7a66:	1a5b      	subs	r3, r3, r1
   b7a68:	109b      	asrs	r3, r3, #2
   b7a6a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b7a6e:	6902      	ldr	r2, [r0, #16]
   b7a70:	6880      	ldr	r0, [r0, #8]
   b7a72:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7a74:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b7a78:	4770      	bx	lr

000b7a7a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b7a7a:	b538      	push	{r3, r4, r5, lr}
   b7a7c:	4605      	mov	r5, r0
   b7a7e:	f7ff feca 	bl	b7816 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b7a82:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b7a86:	f7ff ffe7 	bl	b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b7a8a:	4604      	mov	r4, r0
   b7a8c:	b950      	cbnz	r0, b7aa4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b7a8e:	1d28      	adds	r0, r5, #4
   b7a90:	f000 ff94 	bl	b89bc <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b7a94:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b7a98:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b7a9a:	b11b      	cbz	r3, b7aa4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b7a9c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b7aa0:	b903      	cbnz	r3, b7aa4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b7aa2:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b7aa4:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b7aa6:	f001 fe19 	bl	b96dc <os_mutex_recursive_unlock>
}
   b7aaa:	4620      	mov	r0, r4
   b7aac:	bd38      	pop	{r3, r4, r5, pc}

000b7aae <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b7aae:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b7ab0:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b7ab2:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b7ab4:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b7ab6:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b7ab8:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b7aba:	d002      	beq.n	b7ac2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b7abc:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b7abe:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b7ac0:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7ac2:	68c0      	ldr	r0, [r0, #12]
   b7ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7ac8:	f7fc fae9 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b7acc:	6963      	ldr	r3, [r4, #20]
   b7ace:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b7ad0:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b7ad2:	685b      	ldr	r3, [r3, #4]
   b7ad4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7ad6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7ada:	6122      	str	r2, [r4, #16]
   b7adc:	e7ef      	b.n	b7abe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b7ae0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b7ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ae4:	b085      	sub	sp, #20
   b7ae6:	4604      	mov	r4, r0
   b7ae8:	f7ff fe95 	bl	b7816 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b7aec:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7b94 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b7af0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b7b98 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b7af4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b7b9c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b7af8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b7afc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7b00:	4293      	cmp	r3, r2
   b7b02:	d105      	bne.n	b7b10 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b7b04:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b7b06:	b005      	add	sp, #20
   b7b08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b0c:	f001 bde6 	b.w	b96dc <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b7b10:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b7b14:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b7b18:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b7b1a:	f7ff ffc8 	bl	b7aae <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b7b1e:	4640      	mov	r0, r8
   b7b20:	f000 fef0 	bl	b8904 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b7b24:	2300      	movs	r3, #0
   b7b26:	4602      	mov	r2, r0
   b7b28:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b7b2a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b7b2c:	4668      	mov	r0, sp
   b7b2e:	f000 fcf1 	bl	b8514 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b7b32:	9800      	ldr	r0, [sp, #0]
   b7b34:	f240 2102 	movw	r1, #514	; 0x202
   b7b38:	f006 faa0 	bl	be07c <open>
   b7b3c:	4605      	mov	r5, r0
   b7b3e:	4668      	mov	r0, sp
   b7b40:	f004 fb8e 	bl	bc260 <_ZN6StringD1Ev>
            if (fd) {
   b7b44:	b1c5      	cbz	r5, b7b78 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b7b46:	2208      	movs	r2, #8
   b7b48:	4669      	mov	r1, sp
   b7b4a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b7b4c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b7b50:	f006 faba 	bl	be0c8 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b7b54:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b7b58:	f006 f97b 	bl	bde52 <strlen>
   b7b5c:	4639      	mov	r1, r7
   b7b5e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b7b62:	4628      	mov	r0, r5
   b7b64:	f006 fab0 	bl	be0c8 <write>
                close(fd);
   b7b68:	4628      	mov	r0, r5
   b7b6a:	f006 fa6d 	bl	be048 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b7b6e:	4808      	ldr	r0, [pc, #32]	; (b7b90 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b7b70:	4632      	mov	r2, r6
   b7b72:	4659      	mov	r1, fp
   b7b74:	f7ff fe33 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b7b78:	4631      	mov	r1, r6
   b7b7a:	4640      	mov	r0, r8
   b7b7c:	f000 ff04 	bl	b8988 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b7b80:	2f00      	cmp	r7, #0
   b7b82:	d0b9      	beq.n	b7af8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b7b84:	2143      	movs	r1, #67	; 0x43
   b7b86:	4638      	mov	r0, r7
   b7b88:	f7fc fa89 	bl	b409e <_ZdlPvj>
   b7b8c:	e7b2      	b.n	b7af4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b7b8e:	bf00      	nop
   b7b90:	2003e5e8 	.word	0x2003e5e8
   b7b94:	31b67663 	.word	0x31b67663
   b7b98:	00410801 	.word	0x00410801
   b7b9c:	000beea7 	.word	0x000beea7

000b7ba0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b7ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ba4:	4604      	mov	r4, r0
   b7ba6:	f7ff fe36 	bl	b7816 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b7baa:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b7bae:	f7ff ff53 	bl	b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b7bb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7bb4:	4298      	cmp	r0, r3
   b7bb6:	d902      	bls.n	b7bbe <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b7bb8:	4620      	mov	r0, r4
   b7bba:	f7ff ff91 	bl	b7ae0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b7bbe:	f8df 8044 	ldr.w	r8, [pc, #68]	; b7c04 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b7bc2:	4f0f      	ldr	r7, [pc, #60]	; (b7c00 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b7bc4:	1d26      	adds	r6, r4, #4
   b7bc6:	4630      	mov	r0, r6
   b7bc8:	f000 fef8 	bl	b89bc <_ZNK14SequentialFile11getQueueLenEv>
   b7bcc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b7bce:	4298      	cmp	r0, r3
   b7bd0:	dc04      	bgt.n	b7bdc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b7bd2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b7bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7bd8:	f001 bd80 	b.w	b96dc <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b7bdc:	2101      	movs	r1, #1
   b7bde:	4630      	mov	r0, r6
   b7be0:	f000 fe9c 	bl	b891c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b7be4:	4605      	mov	r5, r0
   b7be6:	2800      	cmp	r0, #0
   b7be8:	d0ed      	beq.n	b7bc6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b7bea:	4601      	mov	r1, r0
   b7bec:	2200      	movs	r2, #0
   b7bee:	4630      	mov	r0, r6
   b7bf0:	f000 fccc 	bl	b858c <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b7bf4:	462a      	mov	r2, r5
   b7bf6:	4641      	mov	r1, r8
   b7bf8:	4638      	mov	r0, r7
   b7bfa:	f7fc fabe 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b7bfe:	e7e2      	b.n	b7bc6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b7c00:	2003e5e8 	.word	0x2003e5e8
   b7c04:	000beec4 	.word	0x000beec4

000b7c08 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b7c08:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b7c0a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7c0e:	430b      	orrs	r3, r1
   b7c10:	d005      	beq.n	b7c1e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b7c12:	3840      	subs	r0, #64	; 0x40
   b7c14:	ea50 0301 	orrs.w	r3, r0, r1
   b7c18:	d10b      	bne.n	b7c32 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b7c1a:	2a09      	cmp	r2, #9
   b7c1c:	d109      	bne.n	b7c32 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b7c1e:	4905      	ldr	r1, [pc, #20]	; (b7c34 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b7c20:	4805      	ldr	r0, [pc, #20]	; (b7c38 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b7c22:	f7ff fddc 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b7c26:	f7ff ff07 	bl	b7a38 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b7c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b7c2e:	f7ff bf57 	b.w	b7ae0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	000beed7 	.word	0x000beed7
   b7c38:	2003e5e8 	.word	0x2003e5e8

000b7c3c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b7c3c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b7c3e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b7c40:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b7c42:	b183      	cbz	r3, b7c66 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b7c44:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7c46:	6945      	ldr	r5, [r0, #20]
   b7c48:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b7c4a:	42ae      	cmp	r6, r5
   b7c4c:	d906      	bls.n	b7c5c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b7c4e:	f855 0b04 	ldr.w	r0, [r5], #4
   b7c52:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7c56:	f7fc fa22 	bl	b409e <_ZdlPvj>
   b7c5a:	e7f6      	b.n	b7c4a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b7c5c:	6861      	ldr	r1, [r4, #4]
   b7c5e:	6820      	ldr	r0, [r4, #0]
   b7c60:	0089      	lsls	r1, r1, #2
   b7c62:	f7fc fa1c 	bl	b409e <_ZdlPvj>
    }
   b7c66:	4620      	mov	r0, r4
   b7c68:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7c6c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b7c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b7c72:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b7c74:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7c76:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b7c78:	b90a      	cbnz	r2, b7c7e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b7c7a:	07d9      	lsls	r1, r3, #31
   b7c7c:	d505      	bpl.n	b7c8a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7c7e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b7c82:	4b0a      	ldr	r3, [pc, #40]	; (b7cac <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b7c84:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7c86:	4b0a      	ldr	r3, [pc, #40]	; (b7cb0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b7c88:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7c8a:	4621      	mov	r1, r4
   b7c8c:	4668      	mov	r0, sp
   b7c8e:	f7fe fcf0 	bl	b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7c92:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7c94:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7c96:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7c98:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7c9a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7c9c:	4668      	mov	r0, sp
   b7c9e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ca0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7ca2:	9203      	str	r2, [sp, #12]
   b7ca4:	f7fc fa54 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	}
   b7ca8:	b004      	add	sp, #16
   b7caa:	bd10      	pop	{r4, pc}
   b7cac:	000b7771 	.word	0x000b7771
   b7cb0:	000b778f 	.word	0x000b778f

000b7cb4 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b7cb4:	b570      	push	{r4, r5, r6, lr}
   b7cb6:	b086      	sub	sp, #24
   b7cb8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7cba:	f002 f80b 	bl	b9cd4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b7cbe:	b948      	cbnz	r0, b7cd4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b7cc0:	4b48      	ldr	r3, [pc, #288]	; (b7de4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b7cc2:	a902      	add	r1, sp, #8
   b7cc4:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b7cc8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7ccc:	f7ff ffce 	bl	b7c6c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b7cd0:	b006      	add	sp, #24
   b7cd2:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b7cd4:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b7cd8:	b11d      	cbz	r5, b7ce2 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b7cda:	2301      	movs	r3, #1
   b7cdc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b7ce0:	e7f6      	b.n	b7cd0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b7ce2:	f001 fd33 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b7ce6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b7cea:	1ac0      	subs	r0, r0, r3
   b7cec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b7cf0:	4298      	cmp	r0, r3
   b7cf2:	d208      	bcs.n	b7d06 <_ZN17PublishQueuePosix9stateWaitEv+0x52>
        canSleep = (getNumEvents() == 0);
   b7cf4:	4620      	mov	r0, r4
   b7cf6:	f7ff fec0 	bl	b7a7a <_ZN17PublishQueuePosix12getNumEventsEv>
   b7cfa:	fab0 f080 	clz	r0, r0
   b7cfe:	0940      	lsrs	r0, r0, #5
   b7d00:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        return;
   b7d04:	e7e4      	b.n	b7cd0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b7d06:	1d26      	adds	r6, r4, #4
   b7d08:	4629      	mov	r1, r5
   b7d0a:	4630      	mov	r0, r6
   b7d0c:	f000 fe06 	bl	b891c <_ZN14SequentialFile16getFileFromQueueEb>
   b7d10:	4601      	mov	r1, r0
   b7d12:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b7d16:	2800      	cmp	r0, #0
   b7d18:	d052      	beq.n	b7dc0 <_ZN17PublishQueuePosix9stateWaitEv+0x10c>
        curEvent = readQueueFile(curFileNum);
   b7d1a:	4620      	mov	r0, r4
   b7d1c:	f7ff fdb0 	bl	b7880 <_ZN17PublishQueuePosix13readQueueFileEi>
   b7d20:	4605      	mov	r5, r0
   b7d22:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b7d26:	2800      	cmp	r0, #0
   b7d28:	d035      	beq.n	b7d96 <_ZN17PublishQueuePosix9stateWaitEv+0xe2>
   b7d2a:	f001 fd0f 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b7d2e:	ae02      	add	r6, sp, #8
   b7d30:	2500      	movs	r5, #0
   b7d32:	4b2d      	ldr	r3, [pc, #180]	; (b7de8 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
        stateTime = millis();
   b7d34:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b7d38:	4631      	mov	r1, r6
   b7d3a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7d3e:	9302      	str	r3, [sp, #8]
   b7d40:	9503      	str	r5, [sp, #12]
   b7d42:	f7ff ff93 	bl	b7c6c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7d46:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b7d4a:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b7d4e:	9200      	str	r2, [sp, #0]
   b7d50:	4926      	ldr	r1, [pc, #152]	; (b7dec <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
   b7d52:	4a27      	ldr	r2, [pc, #156]	; (b7df0 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
        publishComplete = false;
   b7d54:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7d58:	42a8      	cmp	r0, r5
   b7d5a:	bf08      	it	eq
   b7d5c:	460a      	moveq	r2, r1
   b7d5e:	3301      	adds	r3, #1
   b7d60:	4924      	ldr	r1, [pc, #144]	; (b7df4 <_ZN17PublishQueuePosix9stateWaitEv+0x140>)
   b7d62:	4825      	ldr	r0, [pc, #148]	; (b7df8 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
        canSleep = false;
   b7d64:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7d68:	f7ff fd39 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b7d6c:	f7fe fbc4 	bl	b64f8 <_ZN19BackgroundPublishRK8instanceEv>
   b7d70:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b7d74:	4b21      	ldr	r3, [pc, #132]	; (b7dfc <_ZN17PublishQueuePosix9stateWaitEv+0x148>)
   b7d76:	9305      	str	r3, [sp, #20]
   b7d78:	e9cd 6500 	strd	r6, r5, [sp]
   b7d7c:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b7d7e:	4b20      	ldr	r3, [pc, #128]	; (b7e00 <_ZN17PublishQueuePosix9stateWaitEv+0x14c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7d80:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7d82:	9304      	str	r3, [sp, #16]
   b7d84:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7d88:	3242      	adds	r2, #66	; 0x42
   b7d8a:	f7fe fd01 	bl	b6790 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b7d8e:	4630      	mov	r0, r6
   b7d90:	f7fc f9de 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b7d94:	e79c      	b.n	b7cd0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b7d96:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b7d9a:	491a      	ldr	r1, [pc, #104]	; (b7e04 <_ZN17PublishQueuePosix9stateWaitEv+0x150>)
   b7d9c:	4816      	ldr	r0, [pc, #88]	; (b7df8 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
   b7d9e:	f7fc f9ec 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b7da2:	2101      	movs	r1, #1
   b7da4:	4630      	mov	r0, r6
   b7da6:	f000 fdb9 	bl	b891c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b7daa:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b7dae:	462a      	mov	r2, r5
   b7db0:	4630      	mov	r0, r6
   b7db2:	f000 fbeb 	bl	b858c <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b7db6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7dba:	2b00      	cmp	r3, #0
   b7dbc:	d1b5      	bne.n	b7d2a <_ZN17PublishQueuePosix9stateWaitEv+0x76>
   b7dbe:	e78c      	b.n	b7cda <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b7dc0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b7dc4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7dc8:	429a      	cmp	r2, r3
   b7dca:	d007      	beq.n	b7ddc <_ZN17PublishQueuePosix9stateWaitEv+0x128>
            curEvent = ramQueue.front();
   b7dcc:	681b      	ldr	r3, [r3, #0]
   b7dce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b7dd2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b7dd6:	f7ff fe6a 	bl	b7aae <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b7dda:	e7ec      	b.n	b7db6 <_ZN17PublishQueuePosix9stateWaitEv+0x102>
            curEvent = NULL;
   b7ddc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b7de0:	e77b      	b.n	b7cda <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b7de2:	bf00      	nop
   b7de4:	000b7e09 	.word	0x000b7e09
   b7de8:	000b8181 	.word	0x000b8181
   b7dec:	000bef06 	.word	0x000bef06
   b7df0:	000bf16c 	.word	0x000bf16c
   b7df4:	000bef27 	.word	0x000bef27
   b7df8:	2003e5e8 	.word	0x2003e5e8
   b7dfc:	000b7761 	.word	0x000b7761
   b7e00:	000b77a7 	.word	0x000b77a7
   b7e04:	000bef0a 	.word	0x000bef0a

000b7e08 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b7e08:	b513      	push	{r0, r1, r4, lr}
    canSleep = (pausePublishing || getNumEvents() == 0);
   b7e0a:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
void PublishQueuePosix::stateConnectWait() {
   b7e0e:	4604      	mov	r4, r0
    canSleep = (pausePublishing || getNumEvents() == 0);
   b7e10:	b923      	cbnz	r3, b7e1c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x14>
   b7e12:	f7ff fe32 	bl	b7a7a <_ZN17PublishQueuePosix12getNumEventsEv>
   b7e16:	fab0 f380 	clz	r3, r0
   b7e1a:	095b      	lsrs	r3, r3, #5
   b7e1c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b7e20:	f001 ff58 	bl	b9cd4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b7e24:	b180      	cbz	r0, b7e48 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x40>
   b7e26:	f001 fc91 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b7e2a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b7e2e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b7e32:	4b06      	ldr	r3, [pc, #24]	; (b7e4c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x44>)
        stateTime = millis();
   b7e34:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b7e38:	9300      	str	r3, [sp, #0]
   b7e3a:	4669      	mov	r1, sp
   b7e3c:	2300      	movs	r3, #0
   b7e3e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7e42:	9301      	str	r3, [sp, #4]
   b7e44:	f7ff ff12 	bl	b7c6c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b7e48:	b002      	add	sp, #8
   b7e4a:	bd10      	pop	{r4, pc}
   b7e4c:	000b7cb5 	.word	0x000b7cb5

000b7e50 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b7e50:	b570      	push	{r4, r5, r6, lr}
   b7e52:	4605      	mov	r5, r0
   b7e54:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b7e56:	2000      	movs	r0, #0
   b7e58:	f001 fee2 	bl	b9c20 <system_thread_get_state>
   b7e5c:	2801      	cmp	r0, #1
   b7e5e:	d005      	beq.n	b7e6c <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b7e60:	493e      	ldr	r1, [pc, #248]	; (b7f5c <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b7e62:	483f      	ldr	r0, [pc, #252]	; (b7f60 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b7e64:	f7ff fcc9 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
}
   b7e68:	b018      	add	sp, #96	; 0x60
   b7e6a:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b7e6c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b7e70:	f001 fc1c 	bl	b96ac <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7e74:	4b3b      	ldr	r3, [pc, #236]	; (b7f64 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b7e76:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7e78:	4b3b      	ldr	r3, [pc, #236]	; (b7f68 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b7e7a:	9307      	str	r3, [sp, #28]
        };
   b7e7c:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b7e7e:	4b3b      	ldr	r3, [pc, #236]	; (b7f6c <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b7e80:	9306      	str	r3, [sp, #24]
   b7e82:	a808      	add	r0, sp, #32
   b7e84:	f7fc f9da 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b7e88:	a908      	add	r1, sp, #32
   b7e8a:	a80c      	add	r0, sp, #48	; 0x30
   b7e8c:	f7fc f9d6 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b7e90:	a90c      	add	r1, sp, #48	; 0x30
   b7e92:	a810      	add	r0, sp, #64	; 0x40
   b7e94:	f7fc f9d2 	bl	b423c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b7e98:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7e9a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b7e9c:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7e9e:	f7fc f8fa 	bl	b4096 <_Znwj>
   b7ea2:	4604      	mov	r4, r0
   b7ea4:	b160      	cbz	r0, b7ec0 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b7ea6:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7ea8:	4601      	mov	r1, r0
   b7eaa:	a810      	add	r0, sp, #64	; 0x40
   b7eac:	f7fe fbe1 	bl	b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b7eb2:	68a2      	ldr	r2, [r4, #8]
   b7eb4:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b7eb6:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7eb8:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7eba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b7ebc:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7ebe:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b7ec0:	4b2b      	ldr	r3, [pc, #172]	; (b7f70 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b7ec2:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b7ec4:	4b2b      	ldr	r3, [pc, #172]	; (b7f74 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b7ec6:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b7ec8:	4b2b      	ldr	r3, [pc, #172]	; (b7f78 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7eca:	9414      	str	r4, [sp, #80]	; 0x50
   b7ecc:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b7ece:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b7ed0:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b7ed4:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b7ed6:	f7fc f8de 	bl	b4096 <_Znwj>
   b7eda:	4604      	mov	r4, r0
   b7edc:	b1d8      	cbz	r0, b7f16 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b7ede:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b7ee0:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b7ee2:	b133      	cbz	r3, b7ef2 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7ee4:	2202      	movs	r2, #2
   b7ee6:	a914      	add	r1, sp, #80	; 0x50
   b7ee8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7eec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b7ef0:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b7ef2:	4b22      	ldr	r3, [pc, #136]	; (b7f7c <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b7ef4:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b7ef6:	4a22      	ldr	r2, [pc, #136]	; (b7f80 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b7ef8:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b7efa:	ab01      	add	r3, sp, #4
   b7efc:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b7f00:	2100      	movs	r1, #0
   b7f02:	f001 fe6d 	bl	b9be0 <system_subscribe_event>
        if (r) {
   b7f06:	b130      	cbz	r0, b7f16 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b7f08:	4620      	mov	r0, r4
   b7f0a:	f7fc f921 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b7f0e:	2110      	movs	r1, #16
   b7f10:	4620      	mov	r0, r4
   b7f12:	f7fc f8c4 	bl	b409e <_ZdlPvj>
   b7f16:	a814      	add	r0, sp, #80	; 0x50
   b7f18:	f7fc f91a 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b7f1c:	a810      	add	r0, sp, #64	; 0x40
   b7f1e:	f7fc f917 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b7f22:	a80c      	add	r0, sp, #48	; 0x30
   b7f24:	f7fc f914 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b7f28:	a808      	add	r0, sp, #32
   b7f2a:	f7fc f911 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   b7f2e:	a804      	add	r0, sp, #16
   b7f30:	f7fc f90e 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b7f34:	f7fe fae0 	bl	b64f8 <_ZN19BackgroundPublishRK8instanceEv>
   b7f38:	f7fe fc04 	bl	b6744 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b7f3c:	1d28      	adds	r0, r5, #4
   b7f3e:	f000 fc69 	bl	b8814 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b7f42:	4628      	mov	r0, r5
   b7f44:	f7ff fe2c 	bl	b7ba0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b7f48:	4b0e      	ldr	r3, [pc, #56]	; (b7f84 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b7f4a:	9314      	str	r3, [sp, #80]	; 0x50
   b7f4c:	a914      	add	r1, sp, #80	; 0x50
   b7f4e:	2300      	movs	r3, #0
   b7f50:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b7f54:	9315      	str	r3, [sp, #84]	; 0x54
   b7f56:	f7ff fe89 	bl	b7c6c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b7f5a:	e785      	b.n	b7e68 <_ZN17PublishQueuePosix5setupEv+0x18>
   b7f5c:	000bef46 	.word	0x000bef46
   b7f60:	2003e5e8 	.word	0x2003e5e8
   b7f64:	000b7c09 	.word	0x000b7c09
   b7f68:	000b4147 	.word	0x000b4147
   b7f6c:	000b4133 	.word	0x000b4133
   b7f70:	000b410d 	.word	0x000b410d
   b7f74:	000b4365 	.word	0x000b4365
   b7f78:	000c0002 	.word	0x000c0002
   b7f7c:	000b4163 	.word	0x000b4163
   b7f80:	000b40e5 	.word	0x000b40e5
   b7f84:	000b7e09 	.word	0x000b7e09

000b7f88 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b7f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7f8c:	4606      	mov	r6, r0
   b7f8e:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b7f90:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7f92:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7f94:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b7f96:	1a47      	subs	r7, r0, r1
   b7f98:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b7f9c:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7f9e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b7fa2:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7fa4:	d927      	bls.n	b7ff6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b7fa6:	1b5d      	subs	r5, r3, r5
   b7fa8:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7faa:	6832      	ldr	r2, [r6, #0]
   b7fac:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b7fae:	b10c      	cbz	r4, b7fb4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b7fb0:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b7fb4:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7fb6:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b7fb8:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b7fba:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b7fbc:	eba3 0201 	sub.w	r2, r3, r1
   b7fc0:	d913      	bls.n	b7fea <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b7fc2:	4299      	cmp	r1, r3
   b7fc4:	d002      	beq.n	b7fcc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b7fc6:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7fc8:	f005 feac 	bl	bdd24 <memmove>
	_M_node = __new_node;
   b7fcc:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b7fce:	6823      	ldr	r3, [r4, #0]
   b7fd0:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7fd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7fd6:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b7fd8:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b7fda:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b7fdc:	59e3      	ldr	r3, [r4, r7]
   b7fde:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7fe0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7fe4:	6233      	str	r3, [r6, #32]
    }
   b7fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b7fea:	4299      	cmp	r1, r3
   b7fec:	d0ee      	beq.n	b7fcc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7fee:	1d38      	adds	r0, r7, #4
   b7ff0:	1a80      	subs	r0, r0, r2
   b7ff2:	4420      	add	r0, r4
   b7ff4:	e7e8      	b.n	b7fc8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b7ff6:	f103 0802 	add.w	r8, r3, #2
   b7ffa:	454b      	cmp	r3, r9
   b7ffc:	bf2c      	ite	cs
   b7ffe:	4498      	addcs	r8, r3
   b8000:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b8002:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b8006:	d301      	bcc.n	b800c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b8008:	f005 f814 	bl	bd034 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b800c:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b8010:	f7fc f841 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8014:	eba8 0505 	sub.w	r5, r8, r5
   b8018:	086d      	lsrs	r5, r5, #1
   b801a:	4682      	mov	sl, r0
   b801c:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b801e:	b10c      	cbz	r4, b8024 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b8020:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8024:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8026:	6971      	ldr	r1, [r6, #20]
   b8028:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b802a:	442c      	add	r4, r5
	  if (_Num)
   b802c:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b802e:	4454      	add	r4, sl
   b8030:	d003      	beq.n	b803a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8032:	1a52      	subs	r2, r2, r1
   b8034:	4620      	mov	r0, r4
   b8036:	f005 fe75 	bl	bdd24 <memmove>
	::operator delete(__p
   b803a:	6871      	ldr	r1, [r6, #4]
   b803c:	6830      	ldr	r0, [r6, #0]
   b803e:	0089      	lsls	r1, r1, #2
   b8040:	f7fc f82d 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8044:	e9c6 a800 	strd	sl, r8, [r6]
   b8048:	e7c0      	b.n	b7fcc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b804c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b804c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b804e:	b085      	sub	sp, #20
   b8050:	4604      	mov	r4, r0
   b8052:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b8056:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b805a:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b805c:	460f      	mov	r7, r1
   b805e:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8060:	f7ff fbe6 	bl	b7830 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8064:	4605      	mov	r5, r0
   b8066:	2800      	cmp	r0, #0
   b8068:	d03c      	beq.n	b80e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b806a:	4b3f      	ldr	r3, [pc, #252]	; (b8168 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b806c:	493f      	ldr	r1, [pc, #252]	; (b816c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b806e:	4840      	ldr	r0, [pc, #256]	; (b8170 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8070:	2e00      	cmp	r6, #0
   b8072:	bf18      	it	ne
   b8074:	4633      	movne	r3, r6
   b8076:	463a      	mov	r2, r7
   b8078:	f7ff fbb1 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
   b807c:	4620      	mov	r0, r4
   b807e:	f7ff fbca 	bl	b7816 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b8082:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b8086:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b808a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b808c:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b808e:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b8092:	d029      	beq.n	b80e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8094:	b103      	cbz	r3, b8098 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b8096:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b8098:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b809c:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b809e:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b80a0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b80a4:	4628      	mov	r0, r5
   b80a6:	f000 fc89 	bl	b89bc <_ZNK14SequentialFile11getQueueLenEv>
   b80aa:	9003      	str	r0, [sp, #12]
   b80ac:	4630      	mov	r0, r6
   b80ae:	f7ff fcd3 	bl	b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b80b2:	9002      	str	r0, [sp, #8]
   b80b4:	f001 fe0e 	bl	b9cd4 <spark_cloud_flag_connected>
   b80b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b80bc:	9000      	str	r0, [sp, #0]
   b80be:	492d      	ldr	r1, [pc, #180]	; (b8174 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b80c0:	482b      	ldr	r0, [pc, #172]	; (b8170 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b80c2:	f7ff fb8c 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b80c6:	4628      	mov	r0, r5
   b80c8:	f000 fc78 	bl	b89bc <_ZNK14SequentialFile11getQueueLenEv>
   b80cc:	2800      	cmp	r0, #0
   b80ce:	d03b      	beq.n	b8148 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b80d0:	4620      	mov	r0, r4
   b80d2:	f7ff fd05 	bl	b7ae0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b80d6:	4620      	mov	r0, r4
   b80d8:	f7ff fd62 	bl	b7ba0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b80dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b80de:	f001 fafd 	bl	b96dc <os_mutex_recursive_unlock>
    return true;
   b80e2:	2001      	movs	r0, #1
}
   b80e4:	b005      	add	sp, #20
   b80e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b80e8:	4630      	mov	r0, r6
   b80ea:	f7ff fcb5 	bl	b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b80ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b80f2:	4298      	cmp	r0, r3
   b80f4:	d102      	bne.n	b80fc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b80f6:	4820      	ldr	r0, [pc, #128]	; (b8178 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b80f8:	f004 ff9f 	bl	bd03a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b80fc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8100:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b8102:	1a9a      	subs	r2, r3, r2
   b8104:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b8106:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b810a:	2b01      	cmp	r3, #1
   b810c:	d804      	bhi.n	b8118 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b810e:	2200      	movs	r2, #0
   b8110:	2101      	movs	r1, #1
   b8112:	4630      	mov	r0, r6
   b8114:	f7ff ff38 	bl	b7f88 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8118:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b811c:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b8120:	f7fb ffb9 	bl	b4096 <_Znwj>
   b8124:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8126:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b812a:	b103      	cbz	r3, b812e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b812c:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b812e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8132:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8134:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b8138:	685b      	ldr	r3, [r3, #4]
   b813a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b813e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8142:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b8146:	e7aa      	b.n	b809e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8148:	4630      	mov	r0, r6
   b814a:	f7ff fc85 	bl	b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b814e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8150:	4298      	cmp	r0, r3
   b8152:	d8bd      	bhi.n	b80d0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8154:	f001 fdbe 	bl	b9cd4 <spark_cloud_flag_connected>
   b8158:	2800      	cmp	r0, #0
   b815a:	d0b9      	beq.n	b80d0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b815c:	4907      	ldr	r1, [pc, #28]	; (b817c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b815e:	4804      	ldr	r0, [pc, #16]	; (b8170 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8160:	f7ff fb3d 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
   b8164:	e7b7      	b.n	b80d6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b8166:	bf00      	nop
   b8168:	000bf5cd 	.word	0x000bf5cd
   b816c:	000bef69 	.word	0x000bef69
   b8170:	2003e5e8 	.word	0x2003e5e8
   b8174:	000befc1 	.word	0x000befc1
   b8178:	000bef91 	.word	0x000bef91
   b817c:	000befed 	.word	0x000befed

000b8180 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b8180:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b8182:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b8186:	4604      	mov	r4, r0
    if (!publishComplete) {
   b8188:	2b00      	cmp	r3, #0
   b818a:	d041      	beq.n	b8210 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b818c:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b8190:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b8194:	2b00      	cmp	r3, #0
   b8196:	d03d      	beq.n	b8214 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b8198:	4950      	ldr	r1, [pc, #320]	; (b82dc <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b819a:	4851      	ldr	r0, [pc, #324]	; (b82e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b819c:	f7ff fb1f 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b81a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b81a4:	b1d3      	cbz	r3, b81dc <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b81a6:	1d26      	adds	r6, r4, #4
   b81a8:	2100      	movs	r1, #0
   b81aa:	4630      	mov	r0, r6
   b81ac:	f000 fbb6 	bl	b891c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b81b0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b81b4:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b81b6:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b81b8:	d10d      	bne.n	b81d6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b81ba:	2101      	movs	r1, #1
   b81bc:	4630      	mov	r0, r6
   b81be:	f000 fbad 	bl	b891c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b81c2:	2200      	movs	r2, #0
   b81c4:	4629      	mov	r1, r5
   b81c6:	4630      	mov	r0, r6
   b81c8:	f000 f9e0 	bl	b858c <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b81cc:	4945      	ldr	r1, [pc, #276]	; (b82e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b81ce:	4844      	ldr	r0, [pc, #272]	; (b82e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b81d0:	462a      	mov	r2, r5
   b81d2:	f7ff fb04 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b81d6:	2300      	movs	r3, #0
   b81d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b81dc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b81e0:	b110      	cbz	r0, b81e8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b81e2:	2143      	movs	r1, #67	; 0x43
   b81e4:	f7fb ff5b 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b81e8:	2300      	movs	r3, #0
   b81ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b81ee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b81f2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b81f6:	4b3c      	ldr	r3, [pc, #240]	; (b82e8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b81f8:	9300      	str	r3, [sp, #0]
   b81fa:	4669      	mov	r1, sp
   b81fc:	2300      	movs	r3, #0
   b81fe:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8202:	9301      	str	r3, [sp, #4]
   b8204:	f7ff fd32 	bl	b7c6c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8208:	f001 faa0 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b820c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b8210:	b002      	add	sp, #8
   b8212:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8214:	4935      	ldr	r1, [pc, #212]	; (b82ec <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b8216:	4832      	ldr	r0, [pc, #200]	; (b82e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8218:	f7ff fae1 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b821c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8220:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8224:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8228:	b14b      	cbz	r3, b823e <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b822a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b822e:	b110      	cbz	r0, b8236 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b8230:	2143      	movs	r1, #67	; 0x43
   b8232:	f7fb ff34 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b8236:	2300      	movs	r3, #0
   b8238:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b823c:	e7db      	b.n	b81f6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b823e:	4620      	mov	r0, r4
   b8240:	f7ff fae9 	bl	b7816 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8244:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b8248:	4293      	cmp	r3, r2
   b824a:	d013      	beq.n	b8274 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b824c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8250:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8254:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b8258:	3b04      	subs	r3, #4
   b825a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b825e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8260:	f001 fa3c 	bl	b96dc <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8264:	4922      	ldr	r1, [pc, #136]	; (b82f0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b8266:	481e      	ldr	r0, [pc, #120]	; (b82e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8268:	f7ff fab9 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b826c:	4620      	mov	r0, r4
   b826e:	f7ff fc37 	bl	b7ae0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b8272:	e7c0      	b.n	b81f6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b8274:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b8278:	4628      	mov	r0, r5
   b827a:	f7ff fbed 	bl	b7a58 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b827e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8282:	4298      	cmp	r0, r3
   b8284:	d102      	bne.n	b828c <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b8286:	481b      	ldr	r0, [pc, #108]	; (b82f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b8288:	f004 fed7 	bl	bd03a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b828c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b8290:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b8292:	429a      	cmp	r2, r3
   b8294:	d104      	bne.n	b82a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b8296:	2201      	movs	r2, #1
   b8298:	4611      	mov	r1, r2
   b829a:	4628      	mov	r0, r5
   b829c:	f7ff fe74 	bl	b7f88 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b82a0:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b82a4:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b82a8:	f7fb fef5 	bl	b4096 <_Znwj>
   b82ac:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b82b0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b82b4:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b82b6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b82ba:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b82be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b82c2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b82c6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b82ca:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b82ce:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b82d2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b82d6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b82da:	e7c0      	b.n	b825e <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b82dc:	000bf000 	.word	0x000bf000
   b82e0:	2003e5e8 	.word	0x2003e5e8
   b82e4:	000bf013 	.word	0x000bf013
   b82e8:	000b7cb5 	.word	0x000b7cb5
   b82ec:	000bf023 	.word	0x000bf023
   b82f0:	000bf035 	.word	0x000bf035
   b82f4:	000bef91 	.word	0x000bef91

000b82f8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
        name_(name) {
   b82f8:	4b01      	ldr	r3, [pc, #4]	; (b8300 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b82fa:	4a02      	ldr	r2, [pc, #8]	; (b8304 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b82fc:	601a      	str	r2, [r3, #0]
}
   b82fe:	4770      	bx	lr
   b8300:	2003e5e8 	.word	0x2003e5e8
   b8304:	000bf05c 	.word	0x000bf05c

000b8308 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8308:	b510      	push	{r4, lr}
   b830a:	4b07      	ldr	r3, [pc, #28]	; (b8328 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b830c:	4604      	mov	r4, r0
   b830e:	f840 3bc0 	str.w	r3, [r0], #192
   b8312:	f7fb ff1d 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b8316:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b831a:	f7ff fc8f 	bl	b7c3c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b831e:	1d20      	adds	r0, r4, #4
   b8320:	f000 f9b8 	bl	b8694 <_ZN14SequentialFileD1Ev>
}
   b8324:	4620      	mov	r0, r4
   b8326:	bd10      	pop	{r4, pc}
   b8328:	000bf070 	.word	0x000bf070

000b832c <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b832c:	b510      	push	{r4, lr}
   b832e:	4604      	mov	r4, r0
}
   b8330:	f7ff ffea 	bl	b8308 <_ZN17PublishQueuePosixD1Ev>
   b8334:	4620      	mov	r0, r4
   b8336:	21d0      	movs	r1, #208	; 0xd0
   b8338:	f7fb feb1 	bl	b409e <_ZdlPvj>
   b833c:	4620      	mov	r0, r4
   b833e:	bd10      	pop	{r4, pc}

000b8340 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b8340:	2001      	movs	r0, #1
   b8342:	4770      	bx	lr

000b8344 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b8344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8346:	4d1f      	ldr	r5, [pc, #124]	; (b83c4 <_ZN14SequentialFileC1Ev+0x80>)
   b8348:	4b1f      	ldr	r3, [pc, #124]	; (b83c8 <_ZN14SequentialFileC1Ev+0x84>)
   b834a:	4604      	mov	r4, r0
   b834c:	4629      	mov	r1, r5
   b834e:	f840 3b04 	str.w	r3, [r0], #4
   b8352:	f003 ffd0 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b8356:	491d      	ldr	r1, [pc, #116]	; (b83cc <_ZN14SequentialFileC1Ev+0x88>)
   b8358:	f104 0014 	add.w	r0, r4, #20
   b835c:	f003 ffcb 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b8360:	4629      	mov	r1, r5
   b8362:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8366:	f003 ffc6 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b836a:	2300      	movs	r3, #0
   b836c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b8370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b8374:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b8378:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b837c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b8380:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b8384:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b8386:	2308      	movs	r3, #8
   b8388:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b838a:	2020      	movs	r0, #32
   b838c:	f7fb fe83 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8390:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b8392:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8394:	3d01      	subs	r5, #1
   b8396:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b8398:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b839c:	4606      	mov	r6, r0
   b839e:	f44f 7000 	mov.w	r0, #512	; 0x200
   b83a2:	f7fb fe78 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b83a6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b83aa:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b83ae:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b83b2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b83b4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b83b6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b83b8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b83ba:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b83bc:	6667      	str	r7, [r4, #100]	; 0x64

}
   b83be:	4620      	mov	r0, r4
   b83c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b83c2:	bf00      	nop
   b83c4:	000bf5cd 	.word	0x000bf5cd
   b83c8:	000bf17c 	.word	0x000bf17c
   b83cc:	000bf07c 	.word	0x000bf07c

000b83d0 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b83d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b83d2:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b83d4:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b83d6:	4628      	mov	r0, r5
   b83d8:	f003 ffeb 	bl	bc3b2 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b83dc:	490e      	ldr	r1, [pc, #56]	; (b8418 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b83de:	4668      	mov	r0, sp
   b83e0:	f003 ff89 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b83e4:	4669      	mov	r1, sp
   b83e6:	4628      	mov	r0, r5
   b83e8:	f004 f85d 	bl	bc4a6 <_ZNK6String8endsWithERKS_>
   b83ec:	4606      	mov	r6, r0
   b83ee:	4668      	mov	r0, sp
   b83f0:	f003 ff36 	bl	bc260 <_ZN6StringD1Ev>
   b83f4:	b16e      	cbz	r6, b8412 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b83f6:	68e3      	ldr	r3, [r4, #12]
   b83f8:	2200      	movs	r2, #0
   b83fa:	3b01      	subs	r3, #1
   b83fc:	4629      	mov	r1, r5
   b83fe:	4668      	mov	r0, sp
   b8400:	f004 f87e 	bl	bc500 <_ZNK6String9substringEjj>
   b8404:	4669      	mov	r1, sp
   b8406:	4628      	mov	r0, r5
   b8408:	f003 ffcb 	bl	bc3a2 <_ZN6StringaSEOS_>
   b840c:	4668      	mov	r0, sp
   b840e:	f003 ff27 	bl	bc260 <_ZN6StringD1Ev>
    }
    return *this; 
};
   b8412:	4620      	mov	r0, r4
   b8414:	b004      	add	sp, #16
   b8416:	bd70      	pop	{r4, r5, r6, pc}
   b8418:	000bf081 	.word	0x000bf081

000b841c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b841c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b841e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b8420:	4604      	mov	r4, r0
    if (!queueMutex) {
   b8422:	b913      	cbnz	r3, b842a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b8424:	303c      	adds	r0, #60	; 0x3c
   b8426:	f001 f929 	bl	b967c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b842a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b842c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b8430:	f001 b92c 	b.w	b968c <os_mutex_lock>

000b8434 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b8434:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8436:	f001 b931 	b.w	b969c <os_mutex_unlock>
	...

000b843c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b843c:	b510      	push	{r4, lr}
   b843e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b8440:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b8442:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b8444:	f001 faaa 	bl	b999c <stat>
    if (result == 0) {
   b8448:	b9d0      	cbnz	r0, b8480 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b844a:	9b01      	ldr	r3, [sp, #4]
   b844c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b844e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b8450:	d506      	bpl.n	b8460 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b8452:	4915      	ldr	r1, [pc, #84]	; (b84a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b8454:	4815      	ldr	r0, [pc, #84]	; (b84ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b8456:	f7fb fe90 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b845a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b845c:	b016      	add	sp, #88	; 0x58
   b845e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b8460:	4812      	ldr	r0, [pc, #72]	; (b84ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b8462:	4913      	ldr	r1, [pc, #76]	; (b84b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b8464:	f7ff f9c9 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b8468:	4620      	mov	r0, r4
   b846a:	f005 fe25 	bl	be0b8 <unlink>
    result = mkdir(path, 0777);
   b846e:	f240 11ff 	movw	r1, #511	; 0x1ff
   b8472:	4620      	mov	r0, r4
   b8474:	f001 fa9a 	bl	b99ac <mkdir>
    if (result == 0) {
   b8478:	b980      	cbnz	r0, b849c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b847a:	490e      	ldr	r1, [pc, #56]	; (b84b4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b847c:	4622      	mov	r2, r4
   b847e:	e7e9      	b.n	b8454 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b8480:	f001 fd10 	bl	b9ea4 <__errno>
   b8484:	6803      	ldr	r3, [r0, #0]
   b8486:	2b02      	cmp	r3, #2
   b8488:	d0f1      	beq.n	b846e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b848a:	f001 fd0b 	bl	b9ea4 <__errno>
   b848e:	490a      	ldr	r1, [pc, #40]	; (b84b8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b8490:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b8492:	4806      	ldr	r0, [pc, #24]	; (b84ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b8494:	f7ff f9b1 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b8498:	2000      	movs	r0, #0
   b849a:	e7df      	b.n	b845c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b849c:	f001 fd02 	bl	b9ea4 <__errno>
   b84a0:	4906      	ldr	r1, [pc, #24]	; (b84bc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b84a2:	6802      	ldr	r2, [r0, #0]
   b84a4:	e7f5      	b.n	b8492 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b84a6:	bf00      	nop
   b84a8:	000bf08e 	.word	0x000bf08e
   b84ac:	2003e5f0 	.word	0x2003e5f0
   b84b0:	000bf0ab 	.word	0x000bf0ab
   b84b4:	000bf0dc 	.word	0x000bf0dc
   b84b8:	000bf0c8 	.word	0x000bf0c8
   b84bc:	000bf0eb 	.word	0x000bf0eb

000b84c0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b84c0:	b538      	push	{r3, r4, r5, lr}
   b84c2:	4615      	mov	r5, r2
   b84c4:	4604      	mov	r4, r0
    String result = name;
   b84c6:	f003 ff16 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b84ca:	b14d      	cbz	r5, b84e0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b84cc:	782b      	ldrb	r3, [r5, #0]
   b84ce:	b13b      	cbz	r3, b84e0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b84d0:	4904      	ldr	r1, [pc, #16]	; (b84e4 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b84d2:	4620      	mov	r0, r4
   b84d4:	f003 ff96 	bl	bc404 <_ZN6String6concatEPKc>
   b84d8:	4629      	mov	r1, r5
   b84da:	4620      	mov	r0, r4
   b84dc:	f003 ff92 	bl	bc404 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b84e0:	4620      	mov	r0, r4
   b84e2:	bd38      	pop	{r3, r4, r5, pc}
   b84e4:	000bf6cc 	.word	0x000bf6cc

000b84e8 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b84e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b84ea:	4605      	mov	r5, r0
   b84ec:	460e      	mov	r6, r1
   b84ee:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b84f0:	6949      	ldr	r1, [r1, #20]
   b84f2:	4668      	mov	r0, sp
   b84f4:	f004 f824 	bl	bc540 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   b84f8:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b84fa:	b904      	cbnz	r4, b84fe <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b84fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b84fe:	4622      	mov	r2, r4
   b8500:	4628      	mov	r0, r5
   b8502:	f7ff ffdd 	bl	b84c0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b8506:	4668      	mov	r0, sp
   b8508:	f003 feaa 	bl	bc260 <_ZN6StringD1Ev>
}
   b850c:	4628      	mov	r0, r5
   b850e:	b004      	add	sp, #16
   b8510:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8514 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b8514:	b570      	push	{r4, r5, r6, lr}
   b8516:	460c      	mov	r4, r1
   b8518:	b08e      	sub	sp, #56	; 0x38
    String result;
   b851a:	491a      	ldr	r1, [pc, #104]	; (b8584 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b851c:	e9cd 3200 	strd	r3, r2, [sp]
   b8520:	4605      	mov	r5, r0
    String result;
   b8522:	f003 fee8 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b8526:	68e0      	ldr	r0, [r4, #12]
   b8528:	69e1      	ldr	r1, [r4, #28]
   b852a:	4401      	add	r1, r0
   b852c:	3104      	adds	r1, #4
   b852e:	4628      	mov	r0, r5
   b8530:	f003 feb4 	bl	bc29c <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b8534:	1d21      	adds	r1, r4, #4
   b8536:	a806      	add	r0, sp, #24
   b8538:	f003 ff28 	bl	bc38c <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b853c:	4912      	ldr	r1, [pc, #72]	; (b8588 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b853e:	a802      	add	r0, sp, #8
   b8540:	f003 fed9 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b8544:	a902      	add	r1, sp, #8
   b8546:	a806      	add	r0, sp, #24
   b8548:	f003 ff7a 	bl	bc440 <_ZplRK15StringSumHelperRK6String>
   b854c:	e9dd 3200 	ldrd	r3, r2, [sp]
   b8550:	4606      	mov	r6, r0
   b8552:	4621      	mov	r1, r4
   b8554:	a80a      	add	r0, sp, #40	; 0x28
   b8556:	f7ff ffc7 	bl	b84e8 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b855a:	a90a      	add	r1, sp, #40	; 0x28
   b855c:	4630      	mov	r0, r6
   b855e:	f003 ff6f 	bl	bc440 <_ZplRK15StringSumHelperRK6String>
   b8562:	4601      	mov	r1, r0
   b8564:	4628      	mov	r0, r5
   b8566:	f003 ff02 	bl	bc36e <_ZN6StringaSERKS_>
   b856a:	a80a      	add	r0, sp, #40	; 0x28
   b856c:	f003 fe78 	bl	bc260 <_ZN6StringD1Ev>
   b8570:	a802      	add	r0, sp, #8
   b8572:	f003 fe75 	bl	bc260 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b8576:	a806      	add	r0, sp, #24
   b8578:	f003 fe72 	bl	bc260 <_ZN6StringD1Ev>
}
   b857c:	4628      	mov	r0, r5
   b857e:	b00e      	add	sp, #56	; 0x38
   b8580:	bd70      	pop	{r4, r5, r6, pc}
   b8582:	bf00      	nop
   b8584:	000bf5cd 	.word	0x000bf5cd
   b8588:	000bf081 	.word	0x000bf081

000b858c <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b8590:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b8592:	b08e      	sub	sp, #56	; 0x38
   b8594:	4605      	mov	r5, r0
   b8596:	460f      	mov	r7, r1
    if (allExtensions) {
   b8598:	2a00      	cmp	r2, #0
   b859a:	d04a      	beq.n	b8632 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b859c:	6840      	ldr	r0, [r0, #4]
   b859e:	f001 fa15 	bl	b99cc <opendir>
        if (dir) {
   b85a2:	4606      	mov	r6, r0
   b85a4:	2800      	cmp	r0, #0
   b85a6:	d054      	beq.n	b8652 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b85a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b8660 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b85ac:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b865c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b85b0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b8658 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b85b4:	4630      	mov	r0, r6
   b85b6:	f001 fa11 	bl	b99dc <readdir>
                if (!ent) {
   b85ba:	2800      	cmp	r0, #0
   b85bc:	d033      	beq.n	b8626 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b85be:	7a82      	ldrb	r2, [r0, #10]
   b85c0:	2a08      	cmp	r2, #8
   b85c2:	d1f7      	bne.n	b85b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b85c4:	f100 040b 	add.w	r4, r0, #11
   b85c8:	6969      	ldr	r1, [r5, #20]
   b85ca:	aa01      	add	r2, sp, #4
   b85cc:	4620      	mov	r0, r4
   b85ce:	f001 fc41 	bl	b9e54 <sscanf>
   b85d2:	2801      	cmp	r0, #1
   b85d4:	d1ee      	bne.n	b85b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b85d6:	9b01      	ldr	r3, [sp, #4]
   b85d8:	42bb      	cmp	r3, r7
   b85da:	d1eb      	bne.n	b85b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   b85dc:	1d29      	adds	r1, r5, #4
   b85de:	a80a      	add	r0, sp, #40	; 0x28
   b85e0:	f003 fed4 	bl	bc38c <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b85e4:	4651      	mov	r1, sl
   b85e6:	a806      	add	r0, sp, #24
   b85e8:	f003 fe85 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b85ec:	a906      	add	r1, sp, #24
   b85ee:	a80a      	add	r0, sp, #40	; 0x28
   b85f0:	f003 ff26 	bl	bc440 <_ZplRK15StringSumHelperRK6String>
   b85f4:	4621      	mov	r1, r4
   b85f6:	f003 ff2f 	bl	bc458 <_ZplRK15StringSumHelperPKc>
   b85fa:	4601      	mov	r1, r0
   b85fc:	a802      	add	r0, sp, #8
   b85fe:	f003 fec5 	bl	bc38c <_ZN6StringC1ERKS_>
   b8602:	a806      	add	r0, sp, #24
   b8604:	f003 fe2c 	bl	bc260 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b8608:	a80a      	add	r0, sp, #40	; 0x28
   b860a:	f003 fe29 	bl	bc260 <_ZN6StringD1Ev>
                        unlink(path);
   b860e:	9802      	ldr	r0, [sp, #8]
   b8610:	f005 fd52 	bl	be0b8 <unlink>
                        _log.trace("removed %s", path.c_str());
   b8614:	4640      	mov	r0, r8
   b8616:	9a02      	ldr	r2, [sp, #8]
   b8618:	4649      	mov	r1, r9
   b861a:	f7ff f8e0 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   b861e:	a802      	add	r0, sp, #8
   b8620:	f003 fe1e 	bl	bc260 <_ZN6StringD1Ev>
                    continue;
   b8624:	e7c6      	b.n	b85b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   b8626:	4630      	mov	r0, r6
}
   b8628:	b00e      	add	sp, #56	; 0x38
   b862a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   b862e:	f001 b9dd 	b.w	b99ec <closedir>
        String path = getPathForFileNum(fileNum); 
   b8632:	460a      	mov	r2, r1
   b8634:	4601      	mov	r1, r0
   b8636:	a80a      	add	r0, sp, #40	; 0x28
   b8638:	f7ff ff6c 	bl	b8514 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   b863c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b863e:	f005 fd3b 	bl	be0b8 <unlink>
        _log.trace("removed %s", path.c_str());
   b8642:	4805      	ldr	r0, [pc, #20]	; (b8658 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   b8644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8646:	4905      	ldr	r1, [pc, #20]	; (b865c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   b8648:	f7ff f8c9 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   b864c:	a80a      	add	r0, sp, #40	; 0x28
   b864e:	f003 fe07 	bl	bc260 <_ZN6StringD1Ev>
}
   b8652:	b00e      	add	sp, #56	; 0x38
   b8654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8658:	2003e5f0 	.word	0x2003e5f0
   b865c:	000bf083 	.word	0x000bf083
   b8660:	000bf081 	.word	0x000bf081

000b8664 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8664:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b8666:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8668:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b866a:	b183      	cbz	r3, b868e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b866c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b866e:	6945      	ldr	r5, [r0, #20]
   b8670:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b8672:	42ae      	cmp	r6, r5
   b8674:	d906      	bls.n	b8684 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   b8676:	f855 0b04 	ldr.w	r0, [r5], #4
   b867a:	f44f 7100 	mov.w	r1, #512	; 0x200
   b867e:	f7fb fd0e 	bl	b409e <_ZdlPvj>
   b8682:	e7f6      	b.n	b8672 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   b8684:	6861      	ldr	r1, [r4, #4]
   b8686:	6820      	ldr	r0, [r4, #0]
   b8688:	0089      	lsls	r1, r1, #2
   b868a:	f7fb fd08 	bl	b409e <_ZdlPvj>
    }
   b868e:	4620      	mov	r0, r4
   b8690:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8694 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   b8694:	b510      	push	{r4, lr}
   b8696:	4b09      	ldr	r3, [pc, #36]	; (b86bc <_ZN14SequentialFileD1Ev+0x28>)
   b8698:	4604      	mov	r4, r0
   b869a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b869e:	f7ff ffe1 	bl	b8664 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   b86a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b86a6:	f003 fddb 	bl	bc260 <_ZN6StringD1Ev>
   b86aa:	f104 0014 	add.w	r0, r4, #20
   b86ae:	f003 fdd7 	bl	bc260 <_ZN6StringD1Ev>
   b86b2:	1d20      	adds	r0, r4, #4
   b86b4:	f003 fdd4 	bl	bc260 <_ZN6StringD1Ev>
}
   b86b8:	4620      	mov	r0, r4
   b86ba:	bd10      	pop	{r4, pc}
   b86bc:	000bf17c 	.word	0x000bf17c

000b86c0 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   b86c0:	b510      	push	{r4, lr}
   b86c2:	4604      	mov	r4, r0
}
   b86c4:	f7ff ffe6 	bl	b8694 <_ZN14SequentialFileD1Ev>
   b86c8:	4620      	mov	r0, r4
   b86ca:	2168      	movs	r1, #104	; 0x68
   b86cc:	f7fb fce7 	bl	b409e <_ZdlPvj>
   b86d0:	4620      	mov	r0, r4
   b86d2:	bd10      	pop	{r4, pc}

000b86d4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b86d4:	68c3      	ldr	r3, [r0, #12]
   b86d6:	68ca      	ldr	r2, [r1, #12]
   b86d8:	1a9b      	subs	r3, r3, r2
   b86da:	109b      	asrs	r3, r3, #2
   b86dc:	1e5a      	subs	r2, r3, #1
   b86de:	e9d0 3000 	ldrd	r3, r0, [r0]
   b86e2:	1a1b      	subs	r3, r3, r0
   b86e4:	109b      	asrs	r3, r3, #2
   b86e6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b86ea:	6888      	ldr	r0, [r1, #8]
   b86ec:	680a      	ldr	r2, [r1, #0]
   b86ee:	1a80      	subs	r0, r0, r2
      }
   b86f0:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b86f4:	4770      	bx	lr
	...

000b86f8 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   b86f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   b86fc:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   b86fe:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   b8700:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b8702:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   b8704:	4604      	mov	r4, r0
   b8706:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   b8708:	d007      	beq.n	b871a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b870a:	b10b      	cbz	r3, b8710 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   b870c:	680a      	ldr	r2, [r1, #0]
   b870e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b8710:	69a3      	ldr	r3, [r4, #24]
   b8712:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b8714:	61a3      	str	r3, [r4, #24]
      }
   b8716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b871a:	f100 0108 	add.w	r1, r0, #8
   b871e:	3018      	adds	r0, #24
   b8720:	f7ff ffd8 	bl	b86d4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   b8724:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8728:	4298      	cmp	r0, r3
   b872a:	d102      	bne.n	b8732 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   b872c:	4838      	ldr	r0, [pc, #224]	; (b8810 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   b872e:	f004 fc84 	bl	bd03a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8732:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b8734:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b8736:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8738:	1a11      	subs	r1, r2, r0
   b873a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b873e:	2901      	cmp	r1, #1
   b8740:	d825      	bhi.n	b878e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8742:	6961      	ldr	r1, [r4, #20]
   b8744:	eba2 0801 	sub.w	r8, r2, r1
   b8748:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b874c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b874e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   b8752:	d936      	bls.n	b87c2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   b8754:	1b5d      	subs	r5, r3, r5
   b8756:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8758:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   b875c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b875e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   b8760:	eba3 0201 	sub.w	r2, r3, r1
   b8764:	d926      	bls.n	b87b4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   b8766:	428b      	cmp	r3, r1
   b8768:	d002      	beq.n	b8770 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b876a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b876c:	f005 fada 	bl	bdd24 <memmove>
	_M_node = __new_node;
   b8770:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   b8772:	682b      	ldr	r3, [r5, #0]
   b8774:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8776:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b877a:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b877c:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   b8780:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b8782:	f855 3008 	ldr.w	r3, [r5, r8]
   b8786:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8788:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b878c:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b878e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8792:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b8794:	f7fb fc7f 	bl	b4096 <_Znwj>
   b8798:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b879a:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b879c:	b10b      	cbz	r3, b87a2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   b879e:	683a      	ldr	r2, [r7, #0]
   b87a0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b87a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b87a4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b87a6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b87a8:	685b      	ldr	r3, [r3, #4]
   b87aa:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b87ac:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b87b0:	6222      	str	r2, [r4, #32]
   b87b2:	e7af      	b.n	b8714 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   b87b4:	428b      	cmp	r3, r1
   b87b6:	d0db      	beq.n	b8770 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b87b8:	f108 0004 	add.w	r0, r8, #4
   b87bc:	1a80      	subs	r0, r0, r2
   b87be:	4428      	add	r0, r5
   b87c0:	e7d4      	b.n	b876c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b87c2:	f103 0902 	add.w	r9, r3, #2
   b87c6:	2b01      	cmp	r3, #1
   b87c8:	bf2c      	ite	cs
   b87ca:	4499      	addcs	r9, r3
   b87cc:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   b87d0:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   b87d4:	d301      	bcc.n	b87da <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   b87d6:	f004 fc2d 	bl	bd034 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b87da:	ea4f 0089 	mov.w	r0, r9, lsl #2
   b87de:	f7fb fc5a 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   b87e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b87e4:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b87e6:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   b87ea:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b87ec:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   b87ee:	4291      	cmp	r1, r2
   b87f0:	4682      	mov	sl, r0
   b87f2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   b87f6:	d003      	beq.n	b8800 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b87f8:	1a52      	subs	r2, r2, r1
   b87fa:	4628      	mov	r0, r5
   b87fc:	f005 fa92 	bl	bdd24 <memmove>
	::operator delete(__p
   b8800:	6861      	ldr	r1, [r4, #4]
   b8802:	6820      	ldr	r0, [r4, #0]
   b8804:	0089      	lsls	r1, r1, #2
   b8806:	f7fb fc4a 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b880a:	e9c4 a900 	strd	sl, r9, [r4]
   b880e:	e7af      	b.n	b8770 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   b8810:	000bef91 	.word	0x000bef91

000b8814 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   b8814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   b8818:	68c3      	ldr	r3, [r0, #12]
   b881a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   b881c:	b086      	sub	sp, #24
   b881e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   b8820:	d808      	bhi.n	b8834 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   b8822:	4934      	ldr	r1, [pc, #208]	; (b88f4 <_ZN14SequentialFile7scanDirEv+0xe0>)
   b8824:	4834      	ldr	r0, [pc, #208]	; (b88f8 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b8826:	f7fe ffe8 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b882a:	2600      	movs	r6, #0
}
   b882c:	4630      	mov	r0, r6
   b882e:	b006      	add	sp, #24
   b8830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   b8834:	6840      	ldr	r0, [r0, #4]
   b8836:	f7ff fe01 	bl	b843c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   b883a:	4606      	mov	r6, r0
   b883c:	2800      	cmp	r0, #0
   b883e:	d0f4      	beq.n	b882a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   b8840:	6963      	ldr	r3, [r4, #20]
   b8842:	6862      	ldr	r2, [r4, #4]
   b8844:	492d      	ldr	r1, [pc, #180]	; (b88fc <_ZN14SequentialFile7scanDirEv+0xe8>)
   b8846:	482c      	ldr	r0, [pc, #176]	; (b88f8 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b8848:	f7fe ffc9 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   b884c:	6860      	ldr	r0, [r4, #4]
   b884e:	f001 f8bd 	bl	b99cc <opendir>
    if (!dir) {
   b8852:	4607      	mov	r7, r0
   b8854:	2800      	cmp	r0, #0
   b8856:	d0e8      	beq.n	b882a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   b8858:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b885a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8900 <_ZN14SequentialFile7scanDirEv+0xec>
   b885e:	f8df 8098 	ldr.w	r8, [pc, #152]	; b88f8 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   b8862:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   b8864:	4638      	mov	r0, r7
   b8866:	f001 f8b9 	bl	b99dc <readdir>
        if (!ent) {
   b886a:	4605      	mov	r5, r0
   b886c:	2800      	cmp	r0, #0
   b886e:	d039      	beq.n	b88e4 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   b8870:	7a83      	ldrb	r3, [r0, #10]
   b8872:	2b08      	cmp	r3, #8
   b8874:	d1f6      	bne.n	b8864 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   b8876:	350b      	adds	r5, #11
   b8878:	6961      	ldr	r1, [r4, #20]
   b887a:	aa01      	add	r2, sp, #4
   b887c:	4628      	mov	r0, r5
   b887e:	f001 fae9 	bl	b9e54 <sscanf>
   b8882:	2801      	cmp	r0, #1
   b8884:	d1ee      	bne.n	b8864 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   b8886:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8888:	b17b      	cbz	r3, b88aa <_ZN14SequentialFile7scanDirEv+0x96>
   b888a:	4629      	mov	r1, r5
   b888c:	a802      	add	r0, sp, #8
   b888e:	f003 fd32 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b8892:	f104 0124 	add.w	r1, r4, #36	; 0x24
   b8896:	a802      	add	r0, sp, #8
   b8898:	f003 fe05 	bl	bc4a6 <_ZNK6String8endsWithERKS_>
   b889c:	4682      	mov	sl, r0
   b889e:	a802      	add	r0, sp, #8
   b88a0:	f003 fcde 	bl	bc260 <_ZN6StringD1Ev>
   b88a4:	f1ba 0f00 	cmp.w	sl, #0
   b88a8:	d0dc      	beq.n	b8864 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   b88aa:	6823      	ldr	r3, [r4, #0]
   b88ac:	4629      	mov	r1, r5
   b88ae:	689b      	ldr	r3, [r3, #8]
   b88b0:	4620      	mov	r0, r4
   b88b2:	4798      	blx	r3
   b88b4:	2800      	cmp	r0, #0
   b88b6:	d0d5      	beq.n	b8864 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   b88b8:	9a01      	ldr	r2, [sp, #4]
   b88ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b88bc:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   b88be:	bfb8      	it	lt
   b88c0:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b88c2:	462b      	mov	r3, r5
   b88c4:	4649      	mov	r1, r9
   b88c6:	4640      	mov	r0, r8
   b88c8:	f7fe ff89 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   b88cc:	4620      	mov	r0, r4
   b88ce:	f7ff fda5 	bl	b841c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   b88d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b88d6:	a901      	add	r1, sp, #4
   b88d8:	f7ff ff0e 	bl	b86f8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   b88dc:	4620      	mov	r0, r4
   b88de:	f7ff fda9 	bl	b8434 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   b88e2:	e7bf      	b.n	b8864 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   b88e4:	4638      	mov	r0, r7
   b88e6:	f001 f881 	bl	b99ec <closedir>
    scanDirCompleted = true;
   b88ea:	2301      	movs	r3, #1
   b88ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   b88f0:	e79c      	b.n	b882c <_ZN14SequentialFile7scanDirEv+0x18>
   b88f2:	bf00      	nop
   b88f4:	000bf101 	.word	0x000bf101
   b88f8:	2003e5f0 	.word	0x2003e5f0
   b88fc:	000bf116 	.word	0x000bf116
   b8900:	000bf132 	.word	0x000bf132

000b8904 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   b8904:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   b8906:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   b890a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b890c:	b90b      	cbnz	r3, b8912 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   b890e:	f7ff ff81 	bl	b8814 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   b8912:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b8914:	3001      	adds	r0, #1
   b8916:	63a0      	str	r0, [r4, #56]	; 0x38
}
   b8918:	bd10      	pop	{r4, pc}
	...

000b891c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   b891c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   b891e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   b8922:	4604      	mov	r4, r0
   b8924:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   b8926:	b90b      	cbnz	r3, b892c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   b8928:	f7ff ff74 	bl	b8814 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   b892c:	4620      	mov	r0, r4
   b892e:	f7ff fd75 	bl	b841c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   b8932:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   b8934:	6da2      	ldr	r2, [r4, #88]	; 0x58
   b8936:	429a      	cmp	r2, r3
   b8938:	d020      	beq.n	b897c <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   b893a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   b893e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   b8940:	b126      	cbz	r6, b894c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   b8942:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b8944:	4293      	cmp	r3, r2
   b8946:	d00c      	beq.n	b8962 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   b8948:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b894a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   b894c:	4620      	mov	r0, r4
   b894e:	f7ff fd71 	bl	b8434 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   b8952:	b125      	cbz	r5, b895e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   b8954:	490a      	ldr	r1, [pc, #40]	; (b8980 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   b8956:	480b      	ldr	r0, [pc, #44]	; (b8984 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   b8958:	462a      	mov	r2, r5
   b895a:	f7fe ff40 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
}
   b895e:	4628      	mov	r0, r5
   b8960:	bd70      	pop	{r4, r5, r6, pc}
   b8962:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8966:	f7fb fb9a 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b896a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b896c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b896e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   b8970:	685b      	ldr	r3, [r3, #4]
   b8972:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8974:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8978:	6522      	str	r2, [r4, #80]	; 0x50
   b897a:	e7e6      	b.n	b894a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   b897c:	2500      	movs	r5, #0
   b897e:	e7e5      	b.n	b894c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   b8980:	000bf148 	.word	0x000bf148
   b8984:	2003e5f0 	.word	0x2003e5f0

000b8988 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   b8988:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   b898a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   b898e:	9101      	str	r1, [sp, #4]
   b8990:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b8992:	b90b      	cbnz	r3, b8998 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   b8994:	f7ff ff3e 	bl	b8814 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   b8998:	9b01      	ldr	r3, [sp, #4]
   b899a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b899c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   b899e:	bfb8      	it	lt
   b89a0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   b89a2:	4620      	mov	r0, r4
   b89a4:	f7ff fd3a 	bl	b841c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   b89a8:	a901      	add	r1, sp, #4
   b89aa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b89ae:	f7ff fea3 	bl	b86f8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   b89b2:	4620      	mov	r0, r4
   b89b4:	f7ff fd3e 	bl	b8434 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b89b8:	b002      	add	sp, #8
   b89ba:	bd10      	pop	{r4, pc}

000b89bc <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   b89bc:	b538      	push	{r3, r4, r5, lr}
   b89be:	4604      	mov	r4, r0
    queueMutexLock();
   b89c0:	f7ff fd2c 	bl	b841c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b89c4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   b89c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b89cc:	f7ff fe82 	bl	b86d4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   b89d0:	4605      	mov	r5, r0
    queueMutexUnlock();
   b89d2:	4620      	mov	r0, r4
   b89d4:	f7ff fd2e 	bl	b8434 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b89d8:	4628      	mov	r0, r5
   b89da:	bd38      	pop	{r3, r4, r5, pc}

000b89dc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   b89dc:	4b01      	ldr	r3, [pc, #4]	; (b89e4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   b89de:	4a02      	ldr	r2, [pc, #8]	; (b89e8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   b89e0:	601a      	str	r2, [r3, #0]
}
   b89e2:	4770      	bx	lr
   b89e4:	2003e5f0 	.word	0x2003e5f0
   b89e8:	000bf165 	.word	0x000bf165

000b89ec <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b89ec:	6803      	ldr	r3, [r0, #0]
   b89ee:	685b      	ldr	r3, [r3, #4]
   b89f0:	4718      	bx	r3

000b89f2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b89f2:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b89f4:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b89f6:	4604      	mov	r4, r0
    if (lastUpdate) {
   b89f8:	b133      	cbz	r3, b8a08 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b89fa:	b131      	cbz	r1, b8a0a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b89fc:	6823      	ldr	r3, [r4, #0]
   b89fe:	4620      	mov	r0, r4
   b8a00:	689b      	ldr	r3, [r3, #8]
   b8a02:	4798      	blx	r3
            lastUpdate = 0;
   b8a04:	2300      	movs	r3, #0
   b8a06:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b8a08:	bd10      	pop	{r4, pc}
   b8a0a:	f000 fe9f 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8a0e:	69a3      	ldr	r3, [r4, #24]
   b8a10:	1ac0      	subs	r0, r0, r3
   b8a12:	69e3      	ldr	r3, [r4, #28]
   b8a14:	4298      	cmp	r0, r3
   b8a16:	d2f1      	bcs.n	b89fc <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b8a18:	e7f6      	b.n	b8a08 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8a1a <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8a1a:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8a1c:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8a1e:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8a20:	b11b      	cbz	r3, b8a2a <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8a22:	f000 fe93 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b8a26:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b8a28:	bd10      	pop	{r4, pc}
        save();
   b8a2a:	6803      	ldr	r3, [r0, #0]
}
   b8a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8a30:	689b      	ldr	r3, [r3, #8]
   b8a32:	4718      	bx	r3

000b8a34 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b8a34:	f000 be52 	b.w	b96dc <os_mutex_recursive_unlock>

000b8a38 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b8a38:	b507      	push	{r0, r1, r2, lr}
   b8a3a:	4613      	mov	r3, r2
    if (data) {
   b8a3c:	b139      	cbz	r1, b8a4e <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b8a3e:	2200      	movs	r2, #0
   b8a40:	e9cd 2200 	strd	r2, r2, [sp]
   b8a44:	460a      	mov	r2, r1
   b8a46:	6801      	ldr	r1, [r0, #0]
   b8a48:	201e      	movs	r0, #30
   b8a4a:	f001 f88f 	bl	b9b6c <log_dump>
}
   b8a4e:	b003      	add	sp, #12
   b8a50:	f85d fb04 	ldr.w	pc, [sp], #4

000b8a54 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b8a54:	b510      	push	{r4, lr}
   b8a56:	4604      	mov	r4, r0
   b8a58:	3004      	adds	r0, #4
   b8a5a:	f7fc f9ac 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8a5e:	6823      	ldr	r3, [r4, #0]
   b8a60:	68e1      	ldr	r1, [r4, #12]
   b8a62:	695b      	ldr	r3, [r3, #20]
   b8a64:	4620      	mov	r0, r4
   b8a66:	4798      	blx	r3
   b8a68:	b918      	cbnz	r0, b8a72 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b8a6a:	6823      	ldr	r3, [r4, #0]
   b8a6c:	4620      	mov	r0, r4
   b8a6e:	699b      	ldr	r3, [r3, #24]
   b8a70:	4798      	blx	r3

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b8a72:	6860      	ldr	r0, [r4, #4]
   b8a74:	f7ff ffde 	bl	b8a34 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8a78:	2001      	movs	r0, #1
   b8a7a:	bd10      	pop	{r4, pc}

000b8a7c <_ZN15StorageHelperRK24PersistentDataFileSystem4loadEv>:
    }
    PersistentDataBase::save();
}
#endif // UNITTEST

bool StorageHelperRK::PersistentDataFileSystem::load() {
   b8a7c:	b538      	push	{r3, r4, r5, lr}
   b8a7e:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8a80:	3004      	adds	r0, #4
   b8a82:	f7fc f998 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    WITH_LOCK(*this) {
        bool loaded = false;

        int dataSize = 0;

        int fd = fs->open(filename, O_RDONLY);
   b8a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8a88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b8a8a:	6803      	ldr	r3, [r0, #0]
   b8a8c:	2200      	movs	r2, #0
   b8a8e:	689b      	ldr	r3, [r3, #8]
   b8a90:	4798      	blx	r3
        if (fd != -1) {
            dataSize = fs->read((uint8_t *)savedDataHeader, savedDataSize);
   b8a92:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8a94:	6803      	ldr	r3, [r0, #0]
   b8a96:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   b8a9a:	699b      	ldr	r3, [r3, #24]
   b8a9c:	4798      	blx	r3

            // Log.info("request to read %d, got %d bytes", (int)savedDataSize, (int) dataSize);
            // Log.dump((const uint8_t *)savedDataHeader, dataSize);

            if (validate(dataSize)) {
   b8a9e:	6823      	ldr	r3, [r4, #0]
            dataSize = fs->read((uint8_t *)savedDataHeader, savedDataSize);
   b8aa0:	4601      	mov	r1, r0
            if (validate(dataSize)) {
   b8aa2:	695b      	ldr	r3, [r3, #20]
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	4798      	blx	r3
   b8aa8:	4605      	mov	r5, r0
                loaded = true;
            }
            fs->close();
   b8aaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8aac:	6803      	ldr	r3, [r0, #0]
   b8aae:	68db      	ldr	r3, [r3, #12]
   b8ab0:	4798      	blx	r3
        }
        else {
            Log.trace("did not open file %s", filename.c_str());
        }
        
        if (!loaded) {
   b8ab2:	b91d      	cbnz	r5, b8abc <_ZN15StorageHelperRK24PersistentDataFileSystem4loadEv+0x40>
            initialize();
   b8ab4:	6823      	ldr	r3, [r4, #0]
   b8ab6:	4620      	mov	r0, r4
   b8ab8:	699b      	ldr	r3, [r3, #24]
   b8aba:	4798      	blx	r3
      { _M_device.unlock(); }
   b8abc:	6860      	ldr	r0, [r4, #4]
   b8abe:	f7ff ffb9 	bl	b8a34 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }

    return true;
}
   b8ac2:	2001      	movs	r0, #1
   b8ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8ac8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8aca:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8ace:	4f18      	ldr	r7, [pc, #96]	; (b8b30 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8ad0:	4e18      	ldr	r6, [pc, #96]	; (b8b34 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b8ad2:	4d19      	ldr	r5, [pc, #100]	; (b8b38 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b8ad4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b8ad6:	42a0      	cmp	r0, r4
   b8ad8:	d00c      	beq.n	b8af4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8ada:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8ade:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8ae0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b8ae4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b8ae6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8ae8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8aec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8af0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b8af2:	e7f0      	b.n	b8ad6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b8af4:	f001 0403 	and.w	r4, r1, #3
   b8af8:	4404      	add	r4, r0
    k = 0;
   b8afa:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8afc:	42a0      	cmp	r0, r4
   b8afe:	d004      	beq.n	b8b0a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8b00:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b8b04:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8b08:	e7f8      	b.n	b8afc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8b0a:	4809      	ldr	r0, [pc, #36]	; (b8b30 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8b0c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b8b0e:	4809      	ldr	r0, [pc, #36]	; (b8b34 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8b10:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b8b14:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b8b16:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8b18:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8b1a:	4b08      	ldr	r3, [pc, #32]	; (b8b3c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8b1c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8b20:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b8b22:	4b07      	ldr	r3, [pc, #28]	; (b8b40 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b8b24:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8b28:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b8b2a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b8b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8b30:	cc9e2d51 	.word	0xcc9e2d51
   b8b34:	1b873593 	.word	0x1b873593
   b8b38:	e6546b64 	.word	0xe6546b64
   b8b3c:	85ebca6b 	.word	0x85ebca6b
   b8b40:	c2b2ae35 	.word	0xc2b2ae35

000b8b44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b46:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8b48:	3004      	adds	r0, #4
   b8b4a:	f7fc f934 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b8b4e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8b50:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b8b52:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8b54:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8b56:	68a6      	ldr	r6, [r4, #8]
   b8b58:	4a05      	ldr	r2, [pc, #20]	; (b8b70 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b8b5a:	88f1      	ldrh	r1, [r6, #6]
   b8b5c:	4630      	mov	r0, r6
   b8b5e:	f7ff ffb3 	bl	b8ac8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b8b62:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8b64:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8b66:	6860      	ldr	r0, [r4, #4]
   b8b68:	f7ff ff64 	bl	b8a34 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8b6c:	4628      	mov	r0, r5
   b8b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8b70:	851c2a3f 	.word	0x851c2a3f

000b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b8b74:	b570      	push	{r4, r5, r6, lr}
   b8b76:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b8b78:	6885      	ldr	r5, [r0, #8]
   b8b7a:	f7ff ffe3 	bl	b8b44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8b7e:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b8b80:	6823      	ldr	r3, [r4, #0]
   b8b82:	4620      	mov	r0, r4
   b8b84:	691b      	ldr	r3, [r3, #16]
}
   b8b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b8b8a:	4718      	bx	r3

000b8b8c <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b8b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8b90:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8b92:	3004      	adds	r0, #4
   b8b94:	4690      	mov	r8, r2
   b8b96:	460d      	mov	r5, r1
   b8b98:	461f      	mov	r7, r3
   b8b9a:	f7fc f90c 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b8b9e:	68e2      	ldr	r2, [r4, #12]
   b8ba0:	f1c8 0301 	rsb	r3, r8, #1
   b8ba4:	4413      	add	r3, r2
   b8ba6:	42ab      	cmp	r3, r5
   b8ba8:	d319      	bcc.n	b8bde <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b8baa:	4638      	mov	r0, r7
   b8bac:	f005 f951 	bl	bde52 <strlen>
   b8bb0:	4540      	cmp	r0, r8
   b8bb2:	d214      	bcs.n	b8bde <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b8bb4:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b8bb6:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b8bb8:	4629      	mov	r1, r5
   b8bba:	4638      	mov	r0, r7
   b8bbc:	f005 f919 	bl	bddf2 <strcmp>
   b8bc0:	b158      	cbz	r0, b8bda <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b8bc2:	4642      	mov	r2, r8
   b8bc4:	2100      	movs	r1, #0
   b8bc6:	4628      	mov	r0, r5
   b8bc8:	f005 f8c6 	bl	bdd58 <memset>
                strcpy(p, value);
   b8bcc:	4639      	mov	r1, r7
   b8bce:	4628      	mov	r0, r5
   b8bd0:	f005 f919 	bl	bde06 <strcpy>
                updateHash();
   b8bd4:	4620      	mov	r0, r4
   b8bd6:	f7ff ffcd 	bl	b8b74 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b8bda:	2501      	movs	r5, #1
   b8bdc:	e000      	b.n	b8be0 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b8bde:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b8be0:	6860      	ldr	r0, [r4, #4]
   b8be2:	f7ff ff27 	bl	b8a34 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8be6:	4628      	mov	r0, r5
   b8be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8bec <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (logData && dataSize < 4096) {
   b8bee:	f890 3020 	ldrb.w	r3, [r0, #32]
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8bf2:	4604      	mov	r4, r0
   b8bf4:	460d      	mov	r5, r1
    if (logData && dataSize < 4096) {
   b8bf6:	b1ab      	cbz	r3, b8c24 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
   b8bf8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   b8bfc:	d217      	bcs.n	b8c2e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
        Log.info("validating data size=%d", (int)dataSize);
   b8bfe:	4e2c      	ldr	r6, [pc, #176]	; (b8cb0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b8c00:	460a      	mov	r2, r1
   b8c02:	4630      	mov	r0, r6
   b8c04:	492b      	ldr	r1, [pc, #172]	; (b8cb4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b8c06:	f7fb fab8 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b8c0a:	68a1      	ldr	r1, [r4, #8]
   b8c0c:	462a      	mov	r2, r5
   b8c0e:	4630      	mov	r0, r6
   b8c10:	f7ff ff12 	bl	b8a38 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b8c14:	2300      	movs	r3, #0
   b8c16:	9300      	str	r3, [sp, #0]
   b8c18:	4a27      	ldr	r2, [pc, #156]	; (b8cb8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xcc>)
   b8c1a:	6831      	ldr	r1, [r6, #0]
   b8c1c:	2301      	movs	r3, #1
   b8c1e:	201e      	movs	r0, #30
   b8c20:	f000 ff9c 	bl	b9b5c <log_write>
    if (dataSize >= 12 && 
   b8c24:	2d0b      	cmp	r5, #11
   b8c26:	d802      	bhi.n	b8c2e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8c28:	bb55      	cbnz	r5, b8c80 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
   b8c2a:	2000      	movs	r0, #0
   b8c2c:	e026      	b.n	b8c7c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>
        savedDataHeader->magic == savedDataMagic && 
   b8c2e:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8c30:	6922      	ldr	r2, [r4, #16]
   b8c32:	6819      	ldr	r1, [r3, #0]
   b8c34:	4291      	cmp	r1, r2
   b8c36:	d123      	bne.n	b8c80 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->magic == savedDataMagic && 
   b8c38:	8899      	ldrh	r1, [r3, #4]
   b8c3a:	8aa2      	ldrh	r2, [r4, #20]
   b8c3c:	4291      	cmp	r1, r2
   b8c3e:	d11f      	bne.n	b8c80 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->version == savedDataVersion &&
   b8c40:	88da      	ldrh	r2, [r3, #6]
   b8c42:	b2ab      	uxth	r3, r5
   b8c44:	429a      	cmp	r2, r3
   b8c46:	d81b      	bhi.n	b8c80 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        hash = getHash();
   b8c48:	4620      	mov	r0, r4
   b8c4a:	f7ff ff7b 	bl	b8b44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
        if (savedDataHeader->hash == hash) {                
   b8c4e:	68a3      	ldr	r3, [r4, #8]
   b8c50:	689a      	ldr	r2, [r3, #8]
   b8c52:	4282      	cmp	r2, r0
        hash = getHash();
   b8c54:	4606      	mov	r6, r0
        if (savedDataHeader->hash == hash) {                
   b8c56:	d114      	bne.n	b8c82 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x96>
            if ((size_t)dataSize < savedDataSize) {
   b8c58:	68e2      	ldr	r2, [r4, #12]
   b8c5a:	42aa      	cmp	r2, r5
   b8c5c:	d905      	bls.n	b8c6a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x7e>
                    p[ii] = 0;
   b8c5e:	2100      	movs	r1, #0
   b8c60:	5559      	strb	r1, [r3, r5]
                for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8c62:	68e2      	ldr	r2, [r4, #12]
   b8c64:	3501      	adds	r5, #1
   b8c66:	42aa      	cmp	r2, r5
   b8c68:	d8fa      	bhi.n	b8c60 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x74>
            savedDataHeader->size = (uint16_t) savedDataSize;
   b8c6a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            savedDataHeader->hash = getHash();
   b8c6e:	4620      	mov	r0, r4
            savedDataHeader->size = (uint16_t) savedDataSize;
   b8c70:	80da      	strh	r2, [r3, #6]
            savedDataHeader->hash = getHash();
   b8c72:	68a5      	ldr	r5, [r4, #8]
   b8c74:	f7ff ff66 	bl	b8b44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8c78:	60a8      	str	r0, [r5, #8]
            isValid = true;
   b8c7a:	2001      	movs	r0, #1
}
   b8c7c:	b002      	add	sp, #8
   b8c7e:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t hash = 0;
   b8c80:	2600      	movs	r6, #0
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8c82:	68a1      	ldr	r1, [r4, #8]
   b8c84:	680a      	ldr	r2, [r1, #0]
   b8c86:	2a00      	cmp	r2, #0
   b8c88:	d0cf      	beq.n	b8c2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b8c8a:	6888      	ldr	r0, [r1, #8]
   b8c8c:	888b      	ldrh	r3, [r1, #4]
   b8c8e:	9001      	str	r0, [sp, #4]
   b8c90:	88c9      	ldrh	r1, [r1, #6]
   b8c92:	9100      	str	r1, [sp, #0]
   b8c94:	4806      	ldr	r0, [pc, #24]	; (b8cb0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b8c96:	4909      	ldr	r1, [pc, #36]	; (b8cbc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd0>)
   b8c98:	f7fe fda1 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b8c9c:	e9cd 5600 	strd	r5, r6, [sp]
   b8ca0:	8aa3      	ldrh	r3, [r4, #20]
   b8ca2:	6922      	ldr	r2, [r4, #16]
   b8ca4:	4906      	ldr	r1, [pc, #24]	; (b8cc0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd4>)
   b8ca6:	4802      	ldr	r0, [pc, #8]	; (b8cb0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b8ca8:	f7fe fd99 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
   b8cac:	e7bd      	b.n	b8c2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
   b8cae:	bf00      	nop
   b8cb0:	2003e644 	.word	0x2003e644
   b8cb4:	000bf188 	.word	0x000bf188
   b8cb8:	000bf5cc 	.word	0x000bf5cc
   b8cbc:	000bf1a0 	.word	0x000bf1a0
   b8cc0:	000bf1d1 	.word	0x000bf1d1

000b8cc4 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8cc4:	b538      	push	{r3, r4, r5, lr}
   b8cc6:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8cc8:	68c2      	ldr	r2, [r0, #12]
   b8cca:	6880      	ldr	r0, [r0, #8]
   b8ccc:	2100      	movs	r1, #0
   b8cce:	f005 f843 	bl	bdd58 <memset>
    savedDataHeader->magic = savedDataMagic;
   b8cd2:	68a3      	ldr	r3, [r4, #8]
   b8cd4:	6922      	ldr	r2, [r4, #16]
   b8cd6:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8cd8:	68a3      	ldr	r3, [r4, #8]
   b8cda:	8aa2      	ldrh	r2, [r4, #20]
   b8cdc:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8cde:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b8ce2:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8ce4:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b8ce6:	68a5      	ldr	r5, [r4, #8]
   b8ce8:	f7ff ff2c 	bl	b8b44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8cec:	60a8      	str	r0, [r5, #8]
}
   b8cee:	bd38      	pop	{r3, r4, r5, pc}

000b8cf0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
void StorageHelperRK::PersistentDataBase::save() {
   b8cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cf2:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b8cf4:	6885      	ldr	r5, [r0, #8]
   b8cf6:	f7ff ff25 	bl	b8b44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8cfa:	60a8      	str	r0, [r5, #8]
    if (logData) {
   b8cfc:	f894 3020 	ldrb.w	r3, [r4, #32]
   b8d00:	b19b      	cbz	r3, b8d2a <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3a>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b8d02:	68a3      	ldr	r3, [r4, #8]
   b8d04:	4d0a      	ldr	r5, [pc, #40]	; (b8d30 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b8d06:	88da      	ldrh	r2, [r3, #6]
   b8d08:	490a      	ldr	r1, [pc, #40]	; (b8d34 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x44>)
   b8d0a:	4628      	mov	r0, r5
   b8d0c:	f7fb fa35 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b8d10:	68a1      	ldr	r1, [r4, #8]
   b8d12:	4628      	mov	r0, r5
   b8d14:	88ca      	ldrh	r2, [r1, #6]
   b8d16:	f7ff fe8f 	bl	b8a38 <_ZNK5spark6Logger4dumpEPKvj>
   b8d1a:	2300      	movs	r3, #0
   b8d1c:	9300      	str	r3, [sp, #0]
   b8d1e:	4a06      	ldr	r2, [pc, #24]	; (b8d38 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x48>)
   b8d20:	6829      	ldr	r1, [r5, #0]
   b8d22:	2301      	movs	r3, #1
   b8d24:	201e      	movs	r0, #30
   b8d26:	f000 ff19 	bl	b9b5c <log_write>
}
   b8d2a:	b003      	add	sp, #12
   b8d2c:	bd30      	pop	{r4, r5, pc}
   b8d2e:	bf00      	nop
   b8d30:	2003e644 	.word	0x2003e644
   b8d34:	000bf202 	.word	0x000bf202
   b8d38:	000bf5cc 	.word	0x000bf5cc

000b8d3c <_ZN15StorageHelperRK24PersistentDataFileSystem4saveEv>:
void StorageHelperRK::PersistentDataFileSystem::save() {
   b8d3c:	b510      	push	{r4, lr}
   b8d3e:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8d40:	3004      	adds	r0, #4
   b8d42:	f7fc f838 	bl	b4db6 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        int fd = fs->open(filename, O_RDWR | O_CREAT | O_TRUNC);
   b8d46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8d48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b8d4a:	6803      	ldr	r3, [r0, #0]
   b8d4c:	f240 6202 	movw	r2, #1538	; 0x602
   b8d50:	689b      	ldr	r3, [r3, #8]
   b8d52:	4798      	blx	r3
            /* size_t count = */fs->write((const uint8_t *)savedDataHeader, savedDataSize);
   b8d54:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8d56:	6803      	ldr	r3, [r0, #0]
   b8d58:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   b8d5c:	69db      	ldr	r3, [r3, #28]
   b8d5e:	4798      	blx	r3
            fs->close();
   b8d60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8d62:	6803      	ldr	r3, [r0, #0]
   b8d64:	68db      	ldr	r3, [r3, #12]
   b8d66:	4798      	blx	r3
      { _M_device.unlock(); }
   b8d68:	6860      	ldr	r0, [r4, #4]
   b8d6a:	f7ff fe63 	bl	b8a34 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
    PersistentDataBase::save();
   b8d6e:	4620      	mov	r0, r4
}
   b8d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PersistentDataBase::save();
   b8d74:	f7ff bfbc 	b.w	b8cf0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b8d78 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b8d78:	4770      	bx	lr

000b8d7a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b8d7a:	b510      	push	{r4, lr}
}
   b8d7c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b8d7e:	4604      	mov	r4, r0
}
   b8d80:	f7fb f98d 	bl	b409e <_ZdlPvj>
   b8d84:	4620      	mov	r0, r4
   b8d86:	bd10      	pop	{r4, pc}

000b8d88 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b8d88:	b510      	push	{r4, lr}
   b8d8a:	7202      	strb	r2, [r0, #8]
   b8d8c:	22ff      	movs	r2, #255	; 0xff
   b8d8e:	8142      	strh	r2, [r0, #10]
   b8d90:	2200      	movs	r2, #0
   b8d92:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8d96:	6142      	str	r2, [r0, #20]
   b8d98:	7602      	strb	r2, [r0, #24]
   b8d9a:	61c2      	str	r2, [r0, #28]
    instance = this;
   b8d9c:	4a02      	ldr	r2, [pc, #8]	; (b8da8 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b8d9e:	4c03      	ldr	r4, [pc, #12]	; (b8dac <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b8da0:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b8da2:	e9c0 4100 	strd	r4, r1, [r0]
}
   b8da6:	bd10      	pop	{r4, pc}
   b8da8:	2003e5f8 	.word	0x2003e5f8
   b8dac:	000bf454 	.word	0x000bf454

000b8db0 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b8db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8db4:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b8db8:	4604      	mov	r4, r0
   b8dba:	4689      	mov	r9, r1
   b8dbc:	4616      	mov	r6, r2
   b8dbe:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b8dc0:	f1b8 0f00 	cmp.w	r8, #0
   b8dc4:	d002      	beq.n	b8dcc <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b8dc6:	6840      	ldr	r0, [r0, #4]
   b8dc8:	f001 fdb3 	bl	ba932 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b8dcc:	7a21      	ldrb	r1, [r4, #8]
   b8dce:	6860      	ldr	r0, [r4, #4]
   b8dd0:	f001 fd8f 	bl	ba8f2 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b8dd4:	6860      	ldr	r0, [r4, #4]
   b8dd6:	6803      	ldr	r3, [r0, #0]
   b8dd8:	4649      	mov	r1, r9
   b8dda:	689b      	ldr	r3, [r3, #8]
   b8ddc:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b8dde:	6860      	ldr	r0, [r4, #4]
   b8de0:	2100      	movs	r1, #0
   b8de2:	f001 fda2 	bl	ba92a <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b8de6:	4605      	mov	r5, r0
   b8de8:	bb00      	cbnz	r0, b8e2c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b8dea:	2301      	movs	r3, #1
   b8dec:	7a21      	ldrb	r1, [r4, #8]
   b8dee:	6860      	ldr	r0, [r4, #4]
   b8df0:	463a      	mov	r2, r7
   b8df2:	f001 fd6c 	bl	ba8ce <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b8df6:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b8df8:	4603      	mov	r3, r0
        if (count == num) {
   b8dfa:	d109      	bne.n	b8e10 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b8dfc:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b8dfe:	42be      	cmp	r6, r7
   b8e00:	d01c      	beq.n	b8e3c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b8e02:	6860      	ldr	r0, [r4, #4]
   b8e04:	6803      	ldr	r3, [r0, #0]
   b8e06:	695b      	ldr	r3, [r3, #20]
   b8e08:	4798      	blx	r3
   b8e0a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b8e0e:	e7f6      	b.n	b8dfe <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b8e10:	490b      	ldr	r1, [pc, #44]	; (b8e40 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b8e12:	480c      	ldr	r0, [pc, #48]	; (b8e44 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b8e14:	464a      	mov	r2, r9
   b8e16:	f7fe fcf0 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b8e1a:	f1b8 0f00 	cmp.w	r8, #0
   b8e1e:	d002      	beq.n	b8e26 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b8e20:	6860      	ldr	r0, [r4, #4]
   b8e22:	f001 fd8f 	bl	ba944 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b8e26:	4628      	mov	r0, r5
   b8e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b8e2c:	4603      	mov	r3, r0
   b8e2e:	4906      	ldr	r1, [pc, #24]	; (b8e48 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b8e30:	4804      	ldr	r0, [pc, #16]	; (b8e44 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b8e32:	464a      	mov	r2, r9
   b8e34:	f7fe fce1 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b8e38:	2500      	movs	r5, #0
   b8e3a:	e7ee      	b.n	b8e1a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b8e3c:	2501      	movs	r5, #1
   b8e3e:	e7ec      	b.n	b8e1a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b8e40:	000bf268 	.word	0x000bf268
   b8e44:	2003e5f4 	.word	0x2003e5f4
   b8e48:	000bf28d 	.word	0x000bf28d

000b8e4c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b8e4c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b8e4e:	9300      	str	r3, [sp, #0]
   b8e50:	2301      	movs	r3, #1
   b8e52:	f7ff ffad 	bl	b8db0 <_ZN6AB180513readRegistersEhPhjb>
}
   b8e56:	b003      	add	sp, #12
   b8e58:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e5c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b8e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b8e5e:	8943      	ldrh	r3, [r0, #10]
   b8e60:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b8e62:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b8e64:	d010      	beq.n	b8e88 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b8e66:	4e19      	ldr	r6, [pc, #100]	; (b8ecc <_ZN6AB180510detectChipEv+0x70>)
   b8e68:	4d19      	ldr	r5, [pc, #100]	; (b8ed0 <_ZN6AB180510detectChipEv+0x74>)
   b8e6a:	f000 fc6f 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b8e6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b8e72:	d209      	bcs.n	b8e88 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b8e74:	8960      	ldrh	r0, [r4, #10]
   b8e76:	f003 fff1 	bl	bce5c <digitalRead>
   b8e7a:	2801      	cmp	r0, #1
   b8e7c:	d004      	beq.n	b8e88 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b8e7e:	4631      	mov	r1, r6
   b8e80:	4628      	mov	r0, r5
   b8e82:	f7fb f97a 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b8e86:	e7f0      	b.n	b8e6a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b8e88:	2301      	movs	r3, #1
   b8e8a:	f10d 0207 	add.w	r2, sp, #7
   b8e8e:	2128      	movs	r1, #40	; 0x28
   b8e90:	4620      	mov	r0, r4
   b8e92:	f7ff ffdb 	bl	b8e4c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b8e96:	b930      	cbnz	r0, b8ea6 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b8e98:	480d      	ldr	r0, [pc, #52]	; (b8ed0 <_ZN6AB180510detectChipEv+0x74>)
   b8e9a:	490e      	ldr	r1, [pc, #56]	; (b8ed4 <_ZN6AB180510detectChipEv+0x78>)
   b8e9c:	f7fb f96d 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b8ea0:	2000      	movs	r0, #0
}
   b8ea2:	b002      	add	sp, #8
   b8ea4:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b8ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8eaa:	2b18      	cmp	r3, #24
   b8eac:	d1f4      	bne.n	b8e98 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b8eae:	2301      	movs	r3, #1
   b8eb0:	f10d 0207 	add.w	r2, sp, #7
   b8eb4:	2129      	movs	r1, #41	; 0x29
   b8eb6:	4620      	mov	r0, r4
   b8eb8:	f7ff ffc8 	bl	b8e4c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b8ebc:	2800      	cmp	r0, #0
   b8ebe:	d0eb      	beq.n	b8e98 <_ZN6AB180510detectChipEv+0x3c>
   b8ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8ec4:	2b05      	cmp	r3, #5
   b8ec6:	d1e7      	bne.n	b8e98 <_ZN6AB180510detectChipEv+0x3c>
   b8ec8:	e7eb      	b.n	b8ea2 <_ZN6AB180510detectChipEv+0x46>
   b8eca:	bf00      	nop
   b8ecc:	000bf2b1 	.word	0x000bf2b1
   b8ed0:	2003e5f4 	.word	0x2003e5f4
   b8ed4:	000bf2c6 	.word	0x000bf2c6

000b8ed8 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b8ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8edc:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b8ee0:	4604      	mov	r4, r0
   b8ee2:	460f      	mov	r7, r1
   b8ee4:	4615      	mov	r5, r2
   b8ee6:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b8ee8:	f1b8 0f00 	cmp.w	r8, #0
   b8eec:	d002      	beq.n	b8ef4 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b8eee:	6840      	ldr	r0, [r0, #4]
   b8ef0:	f001 fd1f 	bl	ba932 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b8ef4:	7a21      	ldrb	r1, [r4, #8]
   b8ef6:	6860      	ldr	r0, [r4, #4]
   b8ef8:	f001 fcfb 	bl	ba8f2 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b8efc:	6860      	ldr	r0, [r4, #4]
   b8efe:	6803      	ldr	r3, [r0, #0]
   b8f00:	4639      	mov	r1, r7
   b8f02:	689b      	ldr	r3, [r3, #8]
   b8f04:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b8f06:	442e      	add	r6, r5
   b8f08:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b8f0a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b8f0c:	d005      	beq.n	b8f1a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b8f0e:	6803      	ldr	r3, [r0, #0]
   b8f10:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8f14:	689b      	ldr	r3, [r3, #8]
   b8f16:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b8f18:	e7f6      	b.n	b8f08 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b8f1a:	2101      	movs	r1, #1
   b8f1c:	f001 fd05 	bl	ba92a <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b8f20:	4603      	mov	r3, r0
   b8f22:	b170      	cbz	r0, b8f42 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b8f24:	4908      	ldr	r1, [pc, #32]	; (b8f48 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b8f26:	4809      	ldr	r0, [pc, #36]	; (b8f4c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b8f28:	463a      	mov	r2, r7
   b8f2a:	f7fe fc66 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b8f2e:	2500      	movs	r5, #0
    }

    if (lock) {
   b8f30:	f1b8 0f00 	cmp.w	r8, #0
   b8f34:	d002      	beq.n	b8f3c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b8f36:	6860      	ldr	r0, [r4, #4]
   b8f38:	f001 fd04 	bl	ba944 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b8f3c:	4628      	mov	r0, r5
   b8f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b8f42:	2501      	movs	r5, #1
   b8f44:	e7f4      	b.n	b8f30 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b8f46:	bf00      	nop
   b8f48:	000bf2d3 	.word	0x000bf2d3
   b8f4c:	2003e5f4 	.word	0x2003e5f4

000b8f50 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b8f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8f52:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b8f56:	9300      	str	r3, [sp, #0]
   b8f58:	f10d 020f 	add.w	r2, sp, #15
   b8f5c:	2301      	movs	r3, #1
   b8f5e:	f7ff ffbb 	bl	b8ed8 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b8f62:	b005      	add	sp, #20
   b8f64:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f68 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b8f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b8f6a:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b8f6c:	460c      	mov	r4, r1
   b8f6e:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b8f70:	491a      	ldr	r1, [pc, #104]	; (b8fdc <_ZN6AB18056setWDTEi+0x74>)
   b8f72:	481b      	ldr	r0, [pc, #108]	; (b8fe0 <_ZN6AB18056setWDTEi+0x78>)
   b8f74:	f7fb f901 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b8f78:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b8f7a:	bfb8      	it	lt
   b8f7c:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b8f7e:	b97c      	cbnz	r4, b8fa0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b8f80:	2301      	movs	r3, #1
   b8f82:	4622      	mov	r2, r4
   b8f84:	211b      	movs	r1, #27
   b8f86:	4628      	mov	r0, r5
   b8f88:	f7ff ffe2 	bl	b8f50 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b8f8c:	4915      	ldr	r1, [pc, #84]	; (b8fe4 <_ZN6AB18056setWDTEi+0x7c>)
   b8f8e:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b8f90:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b8f92:	4813      	ldr	r0, [pc, #76]	; (b8fe0 <_ZN6AB18056setWDTEi+0x78>)
   b8f94:	f7fe fc23 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b8f98:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b8f9a:	616c      	str	r4, [r5, #20]
}
   b8f9c:	4630      	mov	r0, r6
   b8f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b8fa0:	2c03      	cmp	r4, #3
   b8fa2:	dd19      	ble.n	b8fd8 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b8fa4:	10a7      	asrs	r7, r4, #2
   b8fa6:	2f1f      	cmp	r7, #31
   b8fa8:	bfa8      	it	ge
   b8faa:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b8fac:	00ba      	lsls	r2, r7, #2
   b8fae:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b8fb2:	2301      	movs	r3, #1
   b8fb4:	b2d2      	uxtb	r2, r2
   b8fb6:	211b      	movs	r1, #27
   b8fb8:	4628      	mov	r0, r5
   b8fba:	f7ff ffc9 	bl	b8f50 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b8fbe:	463a      	mov	r2, r7
   b8fc0:	4603      	mov	r3, r0
   b8fc2:	4909      	ldr	r1, [pc, #36]	; (b8fe8 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b8fc4:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b8fc6:	4806      	ldr	r0, [pc, #24]	; (b8fe0 <_ZN6AB18056setWDTEi+0x78>)
   b8fc8:	f7fe fc09 	bl	b77de <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b8fcc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b8fd0:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b8fd2:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b8fd4:	616f      	str	r7, [r5, #20]
   b8fd6:	e7e1      	b.n	b8f9c <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b8fd8:	2701      	movs	r7, #1
   b8fda:	e7e7      	b.n	b8fac <_ZN6AB18056setWDTEi+0x44>
   b8fdc:	000bf2f8 	.word	0x000bf2f8
   b8fe0:	2003e5f4 	.word	0x2003e5f4
   b8fe4:	000bf302 	.word	0x000bf302
   b8fe8:	000bf31e 	.word	0x000bf31e

000b8fec <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b8fec:	4b06      	ldr	r3, [pc, #24]	; (b9008 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b8fee:	681a      	ldr	r2, [r3, #0]
   b8ff0:	b14a      	cbz	r2, b9006 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b8ff2:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8ff6:	430b      	orrs	r3, r1
   b8ff8:	d105      	bne.n	b9006 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b8ffa:	68d3      	ldr	r3, [r2, #12]
   b8ffc:	b11b      	cbz	r3, b9006 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b8ffe:	2100      	movs	r1, #0
   b9000:	4610      	mov	r0, r2
   b9002:	f7ff bfb1 	b.w	b8f68 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b9006:	4770      	bx	lr
   b9008:	2003e5f8 	.word	0x2003e5f8

000b900c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b900c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9010:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b9014:	4605      	mov	r5, r0
   b9016:	4616      	mov	r6, r2
   b9018:	461f      	mov	r7, r3
    if (lock) {
   b901a:	f1b8 0f00 	cmp.w	r8, #0
   b901e:	d004      	beq.n	b902a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b9020:	6840      	ldr	r0, [r0, #4]
   b9022:	9101      	str	r1, [sp, #4]
   b9024:	f001 fc85 	bl	ba932 <_ZN7TwoWire4lockEv>
   b9028:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b902a:	9101      	str	r1, [sp, #4]
   b902c:	2300      	movs	r3, #0
   b902e:	f10d 020f 	add.w	r2, sp, #15
   b9032:	4628      	mov	r0, r5
   b9034:	f7ff ff0a 	bl	b8e4c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b9038:	4604      	mov	r4, r0
   b903a:	b160      	cbz	r0, b9056 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b903c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b9040:	ea03 0206 	and.w	r2, r3, r6
   b9044:	433a      	orrs	r2, r7
        if (newValue != value) {
   b9046:	4293      	cmp	r3, r2
   b9048:	d005      	beq.n	b9056 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b904a:	9901      	ldr	r1, [sp, #4]
   b904c:	2300      	movs	r3, #0
   b904e:	4628      	mov	r0, r5
   b9050:	f7ff ff7e 	bl	b8f50 <_ZN6AB180513writeRegisterEhhb>
   b9054:	4604      	mov	r4, r0
    if (lock) {
   b9056:	f1b8 0f00 	cmp.w	r8, #0
   b905a:	d002      	beq.n	b9062 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b905c:	6868      	ldr	r0, [r5, #4]
   b905e:	f001 fc71 	bl	ba944 <_ZN7TwoWire6unlockEv>
}
   b9062:	4620      	mov	r0, r4
   b9064:	b004      	add	sp, #16
   b9066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b906a <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b906a:	b513      	push	{r0, r1, r4, lr}
   b906c:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b906e:	f10d 0207 	add.w	r2, sp, #7
   b9072:	f7ff feeb 	bl	b8e4c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b9076:	b128      	cbz	r0, b9084 <_ZN6AB180510isBitClearEhhb+0x1a>
   b9078:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b907c:	421c      	tst	r4, r3
   b907e:	bf0c      	ite	eq
   b9080:	2001      	moveq	r0, #1
   b9082:	2000      	movne	r0, #0
}
   b9084:	b002      	add	sp, #8
   b9086:	bd10      	pop	{r4, pc}

000b9088 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b9088:	b513      	push	{r0, r1, r4, lr}
   b908a:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b908c:	f10d 0207 	add.w	r2, sp, #7
   b9090:	f7ff fedc 	bl	b8e4c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b9094:	b128      	cbz	r0, b90a2 <_ZN6AB18058isBitSetEhhb+0x1a>
   b9096:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b909a:	421c      	tst	r4, r3
   b909c:	bf14      	ite	ne
   b909e:	2001      	movne	r0, #1
   b90a0:	2000      	moveq	r0, #0
}
   b90a2:	b002      	add	sp, #8
   b90a4:	bd10      	pop	{r4, pc}

000b90a6 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b90a6:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b90a8:	43d2      	mvns	r2, r2
   b90aa:	9300      	str	r3, [sp, #0]
   b90ac:	b2d2      	uxtb	r2, r2
   b90ae:	2300      	movs	r3, #0
   b90b0:	f7ff ffac 	bl	b900c <_ZN6AB180512maskRegisterEhhhb>
}
   b90b4:	b003      	add	sp, #12
   b90b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b90bc <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b90bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b90be:	2301      	movs	r3, #1
   b90c0:	f10d 0207 	add.w	r2, sp, #7
   b90c4:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b90c6:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b90c8:	f7ff fec0 	bl	b8e4c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b90cc:	4605      	mov	r5, r0
   b90ce:	b938      	cbnz	r0, b90e0 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b90d0:	491e      	ldr	r1, [pc, #120]	; (b914c <_ZN6AB180516updateWakeReasonEv+0x90>)
   b90d2:	481f      	ldr	r0, [pc, #124]	; (b9150 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b90d4:	22ad      	movs	r2, #173	; 0xad
   b90d6:	f7fe fb90 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
}
   b90da:	4628      	mov	r0, r5
   b90dc:	b003      	add	sp, #12
   b90de:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b90e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b90e4:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b90e8:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b90ec:	d00b      	beq.n	b9106 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b90ee:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b90f0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b90f2:	210f      	movs	r1, #15
   b90f4:	4620      	mov	r0, r4
   b90f6:	f7ff ffd6 	bl	b90a6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b90fa:	4a16      	ldr	r2, [pc, #88]	; (b9154 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b90fc:	4916      	ldr	r1, [pc, #88]	; (b9158 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b90fe:	4814      	ldr	r0, [pc, #80]	; (b9150 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b9100:	f7fb f83b 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b9104:	e7e9      	b.n	b90da <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b9106:	2208      	movs	r2, #8
   b9108:	2117      	movs	r1, #23
   b910a:	4620      	mov	r0, r4
   b910c:	f7ff ffbc 	bl	b9088 <_ZN6AB18058isBitSetEhhb>
   b9110:	b118      	cbz	r0, b911a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b9112:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b9114:	4a11      	ldr	r2, [pc, #68]	; (b915c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b9116:	61e3      	str	r3, [r4, #28]
   b9118:	e7f0      	b.n	b90fc <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b911a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b911e:	071a      	lsls	r2, r3, #28
   b9120:	d509      	bpl.n	b9136 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b9122:	2303      	movs	r3, #3
   b9124:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b9126:	2208      	movs	r2, #8
   b9128:	2301      	movs	r3, #1
   b912a:	210f      	movs	r1, #15
   b912c:	4620      	mov	r0, r4
   b912e:	f7ff ffba 	bl	b90a6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b9132:	4a0b      	ldr	r2, [pc, #44]	; (b9160 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b9134:	e7e2      	b.n	b90fc <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b9136:	075b      	lsls	r3, r3, #29
   b9138:	d5cf      	bpl.n	b90da <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b913a:	2204      	movs	r2, #4
   b913c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b913e:	2301      	movs	r3, #1
   b9140:	210f      	movs	r1, #15
   b9142:	4620      	mov	r0, r4
   b9144:	f7ff ffaf 	bl	b90a6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b9148:	4a06      	ldr	r2, [pc, #24]	; (b9164 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b914a:	e7d7      	b.n	b90fc <_ZN6AB180516updateWakeReasonEv+0x40>
   b914c:	000bf371 	.word	0x000bf371
   b9150:	2003e5f4 	.word	0x2003e5f4
   b9154:	000bf342 	.word	0x000bf342
   b9158:	000bf390 	.word	0x000bf390
   b915c:	000bf34b 	.word	0x000bf34b
   b9160:	000bf35b 	.word	0x000bf35b
   b9164:	000bf36b 	.word	0x000bf36b

000b9168 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b9168:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b916a:	9300      	str	r3, [sp, #0]
   b916c:	4613      	mov	r3, r2
   b916e:	22ff      	movs	r2, #255	; 0xff
   b9170:	f7ff ff4c 	bl	b900c <_ZN6AB180512maskRegisterEhhhb>
}
   b9174:	b003      	add	sp, #12
   b9176:	f85d fb04 	ldr.w	pc, [sp], #4

000b917a <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b917a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b917e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b9182:	4605      	mov	r5, r0
   b9184:	460c      	mov	r4, r1
   b9186:	4691      	mov	r9, r2
   b9188:	461f      	mov	r7, r3
    if (lock) {
   b918a:	f1ba 0f00 	cmp.w	sl, #0
   b918e:	d002      	beq.n	b9196 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b9190:	6840      	ldr	r0, [r0, #4]
   b9192:	f001 fbce 	bl	ba932 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b9196:	b307      	cbz	r7, b91da <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b9198:	2f20      	cmp	r7, #32
   b919a:	463e      	mov	r6, r7
   b919c:	bf28      	it	cs
   b919e:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b91a0:	2c7f      	cmp	r4, #127	; 0x7f
   b91a2:	d826      	bhi.n	b91f2 <_ZN6AB18057readRamEjPhjb+0x78>
   b91a4:	1933      	adds	r3, r6, r4
   b91a6:	2b80      	cmp	r3, #128	; 0x80
   b91a8:	d901      	bls.n	b91ae <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b91aa:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b91ae:	2301      	movs	r3, #1
   b91b0:	2204      	movs	r2, #4
   b91b2:	213f      	movs	r1, #63	; 0x3f
   b91b4:	4628      	mov	r0, r5
   b91b6:	f7ff ff76 	bl	b90a6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b91ba:	2300      	movs	r3, #0
   b91bc:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b91c0:	9300      	str	r3, [sp, #0]
   b91c2:	464a      	mov	r2, r9
   b91c4:	4633      	mov	r3, r6
   b91c6:	b2c9      	uxtb	r1, r1
   b91c8:	4628      	mov	r0, r5
   b91ca:	f7ff fdf1 	bl	b8db0 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b91ce:	4680      	mov	r8, r0
   b91d0:	b128      	cbz	r0, b91de <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b91d2:	4434      	add	r4, r6
        dataLen -= count;
   b91d4:	1bbf      	subs	r7, r7, r6
        data += count;
   b91d6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b91d8:	e7dd      	b.n	b9196 <_ZN6AB18057readRamEjPhjb+0x1c>
   b91da:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b91de:	f1ba 0f00 	cmp.w	sl, #0
   b91e2:	d002      	beq.n	b91ea <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b91e4:	6868      	ldr	r0, [r5, #4]
   b91e6:	f001 fbad 	bl	ba944 <_ZN7TwoWire6unlockEv>
}
   b91ea:	4640      	mov	r0, r8
   b91ec:	b002      	add	sp, #8
   b91ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b91f2:	2301      	movs	r3, #1
   b91f4:	2204      	movs	r2, #4
   b91f6:	213f      	movs	r1, #63	; 0x3f
   b91f8:	4628      	mov	r0, r5
   b91fa:	f7ff ffb5 	bl	b9168 <_ZN6AB180514setRegisterBitEhhb>
   b91fe:	e7dc      	b.n	b91ba <_ZN6AB18057readRamEjPhjb+0x40>

000b9200 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b9200:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9204:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b9208:	4605      	mov	r5, r0
   b920a:	460c      	mov	r4, r1
   b920c:	4691      	mov	r9, r2
   b920e:	461f      	mov	r7, r3
    if (lock) {
   b9210:	f1ba 0f00 	cmp.w	sl, #0
   b9214:	d002      	beq.n	b921c <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b9216:	6840      	ldr	r0, [r0, #4]
   b9218:	f001 fb8b 	bl	ba932 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b921c:	b307      	cbz	r7, b9260 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b921e:	2f1f      	cmp	r7, #31
   b9220:	463e      	mov	r6, r7
   b9222:	bf28      	it	cs
   b9224:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b9226:	2c7f      	cmp	r4, #127	; 0x7f
   b9228:	d826      	bhi.n	b9278 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b922a:	1933      	adds	r3, r6, r4
   b922c:	2b80      	cmp	r3, #128	; 0x80
   b922e:	d901      	bls.n	b9234 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b9230:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b9234:	2301      	movs	r3, #1
   b9236:	2204      	movs	r2, #4
   b9238:	213f      	movs	r1, #63	; 0x3f
   b923a:	4628      	mov	r0, r5
   b923c:	f7ff ff33 	bl	b90a6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b9240:	2300      	movs	r3, #0
   b9242:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b9246:	9300      	str	r3, [sp, #0]
   b9248:	464a      	mov	r2, r9
   b924a:	4633      	mov	r3, r6
   b924c:	b2c9      	uxtb	r1, r1
   b924e:	4628      	mov	r0, r5
   b9250:	f7ff fe42 	bl	b8ed8 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b9254:	4680      	mov	r8, r0
   b9256:	b128      	cbz	r0, b9264 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b9258:	4434      	add	r4, r6
        dataLen -= count;
   b925a:	1bbf      	subs	r7, r7, r6
        data += count;
   b925c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b925e:	e7dd      	b.n	b921c <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b9260:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b9264:	f1ba 0f00 	cmp.w	sl, #0
   b9268:	d002      	beq.n	b9270 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b926a:	6868      	ldr	r0, [r5, #4]
   b926c:	f001 fb6a 	bl	ba944 <_ZN7TwoWire6unlockEv>
}
   b9270:	4640      	mov	r0, r8
   b9272:	b002      	add	sp, #8
   b9274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b9278:	2301      	movs	r3, #1
   b927a:	2204      	movs	r2, #4
   b927c:	213f      	movs	r1, #63	; 0x3f
   b927e:	4628      	mov	r0, r5
   b9280:	f7ff ff72 	bl	b9168 <_ZN6AB180514setRegisterBitEhhb>
   b9284:	e7dc      	b.n	b9240 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000b9288 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b9288:	b530      	push	{r4, r5, lr}
   b928a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b928c:	680d      	ldr	r5, [r1, #0]
   b928e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b9292:	9503      	str	r5, [sp, #12]
   b9294:	684d      	ldr	r5, [r1, #4]
   b9296:	9502      	str	r5, [sp, #8]
   b9298:	688d      	ldr	r5, [r1, #8]
   b929a:	9501      	str	r5, [sp, #4]
   b929c:	68c9      	ldr	r1, [r1, #12]
   b929e:	9100      	str	r1, [sp, #0]
   b92a0:	3301      	adds	r3, #1
   b92a2:	4904      	ldr	r1, [pc, #16]	; (b92b4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b92a4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b92a8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b92aa:	f003 f949 	bl	bc540 <_ZN6String6formatEPKcz>
}
   b92ae:	4620      	mov	r0, r4
   b92b0:	b005      	add	sp, #20
   b92b2:	bd30      	pop	{r4, r5, pc}
   b92b4:	000bf3a1 	.word	0x000bf3a1

000b92b8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b92b8:	0903      	lsrs	r3, r0, #4
}
   b92ba:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b92bc:	f000 000f 	and.w	r0, r0, #15
}
   b92c0:	fb02 0003 	mla	r0, r2, r3, r0
   b92c4:	4770      	bx	lr

000b92c6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b92c6:	b538      	push	{r3, r4, r5, lr}
   b92c8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b92ca:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b92cc:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b92ce:	f7ff fff3 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b92d2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b92d4:	7860      	ldrb	r0, [r4, #1]
   b92d6:	f7ff ffef 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b92da:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b92dc:	78a0      	ldrb	r0, [r4, #2]
   b92de:	f7ff ffeb 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b92e2:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b92e4:	78e0      	ldrb	r0, [r4, #3]
   b92e6:	f7ff ffe7 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b92ea:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b92ec:	7920      	ldrb	r0, [r4, #4]
   b92ee:	f7ff ffe3 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b92f2:	3801      	subs	r0, #1
   b92f4:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b92f6:	b92d      	cbnz	r5, b9304 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b92f8:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b92fa:	7828      	ldrb	r0, [r5, #0]
   b92fc:	f7ff ffdc 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b9300:	6188      	str	r0, [r1, #24]
}
   b9302:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b9304:	7960      	ldrb	r0, [r4, #5]
   b9306:	f7ff ffd7 	bl	b92b8 <_ZN6AB180510bcdToValueEh>
   b930a:	3064      	adds	r0, #100	; 0x64
   b930c:	1da5      	adds	r5, r4, #6
   b930e:	6148      	str	r0, [r1, #20]
   b9310:	e7f3      	b.n	b92fa <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b9314 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b9314:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b9316:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b9318:	b088      	sub	sp, #32
   b931a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b931c:	461a      	mov	r2, r3
   b931e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b9320:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b9322:	f7ff fea2 	bl	b906a <_ZN6AB180510isBitClearEhhb>
   b9326:	b1f0      	cbz	r0, b9366 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b9328:	2308      	movs	r3, #8
   b932a:	2601      	movs	r6, #1
   b932c:	4620      	mov	r0, r4
   b932e:	9600      	str	r6, [sp, #0]
   b9330:	eb0d 0203 	add.w	r2, sp, r3
   b9334:	2100      	movs	r1, #0
   b9336:	f7ff fd3b 	bl	b8db0 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b933a:	4604      	mov	r4, r0
   b933c:	b198      	cbz	r0, b9366 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b933e:	4632      	mov	r2, r6
   b9340:	4629      	mov	r1, r5
   b9342:	f10d 0009 	add.w	r0, sp, #9
   b9346:	f7ff ffbe 	bl	b92c6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b934a:	a804      	add	r0, sp, #16
   b934c:	f7ff ff9c 	bl	b9288 <_ZN6AB180510tmToStringEPK2tm>
   b9350:	4808      	ldr	r0, [pc, #32]	; (b9374 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b9352:	9a04      	ldr	r2, [sp, #16]
   b9354:	4908      	ldr	r1, [pc, #32]	; (b9378 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b9356:	f7fa ff10 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b935a:	a804      	add	r0, sp, #16
   b935c:	f002 ff80 	bl	bc260 <_ZN6StringD1Ev>
}
   b9360:	4620      	mov	r0, r4
   b9362:	b008      	add	sp, #32
   b9364:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b9366:	2224      	movs	r2, #36	; 0x24
   b9368:	2100      	movs	r1, #0
   b936a:	4628      	mov	r0, r5
   b936c:	f004 fcf4 	bl	bdd58 <memset>
   b9370:	2400      	movs	r4, #0
   b9372:	e7f5      	b.n	b9360 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b9374:	2003e5f4 	.word	0x2003e5f4
   b9378:	000bf3bf 	.word	0x000bf3bf

000b937c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b937c:	b530      	push	{r4, r5, lr}
   b937e:	b08b      	sub	sp, #44	; 0x2c
   b9380:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b9382:	a901      	add	r1, sp, #4
   b9384:	f7ff ffc6 	bl	b9314 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b9388:	4604      	mov	r4, r0
   b938a:	b120      	cbz	r0, b9396 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b938c:	a801      	add	r0, sp, #4
   b938e:	f000 fdb9 	bl	b9f04 <mktime>
   b9392:	e9c5 0100 	strd	r0, r1, [r5]
}
   b9396:	4620      	mov	r0, r4
   b9398:	b00b      	add	sp, #44	; 0x2c
   b939a:	bd30      	pop	{r4, r5, pc}

000b939c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b939c:	230a      	movs	r3, #10
   b939e:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b93a2:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b93a6:	fb91 f2f3 	sdiv	r2, r1, r3
   b93aa:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b93ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b93b2:	b2c0      	uxtb	r0, r0
   b93b4:	4770      	bx	lr

000b93b6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b93b6:	b570      	push	{r4, r5, r6, lr}
   b93b8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b93ba:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b93bc:	460c      	mov	r4, r1
   b93be:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b93c0:	f7ff ffec 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b93c4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b93c6:	6868      	ldr	r0, [r5, #4]
   b93c8:	f7ff ffe8 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b93cc:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b93ce:	68a8      	ldr	r0, [r5, #8]
   b93d0:	f7ff ffe4 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b93d4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b93d6:	68e8      	ldr	r0, [r5, #12]
   b93d8:	f7ff ffe0 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b93dc:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b93de:	6928      	ldr	r0, [r5, #16]
   b93e0:	3001      	adds	r0, #1
   b93e2:	f7ff ffdb 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b93e6:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b93e8:	b92e      	cbnz	r6, b93f6 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b93ea:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b93ec:	69a8      	ldr	r0, [r5, #24]
   b93ee:	f7ff ffd5 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b93f2:	7030      	strb	r0, [r6, #0]
}
   b93f4:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b93f6:	696a      	ldr	r2, [r5, #20]
   b93f8:	2364      	movs	r3, #100	; 0x64
   b93fa:	fb92 f0f3 	sdiv	r0, r2, r3
   b93fe:	fb03 2010 	mls	r0, r3, r0, r2
   b9402:	f7ff ffcb 	bl	b939c <_ZN6AB180510valueToBcdEi>
   b9406:	1da6      	adds	r6, r4, #6
   b9408:	7160      	strb	r0, [r4, #5]
   b940a:	e7ef      	b.n	b93ec <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b940c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b940c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b940e:	b087      	sub	sp, #28
   b9410:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b9412:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b9414:	4616      	mov	r6, r2
   b9416:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b9418:	f7ff ff36 	bl	b9288 <_ZN6AB180510tmToStringEPK2tm>
   b941c:	481e      	ldr	r0, [pc, #120]	; (b9498 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b941e:	9a02      	ldr	r2, [sp, #8]
   b9420:	491e      	ldr	r1, [pc, #120]	; (b949c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b9422:	f7fa feaa 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b9426:	a802      	add	r0, sp, #8
   b9428:	f002 ff1a 	bl	bc260 <_ZN6StringD1Ev>
    if (lock) {
   b942c:	b116      	cbz	r6, b9434 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b942e:	6868      	ldr	r0, [r5, #4]
   b9430:	f001 fa7f 	bl	ba932 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b9434:	4620      	mov	r0, r4
   b9436:	2201      	movs	r2, #1
   b9438:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b943c:	2700      	movs	r7, #0
   b943e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b9442:	f7ff ffb8 	bl	b93b6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b9446:	2301      	movs	r3, #1
   b9448:	461a      	mov	r2, r3
   b944a:	2110      	movs	r1, #16
   b944c:	4628      	mov	r0, r5
   b944e:	f7ff fe8b 	bl	b9168 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b9452:	4604      	mov	r4, r0
   b9454:	b1e8      	cbz	r0, b9492 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b9456:	2308      	movs	r3, #8
   b9458:	9700      	str	r7, [sp, #0]
   b945a:	eb0d 0203 	add.w	r2, sp, r3
   b945e:	4639      	mov	r1, r7
   b9460:	4628      	mov	r0, r5
   b9462:	f7ff fd39 	bl	b8ed8 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b9466:	4604      	mov	r4, r0
   b9468:	b160      	cbz	r0, b9484 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b946a:	2301      	movs	r3, #1
   b946c:	461a      	mov	r2, r3
   b946e:	2110      	movs	r1, #16
   b9470:	4628      	mov	r0, r5
   b9472:	f7ff fe18 	bl	b90a6 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b9476:	b116      	cbz	r6, b947e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b9478:	6868      	ldr	r0, [r5, #4]
   b947a:	f001 fa63 	bl	ba944 <_ZN7TwoWire6unlockEv>
}
   b947e:	4620      	mov	r0, r4
   b9480:	b007      	add	sp, #28
   b9482:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b9484:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b9488:	4905      	ldr	r1, [pc, #20]	; (b94a0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b948a:	4803      	ldr	r0, [pc, #12]	; (b9498 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b948c:	f7fe f9b5 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
   b9490:	e7f1      	b.n	b9476 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b9492:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b9496:	e7f7      	b.n	b9488 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b9498:	2003e5f4 	.word	0x2003e5f4
   b949c:	000bf3cd 	.word	0x000bf3cd
   b94a0:	000bf3db 	.word	0x000bf3db

000b94a4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b94a4:	b513      	push	{r0, r1, r4, lr}
   b94a6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b94a8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b94aa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b94ae:	f004 fc05 	bl	bdcbc <gmtime>
    return setRtcFromTm(tm, lock);
   b94b2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b94b6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b94b8:	4620      	mov	r0, r4
   b94ba:	f7ff ffa7 	bl	b940c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b94be:	b002      	add	sp, #8
   b94c0:	bd10      	pop	{r4, pc}
	...

000b94c4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b94c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b94c6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b94c8:	b089      	sub	sp, #36	; 0x24
   b94ca:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b94cc:	bb75      	cbnz	r5, b952c <_ZN6AB18054loopEv+0x68>
   b94ce:	f003 fa75 	bl	bc9bc <_ZN9TimeClass7isValidEv>
   b94d2:	b358      	cbz	r0, b952c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b94d4:	2600      	movs	r6, #0
   b94d6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b94d8:	a904      	add	r1, sp, #16
   b94da:	4628      	mov	r0, r5
        tm = 0;
   b94dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b94e0:	f000 fc20 	bl	b9d24 <spark_sync_time_last>
   b94e4:	b310      	cbz	r0, b952c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b94e6:	2501      	movs	r5, #1
   b94e8:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b94ea:	f003 fa84 	bl	bc9f6 <_ZN9TimeClass3nowEv>
   b94ee:	17c3      	asrs	r3, r0, #31
   b94f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b94f4:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b94f6:	9500      	str	r5, [sp, #0]
   b94f8:	4620      	mov	r0, r4
   b94fa:	f7ff ffd3 	bl	b94a4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b94fe:	a902      	add	r1, sp, #8
   b9500:	4620      	mov	r0, r4
        time = 0;
   b9502:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b9506:	f7ff ff39 	bl	b937c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b950a:	4b13      	ldr	r3, [pc, #76]	; (b9558 <_ZN6AB18054loopEv+0x94>)
   b950c:	4913      	ldr	r1, [pc, #76]	; (b955c <_ZN6AB18054loopEv+0x98>)
   b950e:	681b      	ldr	r3, [r3, #0]
   b9510:	9300      	str	r3, [sp, #0]
   b9512:	a804      	add	r0, sp, #16
   b9514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9518:	f003 fa0e 	bl	bc938 <_ZN9TimeClass6formatExPKc>
   b951c:	4810      	ldr	r0, [pc, #64]	; (b9560 <_ZN6AB18054loopEv+0x9c>)
   b951e:	9a04      	ldr	r2, [sp, #16]
   b9520:	4910      	ldr	r1, [pc, #64]	; (b9564 <_ZN6AB18054loopEv+0xa0>)
   b9522:	f7fa fe2a 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b9526:	a804      	add	r0, sp, #16
   b9528:	f002 fe9a 	bl	bc260 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b952c:	6963      	ldr	r3, [r4, #20]
   b952e:	b18b      	cbz	r3, b9554 <_ZN6AB18054loopEv+0x90>
   b9530:	f000 f90c 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b9534:	6923      	ldr	r3, [r4, #16]
   b9536:	1ac0      	subs	r0, r0, r3
   b9538:	6963      	ldr	r3, [r4, #20]
   b953a:	4298      	cmp	r0, r3
   b953c:	d30a      	bcc.n	b9554 <_ZN6AB18054loopEv+0x90>
   b953e:	f000 f905 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b9542:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b9546:	6120      	str	r0, [r4, #16]
            setWDT();
   b9548:	4620      	mov	r0, r4
}
   b954a:	b009      	add	sp, #36	; 0x24
   b954c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b9550:	f7ff bd0a 	b.w	b8f68 <_ZN6AB18056setWDTEi>
}
   b9554:	b009      	add	sp, #36	; 0x24
   b9556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9558:	2003e3e0 	.word	0x2003e3e0
   b955c:	2003e698 	.word	0x2003e698
   b9560:	2003e5f4 	.word	0x2003e5f4
   b9564:	000bf3f6 	.word	0x000bf3f6

000b9568 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b9568:	b530      	push	{r4, r5, lr}
   b956a:	4604      	mov	r4, r0
   b956c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b956e:	b111      	cbz	r1, b9576 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b9570:	6840      	ldr	r0, [r0, #4]
   b9572:	f001 f98f 	bl	ba894 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b9576:	4620      	mov	r0, r4
   b9578:	f7ff fc70 	bl	b8e5c <_ZN6AB180510detectChipEv>
   b957c:	ad06      	add	r5, sp, #24
   b957e:	2800      	cmp	r0, #0
   b9580:	d037      	beq.n	b95f2 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b9582:	4620      	mov	r0, r4
   b9584:	f7ff fd9a 	bl	b90bc <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b9588:	2301      	movs	r3, #1
   b958a:	461a      	mov	r2, r3
   b958c:	2110      	movs	r1, #16
   b958e:	4620      	mov	r0, r4
   b9590:	f7ff fd6b 	bl	b906a <_ZN6AB180510isBitClearEhhb>
   b9594:	b1d8      	cbz	r0, b95ce <_ZN6AB18055setupEb+0x66>
   b9596:	f003 fa11 	bl	bc9bc <_ZN9TimeClass7isValidEv>
   b959a:	b9c0      	cbnz	r0, b95ce <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b959c:	a902      	add	r1, sp, #8
   b959e:	4620      	mov	r0, r4
   b95a0:	f7ff feec 	bl	b937c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b95a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b95a8:	f003 f90c 	bl	bc7c4 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b95ac:	4b13      	ldr	r3, [pc, #76]	; (b95fc <_ZN6AB18055setupEb+0x94>)
   b95ae:	4914      	ldr	r1, [pc, #80]	; (b9600 <_ZN6AB18055setupEb+0x98>)
   b95b0:	681b      	ldr	r3, [r3, #0]
   b95b2:	9300      	str	r3, [sp, #0]
   b95b4:	4628      	mov	r0, r5
   b95b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b95ba:	f003 f9bd 	bl	bc938 <_ZN9TimeClass6formatExPKc>
   b95be:	4811      	ldr	r0, [pc, #68]	; (b9604 <_ZN6AB18055setupEb+0x9c>)
   b95c0:	9a06      	ldr	r2, [sp, #24]
   b95c2:	4911      	ldr	r1, [pc, #68]	; (b9608 <_ZN6AB18055setupEb+0xa0>)
   b95c4:	f7fa fdd9 	bl	b417a <_ZNK5spark6Logger4infoEPKcz>
   b95c8:	4628      	mov	r0, r5
   b95ca:	f002 fe49 	bl	bc260 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b95ce:	4b0f      	ldr	r3, [pc, #60]	; (b960c <_ZN6AB18055setupEb+0xa4>)
   b95d0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b95d2:	4b0f      	ldr	r3, [pc, #60]	; (b9610 <_ZN6AB18055setupEb+0xa8>)
   b95d4:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b95d6:	4b0f      	ldr	r3, [pc, #60]	; (b9614 <_ZN6AB18055setupEb+0xac>)
   b95d8:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b95da:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b95de:	2300      	movs	r3, #0
   b95e0:	a802      	add	r0, sp, #8
   b95e2:	9500      	str	r5, [sp, #0]
   b95e4:	f7fa fe3a 	bl	b425c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b95e8:	4628      	mov	r0, r5
   b95ea:	f7fa fdb1 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
}
   b95ee:	b00b      	add	sp, #44	; 0x2c
   b95f0:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b95f2:	4909      	ldr	r1, [pc, #36]	; (b9618 <_ZN6AB18055setupEb+0xb0>)
   b95f4:	4803      	ldr	r0, [pc, #12]	; (b9604 <_ZN6AB18055setupEb+0x9c>)
   b95f6:	f7fe f900 	bl	b77fa <_ZNK5spark6Logger5errorEPKcz>
   b95fa:	e7e8      	b.n	b95ce <_ZN6AB18055setupEb+0x66>
   b95fc:	2003e3e0 	.word	0x2003e3e0
   b9600:	2003e698 	.word	0x2003e698
   b9604:	2003e5f4 	.word	0x2003e5f4
   b9608:	000bf40c 	.word	0x000bf40c
   b960c:	000b8fed 	.word	0x000b8fed
   b9610:	000b4147 	.word	0x000b4147
   b9614:	000b4133 	.word	0x000b4133
   b9618:	000bf429 	.word	0x000bf429

000b961c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b961c:	4b01      	ldr	r3, [pc, #4]	; (b9624 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b961e:	4a02      	ldr	r2, [pc, #8]	; (b9628 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b9620:	601a      	str	r2, [r3, #0]
}
   b9622:	4770      	bx	lr
   b9624:	2003e5f4 	.word	0x2003e5f4
   b9628:	000bf441 	.word	0x000bf441

000b962c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b962c:	b508      	push	{r3, lr}
   b962e:	4b02      	ldr	r3, [pc, #8]	; (b9638 <cellular_signal+0xc>)
   b9630:	681b      	ldr	r3, [r3, #0]
   b9632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9634:	9301      	str	r3, [sp, #4]
   b9636:	bd08      	pop	{r3, pc}
   b9638:	00030274 	.word	0x00030274

000b963c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b963c:	b508      	push	{r3, lr}
   b963e:	4b02      	ldr	r3, [pc, #8]	; (b9648 <os_thread_create+0xc>)
   b9640:	681b      	ldr	r3, [r3, #0]
   b9642:	685b      	ldr	r3, [r3, #4]
   b9644:	9301      	str	r3, [sp, #4]
   b9646:	bd08      	pop	{r3, pc}
   b9648:	00030248 	.word	0x00030248

000b964c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   b964c:	b508      	push	{r3, lr}
   b964e:	4b02      	ldr	r3, [pc, #8]	; (b9658 <os_thread_is_current+0xc>)
   b9650:	681b      	ldr	r3, [r3, #0]
   b9652:	689b      	ldr	r3, [r3, #8]
   b9654:	9301      	str	r3, [sp, #4]
   b9656:	bd08      	pop	{r3, pc}
   b9658:	00030248 	.word	0x00030248

000b965c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   b965c:	b508      	push	{r3, lr}
   b965e:	4b02      	ldr	r3, [pc, #8]	; (b9668 <os_thread_join+0xc>)
   b9660:	681b      	ldr	r3, [r3, #0]
   b9662:	691b      	ldr	r3, [r3, #16]
   b9664:	9301      	str	r3, [sp, #4]
   b9666:	bd08      	pop	{r3, pc}
   b9668:	00030248 	.word	0x00030248

000b966c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   b966c:	b508      	push	{r3, lr}
   b966e:	4b02      	ldr	r3, [pc, #8]	; (b9678 <os_thread_cleanup+0xc>)
   b9670:	681b      	ldr	r3, [r3, #0]
   b9672:	695b      	ldr	r3, [r3, #20]
   b9674:	9301      	str	r3, [sp, #4]
   b9676:	bd08      	pop	{r3, pc}
   b9678:	00030248 	.word	0x00030248

000b967c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b967c:	b508      	push	{r3, lr}
   b967e:	4b02      	ldr	r3, [pc, #8]	; (b9688 <os_mutex_create+0xc>)
   b9680:	681b      	ldr	r3, [r3, #0]
   b9682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9684:	9301      	str	r3, [sp, #4]
   b9686:	bd08      	pop	{r3, pc}
   b9688:	00030248 	.word	0x00030248

000b968c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b968c:	b508      	push	{r3, lr}
   b968e:	4b02      	ldr	r3, [pc, #8]	; (b9698 <os_mutex_lock+0xc>)
   b9690:	681b      	ldr	r3, [r3, #0]
   b9692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9694:	9301      	str	r3, [sp, #4]
   b9696:	bd08      	pop	{r3, pc}
   b9698:	00030248 	.word	0x00030248

000b969c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b969c:	b508      	push	{r3, lr}
   b969e:	4b02      	ldr	r3, [pc, #8]	; (b96a8 <os_mutex_unlock+0xc>)
   b96a0:	681b      	ldr	r3, [r3, #0]
   b96a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b96a4:	9301      	str	r3, [sp, #4]
   b96a6:	bd08      	pop	{r3, pc}
   b96a8:	00030248 	.word	0x00030248

000b96ac <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b96ac:	b508      	push	{r3, lr}
   b96ae:	4b02      	ldr	r3, [pc, #8]	; (b96b8 <os_mutex_recursive_create+0xc>)
   b96b0:	681b      	ldr	r3, [r3, #0]
   b96b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b96b4:	9301      	str	r3, [sp, #4]
   b96b6:	bd08      	pop	{r3, pc}
   b96b8:	00030248 	.word	0x00030248

000b96bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b96bc:	b508      	push	{r3, lr}
   b96be:	4b02      	ldr	r3, [pc, #8]	; (b96c8 <os_mutex_recursive_destroy+0xc>)
   b96c0:	681b      	ldr	r3, [r3, #0]
   b96c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b96c4:	9301      	str	r3, [sp, #4]
   b96c6:	bd08      	pop	{r3, pc}
   b96c8:	00030248 	.word	0x00030248

000b96cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b96cc:	b508      	push	{r3, lr}
   b96ce:	4b02      	ldr	r3, [pc, #8]	; (b96d8 <os_mutex_recursive_lock+0xc>)
   b96d0:	681b      	ldr	r3, [r3, #0]
   b96d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b96d4:	9301      	str	r3, [sp, #4]
   b96d6:	bd08      	pop	{r3, pc}
   b96d8:	00030248 	.word	0x00030248

000b96dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b96dc:	b508      	push	{r3, lr}
   b96de:	4b02      	ldr	r3, [pc, #8]	; (b96e8 <os_mutex_recursive_unlock+0xc>)
   b96e0:	681b      	ldr	r3, [r3, #0]
   b96e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b96e4:	9301      	str	r3, [sp, #4]
   b96e6:	bd08      	pop	{r3, pc}
   b96e8:	00030248 	.word	0x00030248

000b96ec <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b96ec:	b508      	push	{r3, lr}
   b96ee:	4b02      	ldr	r3, [pc, #8]	; (b96f8 <os_thread_exit+0xc>)
   b96f0:	681b      	ldr	r3, [r3, #0]
   b96f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b96f4:	9301      	str	r3, [sp, #4]
   b96f6:	bd08      	pop	{r3, pc}
   b96f8:	00030248 	.word	0x00030248

000b96fc <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b96fc:	b508      	push	{r3, lr}
   b96fe:	4b02      	ldr	r3, [pc, #8]	; (b9708 <HAL_Core_Runtime_Info+0xc>)
   b9700:	681b      	ldr	r3, [r3, #0]
   b9702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9704:	9301      	str	r3, [sp, #4]
   b9706:	bd08      	pop	{r3, pc}
   b9708:	00030234 	.word	0x00030234

000b970c <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b970c:	b508      	push	{r3, lr}
   b970e:	4b02      	ldr	r3, [pc, #8]	; (b9718 <HAL_Feature_Set+0xc>)
   b9710:	681b      	ldr	r3, [r3, #0]
   b9712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9714:	9301      	str	r3, [sp, #4]
   b9716:	bd08      	pop	{r3, pc}
   b9718:	00030234 	.word	0x00030234

000b971c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b971c:	b508      	push	{r3, lr}
   b971e:	4b02      	ldr	r3, [pc, #8]	; (b9728 <HAL_RNG_GetRandomNumber+0xc>)
   b9720:	681b      	ldr	r3, [r3, #0]
   b9722:	685b      	ldr	r3, [r3, #4]
   b9724:	9301      	str	r3, [sp, #4]
   b9726:	bd08      	pop	{r3, pc}
   b9728:	00030218 	.word	0x00030218

000b972c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b972c:	b508      	push	{r3, lr}
   b972e:	4b02      	ldr	r3, [pc, #8]	; (b9738 <HAL_Delay_Milliseconds+0xc>)
   b9730:	681b      	ldr	r3, [r3, #0]
   b9732:	689b      	ldr	r3, [r3, #8]
   b9734:	9301      	str	r3, [sp, #4]
   b9736:	bd08      	pop	{r3, pc}
   b9738:	00030218 	.word	0x00030218

000b973c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b973c:	b508      	push	{r3, lr}
   b973e:	4b02      	ldr	r3, [pc, #8]	; (b9748 <HAL_Delay_Microseconds+0xc>)
   b9740:	681b      	ldr	r3, [r3, #0]
   b9742:	68db      	ldr	r3, [r3, #12]
   b9744:	9301      	str	r3, [sp, #4]
   b9746:	bd08      	pop	{r3, pc}
   b9748:	00030218 	.word	0x00030218

000b974c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b974c:	b508      	push	{r3, lr}
   b974e:	4b02      	ldr	r3, [pc, #8]	; (b9758 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9750:	681b      	ldr	r3, [r3, #0]
   b9752:	695b      	ldr	r3, [r3, #20]
   b9754:	9301      	str	r3, [sp, #4]
   b9756:	bd08      	pop	{r3, pc}
   b9758:	00030218 	.word	0x00030218

000b975c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b975c:	b508      	push	{r3, lr}
   b975e:	4b02      	ldr	r3, [pc, #8]	; (b9768 <hal_rtc_time_is_valid+0xc>)
   b9760:	681b      	ldr	r3, [r3, #0]
   b9762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9764:	9301      	str	r3, [sp, #4]
   b9766:	bd08      	pop	{r3, pc}
   b9768:	00030218 	.word	0x00030218

000b976c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b976c:	b508      	push	{r3, lr}
   b976e:	4b02      	ldr	r3, [pc, #8]	; (b9778 <hal_timer_millis+0xc>)
   b9770:	681b      	ldr	r3, [r3, #0]
   b9772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b9774:	9301      	str	r3, [sp, #4]
   b9776:	bd08      	pop	{r3, pc}
   b9778:	00030218 	.word	0x00030218

000b977c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b977c:	b508      	push	{r3, lr}
   b977e:	4b02      	ldr	r3, [pc, #8]	; (b9788 <hal_rtc_get_time+0xc>)
   b9780:	681b      	ldr	r3, [r3, #0]
   b9782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9784:	9301      	str	r3, [sp, #4]
   b9786:	bd08      	pop	{r3, pc}
   b9788:	00030218 	.word	0x00030218

000b978c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b978c:	b508      	push	{r3, lr}
   b978e:	4b02      	ldr	r3, [pc, #8]	; (b9798 <hal_rtc_set_time+0xc>)
   b9790:	681b      	ldr	r3, [r3, #0]
   b9792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b9794:	9301      	str	r3, [sp, #4]
   b9796:	bd08      	pop	{r3, pc}
   b9798:	00030218 	.word	0x00030218

000b979c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b979c:	b508      	push	{r3, lr}
   b979e:	4b02      	ldr	r3, [pc, #8]	; (b97a8 <HAL_Validate_Pin_Function+0xc>)
   b97a0:	681b      	ldr	r3, [r3, #0]
   b97a2:	685b      	ldr	r3, [r3, #4]
   b97a4:	9301      	str	r3, [sp, #4]
   b97a6:	bd08      	pop	{r3, pc}
   b97a8:	0003022c 	.word	0x0003022c

000b97ac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b97ac:	b508      	push	{r3, lr}
   b97ae:	4b02      	ldr	r3, [pc, #8]	; (b97b8 <HAL_Pin_Mode+0xc>)
   b97b0:	681b      	ldr	r3, [r3, #0]
   b97b2:	689b      	ldr	r3, [r3, #8]
   b97b4:	9301      	str	r3, [sp, #4]
   b97b6:	bd08      	pop	{r3, pc}
   b97b8:	0003022c 	.word	0x0003022c

000b97bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b97bc:	b508      	push	{r3, lr}
   b97be:	4b02      	ldr	r3, [pc, #8]	; (b97c8 <HAL_Get_Pin_Mode+0xc>)
   b97c0:	681b      	ldr	r3, [r3, #0]
   b97c2:	68db      	ldr	r3, [r3, #12]
   b97c4:	9301      	str	r3, [sp, #4]
   b97c6:	bd08      	pop	{r3, pc}
   b97c8:	0003022c 	.word	0x0003022c

000b97cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b97cc:	b508      	push	{r3, lr}
   b97ce:	4b02      	ldr	r3, [pc, #8]	; (b97d8 <HAL_GPIO_Write+0xc>)
   b97d0:	681b      	ldr	r3, [r3, #0]
   b97d2:	691b      	ldr	r3, [r3, #16]
   b97d4:	9301      	str	r3, [sp, #4]
   b97d6:	bd08      	pop	{r3, pc}
   b97d8:	0003022c 	.word	0x0003022c

000b97dc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b97dc:	b508      	push	{r3, lr}
   b97de:	4b02      	ldr	r3, [pc, #8]	; (b97e8 <HAL_GPIO_Read+0xc>)
   b97e0:	681b      	ldr	r3, [r3, #0]
   b97e2:	695b      	ldr	r3, [r3, #20]
   b97e4:	9301      	str	r3, [sp, #4]
   b97e6:	bd08      	pop	{r3, pc}
   b97e8:	0003022c 	.word	0x0003022c

000b97ec <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b97ec:	b508      	push	{r3, lr}
   b97ee:	4b02      	ldr	r3, [pc, #8]	; (b97f8 <HAL_Interrupts_Attach+0xc>)
   b97f0:	681b      	ldr	r3, [r3, #0]
   b97f2:	699b      	ldr	r3, [r3, #24]
   b97f4:	9301      	str	r3, [sp, #4]
   b97f6:	bd08      	pop	{r3, pc}
   b97f8:	0003022c 	.word	0x0003022c

000b97fc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b97fc:	b508      	push	{r3, lr}
   b97fe:	4b02      	ldr	r3, [pc, #8]	; (b9808 <HAL_Interrupts_Detach+0xc>)
   b9800:	681b      	ldr	r3, [r3, #0]
   b9802:	69db      	ldr	r3, [r3, #28]
   b9804:	9301      	str	r3, [sp, #4]
   b9806:	bd08      	pop	{r3, pc}
   b9808:	0003022c 	.word	0x0003022c

000b980c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b980c:	b508      	push	{r3, lr}
   b980e:	4b02      	ldr	r3, [pc, #8]	; (b9818 <hal_adc_read+0xc>)
   b9810:	681b      	ldr	r3, [r3, #0]
   b9812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9814:	9301      	str	r3, [sp, #4]
   b9816:	bd08      	pop	{r3, pc}
   b9818:	0003022c 	.word	0x0003022c

000b981c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b981c:	b508      	push	{r3, lr}
   b981e:	4b02      	ldr	r3, [pc, #8]	; (b9828 <hal_i2c_begin+0xc>)
   b9820:	681b      	ldr	r3, [r3, #0]
   b9822:	68db      	ldr	r3, [r3, #12]
   b9824:	9301      	str	r3, [sp, #4]
   b9826:	bd08      	pop	{r3, pc}
   b9828:	00030228 	.word	0x00030228

000b982c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b982c:	b508      	push	{r3, lr}
   b982e:	4b02      	ldr	r3, [pc, #8]	; (b9838 <hal_i2c_begin_transmission+0xc>)
   b9830:	681b      	ldr	r3, [r3, #0]
   b9832:	699b      	ldr	r3, [r3, #24]
   b9834:	9301      	str	r3, [sp, #4]
   b9836:	bd08      	pop	{r3, pc}
   b9838:	00030228 	.word	0x00030228

000b983c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b983c:	b508      	push	{r3, lr}
   b983e:	4b02      	ldr	r3, [pc, #8]	; (b9848 <hal_i2c_end_transmission+0xc>)
   b9840:	681b      	ldr	r3, [r3, #0]
   b9842:	69db      	ldr	r3, [r3, #28]
   b9844:	9301      	str	r3, [sp, #4]
   b9846:	bd08      	pop	{r3, pc}
   b9848:	00030228 	.word	0x00030228

000b984c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b984c:	b508      	push	{r3, lr}
   b984e:	4b02      	ldr	r3, [pc, #8]	; (b9858 <hal_i2c_write+0xc>)
   b9850:	681b      	ldr	r3, [r3, #0]
   b9852:	6a1b      	ldr	r3, [r3, #32]
   b9854:	9301      	str	r3, [sp, #4]
   b9856:	bd08      	pop	{r3, pc}
   b9858:	00030228 	.word	0x00030228

000b985c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b985c:	b508      	push	{r3, lr}
   b985e:	4b02      	ldr	r3, [pc, #8]	; (b9868 <hal_i2c_available+0xc>)
   b9860:	681b      	ldr	r3, [r3, #0]
   b9862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9864:	9301      	str	r3, [sp, #4]
   b9866:	bd08      	pop	{r3, pc}
   b9868:	00030228 	.word	0x00030228

000b986c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b986c:	b508      	push	{r3, lr}
   b986e:	4b02      	ldr	r3, [pc, #8]	; (b9878 <hal_i2c_read+0xc>)
   b9870:	681b      	ldr	r3, [r3, #0]
   b9872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9874:	9301      	str	r3, [sp, #4]
   b9876:	bd08      	pop	{r3, pc}
   b9878:	00030228 	.word	0x00030228

000b987c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b987c:	b508      	push	{r3, lr}
   b987e:	4b02      	ldr	r3, [pc, #8]	; (b9888 <hal_i2c_peek+0xc>)
   b9880:	681b      	ldr	r3, [r3, #0]
   b9882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9884:	9301      	str	r3, [sp, #4]
   b9886:	bd08      	pop	{r3, pc}
   b9888:	00030228 	.word	0x00030228

000b988c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b988c:	b508      	push	{r3, lr}
   b988e:	4b02      	ldr	r3, [pc, #8]	; (b9898 <hal_i2c_flush+0xc>)
   b9890:	681b      	ldr	r3, [r3, #0]
   b9892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9894:	9301      	str	r3, [sp, #4]
   b9896:	bd08      	pop	{r3, pc}
   b9898:	00030228 	.word	0x00030228

000b989c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b989c:	b508      	push	{r3, lr}
   b989e:	4b02      	ldr	r3, [pc, #8]	; (b98a8 <hal_i2c_is_enabled+0xc>)
   b98a0:	681b      	ldr	r3, [r3, #0]
   b98a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b98a4:	9301      	str	r3, [sp, #4]
   b98a6:	bd08      	pop	{r3, pc}
   b98a8:	00030228 	.word	0x00030228

000b98ac <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b98ac:	b508      	push	{r3, lr}
   b98ae:	4b02      	ldr	r3, [pc, #8]	; (b98b8 <hal_i2c_init+0xc>)
   b98b0:	681b      	ldr	r3, [r3, #0]
   b98b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b98b4:	9301      	str	r3, [sp, #4]
   b98b6:	bd08      	pop	{r3, pc}
   b98b8:	00030228 	.word	0x00030228

000b98bc <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b98bc:	b508      	push	{r3, lr}
   b98be:	4b02      	ldr	r3, [pc, #8]	; (b98c8 <hal_i2c_lock+0xc>)
   b98c0:	681b      	ldr	r3, [r3, #0]
   b98c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b98c4:	9301      	str	r3, [sp, #4]
   b98c6:	bd08      	pop	{r3, pc}
   b98c8:	00030228 	.word	0x00030228

000b98cc <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b98cc:	b508      	push	{r3, lr}
   b98ce:	4b02      	ldr	r3, [pc, #8]	; (b98d8 <hal_i2c_unlock+0xc>)
   b98d0:	681b      	ldr	r3, [r3, #0]
   b98d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b98d4:	9301      	str	r3, [sp, #4]
   b98d6:	bd08      	pop	{r3, pc}
   b98d8:	00030228 	.word	0x00030228

000b98dc <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b98dc:	b508      	push	{r3, lr}
   b98de:	4b02      	ldr	r3, [pc, #8]	; (b98e8 <hal_i2c_request_ex+0xc>)
   b98e0:	681b      	ldr	r3, [r3, #0]
   b98e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b98e4:	9301      	str	r3, [sp, #4]
   b98e6:	bd08      	pop	{r3, pc}
   b98e8:	00030228 	.word	0x00030228

000b98ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b98ec:	b508      	push	{r3, lr}
   b98ee:	4b02      	ldr	r3, [pc, #8]	; (b98f8 <inet_inet_ntop+0xc>)
   b98f0:	681b      	ldr	r3, [r3, #0]
   b98f2:	695b      	ldr	r3, [r3, #20]
   b98f4:	9301      	str	r3, [sp, #4]
   b98f6:	bd08      	pop	{r3, pc}
   b98f8:	00030264 	.word	0x00030264

000b98fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b98fc:	b508      	push	{r3, lr}
   b98fe:	4b02      	ldr	r3, [pc, #8]	; (b9908 <netdb_freeaddrinfo+0xc>)
   b9900:	681b      	ldr	r3, [r3, #0]
   b9902:	689b      	ldr	r3, [r3, #8]
   b9904:	9301      	str	r3, [sp, #4]
   b9906:	bd08      	pop	{r3, pc}
   b9908:	00030268 	.word	0x00030268

000b990c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b990c:	b508      	push	{r3, lr}
   b990e:	4b02      	ldr	r3, [pc, #8]	; (b9918 <netdb_getaddrinfo+0xc>)
   b9910:	681b      	ldr	r3, [r3, #0]
   b9912:	68db      	ldr	r3, [r3, #12]
   b9914:	9301      	str	r3, [sp, #4]
   b9916:	bd08      	pop	{r3, pc}
   b9918:	00030268 	.word	0x00030268

000b991c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b991c:	b508      	push	{r3, lr}
   b991e:	4b02      	ldr	r3, [pc, #8]	; (b9928 <hal_spi_init+0xc>)
   b9920:	681b      	ldr	r3, [r3, #0]
   b9922:	69db      	ldr	r3, [r3, #28]
   b9924:	9301      	str	r3, [sp, #4]
   b9926:	bd08      	pop	{r3, pc}
   b9928:	00030230 	.word	0x00030230

000b992c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b992c:	b508      	push	{r3, lr}
   b992e:	4b02      	ldr	r3, [pc, #8]	; (b9938 <hal_spi_is_enabled+0xc>)
   b9930:	681b      	ldr	r3, [r3, #0]
   b9932:	6a1b      	ldr	r3, [r3, #32]
   b9934:	9301      	str	r3, [sp, #4]
   b9936:	bd08      	pop	{r3, pc}
   b9938:	00030230 	.word	0x00030230

000b993c <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   b993c:	b508      	push	{r3, lr}
   b993e:	4b02      	ldr	r3, [pc, #8]	; (b9948 <_open+0xc>)
   b9940:	681b      	ldr	r3, [r3, #0]
   b9942:	681b      	ldr	r3, [r3, #0]
   b9944:	9301      	str	r3, [sp, #4]
   b9946:	bd08      	pop	{r3, pc}
   b9948:	00030284 	.word	0x00030284

000b994c <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   b994c:	b508      	push	{r3, lr}
   b994e:	4b02      	ldr	r3, [pc, #8]	; (b9958 <_write+0xc>)
   b9950:	681b      	ldr	r3, [r3, #0]
   b9952:	685b      	ldr	r3, [r3, #4]
   b9954:	9301      	str	r3, [sp, #4]
   b9956:	bd08      	pop	{r3, pc}
   b9958:	00030284 	.word	0x00030284

000b995c <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   b995c:	b508      	push	{r3, lr}
   b995e:	4b02      	ldr	r3, [pc, #8]	; (b9968 <_read+0xc>)
   b9960:	681b      	ldr	r3, [r3, #0]
   b9962:	689b      	ldr	r3, [r3, #8]
   b9964:	9301      	str	r3, [sp, #4]
   b9966:	bd08      	pop	{r3, pc}
   b9968:	00030284 	.word	0x00030284

000b996c <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   b996c:	b508      	push	{r3, lr}
   b996e:	4b02      	ldr	r3, [pc, #8]	; (b9978 <_close+0xc>)
   b9970:	681b      	ldr	r3, [r3, #0]
   b9972:	68db      	ldr	r3, [r3, #12]
   b9974:	9301      	str	r3, [sp, #4]
   b9976:	bd08      	pop	{r3, pc}
   b9978:	00030284 	.word	0x00030284

000b997c <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   b997c:	b508      	push	{r3, lr}
   b997e:	4b02      	ldr	r3, [pc, #8]	; (b9988 <_fstat+0xc>)
   b9980:	681b      	ldr	r3, [r3, #0]
   b9982:	695b      	ldr	r3, [r3, #20]
   b9984:	9301      	str	r3, [sp, #4]
   b9986:	bd08      	pop	{r3, pc}
   b9988:	00030284 	.word	0x00030284

000b998c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   b998c:	b508      	push	{r3, lr}
   b998e:	4b02      	ldr	r3, [pc, #8]	; (b9998 <_lseek+0xc>)
   b9990:	681b      	ldr	r3, [r3, #0]
   b9992:	6a1b      	ldr	r3, [r3, #32]
   b9994:	9301      	str	r3, [sp, #4]
   b9996:	bd08      	pop	{r3, pc}
   b9998:	00030284 	.word	0x00030284

000b999c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   b999c:	b508      	push	{r3, lr}
   b999e:	4b02      	ldr	r3, [pc, #8]	; (b99a8 <stat+0xc>)
   b99a0:	681b      	ldr	r3, [r3, #0]
   b99a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b99a4:	9301      	str	r3, [sp, #4]
   b99a6:	bd08      	pop	{r3, pc}
   b99a8:	00030284 	.word	0x00030284

000b99ac <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   b99ac:	b508      	push	{r3, lr}
   b99ae:	4b02      	ldr	r3, [pc, #8]	; (b99b8 <mkdir+0xc>)
   b99b0:	681b      	ldr	r3, [r3, #0]
   b99b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b99b4:	9301      	str	r3, [sp, #4]
   b99b6:	bd08      	pop	{r3, pc}
   b99b8:	00030284 	.word	0x00030284

000b99bc <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   b99bc:	b508      	push	{r3, lr}
   b99be:	4b02      	ldr	r3, [pc, #8]	; (b99c8 <_unlink+0xc>)
   b99c0:	681b      	ldr	r3, [r3, #0]
   b99c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b99c4:	9301      	str	r3, [sp, #4]
   b99c6:	bd08      	pop	{r3, pc}
   b99c8:	00030284 	.word	0x00030284

000b99cc <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   b99cc:	b508      	push	{r3, lr}
   b99ce:	4b02      	ldr	r3, [pc, #8]	; (b99d8 <opendir+0xc>)
   b99d0:	681b      	ldr	r3, [r3, #0]
   b99d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b99d4:	9301      	str	r3, [sp, #4]
   b99d6:	bd08      	pop	{r3, pc}
   b99d8:	00030284 	.word	0x00030284

000b99dc <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   b99dc:	b508      	push	{r3, lr}
   b99de:	4b02      	ldr	r3, [pc, #8]	; (b99e8 <readdir+0xc>)
   b99e0:	681b      	ldr	r3, [r3, #0]
   b99e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b99e4:	9301      	str	r3, [sp, #4]
   b99e6:	bd08      	pop	{r3, pc}
   b99e8:	00030284 	.word	0x00030284

000b99ec <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   b99ec:	b508      	push	{r3, lr}
   b99ee:	4b02      	ldr	r3, [pc, #8]	; (b99f8 <closedir+0xc>)
   b99f0:	681b      	ldr	r3, [r3, #0]
   b99f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b99f4:	9301      	str	r3, [sp, #4]
   b99f6:	bd08      	pop	{r3, pc}
   b99f8:	00030284 	.word	0x00030284

000b99fc <ftruncate>:
DYNALIB_FN(22, hal_posix_syscall, chdir, int(const char* path))
DYNALIB_FN(23, hal_posix_syscall, fchdir, int(int fd))
DYNALIB_FN(24, hal_posix_syscall, getcwd, char*(char* buf, size_t size))
DYNALIB_FN(25, hal_posix_syscall, truncate, int(const char*, off_t))
DYNALIB_FN(26, hal_posix_syscall, ftruncate, int(int, off_t))
   b99fc:	b508      	push	{r3, lr}
   b99fe:	4b02      	ldr	r3, [pc, #8]	; (b9a08 <ftruncate+0xc>)
   b9a00:	681b      	ldr	r3, [r3, #0]
   b9a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b9a04:	9301      	str	r3, [sp, #4]
   b9a06:	bd08      	pop	{r3, pc}
   b9a08:	00030284 	.word	0x00030284

000b9a0c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b9a0c:	b508      	push	{r3, lr}
   b9a0e:	4b02      	ldr	r3, [pc, #8]	; (b9a18 <hal_usart_end+0xc>)
   b9a10:	681b      	ldr	r3, [r3, #0]
   b9a12:	689b      	ldr	r3, [r3, #8]
   b9a14:	9301      	str	r3, [sp, #4]
   b9a16:	bd08      	pop	{r3, pc}
   b9a18:	0003023c 	.word	0x0003023c

000b9a1c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9a1c:	b508      	push	{r3, lr}
   b9a1e:	4b02      	ldr	r3, [pc, #8]	; (b9a28 <hal_usart_write+0xc>)
   b9a20:	681b      	ldr	r3, [r3, #0]
   b9a22:	68db      	ldr	r3, [r3, #12]
   b9a24:	9301      	str	r3, [sp, #4]
   b9a26:	bd08      	pop	{r3, pc}
   b9a28:	0003023c 	.word	0x0003023c

000b9a2c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9a2c:	b508      	push	{r3, lr}
   b9a2e:	4b02      	ldr	r3, [pc, #8]	; (b9a38 <hal_usart_available+0xc>)
   b9a30:	681b      	ldr	r3, [r3, #0]
   b9a32:	691b      	ldr	r3, [r3, #16]
   b9a34:	9301      	str	r3, [sp, #4]
   b9a36:	bd08      	pop	{r3, pc}
   b9a38:	0003023c 	.word	0x0003023c

000b9a3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9a3c:	b508      	push	{r3, lr}
   b9a3e:	4b02      	ldr	r3, [pc, #8]	; (b9a48 <hal_usart_read+0xc>)
   b9a40:	681b      	ldr	r3, [r3, #0]
   b9a42:	695b      	ldr	r3, [r3, #20]
   b9a44:	9301      	str	r3, [sp, #4]
   b9a46:	bd08      	pop	{r3, pc}
   b9a48:	0003023c 	.word	0x0003023c

000b9a4c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9a4c:	b508      	push	{r3, lr}
   b9a4e:	4b02      	ldr	r3, [pc, #8]	; (b9a58 <hal_usart_peek+0xc>)
   b9a50:	681b      	ldr	r3, [r3, #0]
   b9a52:	699b      	ldr	r3, [r3, #24]
   b9a54:	9301      	str	r3, [sp, #4]
   b9a56:	bd08      	pop	{r3, pc}
   b9a58:	0003023c 	.word	0x0003023c

000b9a5c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9a5c:	b508      	push	{r3, lr}
   b9a5e:	4b02      	ldr	r3, [pc, #8]	; (b9a68 <hal_usart_flush+0xc>)
   b9a60:	681b      	ldr	r3, [r3, #0]
   b9a62:	69db      	ldr	r3, [r3, #28]
   b9a64:	9301      	str	r3, [sp, #4]
   b9a66:	bd08      	pop	{r3, pc}
   b9a68:	0003023c 	.word	0x0003023c

000b9a6c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9a6c:	b508      	push	{r3, lr}
   b9a6e:	4b02      	ldr	r3, [pc, #8]	; (b9a78 <hal_usart_is_enabled+0xc>)
   b9a70:	681b      	ldr	r3, [r3, #0]
   b9a72:	6a1b      	ldr	r3, [r3, #32]
   b9a74:	9301      	str	r3, [sp, #4]
   b9a76:	bd08      	pop	{r3, pc}
   b9a78:	0003023c 	.word	0x0003023c

000b9a7c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9a7c:	b508      	push	{r3, lr}
   b9a7e:	4b02      	ldr	r3, [pc, #8]	; (b9a88 <hal_usart_available_data_for_write+0xc>)
   b9a80:	681b      	ldr	r3, [r3, #0]
   b9a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9a84:	9301      	str	r3, [sp, #4]
   b9a86:	bd08      	pop	{r3, pc}
   b9a88:	0003023c 	.word	0x0003023c

000b9a8c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9a8c:	b508      	push	{r3, lr}
   b9a8e:	4b02      	ldr	r3, [pc, #8]	; (b9a98 <hal_usart_begin_config+0xc>)
   b9a90:	681b      	ldr	r3, [r3, #0]
   b9a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9a94:	9301      	str	r3, [sp, #4]
   b9a96:	bd08      	pop	{r3, pc}
   b9a98:	0003023c 	.word	0x0003023c

000b9a9c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9a9c:	b508      	push	{r3, lr}
   b9a9e:	4b02      	ldr	r3, [pc, #8]	; (b9aa8 <hal_usart_init_ex+0xc>)
   b9aa0:	681b      	ldr	r3, [r3, #0]
   b9aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9aa4:	9301      	str	r3, [sp, #4]
   b9aa6:	bd08      	pop	{r3, pc}
   b9aa8:	0003023c 	.word	0x0003023c

000b9aac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9aac:	b508      	push	{r3, lr}
   b9aae:	4b02      	ldr	r3, [pc, #8]	; (b9ab8 <HAL_USB_USART_Init+0xc>)
   b9ab0:	681b      	ldr	r3, [r3, #0]
   b9ab2:	681b      	ldr	r3, [r3, #0]
   b9ab4:	9301      	str	r3, [sp, #4]
   b9ab6:	bd08      	pop	{r3, pc}
   b9ab8:	0003024c 	.word	0x0003024c

000b9abc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9abc:	b508      	push	{r3, lr}
   b9abe:	4b02      	ldr	r3, [pc, #8]	; (b9ac8 <HAL_USB_USART_Begin+0xc>)
   b9ac0:	681b      	ldr	r3, [r3, #0]
   b9ac2:	685b      	ldr	r3, [r3, #4]
   b9ac4:	9301      	str	r3, [sp, #4]
   b9ac6:	bd08      	pop	{r3, pc}
   b9ac8:	0003024c 	.word	0x0003024c

000b9acc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b9acc:	b508      	push	{r3, lr}
   b9ace:	4b02      	ldr	r3, [pc, #8]	; (b9ad8 <HAL_USB_USART_End+0xc>)
   b9ad0:	681b      	ldr	r3, [r3, #0]
   b9ad2:	689b      	ldr	r3, [r3, #8]
   b9ad4:	9301      	str	r3, [sp, #4]
   b9ad6:	bd08      	pop	{r3, pc}
   b9ad8:	0003024c 	.word	0x0003024c

000b9adc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9adc:	b508      	push	{r3, lr}
   b9ade:	4b02      	ldr	r3, [pc, #8]	; (b9ae8 <HAL_USB_USART_Available_Data+0xc>)
   b9ae0:	681b      	ldr	r3, [r3, #0]
   b9ae2:	691b      	ldr	r3, [r3, #16]
   b9ae4:	9301      	str	r3, [sp, #4]
   b9ae6:	bd08      	pop	{r3, pc}
   b9ae8:	0003024c 	.word	0x0003024c

000b9aec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9aec:	b508      	push	{r3, lr}
   b9aee:	4b02      	ldr	r3, [pc, #8]	; (b9af8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9af0:	681b      	ldr	r3, [r3, #0]
   b9af2:	695b      	ldr	r3, [r3, #20]
   b9af4:	9301      	str	r3, [sp, #4]
   b9af6:	bd08      	pop	{r3, pc}
   b9af8:	0003024c 	.word	0x0003024c

000b9afc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9afc:	b508      	push	{r3, lr}
   b9afe:	4b02      	ldr	r3, [pc, #8]	; (b9b08 <HAL_USB_USART_Receive_Data+0xc>)
   b9b00:	681b      	ldr	r3, [r3, #0]
   b9b02:	699b      	ldr	r3, [r3, #24]
   b9b04:	9301      	str	r3, [sp, #4]
   b9b06:	bd08      	pop	{r3, pc}
   b9b08:	0003024c 	.word	0x0003024c

000b9b0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9b0c:	b508      	push	{r3, lr}
   b9b0e:	4b02      	ldr	r3, [pc, #8]	; (b9b18 <HAL_USB_USART_Send_Data+0xc>)
   b9b10:	681b      	ldr	r3, [r3, #0]
   b9b12:	69db      	ldr	r3, [r3, #28]
   b9b14:	9301      	str	r3, [sp, #4]
   b9b16:	bd08      	pop	{r3, pc}
   b9b18:	0003024c 	.word	0x0003024c

000b9b1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9b1c:	b508      	push	{r3, lr}
   b9b1e:	4b02      	ldr	r3, [pc, #8]	; (b9b28 <HAL_USB_USART_Flush_Data+0xc>)
   b9b20:	681b      	ldr	r3, [r3, #0]
   b9b22:	6a1b      	ldr	r3, [r3, #32]
   b9b24:	9301      	str	r3, [sp, #4]
   b9b26:	bd08      	pop	{r3, pc}
   b9b28:	0003024c 	.word	0x0003024c

000b9b2c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9b2c:	b508      	push	{r3, lr}
   b9b2e:	4b02      	ldr	r3, [pc, #8]	; (b9b38 <panic_+0xc>)
   b9b30:	681b      	ldr	r3, [r3, #0]
   b9b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9b34:	9301      	str	r3, [sp, #4]
   b9b36:	bd08      	pop	{r3, pc}
   b9b38:	00030260 	.word	0x00030260

000b9b3c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9b3c:	b508      	push	{r3, lr}
   b9b3e:	4b02      	ldr	r3, [pc, #8]	; (b9b48 <log_message+0xc>)
   b9b40:	681b      	ldr	r3, [r3, #0]
   b9b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9b44:	9301      	str	r3, [sp, #4]
   b9b46:	bd08      	pop	{r3, pc}
   b9b48:	00030260 	.word	0x00030260

000b9b4c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b9b4c:	b508      	push	{r3, lr}
   b9b4e:	4b02      	ldr	r3, [pc, #8]	; (b9b58 <log_message_v+0xc>)
   b9b50:	681b      	ldr	r3, [r3, #0]
   b9b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9b54:	9301      	str	r3, [sp, #4]
   b9b56:	bd08      	pop	{r3, pc}
   b9b58:	00030260 	.word	0x00030260

000b9b5c <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b9b5c:	b508      	push	{r3, lr}
   b9b5e:	4b02      	ldr	r3, [pc, #8]	; (b9b68 <log_write+0xc>)
   b9b60:	681b      	ldr	r3, [r3, #0]
   b9b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9b64:	9301      	str	r3, [sp, #4]
   b9b66:	bd08      	pop	{r3, pc}
   b9b68:	00030260 	.word	0x00030260

000b9b6c <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b9b6c:	b508      	push	{r3, lr}
   b9b6e:	4b02      	ldr	r3, [pc, #8]	; (b9b78 <log_dump+0xc>)
   b9b70:	681b      	ldr	r3, [r3, #0]
   b9b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9b74:	9301      	str	r3, [sp, #4]
   b9b76:	bd08      	pop	{r3, pc}
   b9b78:	00030260 	.word	0x00030260

000b9b7c <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b9b7c:	b508      	push	{r3, lr}
   b9b7e:	4b02      	ldr	r3, [pc, #8]	; (b9b88 <log_level_name+0xc>)
   b9b80:	681b      	ldr	r3, [r3, #0]
   b9b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b9b84:	9301      	str	r3, [sp, #4]
   b9b86:	bd08      	pop	{r3, pc}
   b9b88:	00030260 	.word	0x00030260

000b9b8c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b9b8c:	b508      	push	{r3, lr}
   b9b8e:	4b02      	ldr	r3, [pc, #8]	; (b9b98 <log_set_callbacks+0xc>)
   b9b90:	681b      	ldr	r3, [r3, #0]
   b9b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9b94:	9301      	str	r3, [sp, #4]
   b9b96:	bd08      	pop	{r3, pc}
   b9b98:	00030260 	.word	0x00030260

000b9b9c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b9b9c:	b508      	push	{r3, lr}
   b9b9e:	4b03      	ldr	r3, [pc, #12]	; (b9bac <diag_get_source+0x10>)
   b9ba0:	681b      	ldr	r3, [r3, #0]
   b9ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b9ba6:	9301      	str	r3, [sp, #4]
   b9ba8:	bd08      	pop	{r3, pc}
   b9baa:	0000      	.short	0x0000
   b9bac:	00030260 	.word	0x00030260

000b9bb0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9bb0:	b508      	push	{r3, lr}
   b9bb2:	4b02      	ldr	r3, [pc, #8]	; (b9bbc <system_mode+0xc>)
   b9bb4:	681b      	ldr	r3, [r3, #0]
   b9bb6:	681b      	ldr	r3, [r3, #0]
   b9bb8:	9301      	str	r3, [sp, #4]
   b9bba:	bd08      	pop	{r3, pc}
   b9bbc:	00030220 	.word	0x00030220

000b9bc0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9bc0:	b508      	push	{r3, lr}
   b9bc2:	4b02      	ldr	r3, [pc, #8]	; (b9bcc <set_system_mode+0xc>)
   b9bc4:	681b      	ldr	r3, [r3, #0]
   b9bc6:	685b      	ldr	r3, [r3, #4]
   b9bc8:	9301      	str	r3, [sp, #4]
   b9bca:	bd08      	pop	{r3, pc}
   b9bcc:	00030220 	.word	0x00030220

000b9bd0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9bd0:	b508      	push	{r3, lr}
   b9bd2:	4b02      	ldr	r3, [pc, #8]	; (b9bdc <system_delay_ms+0xc>)
   b9bd4:	681b      	ldr	r3, [r3, #0]
   b9bd6:	695b      	ldr	r3, [r3, #20]
   b9bd8:	9301      	str	r3, [sp, #4]
   b9bda:	bd08      	pop	{r3, pc}
   b9bdc:	00030220 	.word	0x00030220

000b9be0 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b9be0:	b508      	push	{r3, lr}
   b9be2:	4b02      	ldr	r3, [pc, #8]	; (b9bec <system_subscribe_event+0xc>)
   b9be4:	681b      	ldr	r3, [r3, #0]
   b9be6:	6a1b      	ldr	r3, [r3, #32]
   b9be8:	9301      	str	r3, [sp, #4]
   b9bea:	bd08      	pop	{r3, pc}
   b9bec:	00030220 	.word	0x00030220

000b9bf0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b9bf0:	b508      	push	{r3, lr}
   b9bf2:	4b02      	ldr	r3, [pc, #8]	; (b9bfc <system_thread_set_state+0xc>)
   b9bf4:	681b      	ldr	r3, [r3, #0]
   b9bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9bf8:	9301      	str	r3, [sp, #4]
   b9bfa:	bd08      	pop	{r3, pc}
   b9bfc:	00030220 	.word	0x00030220

000b9c00 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9c00:	b508      	push	{r3, lr}
   b9c02:	4b02      	ldr	r3, [pc, #8]	; (b9c0c <application_thread_current+0xc>)
   b9c04:	681b      	ldr	r3, [r3, #0]
   b9c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9c08:	9301      	str	r3, [sp, #4]
   b9c0a:	bd08      	pop	{r3, pc}
   b9c0c:	00030220 	.word	0x00030220

000b9c10 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9c10:	b508      	push	{r3, lr}
   b9c12:	4b02      	ldr	r3, [pc, #8]	; (b9c1c <application_thread_invoke+0xc>)
   b9c14:	681b      	ldr	r3, [r3, #0]
   b9c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9c18:	9301      	str	r3, [sp, #4]
   b9c1a:	bd08      	pop	{r3, pc}
   b9c1c:	00030220 	.word	0x00030220

000b9c20 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9c20:	b508      	push	{r3, lr}
   b9c22:	4b02      	ldr	r3, [pc, #8]	; (b9c2c <system_thread_get_state+0xc>)
   b9c24:	681b      	ldr	r3, [r3, #0]
   b9c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9c28:	9301      	str	r3, [sp, #4]
   b9c2a:	bd08      	pop	{r3, pc}
   b9c2c:	00030220 	.word	0x00030220

000b9c30 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b9c30:	b508      	push	{r3, lr}
   b9c32:	4b02      	ldr	r3, [pc, #8]	; (b9c3c <system_notify_time_changed+0xc>)
   b9c34:	681b      	ldr	r3, [r3, #0]
   b9c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b9c38:	9301      	str	r3, [sp, #4]
   b9c3a:	bd08      	pop	{r3, pc}
   b9c3c:	00030220 	.word	0x00030220

000b9c40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9c40:	b508      	push	{r3, lr}
   b9c42:	4b03      	ldr	r3, [pc, #12]	; (b9c50 <system_ctrl_set_app_request_handler+0x10>)
   b9c44:	681b      	ldr	r3, [r3, #0]
   b9c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9c4a:	9301      	str	r3, [sp, #4]
   b9c4c:	bd08      	pop	{r3, pc}
   b9c4e:	0000      	.short	0x0000
   b9c50:	00030220 	.word	0x00030220

000b9c54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9c54:	b508      	push	{r3, lr}
   b9c56:	4b03      	ldr	r3, [pc, #12]	; (b9c64 <system_ctrl_set_result+0x10>)
   b9c58:	681b      	ldr	r3, [r3, #0]
   b9c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9c5e:	9301      	str	r3, [sp, #4]
   b9c60:	bd08      	pop	{r3, pc}
   b9c62:	0000      	.short	0x0000
   b9c64:	00030220 	.word	0x00030220

000b9c68 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b9c68:	b508      	push	{r3, lr}
   b9c6a:	4b03      	ldr	r3, [pc, #12]	; (b9c78 <system_power_management_set_config+0x10>)
   b9c6c:	681b      	ldr	r3, [r3, #0]
   b9c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b9c72:	9301      	str	r3, [sp, #4]
   b9c74:	bd08      	pop	{r3, pc}
   b9c76:	0000      	.short	0x0000
   b9c78:	00030220 	.word	0x00030220

000b9c7c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b9c7c:	b508      	push	{r3, lr}
   b9c7e:	4b03      	ldr	r3, [pc, #12]	; (b9c8c <system_sleep_ext+0x10>)
   b9c80:	681b      	ldr	r3, [r3, #0]
   b9c82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b9c86:	9301      	str	r3, [sp, #4]
   b9c88:	bd08      	pop	{r3, pc}
   b9c8a:	0000      	.short	0x0000
   b9c8c:	00030220 	.word	0x00030220

000b9c90 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b9c90:	b508      	push	{r3, lr}
   b9c92:	4b03      	ldr	r3, [pc, #12]	; (b9ca0 <system_reset+0x10>)
   b9c94:	681b      	ldr	r3, [r3, #0]
   b9c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b9c9a:	9301      	str	r3, [sp, #4]
   b9c9c:	bd08      	pop	{r3, pc}
   b9c9e:	0000      	.short	0x0000
   b9ca0:	00030220 	.word	0x00030220

000b9ca4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b9ca4:	b508      	push	{r3, lr}
   b9ca6:	4b02      	ldr	r3, [pc, #8]	; (b9cb0 <spark_function+0xc>)
   b9ca8:	681b      	ldr	r3, [r3, #0]
   b9caa:	685b      	ldr	r3, [r3, #4]
   b9cac:	9301      	str	r3, [sp, #4]
   b9cae:	bd08      	pop	{r3, pc}
   b9cb0:	00030244 	.word	0x00030244

000b9cb4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b9cb4:	b508      	push	{r3, lr}
   b9cb6:	4b02      	ldr	r3, [pc, #8]	; (b9cc0 <spark_process+0xc>)
   b9cb8:	681b      	ldr	r3, [r3, #0]
   b9cba:	689b      	ldr	r3, [r3, #8]
   b9cbc:	9301      	str	r3, [sp, #4]
   b9cbe:	bd08      	pop	{r3, pc}
   b9cc0:	00030244 	.word	0x00030244

000b9cc4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b9cc4:	b508      	push	{r3, lr}
   b9cc6:	4b02      	ldr	r3, [pc, #8]	; (b9cd0 <spark_cloud_flag_connect+0xc>)
   b9cc8:	681b      	ldr	r3, [r3, #0]
   b9cca:	68db      	ldr	r3, [r3, #12]
   b9ccc:	9301      	str	r3, [sp, #4]
   b9cce:	bd08      	pop	{r3, pc}
   b9cd0:	00030244 	.word	0x00030244

000b9cd4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b9cd4:	b508      	push	{r3, lr}
   b9cd6:	4b02      	ldr	r3, [pc, #8]	; (b9ce0 <spark_cloud_flag_connected+0xc>)
   b9cd8:	681b      	ldr	r3, [r3, #0]
   b9cda:	695b      	ldr	r3, [r3, #20]
   b9cdc:	9301      	str	r3, [sp, #4]
   b9cde:	bd08      	pop	{r3, pc}
   b9ce0:	00030244 	.word	0x00030244

000b9ce4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b9ce4:	b508      	push	{r3, lr}
   b9ce6:	4b02      	ldr	r3, [pc, #8]	; (b9cf0 <spark_deviceID+0xc>)
   b9ce8:	681b      	ldr	r3, [r3, #0]
   b9cea:	69db      	ldr	r3, [r3, #28]
   b9cec:	9301      	str	r3, [sp, #4]
   b9cee:	bd08      	pop	{r3, pc}
   b9cf0:	00030244 	.word	0x00030244

000b9cf4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9cf4:	b508      	push	{r3, lr}
   b9cf6:	4b02      	ldr	r3, [pc, #8]	; (b9d00 <spark_send_event+0xc>)
   b9cf8:	681b      	ldr	r3, [r3, #0]
   b9cfa:	6a1b      	ldr	r3, [r3, #32]
   b9cfc:	9301      	str	r3, [sp, #4]
   b9cfe:	bd08      	pop	{r3, pc}
   b9d00:	00030244 	.word	0x00030244

000b9d04 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9d04:	b508      	push	{r3, lr}
   b9d06:	4b02      	ldr	r3, [pc, #8]	; (b9d10 <spark_subscribe+0xc>)
   b9d08:	681b      	ldr	r3, [r3, #0]
   b9d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9d0c:	9301      	str	r3, [sp, #4]
   b9d0e:	bd08      	pop	{r3, pc}
   b9d10:	00030244 	.word	0x00030244

000b9d14 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9d14:	b508      	push	{r3, lr}
   b9d16:	4b02      	ldr	r3, [pc, #8]	; (b9d20 <spark_sync_time_pending+0xc>)
   b9d18:	681b      	ldr	r3, [r3, #0]
   b9d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9d1c:	9301      	str	r3, [sp, #4]
   b9d1e:	bd08      	pop	{r3, pc}
   b9d20:	00030244 	.word	0x00030244

000b9d24 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b9d24:	b508      	push	{r3, lr}
   b9d26:	4b02      	ldr	r3, [pc, #8]	; (b9d30 <spark_sync_time_last+0xc>)
   b9d28:	681b      	ldr	r3, [r3, #0]
   b9d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9d2c:	9301      	str	r3, [sp, #4]
   b9d2e:	bd08      	pop	{r3, pc}
   b9d30:	00030244 	.word	0x00030244

000b9d34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9d34:	b508      	push	{r3, lr}
   b9d36:	4b02      	ldr	r3, [pc, #8]	; (b9d40 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9d38:	681b      	ldr	r3, [r3, #0]
   b9d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9d3c:	9301      	str	r3, [sp, #4]
   b9d3e:	bd08      	pop	{r3, pc}
   b9d40:	00030244 	.word	0x00030244

000b9d44 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b9d44:	b508      	push	{r3, lr}
   b9d46:	4b02      	ldr	r3, [pc, #8]	; (b9d50 <spark_cloud_disconnect+0xc>)
   b9d48:	681b      	ldr	r3, [r3, #0]
   b9d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9d4c:	9301      	str	r3, [sp, #4]
   b9d4e:	bd08      	pop	{r3, pc}
   b9d50:	00030244 	.word	0x00030244

000b9d54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9d54:	b508      	push	{r3, lr}
   b9d56:	4b02      	ldr	r3, [pc, #8]	; (b9d60 <network_connect+0xc>)
   b9d58:	681b      	ldr	r3, [r3, #0]
   b9d5a:	685b      	ldr	r3, [r3, #4]
   b9d5c:	9301      	str	r3, [sp, #4]
   b9d5e:	bd08      	pop	{r3, pc}
   b9d60:	00030240 	.word	0x00030240

000b9d64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9d64:	b508      	push	{r3, lr}
   b9d66:	4b02      	ldr	r3, [pc, #8]	; (b9d70 <network_connecting+0xc>)
   b9d68:	681b      	ldr	r3, [r3, #0]
   b9d6a:	689b      	ldr	r3, [r3, #8]
   b9d6c:	9301      	str	r3, [sp, #4]
   b9d6e:	bd08      	pop	{r3, pc}
   b9d70:	00030240 	.word	0x00030240

000b9d74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9d74:	b508      	push	{r3, lr}
   b9d76:	4b02      	ldr	r3, [pc, #8]	; (b9d80 <network_disconnect+0xc>)
   b9d78:	681b      	ldr	r3, [r3, #0]
   b9d7a:	68db      	ldr	r3, [r3, #12]
   b9d7c:	9301      	str	r3, [sp, #4]
   b9d7e:	bd08      	pop	{r3, pc}
   b9d80:	00030240 	.word	0x00030240

000b9d84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9d84:	b508      	push	{r3, lr}
   b9d86:	4b02      	ldr	r3, [pc, #8]	; (b9d90 <network_ready+0xc>)
   b9d88:	681b      	ldr	r3, [r3, #0]
   b9d8a:	691b      	ldr	r3, [r3, #16]
   b9d8c:	9301      	str	r3, [sp, #4]
   b9d8e:	bd08      	pop	{r3, pc}
   b9d90:	00030240 	.word	0x00030240

000b9d94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9d94:	b508      	push	{r3, lr}
   b9d96:	4b02      	ldr	r3, [pc, #8]	; (b9da0 <network_on+0xc>)
   b9d98:	681b      	ldr	r3, [r3, #0]
   b9d9a:	695b      	ldr	r3, [r3, #20]
   b9d9c:	9301      	str	r3, [sp, #4]
   b9d9e:	bd08      	pop	{r3, pc}
   b9da0:	00030240 	.word	0x00030240

000b9da4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9da4:	b508      	push	{r3, lr}
   b9da6:	4b02      	ldr	r3, [pc, #8]	; (b9db0 <network_off+0xc>)
   b9da8:	681b      	ldr	r3, [r3, #0]
   b9daa:	699b      	ldr	r3, [r3, #24]
   b9dac:	9301      	str	r3, [sp, #4]
   b9dae:	bd08      	pop	{r3, pc}
   b9db0:	00030240 	.word	0x00030240

000b9db4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9db4:	b508      	push	{r3, lr}
   b9db6:	4b02      	ldr	r3, [pc, #8]	; (b9dc0 <network_listen+0xc>)
   b9db8:	681b      	ldr	r3, [r3, #0]
   b9dba:	69db      	ldr	r3, [r3, #28]
   b9dbc:	9301      	str	r3, [sp, #4]
   b9dbe:	bd08      	pop	{r3, pc}
   b9dc0:	00030240 	.word	0x00030240

000b9dc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9dc4:	b508      	push	{r3, lr}
   b9dc6:	4b02      	ldr	r3, [pc, #8]	; (b9dd0 <network_listening+0xc>)
   b9dc8:	681b      	ldr	r3, [r3, #0]
   b9dca:	6a1b      	ldr	r3, [r3, #32]
   b9dcc:	9301      	str	r3, [sp, #4]
   b9dce:	bd08      	pop	{r3, pc}
   b9dd0:	00030240 	.word	0x00030240

000b9dd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9dd4:	b508      	push	{r3, lr}
   b9dd6:	4b02      	ldr	r3, [pc, #8]	; (b9de0 <network_set_listen_timeout+0xc>)
   b9dd8:	681b      	ldr	r3, [r3, #0]
   b9dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9ddc:	9301      	str	r3, [sp, #4]
   b9dde:	bd08      	pop	{r3, pc}
   b9de0:	00030240 	.word	0x00030240

000b9de4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9de4:	b508      	push	{r3, lr}
   b9de6:	4b02      	ldr	r3, [pc, #8]	; (b9df0 <network_get_listen_timeout+0xc>)
   b9de8:	681b      	ldr	r3, [r3, #0]
   b9dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9dec:	9301      	str	r3, [sp, #4]
   b9dee:	bd08      	pop	{r3, pc}
   b9df0:	00030240 	.word	0x00030240

000b9df4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9df4:	b508      	push	{r3, lr}
   b9df6:	4b02      	ldr	r3, [pc, #8]	; (b9e00 <network_is_on+0xc>)
   b9df8:	681b      	ldr	r3, [r3, #0]
   b9dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9dfc:	9301      	str	r3, [sp, #4]
   b9dfe:	bd08      	pop	{r3, pc}
   b9e00:	00030240 	.word	0x00030240

000b9e04 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9e04:	b508      	push	{r3, lr}
   b9e06:	4b02      	ldr	r3, [pc, #8]	; (b9e10 <network_is_off+0xc>)
   b9e08:	681b      	ldr	r3, [r3, #0]
   b9e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9e0c:	9301      	str	r3, [sp, #4]
   b9e0e:	bd08      	pop	{r3, pc}
   b9e10:	00030240 	.word	0x00030240

000b9e14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9e14:	b508      	push	{r3, lr}
   b9e16:	4b02      	ldr	r3, [pc, #8]	; (b9e20 <malloc+0xc>)
   b9e18:	681b      	ldr	r3, [r3, #0]
   b9e1a:	681b      	ldr	r3, [r3, #0]
   b9e1c:	9301      	str	r3, [sp, #4]
   b9e1e:	bd08      	pop	{r3, pc}
   b9e20:	0003021c 	.word	0x0003021c

000b9e24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9e24:	b508      	push	{r3, lr}
   b9e26:	4b02      	ldr	r3, [pc, #8]	; (b9e30 <free+0xc>)
   b9e28:	681b      	ldr	r3, [r3, #0]
   b9e2a:	685b      	ldr	r3, [r3, #4]
   b9e2c:	9301      	str	r3, [sp, #4]
   b9e2e:	bd08      	pop	{r3, pc}
   b9e30:	0003021c 	.word	0x0003021c

000b9e34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9e34:	b508      	push	{r3, lr}
   b9e36:	4b02      	ldr	r3, [pc, #8]	; (b9e40 <realloc+0xc>)
   b9e38:	681b      	ldr	r3, [r3, #0]
   b9e3a:	689b      	ldr	r3, [r3, #8]
   b9e3c:	9301      	str	r3, [sp, #4]
   b9e3e:	bd08      	pop	{r3, pc}
   b9e40:	0003021c 	.word	0x0003021c

000b9e44 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b9e44:	b508      	push	{r3, lr}
   b9e46:	4b02      	ldr	r3, [pc, #8]	; (b9e50 <siprintf+0xc>)
   b9e48:	681b      	ldr	r3, [r3, #0]
   b9e4a:	691b      	ldr	r3, [r3, #16]
   b9e4c:	9301      	str	r3, [sp, #4]
   b9e4e:	bd08      	pop	{r3, pc}
   b9e50:	0003021c 	.word	0x0003021c

000b9e54 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9e54:	b508      	push	{r3, lr}
   b9e56:	4b02      	ldr	r3, [pc, #8]	; (b9e60 <sscanf+0xc>)
   b9e58:	681b      	ldr	r3, [r3, #0]
   b9e5a:	695b      	ldr	r3, [r3, #20]
   b9e5c:	9301      	str	r3, [sp, #4]
   b9e5e:	bd08      	pop	{r3, pc}
   b9e60:	0003021c 	.word	0x0003021c

000b9e64 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9e64:	b508      	push	{r3, lr}
   b9e66:	4b02      	ldr	r3, [pc, #8]	; (b9e70 <snprintf+0xc>)
   b9e68:	681b      	ldr	r3, [r3, #0]
   b9e6a:	69db      	ldr	r3, [r3, #28]
   b9e6c:	9301      	str	r3, [sp, #4]
   b9e6e:	bd08      	pop	{r3, pc}
   b9e70:	0003021c 	.word	0x0003021c

000b9e74 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9e74:	b508      	push	{r3, lr}
   b9e76:	4b02      	ldr	r3, [pc, #8]	; (b9e80 <vsnprintf+0xc>)
   b9e78:	681b      	ldr	r3, [r3, #0]
   b9e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9e7c:	9301      	str	r3, [sp, #4]
   b9e7e:	bd08      	pop	{r3, pc}
   b9e80:	0003021c 	.word	0x0003021c

000b9e84 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9e84:	b508      	push	{r3, lr}
   b9e86:	4b02      	ldr	r3, [pc, #8]	; (b9e90 <abort+0xc>)
   b9e88:	681b      	ldr	r3, [r3, #0]
   b9e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9e8c:	9301      	str	r3, [sp, #4]
   b9e8e:	bd08      	pop	{r3, pc}
   b9e90:	0003021c 	.word	0x0003021c

000b9e94 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9e94:	b508      	push	{r3, lr}
   b9e96:	4b02      	ldr	r3, [pc, #8]	; (b9ea0 <_malloc_r+0xc>)
   b9e98:	681b      	ldr	r3, [r3, #0]
   b9e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9e9c:	9301      	str	r3, [sp, #4]
   b9e9e:	bd08      	pop	{r3, pc}
   b9ea0:	0003021c 	.word	0x0003021c

000b9ea4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9ea4:	b508      	push	{r3, lr}
   b9ea6:	4b02      	ldr	r3, [pc, #8]	; (b9eb0 <__errno+0xc>)
   b9ea8:	681b      	ldr	r3, [r3, #0]
   b9eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9eac:	9301      	str	r3, [sp, #4]
   b9eae:	bd08      	pop	{r3, pc}
   b9eb0:	0003021c 	.word	0x0003021c

000b9eb4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9eb4:	b508      	push	{r3, lr}
   b9eb6:	4b02      	ldr	r3, [pc, #8]	; (b9ec0 <__assert_func+0xc>)
   b9eb8:	681b      	ldr	r3, [r3, #0]
   b9eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9ebc:	9301      	str	r3, [sp, #4]
   b9ebe:	bd08      	pop	{r3, pc}
   b9ec0:	0003021c 	.word	0x0003021c

000b9ec4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9ec4:	b508      	push	{r3, lr}
   b9ec6:	4b02      	ldr	r3, [pc, #8]	; (b9ed0 <newlib_impure_ptr_callback+0xc>)
   b9ec8:	681b      	ldr	r3, [r3, #0]
   b9eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9ecc:	9301      	str	r3, [sp, #4]
   b9ece:	bd08      	pop	{r3, pc}
   b9ed0:	0003021c 	.word	0x0003021c

000b9ed4 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b9ed4:	b508      	push	{r3, lr}
   b9ed6:	4b02      	ldr	r3, [pc, #8]	; (b9ee0 <strftime+0xc>)
   b9ed8:	681b      	ldr	r3, [r3, #0]
   b9eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9edc:	9301      	str	r3, [sp, #4]
   b9ede:	bd08      	pop	{r3, pc}
   b9ee0:	0003021c 	.word	0x0003021c

000b9ee4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9ee4:	b508      	push	{r3, lr}
   b9ee6:	4b02      	ldr	r3, [pc, #8]	; (b9ef0 <localtime_r+0xc>)
   b9ee8:	681b      	ldr	r3, [r3, #0]
   b9eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9eec:	9301      	str	r3, [sp, #4]
   b9eee:	bd08      	pop	{r3, pc}
   b9ef0:	0003021c 	.word	0x0003021c

000b9ef4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9ef4:	b508      	push	{r3, lr}
   b9ef6:	4b02      	ldr	r3, [pc, #8]	; (b9f00 <gmtime_r+0xc>)
   b9ef8:	681b      	ldr	r3, [r3, #0]
   b9efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9efc:	9301      	str	r3, [sp, #4]
   b9efe:	bd08      	pop	{r3, pc}
   b9f00:	0003021c 	.word	0x0003021c

000b9f04 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b9f04:	b508      	push	{r3, lr}
   b9f06:	4b02      	ldr	r3, [pc, #8]	; (b9f10 <mktime+0xc>)
   b9f08:	681b      	ldr	r3, [r3, #0]
   b9f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9f0c:	9301      	str	r3, [sp, #4]
   b9f0e:	bd08      	pop	{r3, pc}
   b9f10:	0003021c 	.word	0x0003021c

000b9f14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9f14:	2100      	movs	r1, #0
   b9f16:	f7ff be5b 	b.w	b9bd0 <system_delay_ms>

000b9f1a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9f1a:	b510      	push	{r4, lr}
      if (_M_empty())
   b9f1c:	6883      	ldr	r3, [r0, #8]
   b9f1e:	4604      	mov	r4, r0
   b9f20:	b90b      	cbnz	r3, b9f26 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9f22:	f003 f88d 	bl	bd040 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9f26:	68c3      	ldr	r3, [r0, #12]
   b9f28:	4798      	blx	r3
      if (_M_manager)
   b9f2a:	68a3      	ldr	r3, [r4, #8]
   b9f2c:	b11b      	cbz	r3, b9f36 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9f2e:	2203      	movs	r2, #3
   b9f30:	4621      	mov	r1, r4
   b9f32:	4620      	mov	r0, r4
   b9f34:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9f36:	4620      	mov	r0, r4
   b9f38:	2110      	movs	r1, #16
}
   b9f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9f3e:	f7fa b8ae 	b.w	b409e <_ZdlPvj>

000b9f42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b9f42:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b9f44:	6843      	ldr	r3, [r0, #4]
   b9f46:	3b01      	subs	r3, #1
    {
   b9f48:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b9f4a:	6043      	str	r3, [r0, #4]
   b9f4c:	b963      	cbnz	r3, b9f68 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b9f4e:	6803      	ldr	r3, [r0, #0]
   b9f50:	689b      	ldr	r3, [r3, #8]
   b9f52:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9f54:	68a3      	ldr	r3, [r4, #8]
   b9f56:	3b01      	subs	r3, #1
   b9f58:	60a3      	str	r3, [r4, #8]
   b9f5a:	b92b      	cbnz	r3, b9f68 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b9f5c:	6823      	ldr	r3, [r4, #0]
   b9f5e:	4620      	mov	r0, r4
   b9f60:	68db      	ldr	r3, [r3, #12]
    }
   b9f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b9f66:	4718      	bx	r3
    }
   b9f68:	bd10      	pop	{r4, pc}

000b9f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9f6a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9f6c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9f70:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9f72:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b9f76:	42ae      	cmp	r6, r5
   b9f78:	d004      	beq.n	b9f84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b9f7a:	4628      	mov	r0, r5
   b9f7c:	f002 f970 	bl	bc260 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b9f80:	3510      	adds	r5, #16
   b9f82:	e7f8      	b.n	b9f76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9f84:	6820      	ldr	r0, [r4, #0]
   b9f86:	f7ff ff4d 	bl	b9e24 <free>
    AllocatorT::free(data_);
}
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9f90:	4802      	ldr	r0, [pc, #8]	; (b9f9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9f92:	2300      	movs	r3, #0
   b9f94:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b9f96:	f7ff bb89 	b.w	b96ac <os_mutex_recursive_create>
   b9f9a:	bf00      	nop
   b9f9c:	2003e5fc 	.word	0x2003e5fc

000b9fa0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9fa0:	2200      	movs	r2, #0
   b9fa2:	6840      	ldr	r0, [r0, #4]
   b9fa4:	4611      	mov	r1, r2
   b9fa6:	f7ff beed 	b.w	b9d84 <network_ready>

000b9faa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9faa:	2200      	movs	r2, #0
   b9fac:	6840      	ldr	r0, [r0, #4]
   b9fae:	4611      	mov	r1, r2
   b9fb0:	f7ff bf08 	b.w	b9dc4 <network_listening>

000b9fb4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9fb4:	2200      	movs	r2, #0
   b9fb6:	6840      	ldr	r0, [r0, #4]
   b9fb8:	4611      	mov	r1, r2
   b9fba:	f7ff bf13 	b.w	b9de4 <network_get_listen_timeout>

000b9fbe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9fbe:	6840      	ldr	r0, [r0, #4]
   b9fc0:	2200      	movs	r2, #0
   b9fc2:	f7ff bf07 	b.w	b9dd4 <network_set_listen_timeout>

000b9fc6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9fc6:	6840      	ldr	r0, [r0, #4]
   b9fc8:	2200      	movs	r2, #0
   b9fca:	f081 0101 	eor.w	r1, r1, #1
   b9fce:	f7ff bef1 	b.w	b9db4 <network_listen>

000b9fd2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9fd2:	2300      	movs	r3, #0
   b9fd4:	6840      	ldr	r0, [r0, #4]
   b9fd6:	461a      	mov	r2, r3
   b9fd8:	4619      	mov	r1, r3
   b9fda:	f7ff bee3 	b.w	b9da4 <network_off>

000b9fde <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9fde:	2300      	movs	r3, #0
   b9fe0:	6840      	ldr	r0, [r0, #4]
   b9fe2:	461a      	mov	r2, r3
   b9fe4:	4619      	mov	r1, r3
   b9fe6:	f7ff bed5 	b.w	b9d94 <network_on>

000b9fea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9fea:	2200      	movs	r2, #0
   b9fec:	6840      	ldr	r0, [r0, #4]
   b9fee:	4611      	mov	r1, r2
   b9ff0:	f7ff beb8 	b.w	b9d64 <network_connecting>

000b9ff4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9ff4:	6840      	ldr	r0, [r0, #4]
   b9ff6:	2200      	movs	r2, #0
   b9ff8:	2102      	movs	r1, #2
   b9ffa:	f7ff bebb 	b.w	b9d74 <network_disconnect>

000b9ffe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9ffe:	2300      	movs	r3, #0
   ba000:	6840      	ldr	r0, [r0, #4]
   ba002:	461a      	mov	r2, r3
   ba004:	f7ff bea6 	b.w	b9d54 <network_connect>

000ba008 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   ba008:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   ba00a:	4b13      	ldr	r3, [pc, #76]	; (ba058 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   ba00c:	6003      	str	r3, [r0, #0]
   ba00e:	2518      	movs	r5, #24
   ba010:	3330      	adds	r3, #48	; 0x30
   ba012:	b086      	sub	sp, #24
   ba014:	460e      	mov	r6, r1
   ba016:	6043      	str	r3, [r0, #4]
   ba018:	462a      	mov	r2, r5
   ba01a:	2100      	movs	r1, #0
   ba01c:	4604      	mov	r4, r0
   ba01e:	3008      	adds	r0, #8
   ba020:	f003 fe9a 	bl	bdd58 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   ba024:	2200      	movs	r2, #0
   ba026:	6870      	ldr	r0, [r6, #4]
   ba028:	4611      	mov	r1, r2
   ba02a:	f7ff feab 	bl	b9d84 <network_ready>
   ba02e:	b178      	cbz	r0, ba050 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   ba030:	2100      	movs	r1, #0
   ba032:	462a      	mov	r2, r5
   ba034:	4668      	mov	r0, sp
   ba036:	f003 fe8f 	bl	bdd58 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   ba03a:	4669      	mov	r1, sp
   ba03c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   ba03e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   ba042:	f7ff faf3 	bl	b962c <cellular_signal>
   ba046:	b918      	cbnz	r0, ba050 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   ba048:	4669      	mov	r1, sp
   ba04a:	4620      	mov	r0, r4
   ba04c:	f000 f8b8 	bl	ba1c0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   ba050:	4620      	mov	r0, r4
   ba052:	b006      	add	sp, #24
   ba054:	bd70      	pop	{r4, r5, r6, pc}
   ba056:	bf00      	nop
   ba058:	000bf4a8 	.word	0x000bf4a8

000ba05c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   ba05c:	4b08      	ldr	r3, [pc, #32]	; (ba080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   ba05e:	b510      	push	{r4, lr}
   ba060:	2428      	movs	r4, #40	; 0x28
   ba062:	4622      	mov	r2, r4
   ba064:	4618      	mov	r0, r3
   ba066:	2100      	movs	r1, #0
   ba068:	f003 fe76 	bl	bdd58 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   ba06c:	4b05      	ldr	r3, [pc, #20]	; (ba084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   ba06e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   ba070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba074:	6042      	str	r2, [r0, #4]
   ba076:	2204      	movs	r2, #4
   ba078:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   ba07a:	4a03      	ldr	r2, [pc, #12]	; (ba088 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   ba07c:	601a      	str	r2, [r3, #0]
   ba07e:	bd10      	pop	{r4, pc}
   ba080:	2003e608 	.word	0x2003e608
   ba084:	2003e600 	.word	0x2003e600
   ba088:	000bf46c 	.word	0x000bf46c

000ba08c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   ba08c:	4770      	bx	lr

000ba08e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   ba08e:	7b00      	ldrb	r0, [r0, #12]
   ba090:	4770      	bx	lr

000ba092 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   ba092:	7b03      	ldrb	r3, [r0, #12]
   ba094:	b14b      	cbz	r3, ba0aa <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   ba096:	6903      	ldr	r3, [r0, #16]
   ba098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba09c:	d005      	beq.n	ba0aa <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   ba09e:	6980      	ldr	r0, [r0, #24]
   ba0a0:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   ba0a4:	bf18      	it	ne
   ba0a6:	2001      	movne	r0, #1
   ba0a8:	4770      	bx	lr
   ba0aa:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   ba0ac:	4770      	bx	lr

000ba0ae <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   ba0ae:	6803      	ldr	r3, [r0, #0]
   ba0b0:	6a1b      	ldr	r3, [r3, #32]
   ba0b2:	4718      	bx	r3

000ba0b4 <_ZNK14CellularSignal7printToER5Print>:
{
   ba0b4:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   ba0b6:	6803      	ldr	r3, [r0, #0]
{
   ba0b8:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   ba0ba:	691b      	ldr	r3, [r3, #16]
{
   ba0bc:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   ba0be:	4798      	blx	r3
   ba0c0:	2102      	movs	r1, #2
   ba0c2:	4628      	mov	r0, r5
   ba0c4:	f002 f87c 	bl	bc1c0 <_ZN5Print5printEfi>
    n += p.print(',');
   ba0c8:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   ba0ca:	4604      	mov	r4, r0
    n += p.print(',');
   ba0cc:	4628      	mov	r0, r5
   ba0ce:	f001 ff81 	bl	bbfd4 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   ba0d2:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   ba0d4:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   ba0d6:	699b      	ldr	r3, [r3, #24]
   ba0d8:	4630      	mov	r0, r6
   ba0da:	4798      	blx	r3
   ba0dc:	2102      	movs	r1, #2
   ba0de:	4628      	mov	r0, r5
   ba0e0:	f002 f86e 	bl	bc1c0 <_ZN5Print5printEfi>
}
   ba0e4:	4420      	add	r0, r4
   ba0e6:	bd70      	pop	{r4, r5, r6, pc}

000ba0e8 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   ba0e8:	f1a0 0004 	sub.w	r0, r0, #4
   ba0ec:	f7ff bfe2 	b.w	ba0b4 <_ZNK14CellularSignal7printToER5Print>

000ba0f0 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   ba0f0:	b510      	push	{r4, lr}
   ba0f2:	2120      	movs	r1, #32
   ba0f4:	4604      	mov	r4, r0
   ba0f6:	f7f9 ffd2 	bl	b409e <_ZdlPvj>
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	bd10      	pop	{r4, pc}
	...

000ba100 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   ba100:	7b03      	ldrb	r3, [r0, #12]
   ba102:	b17b      	cbz	r3, ba124 <_ZNK14CellularSignal11getStrengthEv+0x24>
   ba104:	6943      	ldr	r3, [r0, #20]
   ba106:	2b00      	cmp	r3, #0
   ba108:	db0c      	blt.n	ba124 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   ba10a:	ee07 3a90 	vmov	s15, r3
   ba10e:	ed9f 7a07 	vldr	s14, [pc, #28]	; ba12c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   ba112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba116:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba11a:	eddf 7a05 	vldr	s15, [pc, #20]	; ba130 <_ZNK14CellularSignal11getStrengthEv+0x30>
   ba11e:	ee20 0a27 	vmul.f32	s0, s0, s15
   ba122:	4770      	bx	lr
    return -1.0f;
   ba124:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   ba128:	4770      	bx	lr
   ba12a:	bf00      	nop
   ba12c:	477fff00 	.word	0x477fff00
   ba130:	42c80000 	.word	0x42c80000

000ba134 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   ba134:	7b03      	ldrb	r3, [r0, #12]
   ba136:	b163      	cbz	r3, ba152 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   ba138:	6903      	ldr	r3, [r0, #16]
   ba13a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba13e:	d008      	beq.n	ba152 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   ba140:	ee07 3a90 	vmov	s15, r3
   ba144:	ed9f 7a04 	vldr	s14, [pc, #16]	; ba158 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   ba148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba14c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba150:	4770      	bx	lr
    return 0.0f;
   ba152:	ed9f 0a02 	vldr	s0, [pc, #8]	; ba15c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   ba156:	4770      	bx	lr
   ba158:	42c80000 	.word	0x42c80000
   ba15c:	00000000 	.word	0x00000000

000ba160 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   ba160:	7b03      	ldrb	r3, [r0, #12]
   ba162:	b17b      	cbz	r3, ba184 <_ZNK14CellularSignal10getQualityEv+0x24>
   ba164:	69c3      	ldr	r3, [r0, #28]
   ba166:	2b00      	cmp	r3, #0
   ba168:	db0c      	blt.n	ba184 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   ba16a:	ee07 3a90 	vmov	s15, r3
   ba16e:	ed9f 7a07 	vldr	s14, [pc, #28]	; ba18c <_ZNK14CellularSignal10getQualityEv+0x2c>
   ba172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba176:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba17a:	eddf 7a05 	vldr	s15, [pc, #20]	; ba190 <_ZNK14CellularSignal10getQualityEv+0x30>
   ba17e:	ee20 0a27 	vmul.f32	s0, s0, s15
   ba182:	4770      	bx	lr
    return -1.0f;
   ba184:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   ba188:	4770      	bx	lr
   ba18a:	bf00      	nop
   ba18c:	477fff00 	.word	0x477fff00
   ba190:	42c80000 	.word	0x42c80000

000ba194 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   ba194:	7b03      	ldrb	r3, [r0, #12]
   ba196:	b163      	cbz	r3, ba1b2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   ba198:	6983      	ldr	r3, [r0, #24]
   ba19a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba19e:	d008      	beq.n	ba1b2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   ba1a0:	ee07 3a90 	vmov	s15, r3
   ba1a4:	ed9f 7a04 	vldr	s14, [pc, #16]	; ba1b8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   ba1a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba1ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba1b0:	4770      	bx	lr
    return 0.0f;
   ba1b2:	ed9f 0a02 	vldr	s0, [pc, #8]	; ba1bc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   ba1b6:	4770      	bx	lr
   ba1b8:	42c80000 	.word	0x42c80000
   ba1bc:	00000000 	.word	0x00000000

000ba1c0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   ba1c0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   ba1c2:	460d      	mov	r5, r1
   ba1c4:	f100 0408 	add.w	r4, r0, #8
   ba1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba1cc:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba1d0:	e884 0003 	stmia.w	r4, {r0, r1}
}
   ba1d4:	2001      	movs	r0, #1
   ba1d6:	bd30      	pop	{r4, r5, pc}

000ba1d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba1d8:	4770      	bx	lr

000ba1da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   ba1da:	2000      	movs	r0, #0
   ba1dc:	4770      	bx	lr

000ba1de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba1de:	b510      	push	{r4, lr}
   ba1e0:	2110      	movs	r1, #16
   ba1e2:	4604      	mov	r4, r0
   ba1e4:	f7f9 ff5b 	bl	b409e <_ZdlPvj>
   ba1e8:	4620      	mov	r0, r4
   ba1ea:	bd10      	pop	{r4, pc}

000ba1ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   ba1ec:	b508      	push	{r3, lr}
      { delete this; }
   ba1ee:	f7ff fff6 	bl	ba1de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   ba1f2:	bd08      	pop	{r3, pc}

000ba1f4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   ba1f4:	b530      	push	{r4, r5, lr}
        type_(type) {
   ba1f6:	2200      	movs	r2, #0
   ba1f8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   ba1fc:	6002      	str	r2, [r0, #0]
   ba1fe:	8084      	strh	r4, [r0, #4]
   ba200:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   ba202:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba204:	680c      	ldr	r4, [r1, #0]
   ba206:	8085      	strh	r5, [r0, #4]
   ba208:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba20a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   ba20c:	bd30      	pop	{r4, r5, pc}

000ba20e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   ba20e:	b510      	push	{r4, lr}
   ba210:	4604      	mov	r4, r0
    free((void*)msg_);
   ba212:	6800      	ldr	r0, [r0, #0]
   ba214:	f7ff fe06 	bl	b9e24 <free>
}
   ba218:	4620      	mov	r0, r4
   ba21a:	bd10      	pop	{r4, pc}

000ba21c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba21c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   ba21e:	68c4      	ldr	r4, [r0, #12]
   ba220:	b1f4      	cbz	r4, ba260 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   ba222:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   ba224:	2b02      	cmp	r3, #2
   ba226:	d103      	bne.n	ba230 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   ba228:	f104 000c 	add.w	r0, r4, #12
   ba22c:	f7ff ffef 	bl	ba20e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   ba230:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   ba232:	b135      	cbz	r5, ba242 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   ba234:	4628      	mov	r0, r5
   ba236:	f7f9 ff8b 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   ba23a:	2110      	movs	r1, #16
   ba23c:	4628      	mov	r0, r5
   ba23e:	f7f9 ff2e 	bl	b409e <_ZdlPvj>
   ba242:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   ba244:	b135      	cbz	r5, ba254 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   ba246:	4628      	mov	r0, r5
   ba248:	f7f9 ff82 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
   ba24c:	2110      	movs	r1, #16
   ba24e:	4628      	mov	r0, r5
   ba250:	f7f9 ff25 	bl	b409e <_ZdlPvj>
   ba254:	4620      	mov	r0, r4
   ba256:	2114      	movs	r1, #20
   ba258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba25c:	f7f9 bf1f 	b.w	b409e <_ZdlPvj>
   ba260:	bd38      	pop	{r3, r4, r5, pc}

000ba262 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   ba262:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba264:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   ba266:	4668      	mov	r0, sp
   ba268:	f002 f845 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   ba26c:	68a3      	ldr	r3, [r4, #8]
   ba26e:	b90b      	cbnz	r3, ba274 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   ba270:	f002 fee6 	bl	bd040 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba274:	68e3      	ldr	r3, [r4, #12]
   ba276:	4669      	mov	r1, sp
   ba278:	4620      	mov	r0, r4
   ba27a:	4798      	blx	r3
   ba27c:	4604      	mov	r4, r0
   ba27e:	4668      	mov	r0, sp
   ba280:	f001 ffee 	bl	bc260 <_ZN6StringD1Ev>
}
   ba284:	4620      	mov	r0, r4
   ba286:	b004      	add	sp, #16
   ba288:	bd10      	pop	{r4, pc}

000ba28a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   ba28a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   ba28c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   ba28e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   ba292:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   ba294:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   ba296:	461a      	mov	r2, r3
   ba298:	4669      	mov	r1, sp
   ba29a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   ba29c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   ba2a0:	f8ad 4000 	strh.w	r4, [sp]
   ba2a4:	f7ff fcfe 	bl	b9ca4 <spark_function>
}
   ba2a8:	b004      	add	sp, #16
   ba2aa:	bd10      	pop	{r4, pc}

000ba2ac <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   ba2ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   ba2ae:	230c      	movs	r3, #12
   ba2b0:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   ba2b4:	6803      	ldr	r3, [r0, #0]
   ba2b6:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   ba2ba:	7a03      	ldrb	r3, [r0, #8]
   ba2bc:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   ba2c0:	6843      	ldr	r3, [r0, #4]
   ba2c2:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   ba2c4:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   ba2c6:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   ba2c8:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   ba2cc:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   ba2ce:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   ba2d2:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   ba2d6:	f7ff fd35 	bl	b9d44 <spark_cloud_disconnect>
}
   ba2da:	b005      	add	sp, #20
   ba2dc:	f85d fb04 	ldr.w	pc, [sp], #4

000ba2e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba2e0:	680b      	ldr	r3, [r1, #0]
   ba2e2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba2e4:	684b      	ldr	r3, [r1, #4]
   ba2e6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba2e8:	b113      	cbz	r3, ba2f0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba2ea:	685a      	ldr	r2, [r3, #4]
   ba2ec:	3201      	adds	r2, #1
   ba2ee:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba2f0:	4770      	bx	lr

000ba2f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   ba2f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba2f4:	4604      	mov	r4, r0
   ba2f6:	4668      	mov	r0, sp
   ba2f8:	460d      	mov	r5, r1
   ba2fa:	f7ff fff1 	bl	ba2e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba2fe:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba300:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba302:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   ba304:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   ba306:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba308:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   ba30a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   ba30c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   ba30e:	f7fa f84d 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   ba312:	b135      	cbz	r5, ba322 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   ba314:	1d28      	adds	r0, r5, #4
   ba316:	f7fa f849 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba31a:	2108      	movs	r1, #8
   ba31c:	4628      	mov	r0, r5
   ba31e:	f7f9 febe 	bl	b409e <_ZdlPvj>
        return p;
    }
   ba322:	4620      	mov	r0, r4
   ba324:	b003      	add	sp, #12
   ba326:	bd30      	pop	{r4, r5, pc}

000ba328 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   ba328:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba32a:	b510      	push	{r4, lr}
      if (_M_empty())
   ba32c:	b90a      	cbnz	r2, ba332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   ba32e:	f002 fe87 	bl	bd040 <_ZSt25__throw_bad_function_callv>
    }
   ba332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba336:	68c3      	ldr	r3, [r0, #12]
   ba338:	4718      	bx	r3

000ba33a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba33a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba33c:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   ba33e:	f100 0110 	add.w	r1, r0, #16
   ba342:	f7ff fff1 	bl	ba328 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   ba346:	bd08      	pop	{r3, pc}

000ba348 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   ba348:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba34a:	b510      	push	{r4, lr}
      if (_M_empty())
   ba34c:	b90a      	cbnz	r2, ba352 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   ba34e:	f002 fe77 	bl	bd040 <_ZSt25__throw_bad_function_callv>
    }
   ba352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba356:	68c3      	ldr	r3, [r0, #12]
   ba358:	4718      	bx	r3

000ba35a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba35a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba35c:	6800      	ldr	r0, [r0, #0]
   ba35e:	f100 0110 	add.w	r1, r0, #16
   ba362:	f7ff fff1 	bl	ba348 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   ba366:	bd08      	pop	{r3, pc}

000ba368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba368:	b538      	push	{r3, r4, r5, lr}
   ba36a:	2300      	movs	r3, #0
   ba36c:	4604      	mov	r4, r0
   ba36e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba370:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   ba372:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba374:	f7f9 fe8f 	bl	b4096 <_Znwj>
   ba378:	b128      	cbz	r0, ba386 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   ba37a:	2301      	movs	r3, #1
   ba37c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   ba380:	4b02      	ldr	r3, [pc, #8]	; (ba38c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   ba382:	6003      	str	r3, [r0, #0]
   ba384:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba386:	6020      	str	r0, [r4, #0]
	}
   ba388:	4620      	mov	r0, r4
   ba38a:	bd38      	pop	{r3, r4, r5, pc}
   ba38c:	000bf4e4 	.word	0x000bf4e4

000ba390 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   ba390:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba392:	2300      	movs	r3, #0
   ba394:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba396:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba398:	4604      	mov	r4, r0
   ba39a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba39c:	b12b      	cbz	r3, ba3aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba39e:	2202      	movs	r2, #2
   ba3a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba3a2:	68eb      	ldr	r3, [r5, #12]
   ba3a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba3a6:	68ab      	ldr	r3, [r5, #8]
   ba3a8:	60a3      	str	r3, [r4, #8]
    }
   ba3aa:	4620      	mov	r0, r4
   ba3ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   ba3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba3b2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   ba3b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   ba3b6:	4668      	mov	r0, sp
   ba3b8:	f7ff ff1c 	bl	ba1f4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba3bc:	f04f 0302 	mov.w	r3, #2
   ba3c0:	e8d4 2f4f 	ldrexb	r2, [r4]
   ba3c4:	2a00      	cmp	r2, #0
   ba3c6:	d103      	bne.n	ba3d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   ba3c8:	e8c4 3f41 	strexb	r1, r3, [r4]
   ba3cc:	2900      	cmp	r1, #0
   ba3ce:	d1f7      	bne.n	ba3c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   ba3d0:	d125      	bne.n	ba41e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   ba3d2:	f104 050c 	add.w	r5, r4, #12
   ba3d6:	4669      	mov	r1, sp
   ba3d8:	4628      	mov	r0, r5
   ba3da:	f7ff ff0b 	bl	ba1f4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   ba3de:	f3bf 8f5b 	dmb	ish
   ba3e2:	2301      	movs	r3, #1
   ba3e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba3e6:	2000      	movs	r0, #0
   ba3e8:	f104 0308 	add.w	r3, r4, #8
   ba3ec:	f3bf 8f5b 	dmb	ish
   ba3f0:	e853 6f00 	ldrex	r6, [r3]
   ba3f4:	e843 0200 	strex	r2, r0, [r3]
   ba3f8:	2a00      	cmp	r2, #0
   ba3fa:	d1f9      	bne.n	ba3f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   ba3fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba400:	b16e      	cbz	r6, ba41e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   ba402:	f7ff fbfd 	bl	b9c00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba406:	b178      	cbz	r0, ba428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba408:	4629      	mov	r1, r5
   ba40a:	4630      	mov	r0, r6
   ba40c:	f7ff ff8c 	bl	ba328 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   ba410:	4630      	mov	r0, r6
   ba412:	f7f9 fe9d 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba416:	2110      	movs	r1, #16
   ba418:	4630      	mov	r0, r6
   ba41a:	f7f9 fe40 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   ba41e:	4668      	mov	r0, sp
   ba420:	f7ff fef5 	bl	ba20e <_ZN8particle5ErrorD1Ev>
    }
   ba424:	b009      	add	sp, #36	; 0x24
   ba426:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba428:	4631      	mov	r1, r6
   ba42a:	a802      	add	r0, sp, #8
   ba42c:	f7ff ffb0 	bl	ba390 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba430:	68e0      	ldr	r0, [r4, #12]
   ba432:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba436:	b108      	cbz	r0, ba43c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   ba438:	f003 fcee 	bl	bde18 <strdup>
        type_(type) {
   ba43c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba43e:	2010      	movs	r0, #16
   ba440:	f8ad 501c 	strh.w	r5, [sp, #28]
   ba444:	f7f9 fe27 	bl	b4096 <_Znwj>
   ba448:	4605      	mov	r5, r0
   ba44a:	b1e8      	cbz	r0, ba488 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   ba44c:	2700      	movs	r7, #0
   ba44e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba450:	2018      	movs	r0, #24
   ba452:	f7f9 fe20 	bl	b4096 <_Znwj>
   ba456:	4604      	mov	r4, r0
   ba458:	b188      	cbz	r0, ba47e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   ba45a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   ba45c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba45e:	a802      	add	r0, sp, #8
   ba460:	f7fc f907 	bl	b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba464:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba466:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba468:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba46a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba46c:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba46e:	a906      	add	r1, sp, #24
   ba470:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba472:	60e3      	str	r3, [r4, #12]
   ba474:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   ba478:	9205      	str	r2, [sp, #20]
   ba47a:	f7ff febb 	bl	ba1f4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   ba47e:	4b08      	ldr	r3, [pc, #32]	; (ba4a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   ba480:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba482:	4b08      	ldr	r3, [pc, #32]	; (ba4a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba484:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba486:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   ba488:	a806      	add	r0, sp, #24
   ba48a:	f7ff fec0 	bl	ba20e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba48e:	a802      	add	r0, sp, #8
   ba490:	f7f9 fe5e 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba494:	2200      	movs	r2, #0
   ba496:	4629      	mov	r1, r5
   ba498:	4803      	ldr	r0, [pc, #12]	; (ba4a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   ba49a:	f7ff fbb9 	bl	b9c10 <application_thread_invoke>
   ba49e:	e7b7      	b.n	ba410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   ba4a0:	000ba33b 	.word	0x000ba33b
   ba4a4:	000ba5bd 	.word	0x000ba5bd
   ba4a8:	000b9f1b 	.word	0x000b9f1b

000ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   ba4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4b0:	b08b      	sub	sp, #44	; 0x2c
   ba4b2:	4605      	mov	r5, r0
   ba4b4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   ba4b8:	460f      	mov	r7, r1
   ba4ba:	4690      	mov	r8, r2
   ba4bc:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba4be:	f7ff fc09 	bl	b9cd4 <spark_cloud_flag_connected>
   ba4c2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   ba4c4:	4683      	mov	fp, r0
   ba4c6:	bb38      	cbnz	r0, ba518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   ba4c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   ba4cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba4ce:	a905      	add	r1, sp, #20
   ba4d0:	4630      	mov	r0, r6
   ba4d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba4d6:	f7ff fe8d 	bl	ba1f4 <_ZN8particle5ErrorC1EOS0_>
   ba4da:	2014      	movs	r0, #20
   ba4dc:	f7f9 fddb 	bl	b4096 <_Znwj>
   ba4e0:	4604      	mov	r4, r0
   ba4e2:	b148      	cbz	r0, ba4f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   ba4e4:	2302      	movs	r3, #2
   ba4e6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba4e8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba4ea:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba4ee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   ba4f0:	4631      	mov	r1, r6
   ba4f2:	300c      	adds	r0, #12
   ba4f4:	f7ff fe7e 	bl	ba1f4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba4f8:	4628      	mov	r0, r5
	: __shared_count(__p)
   ba4fa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba4fc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   ba500:	f7ff ff32 	bl	ba368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba504:	4630      	mov	r0, r6
   ba506:	f7ff fe82 	bl	ba20e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   ba50a:	a805      	add	r0, sp, #20
   ba50c:	f7ff fe7f 	bl	ba20e <_ZN8particle5ErrorD1Ev>
}
   ba510:	4628      	mov	r0, r5
   ba512:	b00b      	add	sp, #44	; 0x2c
   ba514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   ba518:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   ba51a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   ba51c:	2014      	movs	r0, #20
   ba51e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   ba522:	9307      	str	r3, [sp, #28]
   ba524:	f7f9 fdb7 	bl	b4096 <_Znwj>
   ba528:	4601      	mov	r1, r0
   ba52a:	b118      	cbz	r0, ba534 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba530:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba532:	7044      	strb	r4, [r0, #1]
   ba534:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba536:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   ba538:	f7ff ff16 	bl	ba368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   ba53c:	4b1e      	ldr	r3, [pc, #120]	; (ba5b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   ba53e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   ba540:	2008      	movs	r0, #8
   ba542:	f7f9 fda8 	bl	b4096 <_Znwj>
   ba546:	4604      	mov	r4, r0
   ba548:	b110      	cbz	r0, ba550 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   ba54a:	a903      	add	r1, sp, #12
   ba54c:	f7ff fec8 	bl	ba2e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba550:	9600      	str	r6, [sp, #0]
   ba552:	fa5f f38a 	uxtb.w	r3, sl
   ba556:	464a      	mov	r2, r9
   ba558:	4641      	mov	r1, r8
   ba55a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   ba55c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba55e:	f7ff fbc9 	bl	b9cf4 <spark_send_event>
   ba562:	b9b8      	cbnz	r0, ba594 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   ba564:	9b03      	ldr	r3, [sp, #12]
   ba566:	785b      	ldrb	r3, [r3, #1]
   ba568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   ba56c:	b993      	cbnz	r3, ba594 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   ba56e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   ba572:	a905      	add	r1, sp, #20
   ba574:	a803      	add	r0, sp, #12
   ba576:	9205      	str	r2, [sp, #20]
   ba578:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba57c:	f7ff ff18 	bl	ba3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba580:	a805      	add	r0, sp, #20
   ba582:	f7ff fe44 	bl	ba20e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   ba586:	a805      	add	r0, sp, #20
   ba588:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba58a:	f7ff feb2 	bl	ba2f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   ba58e:	a806      	add	r0, sp, #24
   ba590:	f7f9 ff0c 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba594:	a903      	add	r1, sp, #12
   ba596:	a805      	add	r0, sp, #20
   ba598:	f7ff fea2 	bl	ba2e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba59c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba59e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba5a0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   ba5a2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   ba5a4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba5a6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   ba5a8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   ba5aa:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   ba5ac:	f7f9 fefe 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5b0:	a804      	add	r0, sp, #16
   ba5b2:	f7f9 fefb 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   ba5b6:	e7ab      	b.n	ba510 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   ba5b8:	000ba639 	.word	0x000ba639

000ba5bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   ba5bc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba5c0:	4605      	mov	r5, r0
	switch (__op)
   ba5c2:	d103      	bne.n	ba5cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba5c4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba5c6:	6003      	str	r3, [r0, #0]
      }
   ba5c8:	2000      	movs	r0, #0
   ba5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   ba5cc:	2a02      	cmp	r2, #2
   ba5ce:	d010      	beq.n	ba5f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   ba5d0:	2a03      	cmp	r2, #3
   ba5d2:	d1f9      	bne.n	ba5c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba5d4:	6804      	ldr	r4, [r0, #0]
   ba5d6:	2c00      	cmp	r4, #0
   ba5d8:	d0f6      	beq.n	ba5c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   ba5da:	f104 0010 	add.w	r0, r4, #16
   ba5de:	f7ff fe16 	bl	ba20e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba5e2:	4620      	mov	r0, r4
   ba5e4:	f7f9 fdb4 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba5e8:	2118      	movs	r1, #24
   ba5ea:	4620      	mov	r0, r4
   ba5ec:	f7f9 fd57 	bl	b409e <_ZdlPvj>
   ba5f0:	e7ea      	b.n	ba5c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba5f2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   ba5f4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba5f6:	f7f9 fd4e 	bl	b4096 <_Znwj>
   ba5fa:	4604      	mov	r4, r0
   ba5fc:	b150      	cbz	r0, ba614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   ba5fe:	4631      	mov	r1, r6
   ba600:	f7ff fec6 	bl	ba390 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba604:	6930      	ldr	r0, [r6, #16]
   ba606:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba60a:	b108      	cbz	r0, ba610 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   ba60c:	f003 fc04 	bl	bde18 <strdup>
        type_(type) {
   ba610:	6120      	str	r0, [r4, #16]
   ba612:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   ba614:	602c      	str	r4, [r5, #0]
	}
   ba616:	e7d7      	b.n	ba5c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000ba618 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   ba618:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba61a:	2300      	movs	r3, #0
   ba61c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba61e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba620:	4604      	mov	r4, r0
   ba622:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba624:	b12b      	cbz	r3, ba632 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba626:	2202      	movs	r2, #2
   ba628:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba62a:	68eb      	ldr	r3, [r5, #12]
   ba62c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba62e:	68ab      	ldr	r3, [r5, #8]
   ba630:	60a3      	str	r3, [r4, #8]
    }
   ba632:	4620      	mov	r0, r4
   ba634:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba638 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   ba638:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba63a:	b089      	sub	sp, #36	; 0x24
   ba63c:	4604      	mov	r4, r0
   ba63e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   ba640:	a801      	add	r0, sp, #4
   ba642:	4611      	mov	r1, r2
   ba644:	f7ff fe55 	bl	ba2f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   ba648:	b1a4      	cbz	r4, ba674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   ba64a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba64c:	b11d      	cbz	r5, ba656 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   ba64e:	4628      	mov	r0, r5
   ba650:	f003 fbe2 	bl	bde18 <strdup>
   ba654:	4605      	mov	r5, r0
   ba656:	a801      	add	r0, sp, #4
   ba658:	a903      	add	r1, sp, #12
        type_(type) {
   ba65a:	9503      	str	r5, [sp, #12]
   ba65c:	f8ad 4010 	strh.w	r4, [sp, #16]
   ba660:	f7ff fea6 	bl	ba3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba664:	a803      	add	r0, sp, #12
   ba666:	f7ff fdd2 	bl	ba20e <_ZN8particle5ErrorD1Ev>
   ba66a:	a802      	add	r0, sp, #8
   ba66c:	f7f9 fe9e 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba670:	b009      	add	sp, #36	; 0x24
   ba672:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba674:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba676:	2301      	movs	r3, #1
   ba678:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba67c:	2a00      	cmp	r2, #0
   ba67e:	d103      	bne.n	ba688 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba680:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba684:	2900      	cmp	r1, #0
   ba686:	d1f7      	bne.n	ba678 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba688:	d1ef      	bne.n	ba66a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba68a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba68c:	f3bf 8f5b 	dmb	ish
   ba690:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba692:	1d2b      	adds	r3, r5, #4
   ba694:	f3bf 8f5b 	dmb	ish
   ba698:	e853 6f00 	ldrex	r6, [r3]
   ba69c:	e843 4200 	strex	r2, r4, [r3]
   ba6a0:	2a00      	cmp	r2, #0
   ba6a2:	d1f9      	bne.n	ba698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba6a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba6a8:	2e00      	cmp	r6, #0
   ba6aa:	d0de      	beq.n	ba66a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba6ac:	4620      	mov	r0, r4
   ba6ae:	f7ff faa7 	bl	b9c00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba6b2:	4607      	mov	r7, r0
   ba6b4:	b160      	cbz	r0, ba6d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba6b6:	f105 010c 	add.w	r1, r5, #12
   ba6ba:	4630      	mov	r0, r6
   ba6bc:	f7ff fe44 	bl	ba348 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba6c0:	4630      	mov	r0, r6
   ba6c2:	f7f9 fd45 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba6c6:	2110      	movs	r1, #16
   ba6c8:	4630      	mov	r0, r6
   ba6ca:	f7f9 fce8 	bl	b409e <_ZdlPvj>
   ba6ce:	e7cc      	b.n	ba66a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba6d0:	4631      	mov	r1, r6
   ba6d2:	a803      	add	r0, sp, #12
   ba6d4:	f7ff ffa0 	bl	ba618 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba6d8:	7b2b      	ldrb	r3, [r5, #12]
   ba6da:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba6de:	2010      	movs	r0, #16
   ba6e0:	f7f9 fcd9 	bl	b4096 <_Znwj>
   ba6e4:	4605      	mov	r5, r0
   ba6e6:	b1d0      	cbz	r0, ba71e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba6e8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba6ea:	2014      	movs	r0, #20
   ba6ec:	f7f9 fcd3 	bl	b4096 <_Znwj>
   ba6f0:	4604      	mov	r4, r0
   ba6f2:	b178      	cbz	r0, ba714 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba6f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba6f6:	4601      	mov	r1, r0
   ba6f8:	a803      	add	r0, sp, #12
   ba6fa:	f7fb ffba 	bl	b6672 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba700:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba702:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba704:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba706:	9205      	str	r2, [sp, #20]
   ba708:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba70a:	60e3      	str	r3, [r4, #12]
   ba70c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba710:	9206      	str	r2, [sp, #24]
   ba712:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba714:	4b06      	ldr	r3, [pc, #24]	; (ba730 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba716:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba718:	4b06      	ldr	r3, [pc, #24]	; (ba734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba71a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba71c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba71e:	a803      	add	r0, sp, #12
   ba720:	f7f9 fd16 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba724:	2200      	movs	r2, #0
   ba726:	4629      	mov	r1, r5
   ba728:	4803      	ldr	r0, [pc, #12]	; (ba738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba72a:	f7ff fa71 	bl	b9c10 <application_thread_invoke>
   ba72e:	e7c7      	b.n	ba6c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba730:	000ba35b 	.word	0x000ba35b
   ba734:	000ba73d 	.word	0x000ba73d
   ba738:	000b9f1b 	.word	0x000b9f1b

000ba73c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   ba73c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba73e:	b570      	push	{r4, r5, r6, lr}
   ba740:	4604      	mov	r4, r0
	switch (__op)
   ba742:	d103      	bne.n	ba74c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba744:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba746:	6003      	str	r3, [r0, #0]
      }
   ba748:	2000      	movs	r0, #0
   ba74a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   ba74c:	2a02      	cmp	r2, #2
   ba74e:	d00c      	beq.n	ba76a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   ba750:	2a03      	cmp	r2, #3
   ba752:	d1f9      	bne.n	ba748 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba754:	6804      	ldr	r4, [r0, #0]
   ba756:	2c00      	cmp	r4, #0
   ba758:	d0f6      	beq.n	ba748 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   ba75a:	4620      	mov	r0, r4
   ba75c:	f7f9 fcf8 	bl	b4150 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba760:	2114      	movs	r1, #20
   ba762:	4620      	mov	r0, r4
   ba764:	f7f9 fc9b 	bl	b409e <_ZdlPvj>
   ba768:	e7ee      	b.n	ba748 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba76a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   ba76c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba76e:	f7f9 fc92 	bl	b4096 <_Znwj>
   ba772:	4605      	mov	r5, r0
   ba774:	b120      	cbz	r0, ba780 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   ba776:	4631      	mov	r1, r6
   ba778:	f7ff ff4e 	bl	ba618 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba77c:	7c33      	ldrb	r3, [r6, #16]
   ba77e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   ba780:	6025      	str	r5, [r4, #0]
	}
   ba782:	e7e1      	b.n	ba748 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000ba784 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba784:	2200      	movs	r2, #0
   ba786:	6840      	ldr	r0, [r0, #4]
   ba788:	4611      	mov	r1, r2
   ba78a:	f7ff bb1b 	b.w	b9dc4 <network_listening>

000ba78e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba78e:	2200      	movs	r2, #0
   ba790:	6840      	ldr	r0, [r0, #4]
   ba792:	4611      	mov	r1, r2
   ba794:	f7ff bb26 	b.w	b9de4 <network_get_listen_timeout>

000ba798 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba798:	6840      	ldr	r0, [r0, #4]
   ba79a:	2200      	movs	r2, #0
   ba79c:	f7ff bb1a 	b.w	b9dd4 <network_set_listen_timeout>

000ba7a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba7a0:	6840      	ldr	r0, [r0, #4]
   ba7a2:	2200      	movs	r2, #0
   ba7a4:	f081 0101 	eor.w	r1, r1, #1
   ba7a8:	f7ff bb04 	b.w	b9db4 <network_listen>

000ba7ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba7ac:	2300      	movs	r3, #0
   ba7ae:	6840      	ldr	r0, [r0, #4]
   ba7b0:	461a      	mov	r2, r3
   ba7b2:	4619      	mov	r1, r3
   ba7b4:	f7ff baf6 	b.w	b9da4 <network_off>

000ba7b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba7b8:	2300      	movs	r3, #0
   ba7ba:	6840      	ldr	r0, [r0, #4]
   ba7bc:	461a      	mov	r2, r3
   ba7be:	4619      	mov	r1, r3
   ba7c0:	f7ff bae8 	b.w	b9d94 <network_on>

000ba7c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba7c4:	2200      	movs	r2, #0
   ba7c6:	6840      	ldr	r0, [r0, #4]
   ba7c8:	4611      	mov	r1, r2
   ba7ca:	f7ff badb 	b.w	b9d84 <network_ready>

000ba7ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba7ce:	2200      	movs	r2, #0
   ba7d0:	6840      	ldr	r0, [r0, #4]
   ba7d2:	4611      	mov	r1, r2
   ba7d4:	f7ff bac6 	b.w	b9d64 <network_connecting>

000ba7d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba7d8:	6840      	ldr	r0, [r0, #4]
   ba7da:	2200      	movs	r2, #0
   ba7dc:	2102      	movs	r1, #2
   ba7de:	f7ff bac9 	b.w	b9d74 <network_disconnect>

000ba7e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba7e2:	2300      	movs	r3, #0
   ba7e4:	6840      	ldr	r0, [r0, #4]
   ba7e6:	461a      	mov	r2, r3
   ba7e8:	f7ff bab4 	b.w	b9d54 <network_connect>

000ba7ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   ba7ec:	4b02      	ldr	r3, [pc, #8]	; (ba7f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba7ee:	2203      	movs	r2, #3
   ba7f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba7f2:	4a02      	ldr	r2, [pc, #8]	; (ba7fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba7f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba7f6:	4770      	bx	lr
   ba7f8:	2003e630 	.word	0x2003e630
   ba7fc:	000bf500 	.word	0x000bf500

000ba800 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba800:	4770      	bx	lr

000ba802 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba804:	4606      	mov	r6, r0
   ba806:	4615      	mov	r5, r2
   ba808:	460c      	mov	r4, r1
   ba80a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba80c:	42bc      	cmp	r4, r7
   ba80e:	d006      	beq.n	ba81e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba810:	6833      	ldr	r3, [r6, #0]
   ba812:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba816:	689b      	ldr	r3, [r3, #8]
   ba818:	4630      	mov	r0, r6
   ba81a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba81c:	e7f6      	b.n	ba80c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba81e:	4628      	mov	r0, r5
   ba820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba822 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba822:	7c00      	ldrb	r0, [r0, #16]
   ba824:	2200      	movs	r2, #0
   ba826:	f7ff b811 	b.w	b984c <hal_i2c_write>

000ba82a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba82a:	7c00      	ldrb	r0, [r0, #16]
   ba82c:	2100      	movs	r1, #0
   ba82e:	f7ff b815 	b.w	b985c <hal_i2c_available>

000ba832 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba832:	7c00      	ldrb	r0, [r0, #16]
   ba834:	2100      	movs	r1, #0
   ba836:	f7ff b819 	b.w	b986c <hal_i2c_read>

000ba83a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba83a:	7c00      	ldrb	r0, [r0, #16]
   ba83c:	2100      	movs	r1, #0
   ba83e:	f7ff b81d 	b.w	b987c <hal_i2c_peek>

000ba842 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba842:	7c00      	ldrb	r0, [r0, #16]
   ba844:	2100      	movs	r1, #0
   ba846:	f7ff b821 	b.w	b988c <hal_i2c_flush>

000ba84a <_ZN7TwoWireD0Ev>:
   ba84a:	b510      	push	{r4, lr}
   ba84c:	2114      	movs	r1, #20
   ba84e:	4604      	mov	r4, r0
   ba850:	f7f9 fc25 	bl	b409e <_ZdlPvj>
   ba854:	4620      	mov	r0, r4
   ba856:	bd10      	pop	{r4, pc}

000ba858 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba858:	b538      	push	{r3, r4, r5, lr}
   ba85a:	4604      	mov	r4, r0
   ba85c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba85e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba862:	2200      	movs	r2, #0
   ba864:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba868:	4b09      	ldr	r3, [pc, #36]	; (ba890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   ba86a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba86c:	4608      	mov	r0, r1
   ba86e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   ba870:	4629      	mov	r1, r5
   ba872:	f7ff f81b 	bl	b98ac <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   ba876:	30bf      	adds	r0, #191	; 0xbf
   ba878:	d108      	bne.n	ba88c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   ba87a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   ba87c:	07db      	lsls	r3, r3, #31
   ba87e:	d505      	bpl.n	ba88c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   ba880:	6868      	ldr	r0, [r5, #4]
   ba882:	f7ff facf 	bl	b9e24 <free>
    free(conf.tx_buffer);
   ba886:	68e8      	ldr	r0, [r5, #12]
   ba888:	f7ff facc 	bl	b9e24 <free>
}
   ba88c:	4620      	mov	r0, r4
   ba88e:	bd38      	pop	{r3, r4, r5, pc}
   ba890:	000bf53c 	.word	0x000bf53c

000ba894 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ba894:	2300      	movs	r3, #0
   ba896:	7c00      	ldrb	r0, [r0, #16]
   ba898:	461a      	mov	r2, r3
   ba89a:	4619      	mov	r1, r3
   ba89c:	f7fe bfbe 	b.w	b981c <hal_i2c_begin>

000ba8a0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ba8a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ba8a2:	2200      	movs	r2, #0
   ba8a4:	2314      	movs	r3, #20
   ba8a6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   ba8aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   ba8ae:	780b      	ldrb	r3, [r1, #0]
   ba8b0:	f88d 3008 	strb.w	r3, [sp, #8]
   ba8b4:	684b      	ldr	r3, [r1, #4]
   ba8b6:	9303      	str	r3, [sp, #12]
   ba8b8:	68cb      	ldr	r3, [r1, #12]
   ba8ba:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   ba8bc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ba8be:	7a0b      	ldrb	r3, [r1, #8]
   ba8c0:	9305      	str	r3, [sp, #20]
   ba8c2:	a901      	add	r1, sp, #4
   ba8c4:	f7ff f80a 	bl	b98dc <hal_i2c_request_ex>
}
   ba8c8:	b007      	add	sp, #28
   ba8ca:	f85d fb04 	ldr.w	pc, [sp], #4

000ba8ce <_ZN7TwoWire11requestFromEhjh>:
{
   ba8ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   ba8d0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba8d2:	f88d 1000 	strb.w	r1, [sp]
   ba8d6:	f04f 0164 	mov.w	r1, #100	; 0x64
   ba8da:	9103      	str	r1, [sp, #12]
   ba8dc:	bf18      	it	ne
   ba8de:	2301      	movne	r3, #1
   ba8e0:	4669      	mov	r1, sp
    size_ = size;
   ba8e2:	9201      	str	r2, [sp, #4]
   ba8e4:	f88d 3008 	strb.w	r3, [sp, #8]
   ba8e8:	f7ff ffda 	bl	ba8a0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ba8ec:	b005      	add	sp, #20
   ba8ee:	f85d fb04 	ldr.w	pc, [sp], #4

000ba8f2 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ba8f2:	7c00      	ldrb	r0, [r0, #16]
   ba8f4:	2200      	movs	r2, #0
   ba8f6:	f7fe bf99 	b.w	b982c <hal_i2c_begin_transmission>

000ba8fa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   ba8fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ba8fc:	2300      	movs	r3, #0
   ba8fe:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   ba902:	684a      	ldr	r2, [r1, #4]
   ba904:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   ba906:	2314      	movs	r3, #20
    };
   ba908:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   ba90a:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   ba90e:	780b      	ldrb	r3, [r1, #0]
    };
   ba910:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ba912:	7a0a      	ldrb	r2, [r1, #8]
   ba914:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   ba916:	7c00      	ldrb	r0, [r0, #16]
    };
   ba918:	f88d 3008 	strb.w	r3, [sp, #8]
   ba91c:	aa01      	add	r2, sp, #4
   ba91e:	4619      	mov	r1, r3
   ba920:	f7fe ff84 	bl	b982c <hal_i2c_begin_transmission>
}
   ba924:	b007      	add	sp, #28
   ba926:	f85d fb04 	ldr.w	pc, [sp], #4

000ba92a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ba92a:	7c00      	ldrb	r0, [r0, #16]
   ba92c:	2200      	movs	r2, #0
   ba92e:	f7fe bf85 	b.w	b983c <hal_i2c_end_transmission>

000ba932 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   ba932:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   ba934:	2100      	movs	r1, #0
   ba936:	7c00      	ldrb	r0, [r0, #16]
   ba938:	f7fe ffc0 	bl	b98bc <hal_i2c_lock>
}
   ba93c:	fab0 f080 	clz	r0, r0
   ba940:	0940      	lsrs	r0, r0, #5
   ba942:	bd08      	pop	{r3, pc}

000ba944 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   ba944:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   ba946:	2100      	movs	r1, #0
   ba948:	7c00      	ldrb	r0, [r0, #16]
   ba94a:	f7fe ffbf 	bl	b98cc <hal_i2c_unlock>
}
   ba94e:	fab0 f080 	clz	r0, r0
   ba952:	0940      	lsrs	r0, r0, #5
   ba954:	bd08      	pop	{r3, pc}

000ba956 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   ba956:	4700      	bx	r0

000ba958 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   ba958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   ba95c:	2400      	movs	r4, #0
{
   ba95e:	461d      	mov	r5, r3
   ba960:	460f      	mov	r7, r1
   ba962:	4690      	mov	r8, r2
   ba964:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   ba966:	f7fe ff49 	bl	b97fc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   ba96a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   ba96c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   ba970:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   ba974:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   ba978:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   ba97c:	bfa2      	ittt	ge
   ba97e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   ba982:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   ba986:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   ba988:	4907      	ldr	r1, [pc, #28]	; (ba9a8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   ba98a:	9400      	str	r4, [sp, #0]
   ba98c:	4643      	mov	r3, r8
   ba98e:	463a      	mov	r2, r7
   ba990:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   ba992:	bfa8      	it	ge
   ba994:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   ba998:	f7fe ff28 	bl	b97ec <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   ba99c:	fab0 f080 	clz	r0, r0
   ba9a0:	0940      	lsrs	r0, r0, #5
   ba9a2:	b004      	add	sp, #16
   ba9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba9a8:	000ba957 	.word	0x000ba957

000ba9ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba9ac:	4770      	bx	lr

000ba9ae <_ZN9IPAddressD0Ev>:
   ba9ae:	b510      	push	{r4, lr}
   ba9b0:	2118      	movs	r1, #24
   ba9b2:	4604      	mov	r4, r0
   ba9b4:	f7f9 fb73 	bl	b409e <_ZdlPvj>
   ba9b8:	4620      	mov	r0, r4
   ba9ba:	bd10      	pop	{r4, pc}

000ba9bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba9be:	7d03      	ldrb	r3, [r0, #20]
   ba9c0:	2b06      	cmp	r3, #6
{
   ba9c2:	b08d      	sub	sp, #52	; 0x34
   ba9c4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba9c6:	f100 0704 	add.w	r7, r0, #4
   ba9ca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba9ce:	d012      	beq.n	ba9f6 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba9d0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba9d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba9d8:	220a      	movs	r2, #10
   ba9da:	4630      	mov	r0, r6
   ba9dc:	f001 fb09 	bl	bbff2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba9e0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba9e2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba9e4:	d019      	beq.n	baa1a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba9e6:	2c00      	cmp	r4, #0
   ba9e8:	d0f4      	beq.n	ba9d4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba9ea:	212e      	movs	r1, #46	; 0x2e
   ba9ec:	4630      	mov	r0, r6
   ba9ee:	f001 faf1 	bl	bbfd4 <_ZN5Print5printEc>
   ba9f2:	4404      	add	r4, r0
   ba9f4:	e7ee      	b.n	ba9d4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba9f6:	232f      	movs	r3, #47	; 0x2f
   ba9f8:	466a      	mov	r2, sp
   ba9fa:	4639      	mov	r1, r7
   ba9fc:	200a      	movs	r0, #10
		buf[0] = 0;
   ba9fe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   baa02:	f7fe ff73 	bl	b98ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   baa06:	4668      	mov	r0, sp
   baa08:	f003 fa23 	bl	bde52 <strlen>
   baa0c:	6833      	ldr	r3, [r6, #0]
   baa0e:	4602      	mov	r2, r0
   baa10:	68db      	ldr	r3, [r3, #12]
   baa12:	4669      	mov	r1, sp
   baa14:	4630      	mov	r0, r6
   baa16:	4798      	blx	r3
   baa18:	4604      	mov	r4, r0
    }
    return n;
}
   baa1a:	4620      	mov	r0, r4
   baa1c:	b00d      	add	sp, #52	; 0x34
   baa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000baa20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   baa20:	b510      	push	{r4, lr}
   baa22:	4b05      	ldr	r3, [pc, #20]	; (baa38 <_ZN9IPAddressC1Ev+0x18>)
   baa24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   baa26:	2211      	movs	r2, #17
   baa28:	f840 3b04 	str.w	r3, [r0], #4
   baa2c:	2100      	movs	r1, #0
   baa2e:	f003 f993 	bl	bdd58 <memset>
}
   baa32:	4620      	mov	r0, r4
   baa34:	bd10      	pop	{r4, pc}
   baa36:	bf00      	nop
   baa38:	000bf564 	.word	0x000bf564

000baa3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   baa3c:	4603      	mov	r3, r0
   baa3e:	4a07      	ldr	r2, [pc, #28]	; (baa5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   baa40:	b510      	push	{r4, lr}
   baa42:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   baa46:	f101 0210 	add.w	r2, r1, #16
   baa4a:	f851 4b04 	ldr.w	r4, [r1], #4
   baa4e:	f843 4b04 	str.w	r4, [r3], #4
   baa52:	4291      	cmp	r1, r2
   baa54:	d1f9      	bne.n	baa4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   baa56:	780a      	ldrb	r2, [r1, #0]
   baa58:	701a      	strb	r2, [r3, #0]
}
   baa5a:	bd10      	pop	{r4, pc}
   baa5c:	000bf564 	.word	0x000bf564

000baa60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   baa60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   baa62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   baa66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   baa6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   baa6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   baa72:	2304      	movs	r3, #4
   baa74:	6041      	str	r1, [r0, #4]
   baa76:	7503      	strb	r3, [r0, #20]
}
   baa78:	bd10      	pop	{r4, pc}
	...

000baa7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   baa7c:	b507      	push	{r0, r1, r2, lr}
   baa7e:	4b06      	ldr	r3, [pc, #24]	; (baa98 <_ZN9IPAddressC1EPKh+0x1c>)
   baa80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   baa82:	78cb      	ldrb	r3, [r1, #3]
   baa84:	9300      	str	r3, [sp, #0]
   baa86:	788b      	ldrb	r3, [r1, #2]
   baa88:	784a      	ldrb	r2, [r1, #1]
   baa8a:	7809      	ldrb	r1, [r1, #0]
   baa8c:	f7ff ffe8 	bl	baa60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   baa90:	b003      	add	sp, #12
   baa92:	f85d fb04 	ldr.w	pc, [sp], #4
   baa96:	bf00      	nop
   baa98:	000bf564 	.word	0x000bf564

000baa9c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   baa9c:	f100 0310 	add.w	r3, r0, #16
   baaa0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   baaa2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   baaa6:	2901      	cmp	r1, #1
   baaa8:	4618      	mov	r0, r3
   baaaa:	d108      	bne.n	baabe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   baaac:	f853 1c04 	ldr.w	r1, [r3, #-4]
   baab0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   baab4:	3a01      	subs	r2, #1
   baab6:	f103 0310 	add.w	r3, r3, #16
   baaba:	d1f2      	bne.n	baaa2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   baabc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   baabe:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   baac0:	bf04      	itt	eq
   baac2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   baac6:	1852      	addeq	r2, r2, r1
   baac8:	e7f4      	b.n	baab4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000baaca <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   baaca:	b40e      	push	{r1, r2, r3}
   baacc:	b5f0      	push	{r4, r5, r6, r7, lr}
   baace:	b088      	sub	sp, #32
   baad0:	af00      	add	r7, sp, #0
   baad2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   baad6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   baad8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   baadc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   baade:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   baae0:	462b      	mov	r3, r5
   baae2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   baae4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   baae6:	f7ff f9c5 	bl	b9e74 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   baaea:	280f      	cmp	r0, #15
   baaec:	687a      	ldr	r2, [r7, #4]
   baaee:	d91a      	bls.n	bab26 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   baaf0:	f100 0308 	add.w	r3, r0, #8
   baaf4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   baaf8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   baafa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   baafe:	1c41      	adds	r1, r0, #1
   bab00:	462b      	mov	r3, r5
   bab02:	4668      	mov	r0, sp
        va_start(args, fmt);
   bab04:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab06:	f7ff f9b5 	bl	b9e74 <vsnprintf>
        if (n > 0) {
   bab0a:	1e02      	subs	r2, r0, #0
   bab0c:	dd04      	ble.n	bab18 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bab0e:	6823      	ldr	r3, [r4, #0]
   bab10:	4669      	mov	r1, sp
   bab12:	689b      	ldr	r3, [r3, #8]
   bab14:	4620      	mov	r0, r4
   bab16:	4798      	blx	r3
   bab18:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bab1a:	3720      	adds	r7, #32
   bab1c:	46bd      	mov	sp, r7
   bab1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bab22:	b003      	add	sp, #12
   bab24:	4770      	bx	lr
    } else if (n > 0) {
   bab26:	2800      	cmp	r0, #0
   bab28:	d0f7      	beq.n	bab1a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bab2a:	6823      	ldr	r3, [r4, #0]
   bab2c:	4602      	mov	r2, r0
   bab2e:	689b      	ldr	r3, [r3, #8]
   bab30:	f107 0110 	add.w	r1, r7, #16
   bab34:	4620      	mov	r0, r4
   bab36:	4798      	blx	r3
}
   bab38:	e7ef      	b.n	bab1a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bab3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bab3a:	b538      	push	{r3, r4, r5, lr}
   bab3c:	680b      	ldr	r3, [r1, #0]
   bab3e:	6003      	str	r3, [r0, #0]
   bab40:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bab42:	6843      	ldr	r3, [r0, #4]
   bab44:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bab46:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bab48:	d008      	beq.n	bab5c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bab4a:	b115      	cbz	r5, bab52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bab4c:	686b      	ldr	r3, [r5, #4]
   bab4e:	3301      	adds	r3, #1
   bab50:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bab52:	6860      	ldr	r0, [r4, #4]
   bab54:	b108      	cbz	r0, bab5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bab56:	f7ff f9f4 	bl	b9f42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bab5a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bab5c:	bd38      	pop	{r3, r4, r5, pc}

000bab5e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bab5e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bab60:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bab62:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bab66:	689b      	ldr	r3, [r3, #8]
   bab68:	2201      	movs	r2, #1
   bab6a:	f10d 0107 	add.w	r1, sp, #7
   bab6e:	4798      	blx	r3
}
   bab70:	b003      	add	sp, #12
   bab72:	f85d fb04 	ldr.w	pc, [sp], #4

000bab76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bab76:	460b      	mov	r3, r1
   bab78:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bab7a:	2200      	movs	r2, #0
   bab7c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bab7e:	e9c0 2200 	strd	r2, r2, [r0]
   bab82:	4604      	mov	r4, r0
        t_ = t;
   bab84:	6083      	str	r3, [r0, #8]
    if (t) {
   bab86:	b90b      	cbnz	r3, bab8c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bab88:	4620      	mov	r0, r4
   bab8a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bab8c:	f7ff ffd5 	bl	bab3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bab90:	e7fa      	b.n	bab88 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bab92 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bab92:	6883      	ldr	r3, [r0, #8]
   bab94:	b1eb      	cbz	r3, babd2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bab96:	781a      	ldrb	r2, [r3, #0]
   bab98:	2a03      	cmp	r2, #3
   bab9a:	d81a      	bhi.n	babd2 <_ZNK5spark9JSONValue4typeEv+0x40>
   bab9c:	e8df f002 	tbb	[pc, r2]
   baba0:	1b021704 	.word	0x1b021704
   baba4:	2005      	movs	r0, #5
   baba6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   baba8:	6802      	ldr	r2, [r0, #0]
   babaa:	685b      	ldr	r3, [r3, #4]
   babac:	6852      	ldr	r2, [r2, #4]
   babae:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   babb0:	282d      	cmp	r0, #45	; 0x2d
   babb2:	d012      	beq.n	babda <_ZNK5spark9JSONValue4typeEv+0x48>
   babb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   babb8:	2b09      	cmp	r3, #9
   babba:	d90e      	bls.n	babda <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   babbc:	2874      	cmp	r0, #116	; 0x74
   babbe:	d00e      	beq.n	babde <_ZNK5spark9JSONValue4typeEv+0x4c>
   babc0:	2866      	cmp	r0, #102	; 0x66
   babc2:	d00c      	beq.n	babde <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   babc4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   babc8:	4258      	negs	r0, r3
   babca:	4158      	adcs	r0, r3
   babcc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   babce:	2006      	movs	r0, #6
   babd0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   babd2:	2000      	movs	r0, #0
   babd4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   babd6:	2004      	movs	r0, #4
   babd8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   babda:	2003      	movs	r0, #3
   babdc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   babde:	2002      	movs	r0, #2
}
   babe0:	4770      	bx	lr

000babe2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   babe2:	b510      	push	{r4, lr}
   babe4:	4604      	mov	r4, r0
    switch (type()) {
   babe6:	f7ff ffd4 	bl	bab92 <_ZNK5spark9JSONValue4typeEv>
   babea:	2802      	cmp	r0, #2
   babec:	d00e      	beq.n	bac0c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   babee:	1ec3      	subs	r3, r0, #3
   babf0:	b2db      	uxtb	r3, r3
   babf2:	2b01      	cmp	r3, #1
   babf4:	d814      	bhi.n	bac20 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   babf6:	6822      	ldr	r2, [r4, #0]
   babf8:	68a3      	ldr	r3, [r4, #8]
   babfa:	6850      	ldr	r0, [r2, #4]
   babfc:	685b      	ldr	r3, [r3, #4]
}
   babfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bac02:	220a      	movs	r2, #10
   bac04:	2100      	movs	r1, #0
   bac06:	4418      	add	r0, r3
   bac08:	f003 ba14 	b.w	be034 <strtol>
        const char* const s = d_->json + t_->start;
   bac0c:	6822      	ldr	r2, [r4, #0]
   bac0e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bac10:	6852      	ldr	r2, [r2, #4]
   bac12:	685b      	ldr	r3, [r3, #4]
   bac14:	5cd0      	ldrb	r0, [r2, r3]
   bac16:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bac1a:	4258      	negs	r0, r3
   bac1c:	4158      	adcs	r0, r3
}
   bac1e:	bd10      	pop	{r4, pc}
    switch (type()) {
   bac20:	2000      	movs	r0, #0
   bac22:	e7fc      	b.n	bac1e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bac24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bac24:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bac26:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bac28:	e9c0 3300 	strd	r3, r3, [r0]
   bac2c:	4604      	mov	r4, r0
        n_(0) {
   bac2e:	480e      	ldr	r0, [pc, #56]	; (bac68 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bac30:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bac34:	b1a9      	cbz	r1, bac62 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bac36:	780b      	ldrb	r3, [r1, #0]
   bac38:	2b03      	cmp	r3, #3
   bac3a:	d006      	beq.n	bac4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bac3c:	b98b      	cbnz	r3, bac62 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bac3e:	6813      	ldr	r3, [r2, #0]
   bac40:	6858      	ldr	r0, [r3, #4]
   bac42:	684b      	ldr	r3, [r1, #4]
   bac44:	5cc3      	ldrb	r3, [r0, r3]
   bac46:	2b6e      	cmp	r3, #110	; 0x6e
   bac48:	d007      	beq.n	bac5a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bac4a:	6813      	ldr	r3, [r2, #0]
   bac4c:	684d      	ldr	r5, [r1, #4]
   bac4e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bac50:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bac52:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bac54:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bac56:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bac58:	60e3      	str	r3, [r4, #12]
   bac5a:	4611      	mov	r1, r2
   bac5c:	4620      	mov	r0, r4
   bac5e:	f7ff ff6c 	bl	bab3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bac62:	4620      	mov	r0, r4
   bac64:	bd38      	pop	{r3, r4, r5, pc}
   bac66:	bf00      	nop
   bac68:	000bf5cd 	.word	0x000bf5cd

000bac6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bac6c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bac6e:	2500      	movs	r5, #0
   bac70:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bac72:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bac76:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bac7a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bac7e:	4604      	mov	r4, r0
   bac80:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bac82:	b14b      	cbz	r3, bac98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bac84:	781a      	ldrb	r2, [r3, #0]
   bac86:	2a01      	cmp	r2, #1
   bac88:	d106      	bne.n	bac98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bac8a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bac8e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bac90:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bac92:	6143      	str	r3, [r0, #20]
   bac94:	f7ff ff51 	bl	bab3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bac98:	4620      	mov	r0, r4
   bac9a:	bd38      	pop	{r3, r4, r5, pc}

000bac9c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bac9c:	b510      	push	{r4, lr}
    if (!n_) {
   bac9e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   baca0:	4604      	mov	r4, r0
    if (!n_) {
   baca2:	b163      	cbz	r3, bacbe <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   baca4:	6880      	ldr	r0, [r0, #8]
   baca6:	60e0      	str	r0, [r4, #12]
    --n_;
   baca8:	3b01      	subs	r3, #1
    ++t_;
   bacaa:	3010      	adds	r0, #16
   bacac:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bacae:	6120      	str	r0, [r4, #16]
    --n_;
   bacb0:	6163      	str	r3, [r4, #20]
    if (n_) {
   bacb2:	b113      	cbz	r3, bacba <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bacb4:	f7ff fef2 	bl	baa9c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bacb8:	60a0      	str	r0, [r4, #8]
    return true;
   bacba:	2001      	movs	r0, #1
   bacbc:	e000      	b.n	bacc0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bacbe:	4618      	mov	r0, r3
}
   bacc0:	bd10      	pop	{r4, pc}

000bacc2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bacc2:	b510      	push	{r4, lr}
    write('}');
   bacc4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bacc6:	4604      	mov	r4, r0
    write('}');
   bacc8:	f7ff ff49 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   baccc:	2301      	movs	r3, #1
   bacce:	7123      	strb	r3, [r4, #4]
}
   bacd0:	4620      	mov	r0, r4
   bacd2:	bd10      	pop	{r4, pc}

000bacd4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bacd4:	b508      	push	{r3, lr}
    switch (state_) {
   bacd6:	7903      	ldrb	r3, [r0, #4]
   bacd8:	2b01      	cmp	r3, #1
   bacda:	d002      	beq.n	bace2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bacdc:	2b02      	cmp	r3, #2
   bacde:	d004      	beq.n	bacea <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bace0:	bd08      	pop	{r3, pc}
        write(',');
   bace2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bace4:	f7ff ff3b 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
}
   bace8:	e7fa      	b.n	bace0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bacea:	213a      	movs	r1, #58	; 0x3a
   bacec:	e7fa      	b.n	bace4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bacee <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bacee:	b510      	push	{r4, lr}
   bacf0:	4604      	mov	r4, r0
    writeSeparator();
   bacf2:	f7ff ffef 	bl	bacd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bacf6:	4620      	mov	r0, r4
   bacf8:	217b      	movs	r1, #123	; 0x7b
   bacfa:	f7ff ff30 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bacfe:	2300      	movs	r3, #0
   bad00:	7123      	strb	r3, [r4, #4]
}
   bad02:	4620      	mov	r0, r4
   bad04:	bd10      	pop	{r4, pc}
	...

000bad08 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bad08:	b513      	push	{r0, r1, r4, lr}
   bad0a:	4604      	mov	r4, r0
   bad0c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bad0e:	f7ff ffe1 	bl	bacd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bad12:	6823      	ldr	r3, [r4, #0]
   bad14:	9a01      	ldr	r2, [sp, #4]
   bad16:	68db      	ldr	r3, [r3, #12]
   bad18:	4903      	ldr	r1, [pc, #12]	; (bad28 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bad1a:	4620      	mov	r0, r4
   bad1c:	4798      	blx	r3
    state_ = NEXT;
   bad1e:	2301      	movs	r3, #1
}
   bad20:	4620      	mov	r0, r4
    state_ = NEXT;
   bad22:	7123      	strb	r3, [r4, #4]
}
   bad24:	b002      	add	sp, #8
   bad26:	bd10      	pop	{r4, pc}
   bad28:	000bf2ff 	.word	0x000bf2ff

000bad2c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bad2c:	b513      	push	{r0, r1, r4, lr}
   bad2e:	4604      	mov	r4, r0
   bad30:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bad32:	f7ff ffcf 	bl	bacd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bad36:	6823      	ldr	r3, [r4, #0]
   bad38:	9a01      	ldr	r2, [sp, #4]
   bad3a:	68db      	ldr	r3, [r3, #12]
   bad3c:	4903      	ldr	r1, [pc, #12]	; (bad4c <_ZN5spark10JSONWriter5valueEj+0x20>)
   bad3e:	4620      	mov	r0, r4
   bad40:	4798      	blx	r3
    state_ = NEXT;
   bad42:	2301      	movs	r3, #1
}
   bad44:	4620      	mov	r0, r4
    state_ = NEXT;
   bad46:	7123      	strb	r3, [r4, #4]
}
   bad48:	b002      	add	sp, #8
   bad4a:	bd10      	pop	{r4, pc}
   bad4c:	000bee96 	.word	0x000bee96

000bad50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bad54:	460d      	mov	r5, r1
    write('"');
   bad56:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bad58:	4690      	mov	r8, r2
   bad5a:	4604      	mov	r4, r0
    write('"');
   bad5c:	f7ff feff 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bad60:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bae08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bad64:	44a8      	add	r8, r5
    const char *s = str;
   bad66:	462f      	mov	r7, r5
    while (s != end) {
   bad68:	4547      	cmp	r7, r8
   bad6a:	46ba      	mov	sl, r7
   bad6c:	d03d      	beq.n	badea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bad6e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bad72:	2e22      	cmp	r6, #34	; 0x22
   bad74:	d006      	beq.n	bad84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bad76:	2e5c      	cmp	r6, #92	; 0x5c
   bad78:	d004      	beq.n	bad84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bad7a:	4630      	mov	r0, r6
   bad7c:	f002 ffbc 	bl	bdcf8 <isprint>
   bad80:	2800      	cmp	r0, #0
   bad82:	d1f1      	bne.n	bad68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bad84:	6823      	ldr	r3, [r4, #0]
   bad86:	ebaa 0205 	sub.w	r2, sl, r5
   bad8a:	689b      	ldr	r3, [r3, #8]
   bad8c:	4629      	mov	r1, r5
   bad8e:	4620      	mov	r0, r4
   bad90:	4798      	blx	r3
            write('\\');
   bad92:	215c      	movs	r1, #92	; 0x5c
   bad94:	4620      	mov	r0, r4
   bad96:	f7ff fee2 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bad9a:	2e0d      	cmp	r6, #13
   bad9c:	d80a      	bhi.n	badb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bad9e:	2e07      	cmp	r6, #7
   bada0:	d91c      	bls.n	baddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bada2:	f1a6 0308 	sub.w	r3, r6, #8
   bada6:	2b05      	cmp	r3, #5
   bada8:	d818      	bhi.n	baddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   badaa:	e8df f003 	tbb	[pc, r3]
   badae:	0f0d      	.short	0x0f0d
   badb0:	15131711 	.word	0x15131711
   badb4:	2e22      	cmp	r6, #34	; 0x22
   badb6:	d001      	beq.n	badbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   badb8:	2e5c      	cmp	r6, #92	; 0x5c
   badba:	d10f      	bne.n	baddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   badbc:	4631      	mov	r1, r6
                write('b');
   badbe:	4620      	mov	r0, r4
   badc0:	f7ff fecd 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   badc4:	463d      	mov	r5, r7
    while (s != end) {
   badc6:	e7cf      	b.n	bad68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   badc8:	2162      	movs	r1, #98	; 0x62
   badca:	e7f8      	b.n	badbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   badcc:	2174      	movs	r1, #116	; 0x74
   badce:	e7f6      	b.n	badbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   badd0:	216e      	movs	r1, #110	; 0x6e
   badd2:	e7f4      	b.n	badbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   badd4:	2166      	movs	r1, #102	; 0x66
   badd6:	e7f2      	b.n	badbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   badd8:	2172      	movs	r1, #114	; 0x72
   badda:	e7f0      	b.n	badbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   baddc:	6823      	ldr	r3, [r4, #0]
   badde:	4632      	mov	r2, r6
   bade0:	68db      	ldr	r3, [r3, #12]
   bade2:	4649      	mov	r1, r9
   bade4:	4620      	mov	r0, r4
   bade6:	4798      	blx	r3
                break;
   bade8:	e7ec      	b.n	badc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   badea:	42bd      	cmp	r5, r7
   badec:	d005      	beq.n	badfa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   badee:	6823      	ldr	r3, [r4, #0]
   badf0:	1b7a      	subs	r2, r7, r5
   badf2:	689b      	ldr	r3, [r3, #8]
   badf4:	4629      	mov	r1, r5
   badf6:	4620      	mov	r0, r4
   badf8:	4798      	blx	r3
    }
    write('"');
   badfa:	2122      	movs	r1, #34	; 0x22
   badfc:	4620      	mov	r0, r4
   badfe:	f7ff feae 	bl	bab5e <_ZN5spark10JSONWriter5writeEc>
}
   bae02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bae06:	bf00      	nop
   bae08:	000bf570 	.word	0x000bf570

000bae0c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bae0c:	b513      	push	{r0, r1, r4, lr}
   bae0e:	4604      	mov	r4, r0
   bae10:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bae14:	f7ff ff5e 	bl	bacd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bae18:	4620      	mov	r0, r4
   bae1a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bae1e:	f7ff ff97 	bl	bad50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bae22:	2302      	movs	r3, #2
}
   bae24:	4620      	mov	r0, r4
    state_ = VALUE;
   bae26:	7123      	strb	r3, [r4, #4]
}
   bae28:	b002      	add	sp, #8
   bae2a:	bd10      	pop	{r4, pc}

000bae2c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bae2c:	b513      	push	{r0, r1, r4, lr}
   bae2e:	4604      	mov	r4, r0
   bae30:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bae34:	f7ff ff4e 	bl	bacd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bae38:	4620      	mov	r0, r4
   bae3a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bae3e:	f7ff ff87 	bl	bad50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bae42:	2301      	movs	r3, #1
}
   bae44:	4620      	mov	r0, r4
    state_ = NEXT;
   bae46:	7123      	strb	r3, [r4, #4]
}
   bae48:	b002      	add	sp, #8
   bae4a:	bd10      	pop	{r4, pc}

000bae4c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bae4c:	6880      	ldr	r0, [r0, #8]
   bae4e:	6803      	ldr	r3, [r0, #0]
   bae50:	68db      	ldr	r3, [r3, #12]
   bae52:	4718      	bx	r3

000bae54 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bae54:	4770      	bx	lr

000bae56 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bae56:	4608      	mov	r0, r1
   bae58:	b111      	cbz	r1, bae60 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bae5a:	680b      	ldr	r3, [r1, #0]
   bae5c:	685b      	ldr	r3, [r3, #4]
   bae5e:	4718      	bx	r3
}
   bae60:	4770      	bx	lr

000bae62 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bae62:	4770      	bx	lr

000bae64 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bae64:	4770      	bx	lr

000bae66 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bae66:	4770      	bx	lr

000bae68 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bae68:	4770      	bx	lr

000bae6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bae6a:	b538      	push	{r3, r4, r5, lr}
   bae6c:	4604      	mov	r4, r0
   bae6e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bae70:	6800      	ldr	r0, [r0, #0]
   bae72:	212e      	movs	r1, #46	; 0x2e
   bae74:	f002 ffb3 	bl	bddde <strchrnul>
    size = s - category;
   bae78:	6823      	ldr	r3, [r4, #0]
   bae7a:	1ac3      	subs	r3, r0, r3
   bae7c:	602b      	str	r3, [r5, #0]
    if (size) {
   bae7e:	b123      	cbz	r3, bae8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bae80:	7803      	ldrb	r3, [r0, #0]
   bae82:	b103      	cbz	r3, bae86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bae84:	3001      	adds	r0, #1
   bae86:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bae88:	6020      	str	r0, [r4, #0]
}
   bae8a:	4618      	mov	r0, r3
   bae8c:	bd38      	pop	{r3, r4, r5, pc}

000bae8e <_ZN5spark16JSONStreamWriterD0Ev>:
   bae8e:	b510      	push	{r4, lr}
   bae90:	210c      	movs	r1, #12
   bae92:	4604      	mov	r4, r0
   bae94:	f7f9 f903 	bl	b409e <_ZdlPvj>
   bae98:	4620      	mov	r0, r4
   bae9a:	bd10      	pop	{r4, pc}

000bae9c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bae9c:	b510      	push	{r4, lr}
   bae9e:	2104      	movs	r1, #4
   baea0:	4604      	mov	r4, r0
   baea2:	f7f9 f8fc 	bl	b409e <_ZdlPvj>
   baea6:	4620      	mov	r0, r4
   baea8:	bd10      	pop	{r4, pc}

000baeaa <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   baeaa:	b510      	push	{r4, lr}
   baeac:	2104      	movs	r1, #4
   baeae:	4604      	mov	r4, r0
   baeb0:	f7f9 f8f5 	bl	b409e <_ZdlPvj>
   baeb4:	4620      	mov	r0, r4
   baeb6:	bd10      	pop	{r4, pc}

000baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   baeb8:	f7fe bc08 	b.w	b96cc <os_mutex_recursive_lock>

000baebc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   baebc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   baebe:	f002 ff98 	bl	bddf2 <strcmp>
}
   baec2:	fab0 f080 	clz	r0, r0
   baec6:	0940      	lsrs	r0, r0, #5
   baec8:	bd08      	pop	{r3, pc}

000baeca <__tcf_1>:
   baeca:	4770      	bx	lr

000baecc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   baecc:	b510      	push	{r4, lr}
   baece:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   baed0:	f001 fe82 	bl	bcbd8 <_Z16_fetch_usbserialv>
   baed4:	4284      	cmp	r4, r0
   baed6:	d010      	beq.n	baefa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   baed8:	f002 f884 	bl	bcfe4 <_Z22__fetch_global_Serial1v>
   baedc:	4284      	cmp	r4, r0
   baede:	d105      	bne.n	baeec <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   baee0:	f002 f880 	bl	bcfe4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   baee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   baee8:	f001 be11 	b.w	bcb0e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   baeec:	b12c      	cbz	r4, baefa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   baeee:	6823      	ldr	r3, [r4, #0]
   baef0:	4620      	mov	r0, r4
   baef2:	685b      	ldr	r3, [r3, #4]
}
   baef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baef8:	4718      	bx	r3
   baefa:	bd10      	pop	{r4, pc}

000baefc <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   baefc:	b513      	push	{r0, r1, r4, lr}
   baefe:	4604      	mov	r4, r0
    return value(val, strlen(val));
   baf00:	4608      	mov	r0, r1
   baf02:	9101      	str	r1, [sp, #4]
   baf04:	f002 ffa5 	bl	bde52 <strlen>
   baf08:	9901      	ldr	r1, [sp, #4]
   baf0a:	4602      	mov	r2, r0
   baf0c:	4620      	mov	r0, r4
}
   baf0e:	b002      	add	sp, #8
   baf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   baf14:	f7ff bf8a 	b.w	bae2c <_ZN5spark10JSONWriter5valueEPKcj>

000baf18 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   baf18:	b513      	push	{r0, r1, r4, lr}
   baf1a:	4604      	mov	r4, r0
    write(str, strlen(str));
   baf1c:	4608      	mov	r0, r1
   baf1e:	9101      	str	r1, [sp, #4]
   baf20:	f002 ff97 	bl	bde52 <strlen>
   baf24:	6823      	ldr	r3, [r4, #0]
   baf26:	9901      	ldr	r1, [sp, #4]
   baf28:	68db      	ldr	r3, [r3, #12]
   baf2a:	4602      	mov	r2, r0
   baf2c:	4620      	mov	r0, r4
}
   baf2e:	b002      	add	sp, #8
   baf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   baf34:	4718      	bx	r3

000baf36 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   baf36:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   baf38:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   baf3a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   baf3e:	68db      	ldr	r3, [r3, #12]
   baf40:	2201      	movs	r2, #1
   baf42:	f10d 0107 	add.w	r1, sp, #7
   baf46:	4798      	blx	r3
}
   baf48:	b003      	add	sp, #12
   baf4a:	f85d fb04 	ldr.w	pc, [sp], #4

000baf4e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   baf4e:	b40e      	push	{r1, r2, r3}
   baf50:	b503      	push	{r0, r1, lr}
   baf52:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   baf54:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   baf56:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   baf5a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   baf5c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   baf5e:	f001 f93e 	bl	bc1de <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   baf62:	b002      	add	sp, #8
   baf64:	f85d eb04 	ldr.w	lr, [sp], #4
   baf68:	b003      	add	sp, #12
   baf6a:	4770      	bx	lr

000baf6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   baf6c:	680a      	ldr	r2, [r1, #0]
   baf6e:	6002      	str	r2, [r0, #0]
   baf70:	684a      	ldr	r2, [r1, #4]
   baf72:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   baf74:	2200      	movs	r2, #0
   baf76:	e9c0 2202 	strd	r2, r2, [r0, #8]
   baf7a:	b510      	push	{r4, lr}
   baf7c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   baf7e:	688c      	ldr	r4, [r1, #8]
   baf80:	6084      	str	r4, [r0, #8]
   baf82:	68cc      	ldr	r4, [r1, #12]
   baf84:	60c4      	str	r4, [r0, #12]
   baf86:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   baf88:	608a      	str	r2, [r1, #8]
   baf8a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   baf8c:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   baf8e:	610a      	str	r2, [r1, #16]
   baf90:	bd10      	pop	{r4, pc}
	...

000baf94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   baf94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   baf98:	e9d0 8400 	ldrd	r8, r4, [r0]
   baf9c:	f04f 0a14 	mov.w	sl, #20
   bafa0:	9300      	str	r3, [sp, #0]
   bafa2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bafa6:	4b18      	ldr	r3, [pc, #96]	; (bb008 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bafa8:	10a4      	asrs	r4, r4, #2
   bafaa:	4617      	mov	r7, r2
   bafac:	435c      	muls	r4, r3
   bafae:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bafb0:	2c00      	cmp	r4, #0
   bafb2:	dd21      	ble.n	baff8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bafb4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bafb6:	fb0a f006 	mul.w	r0, sl, r6
   bafba:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bafbe:	463a      	mov	r2, r7
   bafc0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bafc4:	5828      	ldr	r0, [r5, r0]
   bafc6:	9101      	str	r1, [sp, #4]
   bafc8:	455f      	cmp	r7, fp
   bafca:	bf28      	it	cs
   bafcc:	465a      	movcs	r2, fp
   bafce:	f002 ff48 	bl	bde62 <strncmp>
                if (cmp == 0) {
   bafd2:	2800      	cmp	r0, #0
   bafd4:	9901      	ldr	r1, [sp, #4]
   bafd6:	f04f 0301 	mov.w	r3, #1
   bafda:	d10b      	bne.n	baff4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bafdc:	455f      	cmp	r7, fp
   bafde:	d103      	bne.n	bafe8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bafe0:	9a00      	ldr	r2, [sp, #0]
   bafe2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bafe4:	4634      	mov	r4, r6
   bafe6:	e7e3      	b.n	bafb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bafe8:	d9fc      	bls.n	bafe4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bafea:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bafec:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   baff0:	3e01      	subs	r6, #1
   baff2:	e7f7      	b.n	bafe4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   baff4:	dbf9      	blt.n	bafea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   baff6:	e7f5      	b.n	bafe4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   baff8:	eba5 0508 	sub.w	r5, r5, r8
}
   baffc:	4802      	ldr	r0, [pc, #8]	; (bb008 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   baffe:	10ad      	asrs	r5, r5, #2
   bb000:	4368      	muls	r0, r5
   bb002:	b003      	add	sp, #12
   bb004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb008:	cccccccd 	.word	0xcccccccd

000bb00c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bb00c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bb00e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bb010:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bb012:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bb014:	b303      	cbz	r3, bb058 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bb016:	b1f9      	cbz	r1, bb058 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bb018:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bb01a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bb01e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bb020:	a903      	add	r1, sp, #12
   bb022:	a801      	add	r0, sp, #4
   bb024:	f7ff ff21 	bl	bae6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bb028:	4601      	mov	r1, r0
   bb02a:	b1a8      	cbz	r0, bb058 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bb02c:	f10d 030b 	add.w	r3, sp, #11
   bb030:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bb032:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bb036:	4620      	mov	r0, r4
   bb038:	f7ff ffac 	bl	baf94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bb03c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bb040:	b153      	cbz	r3, bb058 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bb042:	6823      	ldr	r3, [r4, #0]
   bb044:	2414      	movs	r4, #20
   bb046:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bb04a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bb04c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bb050:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bb052:	bfa8      	it	ge
   bb054:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bb056:	e7e3      	b.n	bb020 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bb058:	4628      	mov	r0, r5
   bb05a:	b004      	add	sp, #16
   bb05c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb060 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bb060:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bb062:	4c09      	ldr	r4, [pc, #36]	; (bb088 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bb064:	7823      	ldrb	r3, [r4, #0]
   bb066:	f3bf 8f5b 	dmb	ish
   bb06a:	07db      	lsls	r3, r3, #31
   bb06c:	d409      	bmi.n	bb082 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bb06e:	4620      	mov	r0, r4
   bb070:	f7f9 f824 	bl	b40bc <__cxa_guard_acquire>
   bb074:	b128      	cbz	r0, bb082 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bb076:	4620      	mov	r0, r4
   bb078:	f7f9 f825 	bl	b40c6 <__cxa_guard_release>
   bb07c:	4803      	ldr	r0, [pc, #12]	; (bb08c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bb07e:	f002 fe13 	bl	bdca8 <atexit>
}
   bb082:	4803      	ldr	r0, [pc, #12]	; (bb090 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bb084:	bd10      	pop	{r4, pc}
   bb086:	bf00      	nop
   bb088:	2003e63c 	.word	0x2003e63c
   bb08c:	000bae63 	.word	0x000bae63
   bb090:	2003e3d8 	.word	0x2003e3d8

000bb094 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bb094:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bb096:	4c09      	ldr	r4, [pc, #36]	; (bb0bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bb098:	7823      	ldrb	r3, [r4, #0]
   bb09a:	f3bf 8f5b 	dmb	ish
   bb09e:	07db      	lsls	r3, r3, #31
   bb0a0:	d409      	bmi.n	bb0b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bb0a2:	4620      	mov	r0, r4
   bb0a4:	f7f9 f80a 	bl	b40bc <__cxa_guard_acquire>
   bb0a8:	b128      	cbz	r0, bb0b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bb0aa:	4620      	mov	r0, r4
   bb0ac:	f7f9 f80b 	bl	b40c6 <__cxa_guard_release>
   bb0b0:	4803      	ldr	r0, [pc, #12]	; (bb0c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bb0b2:	f002 fdf9 	bl	bdca8 <atexit>
    return &factory;
}
   bb0b6:	4803      	ldr	r0, [pc, #12]	; (bb0c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bb0b8:	bd10      	pop	{r4, pc}
   bb0ba:	bf00      	nop
   bb0bc:	2003e640 	.word	0x2003e640
   bb0c0:	000baecb 	.word	0x000baecb
   bb0c4:	2003e3dc 	.word	0x2003e3dc

000bb0c8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bb0c8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bb0ca:	2500      	movs	r5, #0
   bb0cc:	4604      	mov	r4, r0
   bb0ce:	e9c0 5500 	strd	r5, r5, [r0]
   bb0d2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bb0d6:	6085      	str	r5, [r0, #8]
   bb0d8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bb0da:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bb0de:	f7fe fae5 	bl	b96ac <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bb0e2:	f7ff ffbd 	bl	bb060 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bb0e6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bb0e8:	f7ff ffd4 	bl	bb094 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bb0ec:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bb0ee:	6220      	str	r0, [r4, #32]
}
   bb0f0:	4620      	mov	r0, r4
   bb0f2:	bd38      	pop	{r3, r4, r5, pc}

000bb0f4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bb0f4:	b510      	push	{r4, lr}
    static LogManager mgr;
   bb0f6:	4c0a      	ldr	r4, [pc, #40]	; (bb120 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bb0f8:	7823      	ldrb	r3, [r4, #0]
   bb0fa:	f3bf 8f5b 	dmb	ish
   bb0fe:	07db      	lsls	r3, r3, #31
   bb100:	d40c      	bmi.n	bb11c <_ZN5spark10LogManager8instanceEv+0x28>
   bb102:	4620      	mov	r0, r4
   bb104:	f7f8 ffda 	bl	b40bc <__cxa_guard_acquire>
   bb108:	b140      	cbz	r0, bb11c <_ZN5spark10LogManager8instanceEv+0x28>
   bb10a:	4806      	ldr	r0, [pc, #24]	; (bb124 <_ZN5spark10LogManager8instanceEv+0x30>)
   bb10c:	f7ff ffdc 	bl	bb0c8 <_ZN5spark10LogManagerC1Ev>
   bb110:	4620      	mov	r0, r4
   bb112:	f7f8 ffd8 	bl	b40c6 <__cxa_guard_release>
   bb116:	4804      	ldr	r0, [pc, #16]	; (bb128 <_ZN5spark10LogManager8instanceEv+0x34>)
   bb118:	f002 fdc6 	bl	bdca8 <atexit>
    return &mgr;
}
   bb11c:	4801      	ldr	r0, [pc, #4]	; (bb124 <_ZN5spark10LogManager8instanceEv+0x30>)
   bb11e:	bd10      	pop	{r4, pc}
   bb120:	2003e638 	.word	0x2003e638
   bb124:	2003e648 	.word	0x2003e648
   bb128:	000bb5e1 	.word	0x000bb5e1

000bb12c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bb12c:	4a02      	ldr	r2, [pc, #8]	; (bb138 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bb12e:	4903      	ldr	r1, [pc, #12]	; (bb13c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bb130:	4803      	ldr	r0, [pc, #12]	; (bb140 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bb132:	2300      	movs	r3, #0
   bb134:	f7fe bd2a 	b.w	b9b8c <log_set_callbacks>
   bb138:	000bb3c5 	.word	0x000bb3c5
   bb13c:	000bb351 	.word	0x000bb351
   bb140:	000bb2d1 	.word	0x000bb2d1

000bb144 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bb144:	2300      	movs	r3, #0
   bb146:	461a      	mov	r2, r3
   bb148:	4619      	mov	r1, r3
   bb14a:	4618      	mov	r0, r3
   bb14c:	f7fe bd1e 	b.w	b9b8c <log_set_callbacks>

000bb150 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bb150:	b570      	push	{r4, r5, r6, lr}
   bb152:	b08a      	sub	sp, #40	; 0x28
   bb154:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bb156:	4601      	mov	r1, r0
   bb158:	a804      	add	r0, sp, #16
   bb15a:	f7fc face 	bl	b76fa <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bb15e:	4e14      	ldr	r6, [pc, #80]	; (bb1b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bb160:	a804      	add	r0, sp, #16
   bb162:	f7ff fd9b 	bl	bac9c <_ZN5spark18JSONObjectIterator4nextEv>
   bb166:	b1e8      	cbz	r0, bb1a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bb168:	a904      	add	r1, sp, #16
   bb16a:	4668      	mov	r0, sp
   bb16c:	f7fc fad6 	bl	b771c <_ZNK5spark18JSONObjectIterator4nameEv>
   bb170:	9802      	ldr	r0, [sp, #8]
   bb172:	4631      	mov	r1, r6
   bb174:	f7ff fea2 	bl	baebc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bb178:	4604      	mov	r4, r0
   bb17a:	b110      	cbz	r0, bb182 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bb17c:	1e2c      	subs	r4, r5, #0
   bb17e:	bf18      	it	ne
   bb180:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bb182:	a801      	add	r0, sp, #4
   bb184:	f7f9 f912 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb188:	2c00      	cmp	r4, #0
   bb18a:	d0e9      	beq.n	bb160 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bb18c:	a904      	add	r1, sp, #16
   bb18e:	4668      	mov	r0, sp
   bb190:	f7fc fad5 	bl	b773e <_ZNK5spark18JSONObjectIterator5valueEv>
   bb194:	4668      	mov	r0, sp
   bb196:	f7ff fd24 	bl	babe2 <_ZNK5spark9JSONValue5toIntEv>
   bb19a:	6028      	str	r0, [r5, #0]
   bb19c:	a801      	add	r0, sp, #4
   bb19e:	f7f9 f905 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb1a2:	e7dd      	b.n	bb160 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bb1a4:	a805      	add	r0, sp, #20
   bb1a6:	f7f9 f901 	bl	b43ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb1aa:	b00a      	add	sp, #40	; 0x28
   bb1ac:	bd70      	pop	{r4, r5, r6, pc}
   bb1ae:	bf00      	nop
   bb1b0:	000bf576 	.word	0x000bf576

000bb1b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bb1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb1b6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bb1b8:	4620      	mov	r0, r4
   bb1ba:	4913      	ldr	r1, [pc, #76]	; (bb208 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bb1bc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bb1be:	f002 fe18 	bl	bddf2 <strcmp>
   bb1c2:	b950      	cbnz	r0, bb1da <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bb1c4:	f001 fd08 	bl	bcbd8 <_Z16_fetch_usbserialv>
   bb1c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bb1cc:	f001 fcf4 	bl	bcbb8 <_ZN9USBSerial5beginEl>
}
   bb1d0:	b003      	add	sp, #12
   bb1d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bb1d6:	f001 bcff 	b.w	bcbd8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bb1da:	490c      	ldr	r1, [pc, #48]	; (bb20c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bb1dc:	4620      	mov	r0, r4
   bb1de:	f002 fe08 	bl	bddf2 <strcmp>
   bb1e2:	b978      	cbnz	r0, bb204 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bb1e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bb1e8:	a901      	add	r1, sp, #4
   bb1ea:	4628      	mov	r0, r5
        int baud = 9600;
   bb1ec:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bb1ee:	f7ff ffaf 	bl	bb150 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bb1f2:	f001 fef7 	bl	bcfe4 <_Z22__fetch_global_Serial1v>
   bb1f6:	9901      	ldr	r1, [sp, #4]
   bb1f8:	f001 fc86 	bl	bcb08 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bb1fc:	f001 fef2 	bl	bcfe4 <_Z22__fetch_global_Serial1v>
}
   bb200:	b003      	add	sp, #12
   bb202:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bb204:	2000      	movs	r0, #0
   bb206:	e7fb      	b.n	bb200 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bb208:	000bf57b 	.word	0x000bf57b
   bb20c:	000bf582 	.word	0x000bf582

000bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb210:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb212:	e9d0 5300 	ldrd	r5, r3, [r0]
   bb216:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb218:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb21a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bb21e:	42ae      	cmp	r6, r5
   bb220:	d005      	beq.n	bb22e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bb222:	f105 0008 	add.w	r0, r5, #8
   bb226:	f7ff fff3 	bl	bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bb22a:	3514      	adds	r5, #20
   bb22c:	e7f7      	b.n	bb21e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bb22e:	6820      	ldr	r0, [r4, #0]
   bb230:	f7fe fdf8 	bl	b9e24 <free>
}
   bb234:	4620      	mov	r0, r4
   bb236:	bd70      	pop	{r4, r5, r6, pc}

000bb238 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bb238:	b510      	push	{r4, lr}
   bb23a:	4604      	mov	r4, r0
   bb23c:	300c      	adds	r0, #12
   bb23e:	f7ff ffe7 	bl	bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bb242:	4620      	mov	r0, r4
   bb244:	f7fe fe91 	bl	b9f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bb248:	4620      	mov	r0, r4
   bb24a:	bd10      	pop	{r4, pc}

000bb24c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bb24c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bb24e:	4b04      	ldr	r3, [pc, #16]	; (bb260 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bb250:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bb252:	f840 3b04 	str.w	r3, [r0], #4
   bb256:	f7ff ffef 	bl	bb238 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bb25a:	4620      	mov	r0, r4
   bb25c:	bd10      	pop	{r4, pc}
   bb25e:	bf00      	nop
   bb260:	000beb5c 	.word	0x000beb5c

000bb264 <_ZN5spark16StreamLogHandlerD0Ev>:
   bb264:	b510      	push	{r4, lr}
   bb266:	4604      	mov	r4, r0
   bb268:	f7ff fff0 	bl	bb24c <_ZN5spark16StreamLogHandlerD1Ev>
   bb26c:	4620      	mov	r0, r4
   bb26e:	2124      	movs	r1, #36	; 0x24
   bb270:	f7f8 ff15 	bl	b409e <_ZdlPvj>
   bb274:	4620      	mov	r0, r4
   bb276:	bd10      	pop	{r4, pc}

000bb278 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bb278:	b510      	push	{r4, lr}
   bb27a:	4b03      	ldr	r3, [pc, #12]	; (bb288 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bb27c:	6003      	str	r3, [r0, #0]
   bb27e:	4604      	mov	r4, r0
   bb280:	f7ff ffe4 	bl	bb24c <_ZN5spark16StreamLogHandlerD1Ev>
   bb284:	4620      	mov	r0, r4
   bb286:	bd10      	pop	{r4, pc}
   bb288:	000bf618 	.word	0x000bf618

000bb28c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bb28c:	b510      	push	{r4, lr}
   bb28e:	4604      	mov	r4, r0
   bb290:	f7ff fff2 	bl	bb278 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bb294:	4620      	mov	r0, r4
   bb296:	2124      	movs	r1, #36	; 0x24
   bb298:	f7f8 ff01 	bl	b409e <_ZdlPvj>
   bb29c:	4620      	mov	r0, r4
   bb29e:	bd10      	pop	{r4, pc}

000bb2a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bb2a0:	2200      	movs	r2, #0
   bb2a2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bb2a6:	b510      	push	{r4, lr}
        capacity_(0) {
   bb2a8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb2aa:	680c      	ldr	r4, [r1, #0]
   bb2ac:	6004      	str	r4, [r0, #0]
   bb2ae:	684c      	ldr	r4, [r1, #4]
   bb2b0:	6044      	str	r4, [r0, #4]
   bb2b2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb2b4:	600a      	str	r2, [r1, #0]
   bb2b6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb2b8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb2ba:	608a      	str	r2, [r1, #8]
}
   bb2bc:	bd10      	pop	{r4, pc}

000bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bb2be:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bb2c0:	6803      	ldr	r3, [r0, #0]
   bb2c2:	4604      	mov	r4, r0
   bb2c4:	6818      	ldr	r0, [r3, #0]
   bb2c6:	f7fe fa09 	bl	b96dc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bb2ca:	4620      	mov	r0, r4
   bb2cc:	bd10      	pop	{r4, pc}
	...

000bb2d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bb2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb2d4:	b087      	sub	sp, #28
   bb2d6:	4680      	mov	r8, r0
   bb2d8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bb2da:	4b1c      	ldr	r3, [pc, #112]	; (bb34c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bb2dc:	685b      	ldr	r3, [r3, #4]
   bb2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bb2e2:	4689      	mov	r9, r1
   bb2e4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bb2e6:	b96b      	cbnz	r3, bb304 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bb2e8:	f7ff ff04 	bl	bb0f4 <_ZN5spark10LogManager8instanceEv>
   bb2ec:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bb2ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bb2f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb2f4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bb2f6:	f7ff fddf 	bl	baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bb2fa:	7b23      	ldrb	r3, [r4, #12]
   bb2fc:	b12b      	cbz	r3, bb30a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bb2fe:	a805      	add	r0, sp, #20
   bb300:	f7ff ffdd 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bb304:	b007      	add	sp, #28
   bb306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bb30a:	2301      	movs	r3, #1
   bb30c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bb30e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bb312:	fa5f f989 	uxtb.w	r9, r9
   bb316:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bb31a:	45aa      	cmp	sl, r5
   bb31c:	d012      	beq.n	bb344 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bb31e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bb322:	4631      	mov	r1, r6
   bb324:	1d38      	adds	r0, r7, #4
   bb326:	f7ff fe71 	bl	bb00c <_ZNK5spark6detail9LogFilter5levelEPKc>
   bb32a:	4581      	cmp	r9, r0
   bb32c:	d3f5      	bcc.n	bb31a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bb32e:	683b      	ldr	r3, [r7, #0]
   bb330:	9a03      	ldr	r2, [sp, #12]
   bb332:	9200      	str	r2, [sp, #0]
   bb334:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bb338:	464a      	mov	r2, r9
   bb33a:	4633      	mov	r3, r6
   bb33c:	4641      	mov	r1, r8
   bb33e:	4638      	mov	r0, r7
   bb340:	47d8      	blx	fp
   bb342:	e7ea      	b.n	bb31a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bb344:	2300      	movs	r3, #0
   bb346:	7323      	strb	r3, [r4, #12]
   bb348:	e7d9      	b.n	bb2fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bb34a:	bf00      	nop
   bb34c:	e000ed00 	.word	0xe000ed00

000bb350 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bb350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb354:	469b      	mov	fp, r3
   bb356:	4b1a      	ldr	r3, [pc, #104]	; (bb3c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bb358:	685b      	ldr	r3, [r3, #4]
   bb35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bb35e:	4680      	mov	r8, r0
   bb360:	4689      	mov	r9, r1
   bb362:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bb364:	b96b      	cbnz	r3, bb382 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bb366:	f7ff fec5 	bl	bb0f4 <_ZN5spark10LogManager8instanceEv>
   bb36a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bb36c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bb370:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb372:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bb374:	f7ff fda0 	bl	baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bb378:	7b23      	ldrb	r3, [r4, #12]
   bb37a:	b12b      	cbz	r3, bb388 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bb37c:	a801      	add	r0, sp, #4
   bb37e:	f7ff ff9e 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bb382:	b003      	add	sp, #12
   bb384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bb388:	2301      	movs	r3, #1
   bb38a:	7323      	strb	r3, [r4, #12]
   bb38c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bb390:	b2f6      	uxtb	r6, r6
   bb392:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bb396:	4555      	cmp	r5, sl
   bb398:	d00e      	beq.n	bb3b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bb39a:	f855 7b04 	ldr.w	r7, [r5], #4
   bb39e:	4659      	mov	r1, fp
   bb3a0:	1d38      	adds	r0, r7, #4
   bb3a2:	f7ff fe33 	bl	bb00c <_ZNK5spark6detail9LogFilter5levelEPKc>
   bb3a6:	4286      	cmp	r6, r0
   bb3a8:	d3f5      	bcc.n	bb396 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bb3aa:	683b      	ldr	r3, [r7, #0]
   bb3ac:	464a      	mov	r2, r9
   bb3ae:	68db      	ldr	r3, [r3, #12]
   bb3b0:	4641      	mov	r1, r8
   bb3b2:	4638      	mov	r0, r7
   bb3b4:	4798      	blx	r3
   bb3b6:	e7ee      	b.n	bb396 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bb3b8:	2300      	movs	r3, #0
   bb3ba:	7323      	strb	r3, [r4, #12]
   bb3bc:	e7de      	b.n	bb37c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bb3be:	bf00      	nop
   bb3c0:	e000ed00 	.word	0xe000ed00

000bb3c4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bb3c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bb3c8:	4b16      	ldr	r3, [pc, #88]	; (bb424 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bb3ca:	685b      	ldr	r3, [r3, #4]
   bb3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bb3d0:	4605      	mov	r5, r0
   bb3d2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bb3d4:	bb1b      	cbnz	r3, bb41e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bb3d6:	f7ff fe8d 	bl	bb0f4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bb3da:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bb3de:	4604      	mov	r4, r0
   bb3e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb3e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bb3e4:	f7ff fd68 	bl	baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>
   bb3e8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bb3ec:	2446      	movs	r4, #70	; 0x46
   bb3ee:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bb3f2:	45b0      	cmp	r8, r6
   bb3f4:	d109      	bne.n	bb40a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bb3f6:	a801      	add	r0, sp, #4
   bb3f8:	f7ff ff61 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bb3fc:	42a5      	cmp	r5, r4
   bb3fe:	bfb4      	ite	lt
   bb400:	2000      	movlt	r0, #0
   bb402:	2001      	movge	r0, #1
}
   bb404:	b002      	add	sp, #8
   bb406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bb40a:	f856 0b04 	ldr.w	r0, [r6], #4
   bb40e:	4639      	mov	r1, r7
   bb410:	3004      	adds	r0, #4
   bb412:	f7ff fdfb 	bl	bb00c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bb416:	4284      	cmp	r4, r0
   bb418:	bfa8      	it	ge
   bb41a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bb41c:	e7e9      	b.n	bb3f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bb41e:	2000      	movs	r0, #0
   bb420:	e7f0      	b.n	bb404 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bb422:	bf00      	nop
   bb424:	e000ed00 	.word	0xe000ed00

000bb428 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb42a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bb42e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb430:	4604      	mov	r4, r0
   bb432:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb434:	db0d      	blt.n	bb452 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bb436:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bb438:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb43a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb43c:	dd04      	ble.n	bb448 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bb43e:	00b9      	lsls	r1, r7, #2
   bb440:	f7fe fcf8 	bl	b9e34 <realloc>
            if (!d) {
   bb444:	b918      	cbnz	r0, bb44e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bb446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bb448:	f7fe fcec 	bl	b9e24 <free>
        T* d = nullptr;
   bb44c:	2000      	movs	r0, #0
        data_ = d;
   bb44e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb450:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bb452:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb454:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb456:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bb45a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb45c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bb460:	1d08      	adds	r0, r1, #4
   bb462:	f002 fc5f 	bl	bdd24 <memmove>
    new(p) T(std::move(value));
   bb466:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bb46a:	6863      	ldr	r3, [r4, #4]
   bb46c:	3301      	adds	r3, #1
   bb46e:	6063      	str	r3, [r4, #4]
    return true;
   bb470:	2001      	movs	r0, #1
   bb472:	e7e8      	b.n	bb446 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bb474 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bb474:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bb476:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bb47a:	4604      	mov	r4, r0
   bb47c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb47e:	9301      	str	r3, [sp, #4]
   bb480:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bb482:	f7ff fd19 	bl	baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bb486:	e9d4 3200 	ldrd	r3, r2, [r4]
   bb48a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bb48e:	4293      	cmp	r3, r2
   bb490:	4619      	mov	r1, r3
   bb492:	d00b      	beq.n	bb4ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bb494:	6809      	ldr	r1, [r1, #0]
   bb496:	42a9      	cmp	r1, r5
   bb498:	f103 0304 	add.w	r3, r3, #4
   bb49c:	d1f7      	bne.n	bb48e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bb49e:	a801      	add	r0, sp, #4
   bb4a0:	f7ff ff0d 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bb4a4:	2500      	movs	r5, #0
}
   bb4a6:	4628      	mov	r0, r5
   bb4a8:	b003      	add	sp, #12
   bb4aa:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bb4ac:	4629      	mov	r1, r5
   bb4ae:	4620      	mov	r0, r4
   bb4b0:	f7ff ffba 	bl	bb428 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bb4b4:	4605      	mov	r5, r0
   bb4b6:	2800      	cmp	r0, #0
   bb4b8:	d0f1      	beq.n	bb49e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bb4ba:	6863      	ldr	r3, [r4, #4]
   bb4bc:	2b01      	cmp	r3, #1
   bb4be:	d101      	bne.n	bb4c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bb4c0:	f7ff fe34 	bl	bb12c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bb4c4:	a801      	add	r0, sp, #4
   bb4c6:	f7ff fefa 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bb4ca:	e7ec      	b.n	bb4a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bb4cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb4cc:	b570      	push	{r4, r5, r6, lr}
   bb4ce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bb4d0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb4d4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bb4d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bb4da:	4282      	cmp	r2, r0
   bb4dc:	d00f      	beq.n	bb4fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bb4de:	4601      	mov	r1, r0
            if (*p == value) {
   bb4e0:	681d      	ldr	r5, [r3, #0]
   bb4e2:	f851 6b04 	ldr.w	r6, [r1], #4
   bb4e6:	42ae      	cmp	r6, r5
   bb4e8:	d107      	bne.n	bb4fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb4ea:	1a52      	subs	r2, r2, r1
   bb4ec:	f002 fc1a 	bl	bdd24 <memmove>
    --size_;
   bb4f0:	6863      	ldr	r3, [r4, #4]
   bb4f2:	3b01      	subs	r3, #1
   bb4f4:	6063      	str	r3, [r4, #4]
    return true;
   bb4f6:	2001      	movs	r0, #1
}
   bb4f8:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bb4fa:	4608      	mov	r0, r1
   bb4fc:	e7ed      	b.n	bb4da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bb4fe:	2000      	movs	r0, #0
   bb500:	e7fa      	b.n	bb4f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bb502 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bb502:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bb504:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bb508:	4604      	mov	r4, r0
   bb50a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bb50c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb50e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bb510:	f7ff fcd2 	bl	baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bb514:	a901      	add	r1, sp, #4
   bb516:	4620      	mov	r0, r4
   bb518:	f7ff ffd8 	bl	bb4cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bb51c:	b118      	cbz	r0, bb526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bb51e:	6863      	ldr	r3, [r4, #4]
   bb520:	b90b      	cbnz	r3, bb526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bb522:	f7ff fe0f 	bl	bb144 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bb526:	a803      	add	r0, sp, #12
   bb528:	f7ff fec9 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bb52c:	b004      	add	sp, #16
   bb52e:	bd10      	pop	{r4, pc}

000bb530 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bb530:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bb532:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bb536:	2318      	movs	r3, #24
   bb538:	4604      	mov	r4, r0
   bb53a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bb53e:	42ae      	cmp	r6, r5
   bb540:	d015      	beq.n	bb56e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bb542:	f105 0110 	add.w	r1, r5, #16
   bb546:	4620      	mov	r0, r4
   bb548:	f7ff ffc0 	bl	bb4cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bb54c:	6863      	ldr	r3, [r4, #4]
   bb54e:	b90b      	cbnz	r3, bb554 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bb550:	f7ff fdf8 	bl	bb144 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bb554:	69e0      	ldr	r0, [r4, #28]
   bb556:	6929      	ldr	r1, [r5, #16]
   bb558:	6803      	ldr	r3, [r0, #0]
   bb55a:	68db      	ldr	r3, [r3, #12]
   bb55c:	4798      	blx	r3
        if (h.stream) {
   bb55e:	6969      	ldr	r1, [r5, #20]
   bb560:	b119      	cbz	r1, bb56a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bb562:	6a20      	ldr	r0, [r4, #32]
   bb564:	6803      	ldr	r3, [r0, #0]
   bb566:	68db      	ldr	r3, [r3, #12]
   bb568:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bb56a:	3518      	adds	r5, #24
   bb56c:	e7e7      	b.n	bb53e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bb56e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bb572:	2618      	movs	r6, #24
   bb574:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bb578:	42ae      	cmp	r6, r5
   bb57a:	d004      	beq.n	bb586 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bb57c:	4628      	mov	r0, r5
   bb57e:	f000 fe6f 	bl	bc260 <_ZN6StringD1Ev>
   bb582:	3518      	adds	r5, #24
   bb584:	e7f8      	b.n	bb578 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bb586:	2300      	movs	r3, #0
   bb588:	6163      	str	r3, [r4, #20]
}
   bb58a:	bd70      	pop	{r4, r5, r6, pc}

000bb58c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bb58c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb58e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bb590:	f7ff fdd8 	bl	bb144 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bb594:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bb598:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb59a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bb59c:	f7ff fc8c 	bl	baeb8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bb5a0:	4620      	mov	r0, r4
   bb5a2:	f7ff ffc5 	bl	bb530 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bb5a6:	a801      	add	r0, sp, #4
   bb5a8:	f7ff fe89 	bl	bb2be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bb5ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bb5ae:	b108      	cbz	r0, bb5b4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bb5b0:	f7fe f884 	bl	b96bc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bb5b4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bb5b8:	2618      	movs	r6, #24
   bb5ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bb5be:	42ae      	cmp	r6, r5
   bb5c0:	d004      	beq.n	bb5cc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bb5c2:	4628      	mov	r0, r5
   bb5c4:	f000 fe4c 	bl	bc260 <_ZN6StringD1Ev>
   bb5c8:	3518      	adds	r5, #24
   bb5ca:	e7f8      	b.n	bb5be <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bb5cc:	6920      	ldr	r0, [r4, #16]
   bb5ce:	f7fe fc29 	bl	b9e24 <free>
   bb5d2:	6820      	ldr	r0, [r4, #0]
   bb5d4:	f7fe fc26 	bl	b9e24 <free>
}
   bb5d8:	4620      	mov	r0, r4
   bb5da:	b002      	add	sp, #8
   bb5dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb5e0 <__tcf_2>:
    static LogManager mgr;
   bb5e0:	4801      	ldr	r0, [pc, #4]	; (bb5e8 <__tcf_2+0x8>)
   bb5e2:	f7ff bfd3 	b.w	bb58c <_ZN5spark10LogManagerD1Ev>
   bb5e6:	bf00      	nop
   bb5e8:	2003e648 	.word	0x2003e648

000bb5ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bb5ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb5f0:	4604      	mov	r4, r0
   bb5f2:	460d      	mov	r5, r1
   bb5f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb5f6:	d915      	bls.n	bb624 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bb5f8:	4290      	cmp	r0, r2
   bb5fa:	d214      	bcs.n	bb626 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bb5fc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bb600:	1a75      	subs	r5, r6, r1
   bb602:	f1a1 0714 	sub.w	r7, r1, #20
   bb606:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb608:	42b7      	cmp	r7, r6
   bb60a:	d01a      	beq.n	bb642 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bb60c:	b11c      	cbz	r4, bb616 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bb60e:	4631      	mov	r1, r6
   bb610:	4620      	mov	r0, r4
   bb612:	f7ff fcab 	bl	baf6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bb616:	f106 0008 	add.w	r0, r6, #8
   bb61a:	f7ff fdf9 	bl	bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bb61e:	3e14      	subs	r6, #20
   bb620:	3c14      	subs	r4, #20
   bb622:	e7f1      	b.n	bb608 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bb624:	d00d      	beq.n	bb642 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bb626:	42b5      	cmp	r5, r6
   bb628:	d00b      	beq.n	bb642 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bb62a:	b11c      	cbz	r4, bb634 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bb62c:	4629      	mov	r1, r5
   bb62e:	4620      	mov	r0, r4
   bb630:	f7ff fc9c 	bl	baf6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bb634:	f105 0008 	add.w	r0, r5, #8
   bb638:	f7ff fdea 	bl	bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bb63c:	3514      	adds	r5, #20
   bb63e:	3414      	adds	r4, #20
   bb640:	e7f1      	b.n	bb626 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bb642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb644 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bb644:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb648:	4604      	mov	r4, r0
   bb64a:	460d      	mov	r5, r1
   bb64c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb64e:	d914      	bls.n	bb67a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bb650:	4290      	cmp	r0, r2
   bb652:	d213      	bcs.n	bb67c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bb654:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bb658:	1a75      	subs	r5, r6, r1
   bb65a:	f1a1 0710 	sub.w	r7, r1, #16
   bb65e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb660:	42b7      	cmp	r7, r6
   bb662:	d018      	beq.n	bb696 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bb664:	b11c      	cbz	r4, bb66e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bb666:	4631      	mov	r1, r6
   bb668:	4620      	mov	r0, r4
   bb66a:	f000 fe75 	bl	bc358 <_ZN6StringC1EOS_>
                end->~T();
   bb66e:	4630      	mov	r0, r6
   bb670:	f000 fdf6 	bl	bc260 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bb674:	3e10      	subs	r6, #16
   bb676:	3c10      	subs	r4, #16
   bb678:	e7f2      	b.n	bb660 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bb67a:	d00c      	beq.n	bb696 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bb67c:	42b5      	cmp	r5, r6
   bb67e:	d00a      	beq.n	bb696 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bb680:	b11c      	cbz	r4, bb68a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bb682:	4629      	mov	r1, r5
   bb684:	4620      	mov	r0, r4
   bb686:	f000 fe67 	bl	bc358 <_ZN6StringC1EOS_>
                p->~T();
   bb68a:	4628      	mov	r0, r5
   bb68c:	f000 fde8 	bl	bc260 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bb690:	3510      	adds	r5, #16
   bb692:	3410      	adds	r4, #16
   bb694:	e7f2      	b.n	bb67c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bb696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb698 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bb698:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb69a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb69c:	4605      	mov	r5, r0
        if (n > 0) {
   bb69e:	dd11      	ble.n	bb6c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb6a0:	0130      	lsls	r0, r6, #4
   bb6a2:	f7fe fbb7 	bl	b9e14 <malloc>
            if (!d) {
   bb6a6:	4604      	mov	r4, r0
   bb6a8:	b158      	cbz	r0, bb6c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb6aa:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb6ae:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bb6b2:	f7ff ffc7 	bl	bb644 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bb6b6:	6828      	ldr	r0, [r5, #0]
   bb6b8:	f7fe fbb4 	bl	b9e24 <free>
        data_ = d;
   bb6bc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb6be:	60ae      	str	r6, [r5, #8]
        return true;
   bb6c0:	2001      	movs	r0, #1
    }
   bb6c2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb6c4:	2400      	movs	r4, #0
   bb6c6:	e7f6      	b.n	bb6b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bb6c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bb6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6cc:	4690      	mov	r8, r2
   bb6ce:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bb6d0:	2300      	movs	r3, #0
   bb6d2:	9103      	str	r1, [sp, #12]
    return size_;
   bb6d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bb6d8:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bb6da:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bb6dc:	4299      	cmp	r1, r3
        capacity_(0) {
   bb6de:	e9c0 3300 	strd	r3, r3, [r0]
   bb6e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bb6e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bb6ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bb6ee:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bb6f0:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bb6f2:	dc23      	bgt.n	bb73c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bb6f4:	e9d8 5700 	ldrd	r5, r7, [r8]
   bb6f8:	2314      	movs	r3, #20
   bb6fa:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bb6fe:	42af      	cmp	r7, r5
   bb700:	d03b      	beq.n	bb77a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bb702:	4629      	mov	r1, r5
   bb704:	a80b      	add	r0, sp, #44	; 0x2c
   bb706:	f000 fe27 	bl	bc358 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bb70a:	a90b      	add	r1, sp, #44	; 0x2c
   bb70c:	a80f      	add	r0, sp, #60	; 0x3c
   bb70e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bb710:	f000 fe22 	bl	bc358 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb714:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bb718:	4299      	cmp	r1, r3
   bb71a:	da1b      	bge.n	bb754 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bb71c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bb71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bb720:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bb724:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bb728:	4631      	mov	r1, r6
   bb72a:	f106 0010 	add.w	r0, r6, #16
   bb72e:	f7ff ff89 	bl	bb644 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bb732:	b9ee      	cbnz	r6, bb770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bb734:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb736:	3301      	adds	r3, #1
   bb738:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bb73a:	e011      	b.n	bb760 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bb73c:	a808      	add	r0, sp, #32
   bb73e:	f7ff ffab 	bl	bb698 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bb742:	2800      	cmp	r0, #0
   bb744:	d1d6      	bne.n	bb6f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bb746:	a808      	add	r0, sp, #32
   bb748:	f7fe fc0f 	bl	b9f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bb74c:	4620      	mov	r0, r4
   bb74e:	b015      	add	sp, #84	; 0x54
   bb750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb754:	3101      	adds	r1, #1
   bb756:	a808      	add	r0, sp, #32
   bb758:	f7ff ff9e 	bl	bb698 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bb75c:	2800      	cmp	r0, #0
   bb75e:	d1dd      	bne.n	bb71c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bb760:	a80f      	add	r0, sp, #60	; 0x3c
   bb762:	f000 fd7d 	bl	bc260 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bb766:	a80b      	add	r0, sp, #44	; 0x2c
   bb768:	f000 fd7a 	bl	bc260 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bb76c:	3514      	adds	r5, #20
   bb76e:	e7c6      	b.n	bb6fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bb770:	a90f      	add	r1, sp, #60	; 0x3c
   bb772:	4630      	mov	r0, r6
   bb774:	f000 fdf0 	bl	bc358 <_ZN6StringC1EOS_>
   bb778:	e7dc      	b.n	bb734 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bb77a:	2600      	movs	r6, #0
   bb77c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bb780:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bb782:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bb786:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bb78a:	429e      	cmp	r6, r3
   bb78c:	da7c      	bge.n	bb888 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bb78e:	0133      	lsls	r3, r6, #4
   bb790:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bb792:	9306      	str	r3, [sp, #24]
        if (!category) {
   bb794:	b90b      	cbnz	r3, bb79a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bb796:	3601      	adds	r6, #1
   bb798:	e7f5      	b.n	bb786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bb79a:	2300      	movs	r3, #0
   bb79c:	9307      	str	r3, [sp, #28]
   bb79e:	fb09 f306 	mul.w	r3, r9, r6
   bb7a2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bb7a4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bb7a6:	a907      	add	r1, sp, #28
   bb7a8:	a806      	add	r0, sp, #24
   bb7aa:	f7ff fb5e 	bl	bae6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bb7ae:	4682      	mov	sl, r0
   bb7b0:	2800      	cmp	r0, #0
   bb7b2:	d0f0      	beq.n	bb796 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bb7b4:	f04f 0300 	mov.w	r3, #0
   bb7b8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bb7bc:	4601      	mov	r1, r0
   bb7be:	9a07      	ldr	r2, [sp, #28]
   bb7c0:	f10d 0317 	add.w	r3, sp, #23
   bb7c4:	4628      	mov	r0, r5
   bb7c6:	f7ff fbe5 	bl	baf94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bb7ca:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bb7ce:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bb7d0:	2f00      	cmp	r7, #0
   bb7d2:	d14a      	bne.n	bb86a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bb7d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bb7d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bb7dc:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bb7e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb7e4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bb7e8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bb7ec:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb7ee:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bb7f2:	4293      	cmp	r3, r2
   bb7f4:	db17      	blt.n	bb826 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bb7f6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bb7fa:	f1ba 0f00 	cmp.w	sl, #0
   bb7fe:	dd30      	ble.n	bb862 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bb800:	fb09 f00a 	mul.w	r0, r9, sl
   bb804:	f7fe fb06 	bl	b9e14 <malloc>
            if (!d) {
   bb808:	4683      	mov	fp, r0
   bb80a:	b360      	cbz	r0, bb866 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bb80c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb810:	fb09 1202 	mla	r2, r9, r2, r1
   bb814:	f7ff feea 	bl	bb5ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bb818:	6828      	ldr	r0, [r5, #0]
   bb81a:	f7fe fb03 	bl	b9e24 <free>
        data_ = d;
   bb81e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bb822:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bb826:	682b      	ldr	r3, [r5, #0]
   bb828:	9a01      	ldr	r2, [sp, #4]
   bb82a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bb82e:	686a      	ldr	r2, [r5, #4]
   bb830:	4651      	mov	r1, sl
   bb832:	fb09 3202 	mla	r2, r9, r2, r3
   bb836:	f10a 0014 	add.w	r0, sl, #20
   bb83a:	f7ff fed7 	bl	bb5ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bb83e:	f1ba 0f00 	cmp.w	sl, #0
   bb842:	d003      	beq.n	bb84c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bb844:	a90f      	add	r1, sp, #60	; 0x3c
   bb846:	4650      	mov	r0, sl
   bb848:	f7ff fb90 	bl	baf6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bb84c:	686b      	ldr	r3, [r5, #4]
   bb84e:	3301      	adds	r3, #1
   bb850:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bb852:	a811      	add	r0, sp, #68	; 0x44
   bb854:	f7ff fcdc 	bl	bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bb858:	b13f      	cbz	r7, bb86a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bb85a:	a80b      	add	r0, sp, #44	; 0x2c
   bb85c:	f7ff fcd8 	bl	bb210 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bb860:	e771      	b.n	bb746 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bb862:	46bb      	mov	fp, r7
   bb864:	e7d8      	b.n	bb818 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bb866:	2701      	movs	r7, #1
   bb868:	e7f3      	b.n	bb852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bb86a:	9b01      	ldr	r3, [sp, #4]
   bb86c:	682d      	ldr	r5, [r5, #0]
   bb86e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bb872:	9b06      	ldr	r3, [sp, #24]
   bb874:	781b      	ldrb	r3, [r3, #0]
   bb876:	b92b      	cbnz	r3, bb884 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bb878:	f8d8 3000 	ldr.w	r3, [r8]
   bb87c:	9a02      	ldr	r2, [sp, #8]
   bb87e:	4413      	add	r3, r2
   bb880:	7c1b      	ldrb	r3, [r3, #16]
   bb882:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bb884:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bb886:	e78e      	b.n	bb7a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb888:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bb88a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb88c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb88e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb890:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb892:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bb894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bb896:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb898:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb89a:	60a2      	str	r2, [r4, #8]
   bb89c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bb89e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb8a0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bb8a2:	60e2      	str	r2, [r4, #12]
   bb8a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bb8a6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb8a8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb8aa:	6122      	str	r2, [r4, #16]
   bb8ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bb8ae:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bb8b0:	9b03      	ldr	r3, [sp, #12]
   bb8b2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bb8b4:	6162      	str	r2, [r4, #20]
   bb8b6:	7623      	strb	r3, [r4, #24]
   bb8b8:	e7cf      	b.n	bb85a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bb8bc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bb8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb8be:	4604      	mov	r4, r0
   bb8c0:	b087      	sub	sp, #28
   bb8c2:	460d      	mov	r5, r1
        filter_(level, filters) {
   bb8c4:	4626      	mov	r6, r4
        stream_(&stream) {
   bb8c6:	4619      	mov	r1, r3
   bb8c8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bb8ca:	4617      	mov	r7, r2
        stream_(&stream) {
   bb8cc:	f7fa fa3f 	bl	b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bb8d0:	4b0b      	ldr	r3, [pc, #44]	; (bb900 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bb8d2:	f846 3b04 	str.w	r3, [r6], #4
   bb8d6:	4669      	mov	r1, sp
   bb8d8:	a803      	add	r0, sp, #12
   bb8da:	f7fa fa38 	bl	b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bb8de:	aa03      	add	r2, sp, #12
   bb8e0:	4639      	mov	r1, r7
   bb8e2:	4630      	mov	r0, r6
   bb8e4:	f7ff fef0 	bl	bb6c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bb8e8:	a803      	add	r0, sp, #12
   bb8ea:	f7fa f9ef 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bb8ee:	4668      	mov	r0, sp
   bb8f0:	f7fa f9ec 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bb8f4:	4b03      	ldr	r3, [pc, #12]	; (bb904 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bb8f6:	6023      	str	r3, [r4, #0]
}
   bb8f8:	4620      	mov	r0, r4
        stream_(&stream) {
   bb8fa:	6225      	str	r5, [r4, #32]
}
   bb8fc:	b007      	add	sp, #28
   bb8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb900:	000beb5c 	.word	0x000beb5c
   bb904:	000bf600 	.word	0x000bf600

000bb908 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bb908:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb90a:	460f      	mov	r7, r1
   bb90c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bb90e:	491d      	ldr	r1, [pc, #116]	; (bb984 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bb910:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bb912:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bb914:	4616      	mov	r6, r2
   bb916:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bb918:	f002 fa6b 	bl	bddf2 <strcmp>
   bb91c:	b9c0      	cbnz	r0, bb950 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bb91e:	b1a4      	cbz	r4, bb94a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bb920:	4629      	mov	r1, r5
   bb922:	a801      	add	r0, sp, #4
   bb924:	f7ff fcbc 	bl	bb2a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bb928:	4917      	ldr	r1, [pc, #92]	; (bb988 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bb92a:	2024      	movs	r0, #36	; 0x24
   bb92c:	f001 fb7e 	bl	bd02c <_ZnwjRKSt9nothrow_t>
   bb930:	4605      	mov	r5, r0
   bb932:	b130      	cbz	r0, bb942 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bb934:	ab01      	add	r3, sp, #4
   bb936:	4632      	mov	r2, r6
   bb938:	4621      	mov	r1, r4
   bb93a:	f7ff ffbf 	bl	bb8bc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bb93e:	4b13      	ldr	r3, [pc, #76]	; (bb98c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bb940:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bb942:	a801      	add	r0, sp, #4
   bb944:	f7fa f9c2 	bl	b5ccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bb948:	462c      	mov	r4, r5
}
   bb94a:	4620      	mov	r0, r4
   bb94c:	b005      	add	sp, #20
   bb94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bb950:	490f      	ldr	r1, [pc, #60]	; (bb990 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bb952:	4638      	mov	r0, r7
   bb954:	f002 fa4d 	bl	bddf2 <strcmp>
   bb958:	b990      	cbnz	r0, bb980 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bb95a:	2c00      	cmp	r4, #0
   bb95c:	d0f5      	beq.n	bb94a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bb95e:	4629      	mov	r1, r5
   bb960:	a801      	add	r0, sp, #4
   bb962:	f7ff fc9d 	bl	bb2a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bb966:	4908      	ldr	r1, [pc, #32]	; (bb988 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bb968:	2024      	movs	r0, #36	; 0x24
   bb96a:	f001 fb5f 	bl	bd02c <_ZnwjRKSt9nothrow_t>
   bb96e:	4605      	mov	r5, r0
   bb970:	2800      	cmp	r0, #0
   bb972:	d0e6      	beq.n	bb942 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bb974:	ab01      	add	r3, sp, #4
   bb976:	4632      	mov	r2, r6
   bb978:	4621      	mov	r1, r4
   bb97a:	f7ff ff9f 	bl	bb8bc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bb97e:	e7e0      	b.n	bb942 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bb980:	2400      	movs	r4, #0
   bb982:	e7e2      	b.n	bb94a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bb984:	000bf58a 	.word	0x000bf58a
   bb988:	000bf758 	.word	0x000bf758
   bb98c:	000bf618 	.word	0x000bf618
   bb990:	000bf58e 	.word	0x000bf58e

000bb994 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bb994:	4b01      	ldr	r3, [pc, #4]	; (bb99c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bb996:	4a02      	ldr	r2, [pc, #8]	; (bb9a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bb998:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bb99a:	4770      	bx	lr
   bb99c:	2003e644 	.word	0x2003e644
   bb9a0:	000bf59f 	.word	0x000bf59f

000bb9a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bb9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb9a8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bb9aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bb9ae:	4604      	mov	r4, r0
   bb9b0:	460e      	mov	r6, r1
   bb9b2:	4617      	mov	r7, r2
   bb9b4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bb9b6:	f001 f90f 	bl	bcbd8 <_Z16_fetch_usbserialv>
   bb9ba:	4581      	cmp	r9, r0
   bb9bc:	d04c      	beq.n	bba58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bb9be:	792b      	ldrb	r3, [r5, #4]
   bb9c0:	0719      	lsls	r1, r3, #28
   bb9c2:	d504      	bpl.n	bb9ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bb9c4:	696a      	ldr	r2, [r5, #20]
   bb9c6:	4954      	ldr	r1, [pc, #336]	; (bbb18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bb9c8:	4620      	mov	r0, r4
   bb9ca:	f7ff fac0 	bl	baf4e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bb9ce:	f1b8 0f00 	cmp.w	r8, #0
   bb9d2:	d00d      	beq.n	bb9f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bb9d4:	215b      	movs	r1, #91	; 0x5b
   bb9d6:	4620      	mov	r0, r4
   bb9d8:	f7ff faad 	bl	baf36 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bb9dc:	4641      	mov	r1, r8
   bb9de:	4620      	mov	r0, r4
   bb9e0:	f7ff fa9a 	bl	baf18 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bb9e4:	6823      	ldr	r3, [r4, #0]
   bb9e6:	494d      	ldr	r1, [pc, #308]	; (bbb1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bb9e8:	68db      	ldr	r3, [r3, #12]
   bb9ea:	2202      	movs	r2, #2
   bb9ec:	4620      	mov	r0, r4
   bb9ee:	4798      	blx	r3
    if (attr.has_file) {
   bb9f0:	792b      	ldrb	r3, [r5, #4]
   bb9f2:	07da      	lsls	r2, r3, #31
   bb9f4:	d523      	bpl.n	bba3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bb9f6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bb9fa:	212f      	movs	r1, #47	; 0x2f
   bb9fc:	4640      	mov	r0, r8
   bb9fe:	f002 fa57 	bl	bdeb0 <strrchr>
    if (s1) {
   bba02:	b108      	cbz	r0, bba08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bba04:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bba08:	4641      	mov	r1, r8
   bba0a:	4620      	mov	r0, r4
   bba0c:	f7ff fa84 	bl	baf18 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bba10:	792b      	ldrb	r3, [r5, #4]
   bba12:	079b      	lsls	r3, r3, #30
   bba14:	d508      	bpl.n	bba28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bba16:	213a      	movs	r1, #58	; 0x3a
   bba18:	4620      	mov	r0, r4
   bba1a:	f7ff fa8c 	bl	baf36 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bba1e:	68ea      	ldr	r2, [r5, #12]
   bba20:	493f      	ldr	r1, [pc, #252]	; (bbb20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bba22:	4620      	mov	r0, r4
   bba24:	f7ff fa93 	bl	baf4e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bba28:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bba2a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bba2c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bba30:	68db      	ldr	r3, [r3, #12]
   bba32:	bf14      	ite	ne
   bba34:	493b      	ldrne	r1, [pc, #236]	; (bbb24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bba36:	493c      	ldreq	r1, [pc, #240]	; (bbb28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bba38:	2202      	movs	r2, #2
            write(": ", 2);
   bba3a:	4620      	mov	r0, r4
   bba3c:	4798      	blx	r3
    if (attr.has_function) {
   bba3e:	792b      	ldrb	r3, [r5, #4]
   bba40:	0758      	lsls	r0, r3, #29
   bba42:	d51d      	bpl.n	bba80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bba44:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bba46:	460b      	mov	r3, r1
   bba48:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bba4a:	f813 0b01 	ldrb.w	r0, [r3], #1
   bba4e:	b160      	cbz	r0, bba6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bba50:	2820      	cmp	r0, #32
   bba52:	d108      	bne.n	bba66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bba54:	4619      	mov	r1, r3
   bba56:	e7f7      	b.n	bba48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bba58:	4834      	ldr	r0, [pc, #208]	; (bbb2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bba5a:	f000 f966 	bl	bbd2a <_ZN5spark12NetworkClass9listeningEv>
   bba5e:	2800      	cmp	r0, #0
   bba60:	d0ad      	beq.n	bb9be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bba66:	2828      	cmp	r0, #40	; 0x28
   bba68:	d1ee      	bne.n	bba48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bba6a:	6823      	ldr	r3, [r4, #0]
   bba6c:	1a52      	subs	r2, r2, r1
   bba6e:	68db      	ldr	r3, [r3, #12]
   bba70:	4620      	mov	r0, r4
   bba72:	4798      	blx	r3
        write("(): ", 4);
   bba74:	6823      	ldr	r3, [r4, #0]
   bba76:	492e      	ldr	r1, [pc, #184]	; (bbb30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bba78:	68db      	ldr	r3, [r3, #12]
   bba7a:	2204      	movs	r2, #4
   bba7c:	4620      	mov	r0, r4
   bba7e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bba80:	2100      	movs	r1, #0
   bba82:	4638      	mov	r0, r7
   bba84:	f7fe f87a 	bl	b9b7c <log_level_name>
   bba88:	4601      	mov	r1, r0
    write(s);
   bba8a:	4620      	mov	r0, r4
   bba8c:	f7ff fa44 	bl	baf18 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bba90:	6823      	ldr	r3, [r4, #0]
   bba92:	4925      	ldr	r1, [pc, #148]	; (bbb28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bba94:	68db      	ldr	r3, [r3, #12]
   bba96:	2202      	movs	r2, #2
   bba98:	4620      	mov	r0, r4
   bba9a:	4798      	blx	r3
    if (msg) {
   bba9c:	b11e      	cbz	r6, bbaa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bba9e:	4631      	mov	r1, r6
   bbaa0:	4620      	mov	r0, r4
   bbaa2:	f7ff fa39 	bl	baf18 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bbaa6:	792b      	ldrb	r3, [r5, #4]
   bbaa8:	f013 0f30 	tst.w	r3, #48	; 0x30
   bbaac:	d02c      	beq.n	bbb08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bbaae:	6823      	ldr	r3, [r4, #0]
   bbab0:	4920      	ldr	r1, [pc, #128]	; (bbb34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bbab2:	68db      	ldr	r3, [r3, #12]
   bbab4:	2202      	movs	r2, #2
   bbab6:	4620      	mov	r0, r4
   bbab8:	4798      	blx	r3
        if (attr.has_code) {
   bbaba:	792b      	ldrb	r3, [r5, #4]
   bbabc:	06d9      	lsls	r1, r3, #27
   bbabe:	d50a      	bpl.n	bbad6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bbac0:	6823      	ldr	r3, [r4, #0]
   bbac2:	491d      	ldr	r1, [pc, #116]	; (bbb38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bbac4:	68db      	ldr	r3, [r3, #12]
   bbac6:	2207      	movs	r2, #7
   bbac8:	4620      	mov	r0, r4
   bbaca:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bbacc:	69aa      	ldr	r2, [r5, #24]
   bbace:	491b      	ldr	r1, [pc, #108]	; (bbb3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bbad0:	4620      	mov	r0, r4
   bbad2:	f7ff fa3c 	bl	baf4e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bbad6:	792b      	ldrb	r3, [r5, #4]
   bbad8:	069a      	lsls	r2, r3, #26
   bbada:	d511      	bpl.n	bbb00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bbadc:	06db      	lsls	r3, r3, #27
   bbade:	d505      	bpl.n	bbaec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bbae0:	6823      	ldr	r3, [r4, #0]
   bbae2:	4910      	ldr	r1, [pc, #64]	; (bbb24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bbae4:	68db      	ldr	r3, [r3, #12]
   bbae6:	2202      	movs	r2, #2
   bbae8:	4620      	mov	r0, r4
   bbaea:	4798      	blx	r3
            write("details = ", 10);
   bbaec:	6823      	ldr	r3, [r4, #0]
   bbaee:	4914      	ldr	r1, [pc, #80]	; (bbb40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bbaf0:	68db      	ldr	r3, [r3, #12]
   bbaf2:	4620      	mov	r0, r4
   bbaf4:	220a      	movs	r2, #10
   bbaf6:	4798      	blx	r3
            write(attr.details);
   bbaf8:	69e9      	ldr	r1, [r5, #28]
   bbafa:	4620      	mov	r0, r4
   bbafc:	f7ff fa0c 	bl	baf18 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bbb00:	215d      	movs	r1, #93	; 0x5d
   bbb02:	4620      	mov	r0, r4
   bbb04:	f7ff fa17 	bl	baf36 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bbb08:	6823      	ldr	r3, [r4, #0]
   bbb0a:	490e      	ldr	r1, [pc, #56]	; (bbb44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bbb0c:	68db      	ldr	r3, [r3, #12]
   bbb0e:	4620      	mov	r0, r4
   bbb10:	2202      	movs	r2, #2
}
   bbb12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bbb16:	4718      	bx	r3
   bbb18:	000bf5a3 	.word	0x000bf5a3
   bbb1c:	000bf5aa 	.word	0x000bf5aa
   bbb20:	000bf2ff 	.word	0x000bf2ff
   bbb24:	000bf5ad 	.word	0x000bf5ad
   bbb28:	000bf5b2 	.word	0x000bf5b2
   bbb2c:	2003e670 	.word	0x2003e670
   bbb30:	000bf5b0 	.word	0x000bf5b0
   bbb34:	000bf5b5 	.word	0x000bf5b5
   bbb38:	000bf5b8 	.word	0x000bf5b8
   bbb3c:	000be327 	.word	0x000be327
   bbb40:	000bf5c0 	.word	0x000bf5c0
   bbb44:	000bf5cb 	.word	0x000bf5cb

000bbb48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bbb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbb4c:	b085      	sub	sp, #20
    return stream_;
   bbb4e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bbb52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bbb54:	4605      	mov	r5, r0
   bbb56:	460f      	mov	r7, r1
   bbb58:	4690      	mov	r8, r2
   bbb5a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bbb5c:	f001 f83c 	bl	bcbd8 <_Z16_fetch_usbserialv>
   bbb60:	4581      	cmp	r9, r0
   bbb62:	d105      	bne.n	bbb70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bbb64:	4849      	ldr	r0, [pc, #292]	; (bbc8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bbb66:	f000 f8e0 	bl	bbd2a <_ZN5spark12NetworkClass9listeningEv>
   bbb6a:	2800      	cmp	r0, #0
   bbb6c:	f040 808a 	bne.w	bbc84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bbb70:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bbb72:	4a47      	ldr	r2, [pc, #284]	; (bbc90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bbb74:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bbb76:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bbb7a:	a801      	add	r0, sp, #4
        strm_(stream) {
   bbb7c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bbb7e:	f88d 9008 	strb.w	r9, [sp, #8]
   bbb82:	f7ff f8b4 	bl	bacee <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bbb86:	4649      	mov	r1, r9
   bbb88:	4640      	mov	r0, r8
   bbb8a:	f7fd fff7 	bl	b9b7c <log_level_name>
    json.name("l", 1).value(s);
   bbb8e:	4941      	ldr	r1, [pc, #260]	; (bbc94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bbb90:	4680      	mov	r8, r0
   bbb92:	2201      	movs	r2, #1
   bbb94:	a801      	add	r0, sp, #4
   bbb96:	f7ff f939 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbb9a:	4641      	mov	r1, r8
   bbb9c:	f7ff f9ae 	bl	baefc <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bbba0:	b13f      	cbz	r7, bbbb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bbba2:	493d      	ldr	r1, [pc, #244]	; (bbc98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bbba4:	2201      	movs	r2, #1
   bbba6:	a801      	add	r0, sp, #4
   bbba8:	f7ff f930 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbbac:	4639      	mov	r1, r7
   bbbae:	f7ff f9a5 	bl	baefc <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bbbb2:	b13e      	cbz	r6, bbbc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bbbb4:	4939      	ldr	r1, [pc, #228]	; (bbc9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bbbb6:	2201      	movs	r2, #1
   bbbb8:	a801      	add	r0, sp, #4
   bbbba:	f7ff f927 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbbbe:	4631      	mov	r1, r6
   bbbc0:	f7ff f99c 	bl	baefc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bbbc4:	7923      	ldrb	r3, [r4, #4]
   bbbc6:	07df      	lsls	r7, r3, #31
   bbbc8:	d50e      	bpl.n	bbbe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bbbca:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bbbcc:	212f      	movs	r1, #47	; 0x2f
   bbbce:	4630      	mov	r0, r6
   bbbd0:	f002 f96e 	bl	bdeb0 <strrchr>
    if (s1) {
   bbbd4:	b100      	cbz	r0, bbbd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bbbd6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bbbd8:	4931      	ldr	r1, [pc, #196]	; (bbca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bbbda:	2201      	movs	r2, #1
   bbbdc:	a801      	add	r0, sp, #4
   bbbde:	f7ff f915 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbbe2:	4631      	mov	r1, r6
   bbbe4:	f7ff f98a 	bl	baefc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bbbe8:	7923      	ldrb	r3, [r4, #4]
   bbbea:	079e      	lsls	r6, r3, #30
   bbbec:	d507      	bpl.n	bbbfe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bbbee:	492d      	ldr	r1, [pc, #180]	; (bbca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bbbf0:	2202      	movs	r2, #2
   bbbf2:	a801      	add	r0, sp, #4
   bbbf4:	f7ff f90a 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbbf8:	68e1      	ldr	r1, [r4, #12]
   bbbfa:	f7ff f885 	bl	bad08 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bbbfe:	7923      	ldrb	r3, [r4, #4]
   bbc00:	0758      	lsls	r0, r3, #29
   bbc02:	d514      	bpl.n	bbc2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bbc04:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bbc06:	4633      	mov	r3, r6
   bbc08:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bbc0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbc0e:	b12a      	cbz	r2, bbc1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bbc10:	2a20      	cmp	r2, #32
   bbc12:	d101      	bne.n	bbc18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bbc14:	461e      	mov	r6, r3
   bbc16:	e7f7      	b.n	bbc08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bbc18:	2a28      	cmp	r2, #40	; 0x28
   bbc1a:	d1f5      	bne.n	bbc08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bbc1c:	4922      	ldr	r1, [pc, #136]	; (bbca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bbc1e:	2202      	movs	r2, #2
   bbc20:	a801      	add	r0, sp, #4
   bbc22:	f7ff f8f3 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbc26:	1bba      	subs	r2, r7, r6
   bbc28:	4631      	mov	r1, r6
   bbc2a:	f7ff f8ff 	bl	bae2c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bbc2e:	7923      	ldrb	r3, [r4, #4]
   bbc30:	0719      	lsls	r1, r3, #28
   bbc32:	d507      	bpl.n	bbc44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bbc34:	491d      	ldr	r1, [pc, #116]	; (bbcac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bbc36:	2201      	movs	r2, #1
   bbc38:	a801      	add	r0, sp, #4
   bbc3a:	f7ff f8e7 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbc3e:	6961      	ldr	r1, [r4, #20]
   bbc40:	f7ff f874 	bl	bad2c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bbc44:	7923      	ldrb	r3, [r4, #4]
   bbc46:	06da      	lsls	r2, r3, #27
   bbc48:	d508      	bpl.n	bbc5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bbc4a:	2204      	movs	r2, #4
   bbc4c:	4918      	ldr	r1, [pc, #96]	; (bbcb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bbc4e:	eb0d 0002 	add.w	r0, sp, r2
   bbc52:	f7ff f8db 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbc56:	69a1      	ldr	r1, [r4, #24]
   bbc58:	f7ff f856 	bl	bad08 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bbc5c:	7923      	ldrb	r3, [r4, #4]
   bbc5e:	069b      	lsls	r3, r3, #26
   bbc60:	d507      	bpl.n	bbc72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bbc62:	4914      	ldr	r1, [pc, #80]	; (bbcb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bbc64:	2206      	movs	r2, #6
   bbc66:	a801      	add	r0, sp, #4
   bbc68:	f7ff f8d0 	bl	bae0c <_ZN5spark10JSONWriter4nameEPKcj>
   bbc6c:	69e1      	ldr	r1, [r4, #28]
   bbc6e:	f7ff f945 	bl	baefc <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bbc72:	a801      	add	r0, sp, #4
   bbc74:	f7ff f825 	bl	bacc2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bbc78:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bbc7a:	490f      	ldr	r1, [pc, #60]	; (bbcb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bbc7c:	6803      	ldr	r3, [r0, #0]
   bbc7e:	2202      	movs	r2, #2
   bbc80:	68db      	ldr	r3, [r3, #12]
   bbc82:	4798      	blx	r3
}
   bbc84:	b005      	add	sp, #20
   bbc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbc8a:	bf00      	nop
   bbc8c:	2003e670 	.word	0x2003e670
   bbc90:	000bf5e8 	.word	0x000bf5e8
   bbc94:	000bf580 	.word	0x000bf580
   bbc98:	000bef08 	.word	0x000bef08
   bbc9c:	000bf879 	.word	0x000bf879
   bbca0:	000bf69a 	.word	0x000bf69a
   bbca4:	000bf5ce 	.word	0x000bf5ce
   bbca8:	000be89d 	.word	0x000be89d
   bbcac:	000be702 	.word	0x000be702
   bbcb0:	000bf5d1 	.word	0x000bf5d1
   bbcb4:	000bf5d6 	.word	0x000bf5d6
   bbcb8:	000bf5cb 	.word	0x000bf5cb

000bbcbc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bbcbc:	2300      	movs	r3, #0
   bbcbe:	6840      	ldr	r0, [r0, #4]
   bbcc0:	461a      	mov	r2, r3
   bbcc2:	f7fe b847 	b.w	b9d54 <network_connect>

000bbcc6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bbcc6:	6840      	ldr	r0, [r0, #4]
   bbcc8:	2200      	movs	r2, #0
   bbcca:	2102      	movs	r1, #2
   bbccc:	f7fe b852 	b.w	b9d74 <network_disconnect>

000bbcd0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bbcd0:	2200      	movs	r2, #0
   bbcd2:	6840      	ldr	r0, [r0, #4]
   bbcd4:	4611      	mov	r1, r2
   bbcd6:	f7fe b845 	b.w	b9d64 <network_connecting>

000bbcda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bbcda:	2200      	movs	r2, #0
   bbcdc:	6840      	ldr	r0, [r0, #4]
   bbcde:	4611      	mov	r1, r2
   bbce0:	f7fe b850 	b.w	b9d84 <network_ready>

000bbce4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bbce4:	2300      	movs	r3, #0
   bbce6:	6840      	ldr	r0, [r0, #4]
   bbce8:	461a      	mov	r2, r3
   bbcea:	4619      	mov	r1, r3
   bbcec:	f7fe b852 	b.w	b9d94 <network_on>

000bbcf0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bbcf0:	2300      	movs	r3, #0
   bbcf2:	6840      	ldr	r0, [r0, #4]
   bbcf4:	461a      	mov	r2, r3
   bbcf6:	4619      	mov	r1, r3
   bbcf8:	f7fe b854 	b.w	b9da4 <network_off>

000bbcfc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bbcfc:	6840      	ldr	r0, [r0, #4]
   bbcfe:	2100      	movs	r1, #0
   bbd00:	f7fe b878 	b.w	b9df4 <network_is_on>

000bbd04 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bbd04:	6840      	ldr	r0, [r0, #4]
   bbd06:	2100      	movs	r1, #0
   bbd08:	f7fe b87c 	b.w	b9e04 <network_is_off>

000bbd0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bbd0c:	6840      	ldr	r0, [r0, #4]
   bbd0e:	2200      	movs	r2, #0
   bbd10:	f081 0101 	eor.w	r1, r1, #1
   bbd14:	f7fe b84e 	b.w	b9db4 <network_listen>

000bbd18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bbd18:	6840      	ldr	r0, [r0, #4]
   bbd1a:	2200      	movs	r2, #0
   bbd1c:	f7fe b85a 	b.w	b9dd4 <network_set_listen_timeout>

000bbd20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bbd20:	2200      	movs	r2, #0
   bbd22:	6840      	ldr	r0, [r0, #4]
   bbd24:	4611      	mov	r1, r2
   bbd26:	f7fe b85d 	b.w	b9de4 <network_get_listen_timeout>

000bbd2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bbd2a:	2200      	movs	r2, #0
   bbd2c:	6840      	ldr	r0, [r0, #4]
   bbd2e:	4611      	mov	r1, r2
   bbd30:	f7fe b848 	b.w	b9dc4 <network_listening>

000bbd34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bbd34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbd38:	b095      	sub	sp, #84	; 0x54
   bbd3a:	4614      	mov	r4, r2
   bbd3c:	460d      	mov	r5, r1
   bbd3e:	4607      	mov	r7, r0
    IPAddress addr;
   bbd40:	f7fe fe6e 	bl	baa20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bbd44:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bbd46:	221c      	movs	r2, #28
   bbd48:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bbd4a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bbd4c:	f002 f804 	bl	bdd58 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bbd50:	2340      	movs	r3, #64	; 0x40
   bbd52:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bbd54:	4620      	mov	r0, r4
   bbd56:	466b      	mov	r3, sp
   bbd58:	aa0c      	add	r2, sp, #48	; 0x30
   bbd5a:	2100      	movs	r1, #0
   bbd5c:	f7fd fdd6 	bl	b990c <netdb_getaddrinfo>
    if (!r) {
   bbd60:	4604      	mov	r4, r0
   bbd62:	2800      	cmp	r0, #0
   bbd64:	d14b      	bne.n	bbdfe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bbd66:	4602      	mov	r2, r0
   bbd68:	2101      	movs	r1, #1
   bbd6a:	6868      	ldr	r0, [r5, #4]
   bbd6c:	f7fe f80a 	bl	b9d84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bbd70:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bbd72:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bbd74:	4622      	mov	r2, r4
   bbd76:	6868      	ldr	r0, [r5, #4]
   bbd78:	f7fe f804 	bl	b9d84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bbd7c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bbd7e:	4681      	mov	r9, r0
        bool ok = false;
   bbd80:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bbd82:	2e00      	cmp	r6, #0
   bbd84:	d03b      	beq.n	bbdfe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bbd86:	2900      	cmp	r1, #0
   bbd88:	d139      	bne.n	bbdfe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bbd8a:	6873      	ldr	r3, [r6, #4]
   bbd8c:	2b02      	cmp	r3, #2
   bbd8e:	d003      	beq.n	bbd98 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bbd90:	2b0a      	cmp	r3, #10
   bbd92:	d011      	beq.n	bbdb8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bbd94:	69f6      	ldr	r6, [r6, #28]
   bbd96:	e7f4      	b.n	bbd82 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bbd98:	f1b8 0f00 	cmp.w	r8, #0
   bbd9c:	d0fa      	beq.n	bbd94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bbd9e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bbda0:	a806      	add	r0, sp, #24
   bbda2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bbda4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bbda6:	f7fe fe69 	bl	baa7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bbdaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bbdac:	1d3c      	adds	r4, r7, #4
   bbdae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbdb0:	682b      	ldr	r3, [r5, #0]
   bbdb2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bbdb4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bbdb6:	e7ed      	b.n	bbd94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bbdb8:	f1b9 0f00 	cmp.w	r9, #0
   bbdbc:	d0ea      	beq.n	bbd94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bbdbe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bbdc0:	2210      	movs	r2, #16
   bbdc2:	a801      	add	r0, sp, #4
   bbdc4:	f001 ffc8 	bl	bdd58 <memset>
                    a.v = 6;
   bbdc8:	2306      	movs	r3, #6
   bbdca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bbdce:	ad01      	add	r5, sp, #4
   bbdd0:	f104 0308 	add.w	r3, r4, #8
   bbdd4:	3418      	adds	r4, #24
   bbdd6:	6818      	ldr	r0, [r3, #0]
   bbdd8:	6859      	ldr	r1, [r3, #4]
   bbdda:	462a      	mov	r2, r5
   bbddc:	c203      	stmia	r2!, {r0, r1}
   bbdde:	3308      	adds	r3, #8
   bbde0:	42a3      	cmp	r3, r4
   bbde2:	4615      	mov	r5, r2
   bbde4:	d1f7      	bne.n	bbdd6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bbde6:	a901      	add	r1, sp, #4
   bbde8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bbdea:	ad07      	add	r5, sp, #28
   bbdec:	f7fe fe26 	bl	baa3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bbdf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bbdf2:	1d3c      	adds	r4, r7, #4
   bbdf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbdf6:	682b      	ldr	r3, [r5, #0]
   bbdf8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bbdfa:	4649      	mov	r1, r9
   bbdfc:	e7ca      	b.n	bbd94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bbdfe:	9800      	ldr	r0, [sp, #0]
   bbe00:	f7fd fd7c 	bl	b98fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bbe04:	4638      	mov	r0, r7
   bbe06:	b015      	add	sp, #84	; 0x54
   bbe08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bbe0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bbe0c:	4b02      	ldr	r3, [pc, #8]	; (bbe18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bbe0e:	4a03      	ldr	r2, [pc, #12]	; (bbe1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bbe10:	601a      	str	r2, [r3, #0]
   bbe12:	2200      	movs	r2, #0
   bbe14:	605a      	str	r2, [r3, #4]

} // spark
   bbe16:	4770      	bx	lr
   bbe18:	2003e670 	.word	0x2003e670
   bbe1c:	000bf660 	.word	0x000bf660

000bbe20 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bbe20:	b508      	push	{r3, lr}
            return &Wire1;
   bbe22:	f001 f89f 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bbe26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bbe2a:	f7fe bd82 	b.w	ba932 <_ZN7TwoWire4lockEv>

000bbe2e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bbe2e:	b510      	push	{r4, lr}
   bbe30:	4604      	mov	r4, r0
    lock_(_lock)
   bbe32:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bbe34:	b109      	cbz	r1, bbe3a <_ZN4PMICC1Eb+0xc>
        lock();
   bbe36:	f7ff fff3 	bl	bbe20 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bbe3a:	4620      	mov	r0, r4
   bbe3c:	bd10      	pop	{r4, pc}

000bbe3e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bbe3e:	b508      	push	{r3, lr}
            return &Wire1;
   bbe40:	f001 f890 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bbe44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bbe48:	f7fe bd7c 	b.w	ba944 <_ZN7TwoWire6unlockEv>

000bbe4c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bbe4c:	b510      	push	{r4, lr}
    if (lock_) {
   bbe4e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bbe50:	4604      	mov	r4, r0
    if (lock_) {
   bbe52:	b10b      	cbz	r3, bbe58 <_ZN4PMICD1Ev+0xc>
        unlock();
   bbe54:	f7ff fff3 	bl	bbe3e <_ZN4PMIC6unlockEv>
}
   bbe58:	4620      	mov	r0, r4
   bbe5a:	bd10      	pop	{r4, pc}

000bbe5c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bbe5c:	b510      	push	{r4, lr}
   bbe5e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bbe60:	6800      	ldr	r0, [r0, #0]
   bbe62:	f7ff ffec 	bl	bbe3e <_ZN4PMIC6unlockEv>
   bbe66:	4620      	mov	r0, r4
   bbe68:	bd10      	pop	{r4, pc}

000bbe6a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bbe6a:	b530      	push	{r4, r5, lr}
   bbe6c:	b087      	sub	sp, #28
   bbe6e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bbe70:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bbe72:	f7ff ffd5 	bl	bbe20 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbe76:	226b      	movs	r2, #107	; 0x6b
   bbe78:	2300      	movs	r3, #0
   bbe7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bbe7e:	2401      	movs	r4, #1
   bbe80:	230a      	movs	r3, #10
   bbe82:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bbe86:	f001 f86d 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bbe8a:	a902      	add	r1, sp, #8
   bbe8c:	f7fe fd35 	bl	ba8fa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bbe90:	f001 f868 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bbe94:	6803      	ldr	r3, [r0, #0]
   bbe96:	4629      	mov	r1, r5
   bbe98:	689b      	ldr	r3, [r3, #8]
   bbe9a:	4798      	blx	r3
            return &Wire1;
   bbe9c:	f001 f862 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bbea0:	4621      	mov	r1, r4
   bbea2:	f7fe fd42 	bl	ba92a <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bbea6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bbea8:	f001 f85c 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bbeac:	a902      	add	r1, sp, #8
   bbeae:	f7fe fcf7 	bl	ba8a0 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bbeb2:	f001 f857 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bbeb6:	6803      	ldr	r3, [r0, #0]
   bbeb8:	695b      	ldr	r3, [r3, #20]
   bbeba:	4798      	blx	r3
   bbebc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bbebe:	a801      	add	r0, sp, #4
   bbec0:	f7ff ffcc 	bl	bbe5c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bbec4:	b2e0      	uxtb	r0, r4
   bbec6:	b007      	add	sp, #28
   bbec8:	bd30      	pop	{r4, r5, pc}

000bbeca <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bbeca:	b570      	push	{r4, r5, r6, lr}
   bbecc:	b086      	sub	sp, #24
   bbece:	460d      	mov	r5, r1
   bbed0:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bbed2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bbed4:	f7ff ffa4 	bl	bbe20 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbed8:	226b      	movs	r2, #107	; 0x6b
   bbeda:	2300      	movs	r3, #0
   bbedc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bbee0:	2601      	movs	r6, #1
   bbee2:	230a      	movs	r3, #10
   bbee4:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bbee8:	f001 f83c 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bbeec:	a902      	add	r1, sp, #8
   bbeee:	f7fe fd04 	bl	ba8fa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bbef2:	f001 f837 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bbef6:	6803      	ldr	r3, [r0, #0]
   bbef8:	4629      	mov	r1, r5
   bbefa:	689b      	ldr	r3, [r3, #8]
   bbefc:	4798      	blx	r3
            return &Wire1;
   bbefe:	f001 f831 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bbf02:	6803      	ldr	r3, [r0, #0]
   bbf04:	4621      	mov	r1, r4
   bbf06:	689b      	ldr	r3, [r3, #8]
   bbf08:	4798      	blx	r3
            return &Wire1;
   bbf0a:	f001 f82b 	bl	bcf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bbf0e:	4631      	mov	r1, r6
   bbf10:	f7fe fd0b 	bl	ba92a <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bbf14:	a801      	add	r0, sp, #4
   bbf16:	f7ff ffa1 	bl	bbe5c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bbf1a:	b006      	add	sp, #24
   bbf1c:	bd70      	pop	{r4, r5, r6, pc}

000bbf1e <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bbf1e:	b513      	push	{r0, r1, r4, lr}
   bbf20:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bbf22:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bbf24:	f7ff ff7c 	bl	bbe20 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bbf28:	2101      	movs	r1, #1
   bbf2a:	4620      	mov	r0, r4
   bbf2c:	f7ff ff9d 	bl	bbe6a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bbf30:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bbf34:	2b10      	cmp	r3, #16
   bbf36:	d007      	beq.n	bbf48 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bbf38:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bbf3c:	f042 0210 	orr.w	r2, r2, #16
   bbf40:	2101      	movs	r1, #1
   bbf42:	4620      	mov	r0, r4
   bbf44:	f7ff ffc1 	bl	bbeca <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bbf48:	a801      	add	r0, sp, #4
   bbf4a:	f7ff ff87 	bl	bbe5c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bbf4e:	2001      	movs	r0, #1
   bbf50:	b002      	add	sp, #8
   bbf52:	bd10      	pop	{r4, pc}

000bbf54 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bbf54:	b513      	push	{r0, r1, r4, lr}
   bbf56:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bbf58:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bbf5a:	f7ff ff61 	bl	bbe20 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bbf5e:	2101      	movs	r1, #1
   bbf60:	4620      	mov	r0, r4
   bbf62:	f7ff ff82 	bl	bbe6a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bbf66:	f010 0f30 	tst.w	r0, #48	; 0x30
   bbf6a:	d005      	beq.n	bbf78 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bbf6c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bbf70:	2101      	movs	r1, #1
   bbf72:	4620      	mov	r0, r4
   bbf74:	f7ff ffa9 	bl	bbeca <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bbf78:	a801      	add	r0, sp, #4
   bbf7a:	f7ff ff6f 	bl	bbe5c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bbf7e:	2001      	movs	r0, #1
   bbf80:	b002      	add	sp, #8
   bbf82:	bd10      	pop	{r4, pc}

000bbf84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bbf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbf86:	4606      	mov	r6, r0
   bbf88:	460d      	mov	r5, r1
  size_t n = 0;
   bbf8a:	188f      	adds	r7, r1, r2
   bbf8c:	2400      	movs	r4, #0
  while (size--) {
   bbf8e:	42bd      	cmp	r5, r7
   bbf90:	d00c      	beq.n	bbfac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bbf92:	6833      	ldr	r3, [r6, #0]
   bbf94:	f815 1b01 	ldrb.w	r1, [r5], #1
   bbf98:	689b      	ldr	r3, [r3, #8]
   bbf9a:	4630      	mov	r0, r6
   bbf9c:	4798      	blx	r3
     if (chunk>=0)
   bbf9e:	1e03      	subs	r3, r0, #0
   bbfa0:	db01      	blt.n	bbfa6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bbfa2:	441c      	add	r4, r3
  while (size--) {
   bbfa4:	e7f3      	b.n	bbf8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bbfa6:	2c00      	cmp	r4, #0
   bbfa8:	bf08      	it	eq
   bbfaa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bbfac:	4620      	mov	r0, r4
   bbfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbfb0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bbfb0:	b513      	push	{r0, r1, r4, lr}
   bbfb2:	4604      	mov	r4, r0
    }
   bbfb4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bbfb6:	b159      	cbz	r1, bbfd0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bbfb8:	9101      	str	r1, [sp, #4]
   bbfba:	f001 ff4a 	bl	bde52 <strlen>
   bbfbe:	6823      	ldr	r3, [r4, #0]
   bbfc0:	9901      	ldr	r1, [sp, #4]
   bbfc2:	68db      	ldr	r3, [r3, #12]
   bbfc4:	4602      	mov	r2, r0
   bbfc6:	4620      	mov	r0, r4
    }
   bbfc8:	b002      	add	sp, #8
   bbfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bbfce:	4718      	bx	r3
    }
   bbfd0:	b002      	add	sp, #8
   bbfd2:	bd10      	pop	{r4, pc}

000bbfd4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   bbfd4:	6803      	ldr	r3, [r0, #0]
   bbfd6:	689b      	ldr	r3, [r3, #8]
   bbfd8:	4718      	bx	r3

000bbfda <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bbfda:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bbfdc:	210d      	movs	r1, #13
{
   bbfde:	4605      	mov	r5, r0
  size_t n = print('\r');
   bbfe0:	f7ff fff8 	bl	bbfd4 <_ZN5Print5printEc>
  n += print('\n');
   bbfe4:	210a      	movs	r1, #10
  size_t n = print('\r');
   bbfe6:	4604      	mov	r4, r0
  n += print('\n');
   bbfe8:	4628      	mov	r0, r5
   bbfea:	f7ff fff3 	bl	bbfd4 <_ZN5Print5printEc>
  return n;
}
   bbfee:	4420      	add	r0, r4
   bbff0:	bd38      	pop	{r3, r4, r5, pc}

000bbff2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bbff2:	b530      	push	{r4, r5, lr}
   bbff4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bbff6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bbff8:	2a01      	cmp	r2, #1
  *str = '\0';
   bbffa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bbffe:	bf98      	it	ls
   bc000:	220a      	movls	r2, #10
   bc002:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bc004:	460d      	mov	r5, r1
   bc006:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bc00a:	fb01 5312 	mls	r3, r1, r2, r5
   bc00e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc012:	2b09      	cmp	r3, #9
   bc014:	bf94      	ite	ls
   bc016:	3330      	addls	r3, #48	; 0x30
   bc018:	3337      	addhi	r3, #55	; 0x37
   bc01a:	b2db      	uxtb	r3, r3
  } while(n);
   bc01c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc01e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bc022:	d9ef      	bls.n	bc004 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bc024:	4621      	mov	r1, r4
   bc026:	f7ff ffc3 	bl	bbfb0 <_ZN5Print5writeEPKc>
}
   bc02a:	b00b      	add	sp, #44	; 0x2c
   bc02c:	bd30      	pop	{r4, r5, pc}
	...

000bc030 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bc030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc034:	ec55 4b10 	vmov	r4, r5, d0
   bc038:	4606      	mov	r6, r0
   bc03a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bc03c:	ee10 2a10 	vmov	r2, s0
   bc040:	ee10 0a10 	vmov	r0, s0
   bc044:	462b      	mov	r3, r5
   bc046:	4629      	mov	r1, r5
   bc048:	f001 fd5a 	bl	bdb00 <__aeabi_dcmpun>
   bc04c:	b140      	cbz	r0, bc060 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bc04e:	4953      	ldr	r1, [pc, #332]	; (bc19c <_ZN5Print10printFloatEdh+0x16c>)
   bc050:	4630      	mov	r0, r6
   bc052:	f7ff ffad 	bl	bbfb0 <_ZN5Print5writeEPKc>
   bc056:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bc058:	4650      	mov	r0, sl
   bc05a:	b003      	add	sp, #12
   bc05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bc060:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bc064:	4b4e      	ldr	r3, [pc, #312]	; (bc1a0 <_ZN5Print10printFloatEdh+0x170>)
   bc066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc06a:	4620      	mov	r0, r4
   bc06c:	4649      	mov	r1, r9
   bc06e:	f001 fd47 	bl	bdb00 <__aeabi_dcmpun>
   bc072:	b948      	cbnz	r0, bc088 <_ZN5Print10printFloatEdh+0x58>
   bc074:	4b4a      	ldr	r3, [pc, #296]	; (bc1a0 <_ZN5Print10printFloatEdh+0x170>)
   bc076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc07a:	4620      	mov	r0, r4
   bc07c:	4649      	mov	r1, r9
   bc07e:	f001 fd21 	bl	bdac4 <__aeabi_dcmple>
   bc082:	b908      	cbnz	r0, bc088 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bc084:	4947      	ldr	r1, [pc, #284]	; (bc1a4 <_ZN5Print10printFloatEdh+0x174>)
   bc086:	e7e3      	b.n	bc050 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bc088:	4b47      	ldr	r3, [pc, #284]	; (bc1a8 <_ZN5Print10printFloatEdh+0x178>)
   bc08a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bc08e:	4620      	mov	r0, r4
   bc090:	4629      	mov	r1, r5
   bc092:	f001 fd2b 	bl	bdaec <__aeabi_dcmpgt>
   bc096:	b108      	cbz	r0, bc09c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bc098:	4944      	ldr	r1, [pc, #272]	; (bc1ac <_ZN5Print10printFloatEdh+0x17c>)
   bc09a:	e7d9      	b.n	bc050 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bc09c:	4b44      	ldr	r3, [pc, #272]	; (bc1b0 <_ZN5Print10printFloatEdh+0x180>)
   bc09e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bc0a2:	4620      	mov	r0, r4
   bc0a4:	4629      	mov	r1, r5
   bc0a6:	f001 fd03 	bl	bdab0 <__aeabi_dcmplt>
   bc0aa:	2800      	cmp	r0, #0
   bc0ac:	d1f4      	bne.n	bc098 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bc0ae:	2200      	movs	r2, #0
   bc0b0:	2300      	movs	r3, #0
   bc0b2:	4620      	mov	r0, r4
   bc0b4:	4629      	mov	r1, r5
   bc0b6:	f001 fcfb 	bl	bdab0 <__aeabi_dcmplt>
   bc0ba:	b1d0      	cbz	r0, bc0f2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bc0bc:	212d      	movs	r1, #45	; 0x2d
   bc0be:	4630      	mov	r0, r6
   bc0c0:	f7ff ff88 	bl	bbfd4 <_ZN5Print5printEc>
     number = -number;
   bc0c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bc0c8:	4682      	mov	sl, r0
     number = -number;
   bc0ca:	461d      	mov	r5, r3
  double rounding = 0.5;
   bc0cc:	4939      	ldr	r1, [pc, #228]	; (bc1b4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bc0ce:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bc1bc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bc0d2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bc0d6:	2000      	movs	r0, #0
    rounding /= 10.0;
   bc0d8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bc0dc:	fa5f f38b 	uxtb.w	r3, fp
   bc0e0:	429f      	cmp	r7, r3
   bc0e2:	d908      	bls.n	bc0f6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bc0e4:	4642      	mov	r2, r8
   bc0e6:	464b      	mov	r3, r9
   bc0e8:	f001 fb9a 	bl	bd820 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bc0ec:	f10b 0b01 	add.w	fp, fp, #1
   bc0f0:	e7f4      	b.n	bc0dc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bc0f2:	4682      	mov	sl, r0
   bc0f4:	e7ea      	b.n	bc0cc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bc0f6:	4622      	mov	r2, r4
   bc0f8:	462b      	mov	r3, r5
   bc0fa:	f001 f8b1 	bl	bd260 <__adddf3>
   bc0fe:	460d      	mov	r5, r1
   bc100:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bc102:	f001 fd3b 	bl	bdb7c <__aeabi_d2uiz>
   bc106:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bc108:	f001 f9e6 	bl	bd4d8 <__aeabi_ui2d>
   bc10c:	4602      	mov	r2, r0
   bc10e:	460b      	mov	r3, r1
   bc110:	4620      	mov	r0, r4
   bc112:	4629      	mov	r1, r5
   bc114:	f001 f8a2 	bl	bd25c <__aeabi_dsub>
        return printNumber(val, base) + t;
   bc118:	220a      	movs	r2, #10
   bc11a:	4604      	mov	r4, r0
   bc11c:	460d      	mov	r5, r1
   bc11e:	4630      	mov	r0, r6
   bc120:	4641      	mov	r1, r8
   bc122:	f7ff ff66 	bl	bbff2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bc126:	4482      	add	sl, r0
  if (digits > 0) {
   bc128:	2f00      	cmp	r7, #0
   bc12a:	d095      	beq.n	bc058 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bc12c:	4922      	ldr	r1, [pc, #136]	; (bc1b8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bc12e:	f8df 908c 	ldr.w	r9, [pc, #140]	; bc1bc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bc132:	4630      	mov	r0, r6
   bc134:	f7ff ff3c 	bl	bbfb0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bc138:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bc13c:	4482      	add	sl, r0
  while (digits-- > 0)
   bc13e:	2f00      	cmp	r7, #0
   bc140:	d08a      	beq.n	bc058 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bc142:	4642      	mov	r2, r8
   bc144:	464b      	mov	r3, r9
   bc146:	4620      	mov	r0, r4
   bc148:	4629      	mov	r1, r5
   bc14a:	f001 fa3f 	bl	bd5cc <__aeabi_dmul>
   bc14e:	4604      	mov	r4, r0
   bc150:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bc152:	f001 fceb 	bl	bdb2c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bc156:	f1b0 0b00 	subs.w	fp, r0, #0
   bc15a:	da1c      	bge.n	bc196 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bc15c:	212d      	movs	r1, #45	; 0x2d
   bc15e:	4630      	mov	r0, r6
   bc160:	f7ff ff38 	bl	bbfd4 <_ZN5Print5printEc>
            val = -n;
   bc164:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bc168:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bc16a:	220a      	movs	r2, #10
   bc16c:	4630      	mov	r0, r6
   bc16e:	9301      	str	r3, [sp, #4]
   bc170:	f7ff ff3f 	bl	bbff2 <_ZN5Print11printNumberEmh>
   bc174:	9b01      	ldr	r3, [sp, #4]
   bc176:	4418      	add	r0, r3
    n += print(toPrint);
   bc178:	4482      	add	sl, r0
    remainder -= toPrint;
   bc17a:	4658      	mov	r0, fp
   bc17c:	f001 f9bc 	bl	bd4f8 <__aeabi_i2d>
   bc180:	4602      	mov	r2, r0
   bc182:	460b      	mov	r3, r1
   bc184:	4620      	mov	r0, r4
   bc186:	4629      	mov	r1, r5
   bc188:	f001 f868 	bl	bd25c <__aeabi_dsub>
   bc18c:	3f01      	subs	r7, #1
   bc18e:	4604      	mov	r4, r0
   bc190:	460d      	mov	r5, r1
   bc192:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bc194:	e7d3      	b.n	bc13e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bc196:	4659      	mov	r1, fp
        size_t t = 0;
   bc198:	2300      	movs	r3, #0
   bc19a:	e7e6      	b.n	bc16a <_ZN5Print10printFloatEdh+0x13a>
   bc19c:	000bf694 	.word	0x000bf694
   bc1a0:	7fefffff 	.word	0x7fefffff
   bc1a4:	000bf698 	.word	0x000bf698
   bc1a8:	41efffff 	.word	0x41efffff
   bc1ac:	000bf69c 	.word	0x000bf69c
   bc1b0:	c1efffff 	.word	0xc1efffff
   bc1b4:	3fe00000 	.word	0x3fe00000
   bc1b8:	000bf6cc 	.word	0x000bf6cc
   bc1bc:	40240000 	.word	0x40240000

000bc1c0 <_ZN5Print5printEfi>:
{
   bc1c0:	b538      	push	{r3, r4, r5, lr}
   bc1c2:	4604      	mov	r4, r0
   bc1c4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bc1c8:	b2cd      	uxtb	r5, r1
   bc1ca:	f001 f9a7 	bl	bd51c <__aeabi_f2d>
   bc1ce:	ec41 0b10 	vmov	d0, r0, r1
   bc1d2:	4629      	mov	r1, r5
   bc1d4:	4620      	mov	r0, r4
}
   bc1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bc1da:	f7ff bf29 	b.w	bc030 <_ZN5Print10printFloatEdh>

000bc1de <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bc1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc1e2:	b086      	sub	sp, #24
   bc1e4:	af00      	add	r7, sp, #0
   bc1e6:	4605      	mov	r5, r0
   bc1e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bc1ea:	1d38      	adds	r0, r7, #4
   bc1ec:	2114      	movs	r1, #20
{
   bc1ee:	4614      	mov	r4, r2
    va_copy(args2, args);
   bc1f0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bc1f2:	f7fd fe3f 	bl	b9e74 <vsnprintf>

    if (n<bufsize)
   bc1f6:	2813      	cmp	r0, #19
   bc1f8:	d80e      	bhi.n	bc218 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bc1fa:	1d39      	adds	r1, r7, #4
   bc1fc:	4628      	mov	r0, r5
   bc1fe:	f7ff fed7 	bl	bbfb0 <_ZN5Print5writeEPKc>
   bc202:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bc204:	b11e      	cbz	r6, bc20e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bc206:	4628      	mov	r0, r5
   bc208:	f7ff fee7 	bl	bbfda <_ZN5Print7printlnEv>
   bc20c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bc20e:	4620      	mov	r0, r4
   bc210:	3718      	adds	r7, #24
   bc212:	46bd      	mov	sp, r7
   bc214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bc218:	f100 0308 	add.w	r3, r0, #8
   bc21c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bc220:	46e8      	mov	r8, sp
        char bigger[n+1];
   bc222:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bc226:	4622      	mov	r2, r4
   bc228:	1c41      	adds	r1, r0, #1
   bc22a:	683b      	ldr	r3, [r7, #0]
   bc22c:	4668      	mov	r0, sp
   bc22e:	f7fd fe21 	bl	b9e74 <vsnprintf>
  return write(str);
   bc232:	4669      	mov	r1, sp
   bc234:	4628      	mov	r0, r5
   bc236:	f7ff febb 	bl	bbfb0 <_ZN5Print5writeEPKc>
   bc23a:	4604      	mov	r4, r0
   bc23c:	46c5      	mov	sp, r8
   bc23e:	e7e1      	b.n	bc204 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bc240 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bc240:	4b01      	ldr	r3, [pc, #4]	; (bc248 <_GLOBAL__sub_I_RGB+0x8>)
   bc242:	2200      	movs	r2, #0
   bc244:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bc246:	4770      	bx	lr
   bc248:	2003e678 	.word	0x2003e678

000bc24c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bc24c:	b510      	push	{r4, lr}
   bc24e:	4604      	mov	r4, r0
   bc250:	4608      	mov	r0, r1
{
    _spi = spi;
   bc252:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bc254:	f7fd fb62 	bl	b991c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bc258:	2300      	movs	r3, #0
   bc25a:	6063      	str	r3, [r4, #4]
}
   bc25c:	4620      	mov	r0, r4
   bc25e:	bd10      	pop	{r4, pc}

000bc260 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bc260:	b510      	push	{r4, lr}
   bc262:	4604      	mov	r4, r0
{
	free(buffer);
   bc264:	6800      	ldr	r0, [r0, #0]
   bc266:	f7fd fddd 	bl	b9e24 <free>
}
   bc26a:	4620      	mov	r0, r4
   bc26c:	bd10      	pop	{r4, pc}

000bc26e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bc26e:	b510      	push	{r4, lr}
   bc270:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bc272:	6800      	ldr	r0, [r0, #0]
   bc274:	b108      	cbz	r0, bc27a <_ZN6String10invalidateEv+0xc>
   bc276:	f7fd fdd5 	bl	b9e24 <free>
	buffer = NULL;
   bc27a:	2300      	movs	r3, #0
	capacity = len = 0;
   bc27c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bc280:	6023      	str	r3, [r4, #0]
}
   bc282:	bd10      	pop	{r4, pc}

000bc284 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bc284:	b538      	push	{r3, r4, r5, lr}
   bc286:	4604      	mov	r4, r0
   bc288:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bc28a:	6800      	ldr	r0, [r0, #0]
   bc28c:	3101      	adds	r1, #1
   bc28e:	f7fd fdd1 	bl	b9e34 <realloc>
	if (newbuffer) {
   bc292:	b110      	cbz	r0, bc29a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bc294:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bc298:	2001      	movs	r0, #1
	}
	return 0;
}
   bc29a:	bd38      	pop	{r3, r4, r5, pc}

000bc29c <_ZN6String7reserveEj>:
{
   bc29c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bc29e:	6803      	ldr	r3, [r0, #0]
{
   bc2a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bc2a2:	b123      	cbz	r3, bc2ae <_ZN6String7reserveEj+0x12>
   bc2a4:	6843      	ldr	r3, [r0, #4]
   bc2a6:	428b      	cmp	r3, r1
   bc2a8:	d301      	bcc.n	bc2ae <_ZN6String7reserveEj+0x12>
   bc2aa:	2001      	movs	r0, #1
}
   bc2ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bc2ae:	4620      	mov	r0, r4
   bc2b0:	f7ff ffe8 	bl	bc284 <_ZN6String12changeBufferEj>
   bc2b4:	2800      	cmp	r0, #0
   bc2b6:	d0f9      	beq.n	bc2ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bc2b8:	68a3      	ldr	r3, [r4, #8]
   bc2ba:	2b00      	cmp	r3, #0
   bc2bc:	d1f5      	bne.n	bc2aa <_ZN6String7reserveEj+0xe>
   bc2be:	6822      	ldr	r2, [r4, #0]
   bc2c0:	7013      	strb	r3, [r2, #0]
   bc2c2:	e7f2      	b.n	bc2aa <_ZN6String7reserveEj+0xe>

000bc2c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bc2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc2c6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bc2c8:	4611      	mov	r1, r2
   bc2ca:	9201      	str	r2, [sp, #4]
{
   bc2cc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bc2ce:	f7ff ffe5 	bl	bc29c <_ZN6String7reserveEj>
   bc2d2:	9a01      	ldr	r2, [sp, #4]
   bc2d4:	b928      	cbnz	r0, bc2e2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bc2d6:	4620      	mov	r0, r4
   bc2d8:	f7ff ffc9 	bl	bc26e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bc2dc:	4620      	mov	r0, r4
   bc2de:	b003      	add	sp, #12
   bc2e0:	bd30      	pop	{r4, r5, pc}
	len = length;
   bc2e2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bc2e4:	4629      	mov	r1, r5
   bc2e6:	6820      	ldr	r0, [r4, #0]
   bc2e8:	f001 fd0e 	bl	bdd08 <memcpy>
	buffer[len] = 0;
   bc2ec:	6822      	ldr	r2, [r4, #0]
   bc2ee:	68a3      	ldr	r3, [r4, #8]
   bc2f0:	2100      	movs	r1, #0
   bc2f2:	54d1      	strb	r1, [r2, r3]
	return *this;
   bc2f4:	e7f2      	b.n	bc2dc <_ZN6String4copyEPKcj+0x18>

000bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bc2f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bc2f8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bc2fa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bc2fe:	4604      	mov	r4, r0
	len = 0;
   bc300:	6083      	str	r3, [r0, #8]
	flags = 0;
   bc302:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bc304:	b141      	cbz	r1, bc318 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bc306:	4608      	mov	r0, r1
   bc308:	9101      	str	r1, [sp, #4]
   bc30a:	f001 fda2 	bl	bde52 <strlen>
   bc30e:	9901      	ldr	r1, [sp, #4]
   bc310:	4602      	mov	r2, r0
   bc312:	4620      	mov	r0, r4
   bc314:	f7ff ffd6 	bl	bc2c4 <_ZN6String4copyEPKcj>
}
   bc318:	4620      	mov	r0, r4
   bc31a:	b002      	add	sp, #8
   bc31c:	bd10      	pop	{r4, pc}

000bc31e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bc31e:	b538      	push	{r3, r4, r5, lr}
   bc320:	4605      	mov	r5, r0
	if (buffer) {
   bc322:	6800      	ldr	r0, [r0, #0]
{
   bc324:	460c      	mov	r4, r1
	if (buffer) {
   bc326:	b168      	cbz	r0, bc344 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bc328:	686a      	ldr	r2, [r5, #4]
   bc32a:	688b      	ldr	r3, [r1, #8]
   bc32c:	429a      	cmp	r2, r3
   bc32e:	d307      	bcc.n	bc340 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bc330:	6809      	ldr	r1, [r1, #0]
   bc332:	f001 fd68 	bl	bde06 <strcpy>
			len = rhs.len;
   bc336:	68a3      	ldr	r3, [r4, #8]
   bc338:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bc33a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bc33c:	60a3      	str	r3, [r4, #8]
}
   bc33e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bc340:	f7fd fd70 	bl	b9e24 <free>
	buffer = rhs.buffer;
   bc344:	6823      	ldr	r3, [r4, #0]
   bc346:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bc348:	6863      	ldr	r3, [r4, #4]
   bc34a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bc34c:	68a3      	ldr	r3, [r4, #8]
   bc34e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bc350:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bc352:	e9c4 3300 	strd	r3, r3, [r4]
   bc356:	e7f1      	b.n	bc33c <_ZN6String4moveERS_+0x1e>

000bc358 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bc358:	b510      	push	{r4, lr}
	buffer = NULL;
   bc35a:	2300      	movs	r3, #0
	capacity = 0;
   bc35c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bc360:	4604      	mov	r4, r0
	len = 0;
   bc362:	6083      	str	r3, [r0, #8]
	flags = 0;
   bc364:	7303      	strb	r3, [r0, #12]
	move(rval);
   bc366:	f7ff ffda 	bl	bc31e <_ZN6String4moveERS_>
}
   bc36a:	4620      	mov	r0, r4
   bc36c:	bd10      	pop	{r4, pc}

000bc36e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bc36e:	4288      	cmp	r0, r1
{
   bc370:	b510      	push	{r4, lr}
   bc372:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bc374:	d005      	beq.n	bc382 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bc376:	680b      	ldr	r3, [r1, #0]
   bc378:	b12b      	cbz	r3, bc386 <_ZN6StringaSERKS_+0x18>
   bc37a:	688a      	ldr	r2, [r1, #8]
   bc37c:	4619      	mov	r1, r3
   bc37e:	f7ff ffa1 	bl	bc2c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bc382:	4620      	mov	r0, r4
   bc384:	bd10      	pop	{r4, pc}
	else invalidate();
   bc386:	f7ff ff72 	bl	bc26e <_ZN6String10invalidateEv>
   bc38a:	e7fa      	b.n	bc382 <_ZN6StringaSERKS_+0x14>

000bc38c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bc38c:	b510      	push	{r4, lr}
	buffer = NULL;
   bc38e:	2300      	movs	r3, #0
String::String(const String &value)
   bc390:	4604      	mov	r4, r0
	capacity = 0;
   bc392:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bc396:	6083      	str	r3, [r0, #8]
	flags = 0;
   bc398:	7303      	strb	r3, [r0, #12]
	*this = value;
   bc39a:	f7ff ffe8 	bl	bc36e <_ZN6StringaSERKS_>
}
   bc39e:	4620      	mov	r0, r4
   bc3a0:	bd10      	pop	{r4, pc}

000bc3a2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bc3a2:	4288      	cmp	r0, r1
{
   bc3a4:	b510      	push	{r4, lr}
   bc3a6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bc3a8:	d001      	beq.n	bc3ae <_ZN6StringaSEOS_+0xc>
   bc3aa:	f7ff ffb8 	bl	bc31e <_ZN6String4moveERS_>
	return *this;
}
   bc3ae:	4620      	mov	r0, r4
   bc3b0:	bd10      	pop	{r4, pc}

000bc3b2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bc3b2:	b513      	push	{r0, r1, r4, lr}
   bc3b4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bc3b6:	b159      	cbz	r1, bc3d0 <_ZN6StringaSEPKc+0x1e>
   bc3b8:	4608      	mov	r0, r1
   bc3ba:	9101      	str	r1, [sp, #4]
   bc3bc:	f001 fd49 	bl	bde52 <strlen>
   bc3c0:	9901      	ldr	r1, [sp, #4]
   bc3c2:	4602      	mov	r2, r0
   bc3c4:	4620      	mov	r0, r4
   bc3c6:	f7ff ff7d 	bl	bc2c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bc3ca:	4620      	mov	r0, r4
   bc3cc:	b002      	add	sp, #8
   bc3ce:	bd10      	pop	{r4, pc}
	else invalidate();
   bc3d0:	f7ff ff4d 	bl	bc26e <_ZN6String10invalidateEv>
   bc3d4:	e7f9      	b.n	bc3ca <_ZN6StringaSEPKc+0x18>

000bc3d6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bc3d6:	b570      	push	{r4, r5, r6, lr}
   bc3d8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bc3da:	460e      	mov	r6, r1
   bc3dc:	b909      	cbnz	r1, bc3e2 <_ZN6String6concatEPKcj+0xc>
   bc3de:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bc3e0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bc3e2:	b16a      	cbz	r2, bc400 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bc3e4:	6884      	ldr	r4, [r0, #8]
   bc3e6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bc3e8:	4621      	mov	r1, r4
   bc3ea:	f7ff ff57 	bl	bc29c <_ZN6String7reserveEj>
   bc3ee:	2800      	cmp	r0, #0
   bc3f0:	d0f5      	beq.n	bc3de <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bc3f2:	6828      	ldr	r0, [r5, #0]
   bc3f4:	68ab      	ldr	r3, [r5, #8]
   bc3f6:	4631      	mov	r1, r6
   bc3f8:	4418      	add	r0, r3
   bc3fa:	f001 fd04 	bl	bde06 <strcpy>
	len = newlen;
   bc3fe:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bc400:	2001      	movs	r0, #1
   bc402:	e7ed      	b.n	bc3e0 <_ZN6String6concatEPKcj+0xa>

000bc404 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bc404:	b513      	push	{r0, r1, r4, lr}
   bc406:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bc408:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bc40a:	b151      	cbz	r1, bc422 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bc40c:	9101      	str	r1, [sp, #4]
   bc40e:	f001 fd20 	bl	bde52 <strlen>
   bc412:	9901      	ldr	r1, [sp, #4]
   bc414:	4602      	mov	r2, r0
   bc416:	4620      	mov	r0, r4
}
   bc418:	b002      	add	sp, #8
   bc41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bc41e:	f7ff bfda 	b.w	bc3d6 <_ZN6String6concatEPKcj>
}
   bc422:	b002      	add	sp, #8
   bc424:	bd10      	pop	{r4, pc}

000bc426 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bc426:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bc428:	2300      	movs	r3, #0
	buf[0] = c;
   bc42a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bc42e:	2201      	movs	r2, #1
   bc430:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bc432:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bc436:	f7ff ffce 	bl	bc3d6 <_ZN6String6concatEPKcj>
}
   bc43a:	b003      	add	sp, #12
   bc43c:	f85d fb04 	ldr.w	pc, [sp], #4

000bc440 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bc440:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bc442:	688a      	ldr	r2, [r1, #8]
   bc444:	6809      	ldr	r1, [r1, #0]
{
   bc446:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bc448:	f7ff ffc5 	bl	bc3d6 <_ZN6String6concatEPKcj>
   bc44c:	b910      	cbnz	r0, bc454 <_ZplRK15StringSumHelperRK6String+0x14>
   bc44e:	4620      	mov	r0, r4
   bc450:	f7ff ff0d 	bl	bc26e <_ZN6String10invalidateEv>
	return a;
}
   bc454:	4620      	mov	r0, r4
   bc456:	bd10      	pop	{r4, pc}

000bc458 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bc458:	b513      	push	{r0, r1, r4, lr}
   bc45a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bc45c:	b929      	cbnz	r1, bc46a <_ZplRK15StringSumHelperPKc+0x12>
   bc45e:	4620      	mov	r0, r4
   bc460:	f7ff ff05 	bl	bc26e <_ZN6String10invalidateEv>
	return a;
}
   bc464:	4620      	mov	r0, r4
   bc466:	b002      	add	sp, #8
   bc468:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bc46a:	4608      	mov	r0, r1
   bc46c:	9101      	str	r1, [sp, #4]
   bc46e:	f001 fcf0 	bl	bde52 <strlen>
   bc472:	9901      	ldr	r1, [sp, #4]
   bc474:	4602      	mov	r2, r0
   bc476:	4620      	mov	r0, r4
   bc478:	f7ff ffad 	bl	bc3d6 <_ZN6String6concatEPKcj>
   bc47c:	2800      	cmp	r0, #0
   bc47e:	d0ee      	beq.n	bc45e <_ZplRK15StringSumHelperPKc+0x6>
   bc480:	e7f0      	b.n	bc464 <_ZplRK15StringSumHelperPKc+0xc>

000bc482 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bc482:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bc484:	6882      	ldr	r2, [r0, #8]
   bc486:	b93a      	cbnz	r2, bc498 <_ZNK6String6equalsEPKc+0x16>
   bc488:	b121      	cbz	r1, bc494 <_ZNK6String6equalsEPKc+0x12>
   bc48a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bc48c:	fab0 f080 	clz	r0, r0
   bc490:	0940      	lsrs	r0, r0, #5
   bc492:	e000      	b.n	bc496 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bc494:	2001      	movs	r0, #1
}
   bc496:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bc498:	6800      	ldr	r0, [r0, #0]
   bc49a:	b909      	cbnz	r1, bc4a0 <_ZNK6String6equalsEPKc+0x1e>
   bc49c:	7800      	ldrb	r0, [r0, #0]
   bc49e:	e7f5      	b.n	bc48c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bc4a0:	f001 fca7 	bl	bddf2 <strcmp>
   bc4a4:	e7f2      	b.n	bc48c <_ZNK6String6equalsEPKc+0xa>

000bc4a6 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bc4a6:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bc4a8:	6883      	ldr	r3, [r0, #8]
   bc4aa:	688a      	ldr	r2, [r1, #8]
   bc4ac:	4293      	cmp	r3, r2
   bc4ae:	d30b      	bcc.n	bc4c8 <_ZNK6String8endsWithERKS_+0x22>
   bc4b0:	6800      	ldr	r0, [r0, #0]
   bc4b2:	b140      	cbz	r0, bc4c6 <_ZNK6String8endsWithERKS_+0x20>
   bc4b4:	6809      	ldr	r1, [r1, #0]
   bc4b6:	b149      	cbz	r1, bc4cc <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bc4b8:	1a9b      	subs	r3, r3, r2
   bc4ba:	4418      	add	r0, r3
   bc4bc:	f001 fc99 	bl	bddf2 <strcmp>
   bc4c0:	fab0 f080 	clz	r0, r0
   bc4c4:	0940      	lsrs	r0, r0, #5
}
   bc4c6:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bc4c8:	2000      	movs	r0, #0
   bc4ca:	e7fc      	b.n	bc4c6 <_ZNK6String8endsWithERKS_+0x20>
   bc4cc:	4608      	mov	r0, r1
   bc4ce:	e7fa      	b.n	bc4c6 <_ZNK6String8endsWithERKS_+0x20>

000bc4d0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bc4d0:	b558      	push	{r3, r4, r6, lr}
   bc4d2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bc4d4:	b12a      	cbz	r2, bc4e2 <_ZNK6String8getBytesEPhjj+0x12>
   bc4d6:	b121      	cbz	r1, bc4e2 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bc4d8:	6884      	ldr	r4, [r0, #8]
   bc4da:	42a3      	cmp	r3, r4
   bc4dc:	d302      	bcc.n	bc4e4 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bc4de:	2300      	movs	r3, #0
   bc4e0:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bc4e2:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bc4e4:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bc4e6:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bc4e8:	6801      	ldr	r1, [r0, #0]
   bc4ea:	4294      	cmp	r4, r2
   bc4ec:	bf28      	it	cs
   bc4ee:	4614      	movcs	r4, r2
   bc4f0:	4419      	add	r1, r3
   bc4f2:	4622      	mov	r2, r4
   bc4f4:	4630      	mov	r0, r6
   bc4f6:	f001 fcc8 	bl	bde8a <strncpy>
	buf[n] = 0;
   bc4fa:	2300      	movs	r3, #0
   bc4fc:	5533      	strb	r3, [r6, r4]
   bc4fe:	e7f0      	b.n	bc4e2 <_ZNK6String8getBytesEPhjj+0x12>

000bc500 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bc500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bc502:	429a      	cmp	r2, r3
{
   bc504:	460f      	mov	r7, r1
   bc506:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bc508:	490c      	ldr	r1, [pc, #48]	; (bc53c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bc50a:	bf88      	it	hi
   bc50c:	4613      	movhi	r3, r2
{
   bc50e:	4614      	mov	r4, r2
   bc510:	4606      	mov	r6, r0
	if (left > right) {
   bc512:	bf84      	itt	hi
   bc514:	462c      	movhi	r4, r5
   bc516:	461d      	movhi	r5, r3
	String out;
   bc518:	f7ff feed 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bc51c:	68bb      	ldr	r3, [r7, #8]
   bc51e:	42a3      	cmp	r3, r4
   bc520:	d30a      	bcc.n	bc538 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bc522:	6839      	ldr	r1, [r7, #0]
   bc524:	42ab      	cmp	r3, r5
   bc526:	bf94      	ite	ls
   bc528:	ebc4 0203 	rsbls	r2, r4, r3
   bc52c:	ebc4 0205 	rsbhi	r2, r4, r5
   bc530:	4421      	add	r1, r4
   bc532:	4630      	mov	r0, r6
   bc534:	f7ff fec6 	bl	bc2c4 <_ZN6String4copyEPKcj>
	return out;
}
   bc538:	4630      	mov	r0, r6
   bc53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc53c:	000bf5cd 	.word	0x000bf5cd

000bc540 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bc540:	b40e      	push	{r1, r2, r3}
   bc542:	b570      	push	{r4, r5, r6, lr}
   bc544:	b087      	sub	sp, #28
   bc546:	ad0b      	add	r5, sp, #44	; 0x2c
   bc548:	4604      	mov	r4, r0
   bc54a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bc54e:	9201      	str	r2, [sp, #4]
   bc550:	462b      	mov	r3, r5
   bc552:	2105      	movs	r1, #5
   bc554:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bc556:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bc558:	f7fd fc8c 	bl	b9e74 <vsnprintf>
    va_end(marker);

    String result;
   bc55c:	490b      	ldr	r1, [pc, #44]	; (bc58c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bc55e:	4606      	mov	r6, r0
    String result;
   bc560:	4620      	mov	r0, r4
   bc562:	f7ff fec8 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bc566:	4631      	mov	r1, r6
   bc568:	4620      	mov	r0, r4
   bc56a:	f7ff fe97 	bl	bc29c <_ZN6String7reserveEj>
    if (result.buffer) {
   bc56e:	6820      	ldr	r0, [r4, #0]
   bc570:	b130      	cbz	r0, bc580 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bc572:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bc574:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bc576:	462b      	mov	r3, r5
   bc578:	1c71      	adds	r1, r6, #1
   bc57a:	f7fd fc7b 	bl	b9e74 <vsnprintf>
        va_end(marker);
        result.len = n;
   bc57e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bc580:	4620      	mov	r0, r4
   bc582:	b007      	add	sp, #28
   bc584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bc588:	b003      	add	sp, #12
   bc58a:	4770      	bx	lr
   bc58c:	000bf5cd 	.word	0x000bf5cd

000bc590 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bc590:	b510      	push	{r4, lr}
   bc592:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bc594:	6800      	ldr	r0, [r0, #0]
   bc596:	b118      	cbz	r0, bc5a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bc598:	f7fd fc44 	bl	b9e24 <free>
            wakeupSource_ = nullptr;
   bc59c:	2300      	movs	r3, #0
   bc59e:	6023      	str	r3, [r4, #0]
        }
    }
   bc5a0:	bd10      	pop	{r4, pc}

000bc5a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bc5a2:	b538      	push	{r3, r4, r5, lr}
   bc5a4:	460c      	mov	r4, r1
   bc5a6:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bc5a8:	f7ff fff2 	bl	bc590 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bc5ac:	b154      	cbz	r4, bc5c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bc5ae:	8820      	ldrh	r0, [r4, #0]
   bc5b0:	f7fd fc30 	bl	b9e14 <malloc>
   bc5b4:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bc5b6:	b128      	cbz	r0, bc5c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bc5b8:	8822      	ldrh	r2, [r4, #0]
   bc5ba:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bc5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bc5c0:	f001 bba2 	b.w	bdd08 <memcpy>
    }
   bc5c4:	bd38      	pop	{r3, r4, r5, pc}

000bc5c6 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bc5c6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bc5c8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bc5cc:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bc5ce:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bc5d2:	f8c0 3006 	str.w	r3, [r0, #6]
   bc5d6:	894b      	ldrh	r3, [r1, #10]
   bc5d8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bc5da:	460c      	mov	r4, r1
   bc5dc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bc5de:	f7ff ffd7 	bl	bc590 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bc5e2:	6823      	ldr	r3, [r4, #0]
   bc5e4:	b113      	cbz	r3, bc5ec <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bc5e6:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bc5e8:	2300      	movs	r3, #0
   bc5ea:	6023      	str	r3, [r4, #0]
    }
   bc5ec:	bd38      	pop	{r3, r4, r5, pc}

000bc5ee <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bc5ee:	b507      	push	{r0, r1, r2, lr}
   bc5f0:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bc5f2:	2100      	movs	r1, #0
{
   bc5f4:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bc5f6:	9100      	str	r1, [sp, #0]
   bc5f8:	2001      	movs	r0, #1
   bc5fa:	218c      	movs	r1, #140	; 0x8c
   bc5fc:	f7fd fb48 	bl	b9c90 <system_reset>
}
   bc600:	b003      	add	sp, #12
   bc602:	f85d fb04 	ldr.w	pc, [sp], #4

000bc606 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bc606:	4601      	mov	r1, r0
    reset(0, flags);
   bc608:	2000      	movs	r0, #0
   bc60a:	f7ff bff0 	b.w	bc5ee <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bc60e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bc60e:	2000      	movs	r0, #0
   bc610:	f7ff bff9 	b.w	bc606 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bc614 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bc614:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc616:	4d2b      	ldr	r5, [pc, #172]	; (bc6c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bc618:	7d0b      	ldrb	r3, [r1, #20]
   bc61a:	4604      	mov	r4, r0
   bc61c:	b08b      	sub	sp, #44	; 0x2c
   bc61e:	4608      	mov	r0, r1
   bc620:	1daf      	adds	r7, r5, #6
   bc622:	2b00      	cmp	r3, #0
   bc624:	d036      	beq.n	bc694 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bc626:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bc628:	791b      	ldrb	r3, [r3, #4]
   bc62a:	2b00      	cmp	r3, #0
   bc62c:	d032      	beq.n	bc694 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bc62e:	4b26      	ldr	r3, [pc, #152]	; (bc6c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bc630:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bc632:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bc634:	a902      	add	r1, sp, #8
   bc636:	3004      	adds	r0, #4
   bc638:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bc63c:	f7fd fb1e 	bl	b9c7c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bc640:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bc644:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bc648:	b200      	sxth	r0, r0
   bc64a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bc64e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bc652:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bc654:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bc656:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bc658:	4628      	mov	r0, r5
   bc65a:	f7ff ffa2 	bl	bc5a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bc65e:	a802      	add	r0, sp, #8
   bc660:	f7ff ff96 	bl	bc590 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bc664:	2300      	movs	r3, #0
   bc666:	6023      	str	r3, [r4, #0]
   bc668:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bc66a:	71a3      	strb	r3, [r4, #6]
   bc66c:	8123      	strh	r3, [r4, #8]
   bc66e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bc672:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bc674:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bc678:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bc67a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bc67e:	f8c4 3006 	str.w	r3, [r4, #6]
   bc682:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bc684:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bc686:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bc688:	4620      	mov	r0, r4
   bc68a:	f7ff ff8a 	bl	bc5a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bc68e:	4620      	mov	r0, r4
   bc690:	b00b      	add	sp, #44	; 0x2c
   bc692:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bc694:	2600      	movs	r6, #0
   bc696:	2320      	movs	r3, #32
   bc698:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bc69c:	4b0b      	ldr	r3, [pc, #44]	; (bc6cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bc69e:	9300      	str	r3, [sp, #0]
   bc6a0:	aa02      	add	r2, sp, #8
   bc6a2:	4633      	mov	r3, r6
   bc6a4:	490a      	ldr	r1, [pc, #40]	; (bc6d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bc6a6:	2032      	movs	r0, #50	; 0x32
   bc6a8:	f7fd fa48 	bl	b9b3c <log_message>
            : wakeupSource_(nullptr),
   bc6ac:	4b06      	ldr	r3, [pc, #24]	; (bc6c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bc6ae:	4805      	ldr	r0, [pc, #20]	; (bc6c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bc6b0:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bc6b2:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bc6b6:	a902      	add	r1, sp, #8
   bc6b8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bc6bc:	f7ff ff83 	bl	bc5c6 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bc6c0:	e7cd      	b.n	bc65e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bc6c2:	bf00      	nop
   bc6c4:	2003e688 	.word	0x2003e688
   bc6c8:	ffff0000 	.word	0xffff0000
   bc6cc:	000bf6a7 	.word	0x000bf6a7
   bc6d0:	000bf6a0 	.word	0x000bf6a0

000bc6d4 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bc6d4:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bc6d6:	2420      	movs	r4, #32
{
   bc6d8:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bc6da:	4622      	mov	r2, r4
   bc6dc:	2100      	movs	r1, #0
   bc6de:	4668      	mov	r0, sp
   bc6e0:	f001 fb3a 	bl	bdd58 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bc6e4:	2100      	movs	r1, #0
   bc6e6:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bc6e8:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bc6ec:	f7fd f806 	bl	b96fc <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bc6f0:	9801      	ldr	r0, [sp, #4]
   bc6f2:	b008      	add	sp, #32
   bc6f4:	bd10      	pop	{r4, pc}
	...

000bc6f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bc6f8:	4b05      	ldr	r3, [pc, #20]	; (bc710 <_GLOBAL__sub_I_System+0x18>)
   bc6fa:	2202      	movs	r2, #2
   bc6fc:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bc6fe:	4b05      	ldr	r3, [pc, #20]	; (bc714 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bc700:	4a05      	ldr	r2, [pc, #20]	; (bc718 <_GLOBAL__sub_I_System+0x20>)
   bc702:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bc704:	2000      	movs	r0, #0
   bc706:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bc70a:	f7fd ba59 	b.w	b9bc0 <set_system_mode>
   bc70e:	bf00      	nop
   bc710:	2003e694 	.word	0x2003e694
   bc714:	2003e688 	.word	0x2003e688
   bc718:	ffff0000 	.word	0xffff0000

000bc71c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bc71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bc720:	4a15      	ldr	r2, [pc, #84]	; (bc778 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bc722:	f8df 8060 	ldr.w	r8, [pc, #96]	; bc784 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bc726:	e9d2 6300 	ldrd	r6, r3, [r2]
   bc72a:	1980      	adds	r0, r0, r6
   bc72c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bc730:	4b12      	ldr	r3, [pc, #72]	; (bc77c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bc732:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bc736:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bc73a:	1986      	adds	r6, r0, r6
   bc73c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bc740:	42bb      	cmp	r3, r7
   bc742:	bf08      	it	eq
   bc744:	42b2      	cmpeq	r2, r6
{
   bc746:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bc748:	d013      	beq.n	bc772 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bc74a:	a903      	add	r1, sp, #12
   bc74c:	4668      	mov	r0, sp
   bc74e:	e9cd 6700 	strd	r6, r7, [sp]
   bc752:	f7fd fbc7 	bl	b9ee4 <localtime_r>
	calendar_time.tm_year += 1900;
   bc756:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc758:	4d09      	ldr	r5, [pc, #36]	; (bc780 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bc75a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc75e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bc760:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bc764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bc766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bc768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bc76a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc76e:	6823      	ldr	r3, [r4, #0]
   bc770:	602b      	str	r3, [r5, #0]
    }
}
   bc772:	b00c      	add	sp, #48	; 0x30
   bc774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc778:	2003e6d0 	.word	0x2003e6d0
   bc77c:	2003e6c8 	.word	0x2003e6c8
   bc780:	2003e6a0 	.word	0x2003e6a0
   bc784:	2003e6d8 	.word	0x2003e6d8

000bc788 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bc788:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bc78a:	2000      	movs	r0, #0
   bc78c:	f7fd fac2 	bl	b9d14 <spark_sync_time_pending>
   bc790:	b128      	cbz	r0, bc79e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc792:	f7fd fa9f 	bl	b9cd4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bc796:	f080 0001 	eor.w	r0, r0, #1
   bc79a:	b2c0      	uxtb	r0, r0
    }
   bc79c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bc79e:	2001      	movs	r0, #1
   bc7a0:	e7fc      	b.n	bc79c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bc7a4 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bc7a4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bc7a6:	f7ff ffb9 	bl	bc71c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bc7aa:	4b01      	ldr	r3, [pc, #4]	; (bc7b0 <_ZN9TimeClass4hourEx+0xc>)
   bc7ac:	6898      	ldr	r0, [r3, #8]
   bc7ae:	bd08      	pop	{r3, pc}
   bc7b0:	2003e6a0 	.word	0x2003e6a0

000bc7b4 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bc7b4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bc7b6:	f7ff ffb1 	bl	bc71c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bc7ba:	4b01      	ldr	r3, [pc, #4]	; (bc7c0 <_ZN9TimeClass3dayEx+0xc>)
   bc7bc:	68d8      	ldr	r0, [r3, #12]
   bc7be:	bd08      	pop	{r3, pc}
   bc7c0:	2003e6a0 	.word	0x2003e6a0

000bc7c4 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bc7c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bc7c6:	4602      	mov	r2, r0
   bc7c8:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bc7ca:	4668      	mov	r0, sp
    struct timeval tv = {
   bc7cc:	2100      	movs	r1, #0
    };
   bc7ce:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bc7d2:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bc7d6:	f7fc ffd9 	bl	b978c <hal_rtc_set_time>
   bc7da:	4602      	mov	r2, r0
   bc7dc:	b910      	cbnz	r0, bc7e4 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bc7de:	4601      	mov	r1, r0
   bc7e0:	f7fd fa26 	bl	b9c30 <system_notify_time_changed>
    }
}
   bc7e4:	b005      	add	sp, #20
   bc7e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bc7ec <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bc7ec:	b530      	push	{r4, r5, lr}
   bc7ee:	b093      	sub	sp, #76	; 0x4c
   bc7f0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bc7f4:	4b19      	ldr	r3, [pc, #100]	; (bc85c <_ZN9TimeClass7timeStrEx+0x70>)
{
   bc7f6:	4604      	mov	r4, r0
    t += time_zone_cache;
   bc7f8:	e9d3 1000 	ldrd	r1, r0, [r3]
   bc7fc:	9b01      	ldr	r3, [sp, #4]
   bc7fe:	1852      	adds	r2, r2, r1
   bc800:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bc804:	4816      	ldr	r0, [pc, #88]	; (bc860 <_ZN9TimeClass7timeStrEx+0x74>)
   bc806:	e9d0 1000 	ldrd	r1, r0, [r0]
   bc80a:	1852      	adds	r2, r2, r1
   bc80c:	eb43 0300 	adc.w	r3, r3, r0
   bc810:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bc814:	2224      	movs	r2, #36	; 0x24
   bc816:	eb0d 0002 	add.w	r0, sp, r2
   bc81a:	2100      	movs	r1, #0
   bc81c:	f001 fa9c 	bl	bdd58 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bc820:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bc822:	a909      	add	r1, sp, #36	; 0x24
   bc824:	4668      	mov	r0, sp
   bc826:	f7fd fb5d 	bl	b9ee4 <localtime_r>
    char ascstr[26] = {};
   bc82a:	2216      	movs	r2, #22
   bc82c:	4629      	mov	r1, r5
   bc82e:	a803      	add	r0, sp, #12
   bc830:	9502      	str	r5, [sp, #8]
   bc832:	f001 fa91 	bl	bdd58 <memset>
    asctime_r(&calendar_time, ascstr);
   bc836:	a902      	add	r1, sp, #8
   bc838:	a809      	add	r0, sp, #36	; 0x24
   bc83a:	f001 fa0f 	bl	bdc5c <asctime_r>
    int len = strlen(ascstr);
   bc83e:	a802      	add	r0, sp, #8
   bc840:	f001 fb07 	bl	bde52 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bc844:	ab12      	add	r3, sp, #72	; 0x48
   bc846:	4418      	add	r0, r3
    return String(ascstr);
   bc848:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bc84a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bc84e:	4620      	mov	r0, r4
   bc850:	f7ff fd51 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bc854:	4620      	mov	r0, r4
   bc856:	b013      	add	sp, #76	; 0x4c
   bc858:	bd30      	pop	{r4, r5, pc}
   bc85a:	bf00      	nop
   bc85c:	2003e6d0 	.word	0x2003e6d0
   bc860:	2003e6c8 	.word	0x2003e6c8

000bc864 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bc864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc868:	b0a4      	sub	sp, #144	; 0x90
   bc86a:	4607      	mov	r7, r0
   bc86c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bc86e:	a814      	add	r0, sp, #80	; 0x50
{
   bc870:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bc872:	223f      	movs	r2, #63	; 0x3f
{
   bc874:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bc876:	f001 fb08 	bl	bde8a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bc87a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bc87c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bc87e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bc882:	f001 fae6 	bl	bde52 <strlen>
   bc886:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bc888:	bb4c      	cbnz	r4, bc8de <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bc88a:	4929      	ldr	r1, [pc, #164]	; (bc930 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bc88c:	a803      	add	r0, sp, #12
   bc88e:	f001 faba 	bl	bde06 <strcpy>
   bc892:	ac14      	add	r4, sp, #80	; 0x50
{
   bc894:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bc896:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bc89a:	45b1      	cmp	r9, r6
   bc89c:	d934      	bls.n	bc908 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bc89e:	7823      	ldrb	r3, [r4, #0]
   bc8a0:	2b25      	cmp	r3, #37	; 0x25
   bc8a2:	f106 0a01 	add.w	sl, r6, #1
   bc8a6:	d117      	bne.n	bc8d8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bc8a8:	7863      	ldrb	r3, [r4, #1]
   bc8aa:	2b7a      	cmp	r3, #122	; 0x7a
   bc8ac:	d114      	bne.n	bc8d8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bc8ae:	a803      	add	r0, sp, #12
   bc8b0:	f001 facf 	bl	bde52 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bc8b4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bc8b6:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bc8b8:	1830      	adds	r0, r6, r0
   bc8ba:	4418      	add	r0, r3
   bc8bc:	eba9 0206 	sub.w	r2, r9, r6
   bc8c0:	1ca1      	adds	r1, r4, #2
   bc8c2:	f001 fa21 	bl	bdd08 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bc8c6:	462a      	mov	r2, r5
   bc8c8:	a903      	add	r1, sp, #12
   bc8ca:	4620      	mov	r0, r4
   bc8cc:	f001 fa1c 	bl	bdd08 <memcpy>
            len = strlen(format_str);
   bc8d0:	a814      	add	r0, sp, #80	; 0x50
   bc8d2:	f001 fabe 	bl	bde52 <strlen>
   bc8d6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bc8d8:	3401      	adds	r4, #1
   bc8da:	4656      	mov	r6, sl
   bc8dc:	e7db      	b.n	bc896 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bc8de:	233c      	movs	r3, #60	; 0x3c
   bc8e0:	fb94 f2f3 	sdiv	r2, r4, r3
   bc8e4:	2a00      	cmp	r2, #0
   bc8e6:	bfb8      	it	lt
   bc8e8:	4252      	neglt	r2, r2
   bc8ea:	fbb2 f1f3 	udiv	r1, r2, r3
   bc8ee:	fb03 2211 	mls	r2, r3, r1, r2
   bc8f2:	9200      	str	r2, [sp, #0]
   bc8f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bc8f8:	4a0e      	ldr	r2, [pc, #56]	; (bc934 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bc8fa:	fb94 f3f3 	sdiv	r3, r4, r3
   bc8fe:	2110      	movs	r1, #16
   bc900:	a803      	add	r0, sp, #12
   bc902:	f7fd faaf 	bl	b9e64 <snprintf>
   bc906:	e7c4      	b.n	bc892 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bc908:	2100      	movs	r1, #0
   bc90a:	222e      	movs	r2, #46	; 0x2e
   bc90c:	a808      	add	r0, sp, #32
   bc90e:	9107      	str	r1, [sp, #28]
   bc910:	f001 fa22 	bl	bdd58 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bc914:	4643      	mov	r3, r8
   bc916:	aa14      	add	r2, sp, #80	; 0x50
   bc918:	2132      	movs	r1, #50	; 0x32
   bc91a:	a807      	add	r0, sp, #28
   bc91c:	f7fd fada 	bl	b9ed4 <strftime>
    return String(buf);
   bc920:	a907      	add	r1, sp, #28
   bc922:	4638      	mov	r0, r7
   bc924:	f7ff fce7 	bl	bc2f6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bc928:	4638      	mov	r0, r7
   bc92a:	b024      	add	sp, #144	; 0x90
   bc92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc930:	000bf6ce 	.word	0x000bf6ce
   bc934:	000bf6d0 	.word	0x000bf6d0

000bc938 <_ZN9TimeClass6formatExPKc>:
{
   bc938:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc93a:	b08d      	sub	sp, #52	; 0x34
   bc93c:	e9cd 2300 	strd	r2, r3, [sp]
   bc940:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bc942:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bc944:	b915      	cbnz	r5, bc94c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bc946:	4b19      	ldr	r3, [pc, #100]	; (bc9ac <_ZN9TimeClass6formatExPKc+0x74>)
   bc948:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bc94a:	b12d      	cbz	r5, bc958 <_ZN9TimeClass6formatExPKc+0x20>
   bc94c:	4b18      	ldr	r3, [pc, #96]	; (bc9b0 <_ZN9TimeClass6formatExPKc+0x78>)
   bc94e:	4628      	mov	r0, r5
   bc950:	6819      	ldr	r1, [r3, #0]
   bc952:	f001 fa4e 	bl	bddf2 <strcmp>
   bc956:	b938      	cbnz	r0, bc968 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bc958:	e9dd 2300 	ldrd	r2, r3, [sp]
   bc95c:	4620      	mov	r0, r4
   bc95e:	f7ff ff45 	bl	bc7ec <_ZN9TimeClass7timeStrEx>
}
   bc962:	4620      	mov	r0, r4
   bc964:	b00d      	add	sp, #52	; 0x34
   bc966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bc968:	4e12      	ldr	r6, [pc, #72]	; (bc9b4 <_ZN9TimeClass6formatExPKc+0x7c>)
   bc96a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bc96c:	4f12      	ldr	r7, [pc, #72]	; (bc9b8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bc96e:	e9d6 3200 	ldrd	r3, r2, [r6]
   bc972:	185b      	adds	r3, r3, r1
   bc974:	9901      	ldr	r1, [sp, #4]
   bc976:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bc97a:	e9d7 0100 	ldrd	r0, r1, [r7]
   bc97e:	181b      	adds	r3, r3, r0
   bc980:	eb42 0201 	adc.w	r2, r2, r1
   bc984:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bc988:	2100      	movs	r1, #0
   bc98a:	2224      	movs	r2, #36	; 0x24
   bc98c:	a803      	add	r0, sp, #12
   bc98e:	f001 f9e3 	bl	bdd58 <memset>
    localtime_r(&t, &calendar_time);
   bc992:	a903      	add	r1, sp, #12
   bc994:	4668      	mov	r0, sp
   bc996:	f7fd faa5 	bl	b9ee4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bc99a:	6832      	ldr	r2, [r6, #0]
   bc99c:	683b      	ldr	r3, [r7, #0]
   bc99e:	a903      	add	r1, sp, #12
   bc9a0:	4413      	add	r3, r2
   bc9a2:	4620      	mov	r0, r4
   bc9a4:	462a      	mov	r2, r5
   bc9a6:	f7ff ff5d 	bl	bc864 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bc9aa:	e7da      	b.n	bc962 <_ZN9TimeClass6formatExPKc+0x2a>
   bc9ac:	2003e69c 	.word	0x2003e69c
   bc9b0:	2003e3e0 	.word	0x2003e3e0
   bc9b4:	2003e6d0 	.word	0x2003e6d0
   bc9b8:	2003e6c8 	.word	0x2003e6c8

000bc9bc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bc9bc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bc9be:	2000      	movs	r0, #0
   bc9c0:	f7fc fecc 	bl	b975c <hal_rtc_time_is_valid>
    if (rtcstate)
   bc9c4:	4604      	mov	r4, r0
   bc9c6:	b9a0      	cbnz	r0, bc9f2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bc9c8:	f7fd f8f2 	bl	b9bb0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bc9cc:	2801      	cmp	r0, #1
   bc9ce:	d110      	bne.n	bc9f2 <_ZN9TimeClass7isValidEv+0x36>
   bc9d0:	4620      	mov	r0, r4
   bc9d2:	f7fd f925 	bl	b9c20 <system_thread_get_state>
   bc9d6:	b960      	cbnz	r0, bc9f2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bc9d8:	f7ff fed6 	bl	bc788 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bc9dc:	b910      	cbnz	r0, bc9e4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bc9de:	f7fd f969 	bl	b9cb4 <spark_process>
        while (_while() && !_condition()) {
   bc9e2:	e7f9      	b.n	bc9d8 <_ZN9TimeClass7isValidEv+0x1c>
   bc9e4:	f7ff fed0 	bl	bc788 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bc9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bc9ec:	2000      	movs	r0, #0
   bc9ee:	f7fc beb5 	b.w	b975c <hal_rtc_time_is_valid>
}
   bc9f2:	4620      	mov	r0, r4
   bc9f4:	bd10      	pop	{r4, pc}

000bc9f6 <_ZN9TimeClass3nowEv>:
{
   bc9f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bc9f8:	f7ff ffe0 	bl	bc9bc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bc9fc:	2210      	movs	r2, #16
   bc9fe:	2100      	movs	r1, #0
   bca00:	4668      	mov	r0, sp
   bca02:	f001 f9a9 	bl	bdd58 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bca06:	2100      	movs	r1, #0
   bca08:	4668      	mov	r0, sp
   bca0a:	f7fc feb7 	bl	b977c <hal_rtc_get_time>
}
   bca0e:	9800      	ldr	r0, [sp, #0]
   bca10:	b005      	add	sp, #20
   bca12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bca18 <_ZN9TimeClass4hourEv>:
{
   bca18:	b508      	push	{r3, lr}
	return hour(now());
   bca1a:	f7ff ffec 	bl	bc9f6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bca1e:	17c1      	asrs	r1, r0, #31
   bca20:	f7ff fe7c 	bl	bc71c <_ZL22Refresh_UnixTime_Cachex>
}
   bca24:	4b01      	ldr	r3, [pc, #4]	; (bca2c <_ZN9TimeClass4hourEv+0x14>)
   bca26:	6898      	ldr	r0, [r3, #8]
   bca28:	bd08      	pop	{r3, pc}
   bca2a:	bf00      	nop
   bca2c:	2003e6a0 	.word	0x2003e6a0

000bca30 <_ZN9TimeClass3dayEv>:
{
   bca30:	b508      	push	{r3, lr}
	return day(now());
   bca32:	f7ff ffe0 	bl	bc9f6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bca36:	17c1      	asrs	r1, r0, #31
   bca38:	f7ff fe70 	bl	bc71c <_ZL22Refresh_UnixTime_Cachex>
}
   bca3c:	4b01      	ldr	r3, [pc, #4]	; (bca44 <_ZN9TimeClass3dayEv+0x14>)
   bca3e:	68d8      	ldr	r0, [r3, #12]
   bca40:	bd08      	pop	{r3, pc}
   bca42:	bf00      	nop
   bca44:	2003e6a0 	.word	0x2003e6a0

000bca48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bca48:	4b02      	ldr	r3, [pc, #8]	; (bca54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bca4a:	681a      	ldr	r2, [r3, #0]
   bca4c:	4b02      	ldr	r3, [pc, #8]	; (bca58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bca4e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bca50:	4770      	bx	lr
   bca52:	bf00      	nop
   bca54:	2003e3e0 	.word	0x2003e3e0
   bca58:	2003e69c 	.word	0x2003e69c

000bca5c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bca5c:	4770      	bx	lr

000bca5e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bca5e:	7441      	strb	r1, [r0, #17]
}
   bca60:	4770      	bx	lr

000bca62 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bca62:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bca64:	7c00      	ldrb	r0, [r0, #16]
   bca66:	f7fd f809 	bl	b9a7c <hal_usart_available_data_for_write>
}
   bca6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bca6e:	bd08      	pop	{r3, pc}

000bca70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bca70:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bca72:	7c00      	ldrb	r0, [r0, #16]
   bca74:	f7fc ffda 	bl	b9a2c <hal_usart_available>
}
   bca78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bca7c:	bd08      	pop	{r3, pc}

000bca7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bca7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bca80:	7c00      	ldrb	r0, [r0, #16]
   bca82:	f7fc ffe3 	bl	b9a4c <hal_usart_peek>
}
   bca86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bca8a:	bd08      	pop	{r3, pc}

000bca8c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bca8c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bca8e:	7c00      	ldrb	r0, [r0, #16]
   bca90:	f7fc ffd4 	bl	b9a3c <hal_usart_read>
}
   bca94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bca98:	bd08      	pop	{r3, pc}

000bca9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bca9a:	7c00      	ldrb	r0, [r0, #16]
   bca9c:	f7fc bfde 	b.w	b9a5c <hal_usart_flush>

000bcaa0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bcaa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcaa2:	7c45      	ldrb	r5, [r0, #17]
{
   bcaa4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcaa6:	b12d      	cbz	r5, bcab4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bcaa8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bcaaa:	b003      	add	sp, #12
   bcaac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bcab0:	f7fc bfb4 	b.w	b9a1c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcab4:	7c00      	ldrb	r0, [r0, #16]
   bcab6:	9101      	str	r1, [sp, #4]
   bcab8:	f7fc ffe0 	bl	b9a7c <hal_usart_available_data_for_write>
   bcabc:	2800      	cmp	r0, #0
   bcabe:	9901      	ldr	r1, [sp, #4]
   bcac0:	dcf2      	bgt.n	bcaa8 <_ZN11USARTSerial5writeEh+0x8>
}
   bcac2:	4628      	mov	r0, r5
   bcac4:	b003      	add	sp, #12
   bcac6:	bd30      	pop	{r4, r5, pc}

000bcac8 <_ZN11USARTSerialD0Ev>:
   bcac8:	b510      	push	{r4, lr}
   bcaca:	2114      	movs	r1, #20
   bcacc:	4604      	mov	r4, r0
   bcace:	f7f7 fae6 	bl	b409e <_ZdlPvj>
   bcad2:	4620      	mov	r0, r4
   bcad4:	bd10      	pop	{r4, pc}
	...

000bcad8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bcad8:	b510      	push	{r4, lr}
   bcada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcade:	4604      	mov	r4, r0
   bcae0:	4608      	mov	r0, r1
   bcae2:	4611      	mov	r1, r2
   bcae4:	2200      	movs	r2, #0
   bcae6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bcaea:	4b04      	ldr	r3, [pc, #16]	; (bcafc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bcaec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcaee:	2301      	movs	r3, #1
  _serial = serial;
   bcaf0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bcaf2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bcaf4:	f7fc ffd2 	bl	b9a9c <hal_usart_init_ex>
}
   bcaf8:	4620      	mov	r0, r4
   bcafa:	bd10      	pop	{r4, pc}
   bcafc:	000bf700 	.word	0x000bf700

000bcb00 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bcb00:	7c00      	ldrb	r0, [r0, #16]
   bcb02:	2300      	movs	r3, #0
   bcb04:	f7fc bfc2 	b.w	b9a8c <hal_usart_begin_config>

000bcb08 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bcb08:	2200      	movs	r2, #0
   bcb0a:	f7ff bff9 	b.w	bcb00 <_ZN11USARTSerial5beginEmm>

000bcb0e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bcb0e:	7c00      	ldrb	r0, [r0, #16]
   bcb10:	f7fc bf7c 	b.w	b9a0c <hal_usart_end>

000bcb14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bcb14:	7441      	strb	r1, [r0, #17]
}
   bcb16:	4770      	bx	lr

000bcb18 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcb18:	4770      	bx	lr

000bcb1a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bcb1a:	4770      	bx	lr

000bcb1c <_ZN9USBSerial4readEv>:
{
   bcb1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bcb1e:	2100      	movs	r1, #0
   bcb20:	7c00      	ldrb	r0, [r0, #16]
   bcb22:	f7fc ffeb 	bl	b9afc <HAL_USB_USART_Receive_Data>
}
   bcb26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcb2a:	bd08      	pop	{r3, pc}

000bcb2c <_ZN9USBSerial4peekEv>:
{
   bcb2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bcb2e:	2101      	movs	r1, #1
   bcb30:	7c00      	ldrb	r0, [r0, #16]
   bcb32:	f7fc ffe3 	bl	b9afc <HAL_USB_USART_Receive_Data>
}
   bcb36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcb3a:	bd08      	pop	{r3, pc}

000bcb3c <_ZN9USBSerial17availableForWriteEv>:
{
   bcb3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bcb3e:	7c00      	ldrb	r0, [r0, #16]
   bcb40:	f7fc ffd4 	bl	b9aec <HAL_USB_USART_Available_Data_For_Write>
}
   bcb44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcb48:	bd08      	pop	{r3, pc}

000bcb4a <_ZN9USBSerial9availableEv>:
{
   bcb4a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bcb4c:	7c00      	ldrb	r0, [r0, #16]
   bcb4e:	f7fc ffc5 	bl	b9adc <HAL_USB_USART_Available_Data>
}
   bcb52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcb56:	bd08      	pop	{r3, pc}

000bcb58 <_ZN9USBSerial5writeEh>:
{
   bcb58:	b513      	push	{r0, r1, r4, lr}
   bcb5a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bcb5c:	7c00      	ldrb	r0, [r0, #16]
{
   bcb5e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bcb60:	f7fc ffc4 	bl	b9aec <HAL_USB_USART_Available_Data_For_Write>
   bcb64:	2800      	cmp	r0, #0
   bcb66:	9901      	ldr	r1, [sp, #4]
   bcb68:	dc01      	bgt.n	bcb6e <_ZN9USBSerial5writeEh+0x16>
   bcb6a:	7c60      	ldrb	r0, [r4, #17]
   bcb6c:	b120      	cbz	r0, bcb78 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bcb6e:	7c20      	ldrb	r0, [r4, #16]
   bcb70:	f7fc ffcc 	bl	b9b0c <HAL_USB_USART_Send_Data>
   bcb74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bcb78:	b002      	add	sp, #8
   bcb7a:	bd10      	pop	{r4, pc}

000bcb7c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bcb7c:	7c00      	ldrb	r0, [r0, #16]
   bcb7e:	f7fc bfcd 	b.w	b9b1c <HAL_USB_USART_Flush_Data>

000bcb82 <_ZN9USBSerialD0Ev>:
   bcb82:	b510      	push	{r4, lr}
   bcb84:	2114      	movs	r1, #20
   bcb86:	4604      	mov	r4, r0
   bcb88:	f7f7 fa89 	bl	b409e <_ZdlPvj>
   bcb8c:	4620      	mov	r0, r4
   bcb8e:	bd10      	pop	{r4, pc}

000bcb90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bcb90:	b510      	push	{r4, lr}
   bcb92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcb96:	4604      	mov	r4, r0
   bcb98:	4608      	mov	r0, r1
   bcb9a:	2100      	movs	r1, #0
   bcb9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bcba0:	4b04      	ldr	r3, [pc, #16]	; (bcbb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bcba2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcba4:	2301      	movs	r3, #1
  _serial = serial;
   bcba6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bcba8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bcbaa:	4611      	mov	r1, r2
   bcbac:	f7fc ff7e 	bl	b9aac <HAL_USB_USART_Init>
}
   bcbb0:	4620      	mov	r0, r4
   bcbb2:	bd10      	pop	{r4, pc}
   bcbb4:	000bf730 	.word	0x000bf730

000bcbb8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bcbb8:	7c00      	ldrb	r0, [r0, #16]
   bcbba:	2200      	movs	r2, #0
   bcbbc:	f7fc bf7e 	b.w	b9abc <HAL_USB_USART_Begin>

000bcbc0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bcbc0:	7c00      	ldrb	r0, [r0, #16]
   bcbc2:	f7fc bf83 	b.w	b9acc <HAL_USB_USART_End>

000bcbc6 <_Z19acquireSerialBufferv>:
{
   bcbc6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bcbc8:	2214      	movs	r2, #20
{
   bcbca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bcbcc:	2100      	movs	r1, #0
   bcbce:	f001 f8c3 	bl	bdd58 <memset>
}
   bcbd2:	4620      	mov	r0, r4
   bcbd4:	bd10      	pop	{r4, pc}
	...

000bcbd8 <_Z16_fetch_usbserialv>:
{
   bcbd8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcbda:	4c0f      	ldr	r4, [pc, #60]	; (bcc18 <_Z16_fetch_usbserialv+0x40>)
{
   bcbdc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bcbde:	a803      	add	r0, sp, #12
   bcbe0:	f7ff fff1 	bl	bcbc6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcbe4:	7821      	ldrb	r1, [r4, #0]
   bcbe6:	f3bf 8f5b 	dmb	ish
   bcbea:	f011 0101 	ands.w	r1, r1, #1
   bcbee:	d10f      	bne.n	bcc10 <_Z16_fetch_usbserialv+0x38>
   bcbf0:	4620      	mov	r0, r4
   bcbf2:	9101      	str	r1, [sp, #4]
   bcbf4:	f7f7 fa62 	bl	b40bc <__cxa_guard_acquire>
   bcbf8:	9901      	ldr	r1, [sp, #4]
   bcbfa:	b148      	cbz	r0, bcc10 <_Z16_fetch_usbserialv+0x38>
   bcbfc:	aa03      	add	r2, sp, #12
   bcbfe:	4807      	ldr	r0, [pc, #28]	; (bcc1c <_Z16_fetch_usbserialv+0x44>)
   bcc00:	f7ff ffc6 	bl	bcb90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bcc04:	4620      	mov	r0, r4
   bcc06:	f7f7 fa5e 	bl	b40c6 <__cxa_guard_release>
   bcc0a:	4805      	ldr	r0, [pc, #20]	; (bcc20 <_Z16_fetch_usbserialv+0x48>)
   bcc0c:	f001 f84c 	bl	bdca8 <atexit>
	return _usbserial;
}
   bcc10:	4802      	ldr	r0, [pc, #8]	; (bcc1c <_Z16_fetch_usbserialv+0x44>)
   bcc12:	b008      	add	sp, #32
   bcc14:	bd10      	pop	{r4, pc}
   bcc16:	bf00      	nop
   bcc18:	2003e6e0 	.word	0x2003e6e0
   bcc1c:	2003e6e4 	.word	0x2003e6e4
   bcc20:	000bcb19 	.word	0x000bcb19

000bcc24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bcc24:	4b01      	ldr	r3, [pc, #4]	; (bcc2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bcc26:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bcc28:	4770      	bx	lr
   bcc2a:	bf00      	nop
   bcc2c:	2003e3e8 	.word	0x2003e3e8

000bcc30 <serialEventRun>:
{
   bcc30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bcc32:	4b0b      	ldr	r3, [pc, #44]	; (bcc60 <serialEventRun+0x30>)
   bcc34:	b143      	cbz	r3, bcc48 <serialEventRun+0x18>
   bcc36:	f7ff ffcf 	bl	bcbd8 <_Z16_fetch_usbserialv>
   bcc3a:	6803      	ldr	r3, [r0, #0]
   bcc3c:	691b      	ldr	r3, [r3, #16]
   bcc3e:	4798      	blx	r3
   bcc40:	2800      	cmp	r0, #0
   bcc42:	dd01      	ble.n	bcc48 <serialEventRun+0x18>
        serialEvent();
   bcc44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bcc48:	4b06      	ldr	r3, [pc, #24]	; (bcc64 <serialEventRun+0x34>)
   bcc4a:	b143      	cbz	r3, bcc5e <serialEventRun+0x2e>
   bcc4c:	f000 f9ca 	bl	bcfe4 <_Z22__fetch_global_Serial1v>
   bcc50:	6803      	ldr	r3, [r0, #0]
   bcc52:	691b      	ldr	r3, [r3, #16]
   bcc54:	4798      	blx	r3
   bcc56:	2800      	cmp	r0, #0
   bcc58:	dd01      	ble.n	bcc5e <serialEventRun+0x2e>
        serialEvent1();
   bcc5a:	f3af 8000 	nop.w
}
   bcc5e:	bd08      	pop	{r3, pc}
	...

000bcc68 <_post_loop>:
{
   bcc68:	b508      	push	{r3, lr}
	serialEventRun();
   bcc6a:	f7ff ffe1 	bl	bcc30 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bcc6e:	f7fc fd6d 	bl	b974c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bcc72:	4b01      	ldr	r3, [pc, #4]	; (bcc78 <_post_loop+0x10>)
   bcc74:	6018      	str	r0, [r3, #0]
}
   bcc76:	bd08      	pop	{r3, pc}
   bcc78:	2003e70c 	.word	0x2003e70c

000bcc7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bcc7c:	4805      	ldr	r0, [pc, #20]	; (bcc94 <_Z33system_initialize_user_backup_ramv+0x18>)
   bcc7e:	4a06      	ldr	r2, [pc, #24]	; (bcc98 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bcc80:	4906      	ldr	r1, [pc, #24]	; (bcc9c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bcc82:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bcc84:	1a12      	subs	r2, r2, r0
   bcc86:	f001 f83f 	bl	bdd08 <memcpy>
    __backup_sram_signature = signature;
   bcc8a:	4b05      	ldr	r3, [pc, #20]	; (bcca0 <_Z33system_initialize_user_backup_ramv+0x24>)
   bcc8c:	4a05      	ldr	r2, [pc, #20]	; (bcca4 <_Z33system_initialize_user_backup_ramv+0x28>)
   bcc8e:	601a      	str	r2, [r3, #0]
}
   bcc90:	bd08      	pop	{r3, pc}
   bcc92:	bf00      	nop
   bcc94:	2003f400 	.word	0x2003f400
   bcc98:	2003f404 	.word	0x2003f404
   bcc9c:	000bf9e4 	.word	0x000bf9e4
   bcca0:	2003f400 	.word	0x2003f400
   bcca4:	9a271c1e 	.word	0x9a271c1e

000bcca8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bcca8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bccaa:	2300      	movs	r3, #0
   bccac:	9300      	str	r3, [sp, #0]
   bccae:	461a      	mov	r2, r3
   bccb0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bccb4:	f7fc ffce 	bl	b9c54 <system_ctrl_set_result>
}
   bccb8:	b003      	add	sp, #12
   bccba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bccc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bccc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bccc2:	8843      	ldrh	r3, [r0, #2]
   bccc4:	2b0a      	cmp	r3, #10
   bccc6:	d008      	beq.n	bccda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bccc8:	2b50      	cmp	r3, #80	; 0x50
   bccca:	d10b      	bne.n	bcce4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bcccc:	4b09      	ldr	r3, [pc, #36]	; (bccf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bccce:	681b      	ldr	r3, [r3, #0]
   bccd0:	b14b      	cbz	r3, bcce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bccd2:	b003      	add	sp, #12
   bccd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bccd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bccda:	f7ff ffe5 	bl	bcca8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bccde:	b003      	add	sp, #12
   bcce0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bcce4:	2300      	movs	r3, #0
   bcce6:	9300      	str	r3, [sp, #0]
   bcce8:	461a      	mov	r2, r3
   bccea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bccee:	f7fc ffb1 	bl	b9c54 <system_ctrl_set_result>
}
   bccf2:	e7f4      	b.n	bccde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bccf4:	2003e6fc 	.word	0x2003e6fc

000bccf8 <module_user_init_hook>:
{
   bccf8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bccfa:	4812      	ldr	r0, [pc, #72]	; (bcd44 <module_user_init_hook+0x4c>)
   bccfc:	2100      	movs	r1, #0
   bccfe:	f7fd f8e1 	bl	b9ec4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bcd02:	4b11      	ldr	r3, [pc, #68]	; (bcd48 <module_user_init_hook+0x50>)
   bcd04:	681a      	ldr	r2, [r3, #0]
   bcd06:	4b11      	ldr	r3, [pc, #68]	; (bcd4c <module_user_init_hook+0x54>)
   bcd08:	429a      	cmp	r2, r3
   bcd0a:	4b11      	ldr	r3, [pc, #68]	; (bcd50 <module_user_init_hook+0x58>)
   bcd0c:	bf0c      	ite	eq
   bcd0e:	2201      	moveq	r2, #1
   bcd10:	2200      	movne	r2, #0
   bcd12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bcd14:	d001      	beq.n	bcd1a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bcd16:	f7ff ffb1 	bl	bcc7c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bcd1a:	f7fc fcff 	bl	b971c <HAL_RNG_GetRandomNumber>
   bcd1e:	4604      	mov	r4, r0
    srand(seed);
   bcd20:	f001 f822 	bl	bdd68 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bcd24:	4b0b      	ldr	r3, [pc, #44]	; (bcd54 <module_user_init_hook+0x5c>)
   bcd26:	b113      	cbz	r3, bcd2e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bcd28:	4620      	mov	r0, r4
   bcd2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bcd2e:	2100      	movs	r1, #0
   bcd30:	4808      	ldr	r0, [pc, #32]	; (bcd54 <module_user_init_hook+0x5c>)
   bcd32:	f7fc ffff 	bl	b9d34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bcd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bcd3a:	4807      	ldr	r0, [pc, #28]	; (bcd58 <module_user_init_hook+0x60>)
   bcd3c:	2100      	movs	r1, #0
   bcd3e:	f7fc bf7f 	b.w	b9c40 <system_ctrl_set_app_request_handler>
   bcd42:	bf00      	nop
   bcd44:	000bcc25 	.word	0x000bcc25
   bcd48:	2003f400 	.word	0x2003f400
   bcd4c:	9a271c1e 	.word	0x9a271c1e
   bcd50:	2003e6f8 	.word	0x2003e6f8
   bcd54:	00000000 	.word	0x00000000
   bcd58:	000bccc1 	.word	0x000bccc1

000bcd5c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bcd5c:	b508      	push	{r3, lr}
   bcd5e:	4b02      	ldr	r3, [pc, #8]	; (bcd68 <spark_protocol_instance+0xc>)
   bcd60:	681b      	ldr	r3, [r3, #0]
   bcd62:	681b      	ldr	r3, [r3, #0]
   bcd64:	9301      	str	r3, [sp, #4]
   bcd66:	bd08      	pop	{r3, pc}
   bcd68:	0003025c 	.word	0x0003025c

000bcd6c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bcd6c:	b508      	push	{r3, lr}
   bcd6e:	4b02      	ldr	r3, [pc, #8]	; (bcd78 <spark_protocol_set_product_id+0xc>)
   bcd70:	681b      	ldr	r3, [r3, #0]
   bcd72:	685b      	ldr	r3, [r3, #4]
   bcd74:	9301      	str	r3, [sp, #4]
   bcd76:	bd08      	pop	{r3, pc}
   bcd78:	0003025c 	.word	0x0003025c

000bcd7c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bcd7c:	b508      	push	{r3, lr}
   bcd7e:	4b02      	ldr	r3, [pc, #8]	; (bcd88 <spark_protocol_set_product_firmware_version+0xc>)
   bcd80:	681b      	ldr	r3, [r3, #0]
   bcd82:	689b      	ldr	r3, [r3, #8]
   bcd84:	9301      	str	r3, [sp, #4]
   bcd86:	bd08      	pop	{r3, pc}
   bcd88:	0003025c 	.word	0x0003025c

000bcd8c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bcd8c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bcd8e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bcd90:	d902      	bls.n	bcd98 <pinAvailable+0xc>
    return false;
   bcd92:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bcd94:	b002      	add	sp, #8
   bcd96:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bcd98:	f1a0 030b 	sub.w	r3, r0, #11
   bcd9c:	2b02      	cmp	r3, #2
   bcd9e:	d81a      	bhi.n	bcdd6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bcda0:	4c17      	ldr	r4, [pc, #92]	; (bce00 <pinAvailable+0x74>)
   bcda2:	7821      	ldrb	r1, [r4, #0]
   bcda4:	f3bf 8f5b 	dmb	ish
   bcda8:	f011 0101 	ands.w	r1, r1, #1
   bcdac:	d10b      	bne.n	bcdc6 <pinAvailable+0x3a>
   bcdae:	4620      	mov	r0, r4
   bcdb0:	9101      	str	r1, [sp, #4]
   bcdb2:	f7f7 f983 	bl	b40bc <__cxa_guard_acquire>
   bcdb6:	9901      	ldr	r1, [sp, #4]
   bcdb8:	b128      	cbz	r0, bcdc6 <pinAvailable+0x3a>
   bcdba:	4812      	ldr	r0, [pc, #72]	; (bce04 <pinAvailable+0x78>)
   bcdbc:	f7ff fa46 	bl	bc24c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bcdc0:	4620      	mov	r0, r4
   bcdc2:	f7f7 f980 	bl	b40c6 <__cxa_guard_release>
   bcdc6:	4b0f      	ldr	r3, [pc, #60]	; (bce04 <pinAvailable+0x78>)
   bcdc8:	7818      	ldrb	r0, [r3, #0]
   bcdca:	f7fc fdaf 	bl	b992c <hal_spi_is_enabled>
   bcdce:	2800      	cmp	r0, #0
   bcdd0:	d1df      	bne.n	bcd92 <pinAvailable+0x6>
  return true; // 'pin' is available
   bcdd2:	2001      	movs	r0, #1
   bcdd4:	e7de      	b.n	bcd94 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bcdd6:	2801      	cmp	r0, #1
   bcdd8:	d809      	bhi.n	bcdee <pinAvailable+0x62>
   bcdda:	f000 f89f 	bl	bcf1c <_Z19__fetch_global_Wirev>
   bcdde:	2100      	movs	r1, #0
   bcde0:	7c00      	ldrb	r0, [r0, #16]
   bcde2:	f7fc fd5b 	bl	b989c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bcde6:	f080 0001 	eor.w	r0, r0, #1
   bcdea:	b2c0      	uxtb	r0, r0
   bcdec:	e7d2      	b.n	bcd94 <pinAvailable+0x8>
   bcdee:	3809      	subs	r0, #9
   bcdf0:	2801      	cmp	r0, #1
   bcdf2:	d8ee      	bhi.n	bcdd2 <pinAvailable+0x46>
   bcdf4:	f000 f8f6 	bl	bcfe4 <_Z22__fetch_global_Serial1v>
   bcdf8:	7c00      	ldrb	r0, [r0, #16]
   bcdfa:	f7fc fe37 	bl	b9a6c <hal_usart_is_enabled>
   bcdfe:	e7f2      	b.n	bcde6 <pinAvailable+0x5a>
   bce00:	2003e700 	.word	0x2003e700
   bce04:	2003e704 	.word	0x2003e704

000bce08 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bce08:	2823      	cmp	r0, #35	; 0x23
{
   bce0a:	b538      	push	{r3, r4, r5, lr}
   bce0c:	4604      	mov	r4, r0
   bce0e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bce10:	d80a      	bhi.n	bce28 <pinMode+0x20>
   bce12:	29ff      	cmp	r1, #255	; 0xff
   bce14:	d008      	beq.n	bce28 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bce16:	f7ff ffb9 	bl	bcd8c <pinAvailable>
   bce1a:	b128      	cbz	r0, bce28 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bce1c:	4629      	mov	r1, r5
   bce1e:	4620      	mov	r0, r4
}
   bce20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bce24:	f7fc bcc2 	b.w	b97ac <HAL_Pin_Mode>
}
   bce28:	bd38      	pop	{r3, r4, r5, pc}

000bce2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bce2a:	b538      	push	{r3, r4, r5, lr}
   bce2c:	4604      	mov	r4, r0
   bce2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bce30:	f7fc fcc4 	bl	b97bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bce34:	28ff      	cmp	r0, #255	; 0xff
   bce36:	d010      	beq.n	bce5a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bce38:	2806      	cmp	r0, #6
   bce3a:	d804      	bhi.n	bce46 <digitalWrite+0x1c>
   bce3c:	234d      	movs	r3, #77	; 0x4d
   bce3e:	fa23 f000 	lsr.w	r0, r3, r0
   bce42:	07c3      	lsls	r3, r0, #31
   bce44:	d409      	bmi.n	bce5a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bce46:	4620      	mov	r0, r4
   bce48:	f7ff ffa0 	bl	bcd8c <pinAvailable>
   bce4c:	b128      	cbz	r0, bce5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bce4e:	4629      	mov	r1, r5
   bce50:	4620      	mov	r0, r4
}
   bce52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bce56:	f7fc bcb9 	b.w	b97cc <HAL_GPIO_Write>
}
   bce5a:	bd38      	pop	{r3, r4, r5, pc}

000bce5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bce5c:	b510      	push	{r4, lr}
   bce5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bce60:	f7fc fcac 	bl	b97bc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bce64:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bce66:	b2db      	uxtb	r3, r3
   bce68:	2b01      	cmp	r3, #1
   bce6a:	d908      	bls.n	bce7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bce6c:	4620      	mov	r0, r4
   bce6e:	f7ff ff8d 	bl	bcd8c <pinAvailable>
   bce72:	b120      	cbz	r0, bce7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bce74:	4620      	mov	r0, r4
}
   bce76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bce7a:	f7fc bcaf 	b.w	b97dc <HAL_GPIO_Read>
}
   bce7e:	2000      	movs	r0, #0
   bce80:	bd10      	pop	{r4, pc}

000bce82 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bce82:	280d      	cmp	r0, #13
{
   bce84:	b510      	push	{r4, lr}
   bce86:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bce88:	bf9c      	itt	ls
   bce8a:	340e      	addls	r4, #14
   bce8c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bce8e:	4620      	mov	r0, r4
   bce90:	f7ff ff7c 	bl	bcd8c <pinAvailable>
   bce94:	b150      	cbz	r0, bceac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bce96:	2103      	movs	r1, #3
   bce98:	4620      	mov	r0, r4
   bce9a:	f7fc fc7f 	bl	b979c <HAL_Validate_Pin_Function>
   bce9e:	2803      	cmp	r0, #3
   bcea0:	d104      	bne.n	bceac <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bcea2:	4620      	mov	r0, r4
}
   bcea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bcea8:	f7fc bcb0 	b.w	b980c <hal_adc_read>
}
   bceac:	2000      	movs	r0, #0
   bceae:	bd10      	pop	{r4, pc}

000bceb0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bceb0:	4770      	bx	lr

000bceb2 <__tcf_1>:
   bceb2:	4770      	bx	lr

000bceb4 <_Z17acquireWireBufferv>:
{
   bceb4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bceb6:	4b0a      	ldr	r3, [pc, #40]	; (bcee0 <_Z17acquireWireBufferv+0x2c>)
   bceb8:	6003      	str	r3, [r0, #0]
   bceba:	2301      	movs	r3, #1
{
   bcebc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bcebe:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bcec0:	4908      	ldr	r1, [pc, #32]	; (bcee4 <_Z17acquireWireBufferv+0x30>)
   bcec2:	2020      	movs	r0, #32
   bcec4:	f000 f8b4 	bl	bd030 <_ZnajRKSt9nothrow_t>
	};
   bcec8:	2520      	movs	r5, #32
   bceca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bcecc:	4905      	ldr	r1, [pc, #20]	; (bcee4 <_Z17acquireWireBufferv+0x30>)
	};
   bcece:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bced0:	4628      	mov	r0, r5
   bced2:	f000 f8ad 	bl	bd030 <_ZnajRKSt9nothrow_t>
	};
   bced6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bceda:	4620      	mov	r0, r4
   bcedc:	bd38      	pop	{r3, r4, r5, pc}
   bcede:	bf00      	nop
   bcee0:	00010018 	.word	0x00010018
   bcee4:	000bf758 	.word	0x000bf758

000bcee8 <_Z18acquireWire1Bufferv>:
{
   bcee8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bceea:	4b0a      	ldr	r3, [pc, #40]	; (bcf14 <_Z18acquireWire1Bufferv+0x2c>)
   bceec:	6003      	str	r3, [r0, #0]
   bceee:	2301      	movs	r3, #1
{
   bcef0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bcef2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bcef4:	4908      	ldr	r1, [pc, #32]	; (bcf18 <_Z18acquireWire1Bufferv+0x30>)
   bcef6:	2020      	movs	r0, #32
   bcef8:	f000 f89a 	bl	bd030 <_ZnajRKSt9nothrow_t>
	};
   bcefc:	2520      	movs	r5, #32
   bcefe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bcf00:	4905      	ldr	r1, [pc, #20]	; (bcf18 <_Z18acquireWire1Bufferv+0x30>)
	};
   bcf02:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bcf04:	4628      	mov	r0, r5
   bcf06:	f000 f893 	bl	bd030 <_ZnajRKSt9nothrow_t>
	};
   bcf0a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bcf0e:	4620      	mov	r0, r4
   bcf10:	bd38      	pop	{r3, r4, r5, pc}
   bcf12:	bf00      	nop
   bcf14:	00010018 	.word	0x00010018
   bcf18:	000bf758 	.word	0x000bf758

000bcf1c <_Z19__fetch_global_Wirev>:
{
   bcf1c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bcf1e:	4d0e      	ldr	r5, [pc, #56]	; (bcf58 <_Z19__fetch_global_Wirev+0x3c>)
   bcf20:	7829      	ldrb	r1, [r5, #0]
   bcf22:	f3bf 8f5b 	dmb	ish
   bcf26:	f011 0401 	ands.w	r4, r1, #1
{
   bcf2a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bcf2c:	d111      	bne.n	bcf52 <_Z19__fetch_global_Wirev+0x36>
   bcf2e:	4628      	mov	r0, r5
   bcf30:	f7f7 f8c4 	bl	b40bc <__cxa_guard_acquire>
   bcf34:	b168      	cbz	r0, bcf52 <_Z19__fetch_global_Wirev+0x36>
   bcf36:	4668      	mov	r0, sp
   bcf38:	f7ff ffbc 	bl	bceb4 <_Z17acquireWireBufferv>
   bcf3c:	466a      	mov	r2, sp
   bcf3e:	4621      	mov	r1, r4
   bcf40:	4806      	ldr	r0, [pc, #24]	; (bcf5c <_Z19__fetch_global_Wirev+0x40>)
   bcf42:	f7fd fc89 	bl	ba858 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bcf46:	4628      	mov	r0, r5
   bcf48:	f7f7 f8bd 	bl	b40c6 <__cxa_guard_release>
   bcf4c:	4804      	ldr	r0, [pc, #16]	; (bcf60 <_Z19__fetch_global_Wirev+0x44>)
   bcf4e:	f000 feab 	bl	bdca8 <atexit>
	return wire;
}
   bcf52:	4802      	ldr	r0, [pc, #8]	; (bcf5c <_Z19__fetch_global_Wirev+0x40>)
   bcf54:	b007      	add	sp, #28
   bcf56:	bd30      	pop	{r4, r5, pc}
   bcf58:	2003e710 	.word	0x2003e710
   bcf5c:	2003e718 	.word	0x2003e718
   bcf60:	000bceb1 	.word	0x000bceb1

000bcf64 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bcf64:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bcf66:	4c0e      	ldr	r4, [pc, #56]	; (bcfa0 <_Z20__fetch_global_Wire1v+0x3c>)
   bcf68:	7823      	ldrb	r3, [r4, #0]
   bcf6a:	f3bf 8f5b 	dmb	ish
   bcf6e:	07db      	lsls	r3, r3, #31
{
   bcf70:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bcf72:	d411      	bmi.n	bcf98 <_Z20__fetch_global_Wire1v+0x34>
   bcf74:	4620      	mov	r0, r4
   bcf76:	f7f7 f8a1 	bl	b40bc <__cxa_guard_acquire>
   bcf7a:	b168      	cbz	r0, bcf98 <_Z20__fetch_global_Wire1v+0x34>
   bcf7c:	4668      	mov	r0, sp
   bcf7e:	f7ff ffb3 	bl	bcee8 <_Z18acquireWire1Bufferv>
   bcf82:	466a      	mov	r2, sp
   bcf84:	2101      	movs	r1, #1
   bcf86:	4807      	ldr	r0, [pc, #28]	; (bcfa4 <_Z20__fetch_global_Wire1v+0x40>)
   bcf88:	f7fd fc66 	bl	ba858 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bcf8c:	4620      	mov	r0, r4
   bcf8e:	f7f7 f89a 	bl	b40c6 <__cxa_guard_release>
   bcf92:	4805      	ldr	r0, [pc, #20]	; (bcfa8 <_Z20__fetch_global_Wire1v+0x44>)
   bcf94:	f000 fe88 	bl	bdca8 <atexit>
	return wire;
}
   bcf98:	4802      	ldr	r0, [pc, #8]	; (bcfa4 <_Z20__fetch_global_Wire1v+0x40>)
   bcf9a:	b006      	add	sp, #24
   bcf9c:	bd10      	pop	{r4, pc}
   bcf9e:	bf00      	nop
   bcfa0:	2003e714 	.word	0x2003e714
   bcfa4:	2003e72c 	.word	0x2003e72c
   bcfa8:	000bceb3 	.word	0x000bceb3

000bcfac <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcfac:	4770      	bx	lr
	...

000bcfb0 <_Z20acquireSerial1Bufferv>:
{
   bcfb0:	b538      	push	{r3, r4, r5, lr}
   bcfb2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bcfb4:	2514      	movs	r5, #20
   bcfb6:	462a      	mov	r2, r5
   bcfb8:	2100      	movs	r1, #0
   bcfba:	f000 fecd 	bl	bdd58 <memset>
   bcfbe:	8025      	strh	r5, [r4, #0]
   bcfc0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfc2:	4907      	ldr	r1, [pc, #28]	; (bcfe0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bcfc4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfc6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bcfc8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfca:	f000 f831 	bl	bd030 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfce:	4904      	ldr	r1, [pc, #16]	; (bcfe0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bcfd0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfd2:	4628      	mov	r0, r5
   bcfd4:	f000 f82c 	bl	bd030 <_ZnajRKSt9nothrow_t>
    };
   bcfd8:	60e0      	str	r0, [r4, #12]
}
   bcfda:	4620      	mov	r0, r4
   bcfdc:	bd38      	pop	{r3, r4, r5, pc}
   bcfde:	bf00      	nop
   bcfe0:	000bf758 	.word	0x000bf758

000bcfe4 <_Z22__fetch_global_Serial1v>:
{
   bcfe4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcfe6:	4d0e      	ldr	r5, [pc, #56]	; (bd020 <_Z22__fetch_global_Serial1v+0x3c>)
   bcfe8:	7829      	ldrb	r1, [r5, #0]
   bcfea:	f3bf 8f5b 	dmb	ish
   bcfee:	f011 0401 	ands.w	r4, r1, #1
{
   bcff2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcff4:	d111      	bne.n	bd01a <_Z22__fetch_global_Serial1v+0x36>
   bcff6:	4628      	mov	r0, r5
   bcff8:	f7f7 f860 	bl	b40bc <__cxa_guard_acquire>
   bcffc:	b168      	cbz	r0, bd01a <_Z22__fetch_global_Serial1v+0x36>
   bcffe:	a801      	add	r0, sp, #4
   bd000:	f7ff ffd6 	bl	bcfb0 <_Z20acquireSerial1Bufferv>
   bd004:	aa01      	add	r2, sp, #4
   bd006:	4621      	mov	r1, r4
   bd008:	4806      	ldr	r0, [pc, #24]	; (bd024 <_Z22__fetch_global_Serial1v+0x40>)
   bd00a:	f7ff fd65 	bl	bcad8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd00e:	4628      	mov	r0, r5
   bd010:	f7f7 f859 	bl	b40c6 <__cxa_guard_release>
   bd014:	4804      	ldr	r0, [pc, #16]	; (bd028 <_Z22__fetch_global_Serial1v+0x44>)
   bd016:	f000 fe47 	bl	bdca8 <atexit>
    return serial1;
}
   bd01a:	4802      	ldr	r0, [pc, #8]	; (bd024 <_Z22__fetch_global_Serial1v+0x40>)
   bd01c:	b007      	add	sp, #28
   bd01e:	bd30      	pop	{r4, r5, pc}
   bd020:	2003e740 	.word	0x2003e740
   bd024:	2003e744 	.word	0x2003e744
   bd028:	000bcfad 	.word	0x000bcfad

000bd02c <_ZnwjRKSt9nothrow_t>:
   bd02c:	f7f7 b833 	b.w	b4096 <_Znwj>

000bd030 <_ZnajRKSt9nothrow_t>:
   bd030:	f7f7 b833 	b.w	b409a <_Znaj>

000bd034 <_ZSt17__throw_bad_allocv>:
   bd034:	b508      	push	{r3, lr}
   bd036:	f7fc ff25 	bl	b9e84 <abort>

000bd03a <_ZSt20__throw_length_errorPKc>:
   bd03a:	b508      	push	{r3, lr}
   bd03c:	f7fc ff22 	bl	b9e84 <abort>

000bd040 <_ZSt25__throw_bad_function_callv>:
   bd040:	b508      	push	{r3, lr}
   bd042:	f7fc ff1f 	bl	b9e84 <abort>
	...

000bd048 <sqrt>:
   bd048:	b538      	push	{r3, r4, r5, lr}
   bd04a:	ed2d 8b02 	vpush	{d8}
   bd04e:	ec55 4b10 	vmov	r4, r5, d0
   bd052:	f000 f833 	bl	bd0bc <__ieee754_sqrt>
   bd056:	4b18      	ldr	r3, [pc, #96]	; (bd0b8 <sqrt+0x70>)
   bd058:	eeb0 8a40 	vmov.f32	s16, s0
   bd05c:	eef0 8a60 	vmov.f32	s17, s1
   bd060:	f993 3000 	ldrsb.w	r3, [r3]
   bd064:	3301      	adds	r3, #1
   bd066:	d00d      	beq.n	bd084 <sqrt+0x3c>
   bd068:	4622      	mov	r2, r4
   bd06a:	462b      	mov	r3, r5
   bd06c:	4620      	mov	r0, r4
   bd06e:	4629      	mov	r1, r5
   bd070:	f000 fd46 	bl	bdb00 <__aeabi_dcmpun>
   bd074:	b930      	cbnz	r0, bd084 <sqrt+0x3c>
   bd076:	2200      	movs	r2, #0
   bd078:	2300      	movs	r3, #0
   bd07a:	4620      	mov	r0, r4
   bd07c:	4629      	mov	r1, r5
   bd07e:	f000 fd17 	bl	bdab0 <__aeabi_dcmplt>
   bd082:	b930      	cbnz	r0, bd092 <sqrt+0x4a>
   bd084:	eeb0 0a48 	vmov.f32	s0, s16
   bd088:	eef0 0a68 	vmov.f32	s1, s17
   bd08c:	ecbd 8b02 	vpop	{d8}
   bd090:	bd38      	pop	{r3, r4, r5, pc}
   bd092:	f7fc ff07 	bl	b9ea4 <__errno>
   bd096:	2200      	movs	r2, #0
   bd098:	2300      	movs	r3, #0
   bd09a:	2121      	movs	r1, #33	; 0x21
   bd09c:	6001      	str	r1, [r0, #0]
   bd09e:	4610      	mov	r0, r2
   bd0a0:	4619      	mov	r1, r3
   bd0a2:	f000 fbbd 	bl	bd820 <__aeabi_ddiv>
   bd0a6:	ec41 0b18 	vmov	d8, r0, r1
   bd0aa:	eeb0 0a48 	vmov.f32	s0, s16
   bd0ae:	eef0 0a68 	vmov.f32	s1, s17
   bd0b2:	ecbd 8b02 	vpop	{d8}
   bd0b6:	bd38      	pop	{r3, r4, r5, pc}
   bd0b8:	2003e3e4 	.word	0x2003e3e4

000bd0bc <__ieee754_sqrt>:
   bd0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd0c0:	4a63      	ldr	r2, [pc, #396]	; (bd250 <__ieee754_sqrt+0x194>)
   bd0c2:	ec55 4b10 	vmov	r4, r5, d0
   bd0c6:	43aa      	bics	r2, r5
   bd0c8:	f000 809f 	beq.w	bd20a <__ieee754_sqrt+0x14e>
   bd0cc:	2d00      	cmp	r5, #0
   bd0ce:	ee10 ca10 	vmov	ip, s0
   bd0d2:	462b      	mov	r3, r5
   bd0d4:	dd54      	ble.n	bd180 <__ieee754_sqrt+0xc4>
   bd0d6:	1529      	asrs	r1, r5, #20
   bd0d8:	d063      	beq.n	bd1a2 <__ieee754_sqrt+0xe6>
   bd0da:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bd0de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bd0e2:	07c9      	lsls	r1, r1, #31
   bd0e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd0e8:	d404      	bmi.n	bd0f4 <__ieee754_sqrt+0x38>
   bd0ea:	005b      	lsls	r3, r3, #1
   bd0ec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bd0f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bd0f4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bd0f8:	2600      	movs	r6, #0
   bd0fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bd0fe:	107f      	asrs	r7, r7, #1
   bd100:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bd104:	f04f 0e16 	mov.w	lr, #22
   bd108:	4634      	mov	r4, r6
   bd10a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bd10e:	18a1      	adds	r1, r4, r2
   bd110:	4299      	cmp	r1, r3
   bd112:	dc02      	bgt.n	bd11a <__ieee754_sqrt+0x5e>
   bd114:	1a5b      	subs	r3, r3, r1
   bd116:	188c      	adds	r4, r1, r2
   bd118:	4416      	add	r6, r2
   bd11a:	005b      	lsls	r3, r3, #1
   bd11c:	f1be 0e01 	subs.w	lr, lr, #1
   bd120:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bd124:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bd128:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bd12c:	d1ef      	bne.n	bd10e <__ieee754_sqrt+0x52>
   bd12e:	4675      	mov	r5, lr
   bd130:	2020      	movs	r0, #32
   bd132:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bd136:	e00a      	b.n	bd14e <__ieee754_sqrt+0x92>
   bd138:	d044      	beq.n	bd1c4 <__ieee754_sqrt+0x108>
   bd13a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bd13e:	3801      	subs	r0, #1
   bd140:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bd144:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bd148:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bd14c:	d043      	beq.n	bd1d6 <__ieee754_sqrt+0x11a>
   bd14e:	42a3      	cmp	r3, r4
   bd150:	eb02 010e 	add.w	r1, r2, lr
   bd154:	ddf0      	ble.n	bd138 <__ieee754_sqrt+0x7c>
   bd156:	2900      	cmp	r1, #0
   bd158:	eb01 0e02 	add.w	lr, r1, r2
   bd15c:	db0a      	blt.n	bd174 <__ieee754_sqrt+0xb8>
   bd15e:	46a0      	mov	r8, r4
   bd160:	1b1b      	subs	r3, r3, r4
   bd162:	4561      	cmp	r1, ip
   bd164:	bf88      	it	hi
   bd166:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bd16a:	ebac 0c01 	sub.w	ip, ip, r1
   bd16e:	4415      	add	r5, r2
   bd170:	4644      	mov	r4, r8
   bd172:	e7e2      	b.n	bd13a <__ieee754_sqrt+0x7e>
   bd174:	f1be 0f00 	cmp.w	lr, #0
   bd178:	dbf1      	blt.n	bd15e <__ieee754_sqrt+0xa2>
   bd17a:	f104 0801 	add.w	r8, r4, #1
   bd17e:	e7ef      	b.n	bd160 <__ieee754_sqrt+0xa4>
   bd180:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bd184:	4322      	orrs	r2, r4
   bd186:	d038      	beq.n	bd1fa <__ieee754_sqrt+0x13e>
   bd188:	2d00      	cmp	r5, #0
   bd18a:	d14e      	bne.n	bd22a <__ieee754_sqrt+0x16e>
   bd18c:	4629      	mov	r1, r5
   bd18e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bd192:	3915      	subs	r1, #21
   bd194:	4613      	mov	r3, r2
   bd196:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bd19a:	2a00      	cmp	r2, #0
   bd19c:	d0f7      	beq.n	bd18e <__ieee754_sqrt+0xd2>
   bd19e:	02d6      	lsls	r6, r2, #11
   bd1a0:	d450      	bmi.n	bd244 <__ieee754_sqrt+0x188>
   bd1a2:	2000      	movs	r0, #0
   bd1a4:	005b      	lsls	r3, r3, #1
   bd1a6:	02dd      	lsls	r5, r3, #11
   bd1a8:	4604      	mov	r4, r0
   bd1aa:	f100 0001 	add.w	r0, r0, #1
   bd1ae:	d5f9      	bpl.n	bd1a4 <__ieee754_sqrt+0xe8>
   bd1b0:	461a      	mov	r2, r3
   bd1b2:	4663      	mov	r3, ip
   bd1b4:	fa0c fc00 	lsl.w	ip, ip, r0
   bd1b8:	f1c0 0020 	rsb	r0, r0, #32
   bd1bc:	40c3      	lsrs	r3, r0
   bd1be:	1b09      	subs	r1, r1, r4
   bd1c0:	4313      	orrs	r3, r2
   bd1c2:	e78a      	b.n	bd0da <__ieee754_sqrt+0x1e>
   bd1c4:	4561      	cmp	r1, ip
   bd1c6:	d8b8      	bhi.n	bd13a <__ieee754_sqrt+0x7e>
   bd1c8:	2900      	cmp	r1, #0
   bd1ca:	eb01 0e02 	add.w	lr, r1, r2
   bd1ce:	dbd1      	blt.n	bd174 <__ieee754_sqrt+0xb8>
   bd1d0:	4698      	mov	r8, r3
   bd1d2:	2300      	movs	r3, #0
   bd1d4:	e7c9      	b.n	bd16a <__ieee754_sqrt+0xae>
   bd1d6:	ea53 030c 	orrs.w	r3, r3, ip
   bd1da:	d110      	bne.n	bd1fe <__ieee754_sqrt+0x142>
   bd1dc:	0868      	lsrs	r0, r5, #1
   bd1de:	1071      	asrs	r1, r6, #1
   bd1e0:	07f3      	lsls	r3, r6, #31
   bd1e2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bd1e6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bd1ea:	bf48      	it	mi
   bd1ec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bd1f0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bd1f4:	4602      	mov	r2, r0
   bd1f6:	ec43 2b10 	vmov	d0, r2, r3
   bd1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd1fe:	1c6a      	adds	r2, r5, #1
   bd200:	bf16      	itet	ne
   bd202:	1c68      	addne	r0, r5, #1
   bd204:	3601      	addeq	r6, #1
   bd206:	0840      	lsrne	r0, r0, #1
   bd208:	e7e9      	b.n	bd1de <__ieee754_sqrt+0x122>
   bd20a:	ee10 2a10 	vmov	r2, s0
   bd20e:	ee10 0a10 	vmov	r0, s0
   bd212:	462b      	mov	r3, r5
   bd214:	4629      	mov	r1, r5
   bd216:	f000 f9d9 	bl	bd5cc <__aeabi_dmul>
   bd21a:	4622      	mov	r2, r4
   bd21c:	462b      	mov	r3, r5
   bd21e:	f000 f81f 	bl	bd260 <__adddf3>
   bd222:	ec41 0b10 	vmov	d0, r0, r1
   bd226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd22a:	ee10 2a10 	vmov	r2, s0
   bd22e:	4620      	mov	r0, r4
   bd230:	4629      	mov	r1, r5
   bd232:	f000 f813 	bl	bd25c <__aeabi_dsub>
   bd236:	4602      	mov	r2, r0
   bd238:	460b      	mov	r3, r1
   bd23a:	f000 faf1 	bl	bd820 <__aeabi_ddiv>
   bd23e:	ec41 0b10 	vmov	d0, r0, r1
   bd242:	e7da      	b.n	bd1fa <__ieee754_sqrt+0x13e>
   bd244:	4663      	mov	r3, ip
   bd246:	2020      	movs	r0, #32
   bd248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bd24c:	e7b6      	b.n	bd1bc <__ieee754_sqrt+0x100>
   bd24e:	bf00      	nop
   bd250:	7ff00000 	.word	0x7ff00000

000bd254 <__aeabi_drsub>:
   bd254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd258:	e002      	b.n	bd260 <__adddf3>
   bd25a:	bf00      	nop

000bd25c <__aeabi_dsub>:
   bd25c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd260 <__adddf3>:
   bd260:	b530      	push	{r4, r5, lr}
   bd262:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd266:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd26a:	ea94 0f05 	teq	r4, r5
   bd26e:	bf08      	it	eq
   bd270:	ea90 0f02 	teqeq	r0, r2
   bd274:	bf1f      	itttt	ne
   bd276:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd27a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd27e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd286:	f000 80e2 	beq.w	bd44e <__adddf3+0x1ee>
   bd28a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd28e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd292:	bfb8      	it	lt
   bd294:	426d      	neglt	r5, r5
   bd296:	dd0c      	ble.n	bd2b2 <__adddf3+0x52>
   bd298:	442c      	add	r4, r5
   bd29a:	ea80 0202 	eor.w	r2, r0, r2
   bd29e:	ea81 0303 	eor.w	r3, r1, r3
   bd2a2:	ea82 0000 	eor.w	r0, r2, r0
   bd2a6:	ea83 0101 	eor.w	r1, r3, r1
   bd2aa:	ea80 0202 	eor.w	r2, r0, r2
   bd2ae:	ea81 0303 	eor.w	r3, r1, r3
   bd2b2:	2d36      	cmp	r5, #54	; 0x36
   bd2b4:	bf88      	it	hi
   bd2b6:	bd30      	pophi	{r4, r5, pc}
   bd2b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd2bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd2c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd2c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd2c8:	d002      	beq.n	bd2d0 <__adddf3+0x70>
   bd2ca:	4240      	negs	r0, r0
   bd2cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd2d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd2d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd2d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd2dc:	d002      	beq.n	bd2e4 <__adddf3+0x84>
   bd2de:	4252      	negs	r2, r2
   bd2e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd2e4:	ea94 0f05 	teq	r4, r5
   bd2e8:	f000 80a7 	beq.w	bd43a <__adddf3+0x1da>
   bd2ec:	f1a4 0401 	sub.w	r4, r4, #1
   bd2f0:	f1d5 0e20 	rsbs	lr, r5, #32
   bd2f4:	db0d      	blt.n	bd312 <__adddf3+0xb2>
   bd2f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd2fa:	fa22 f205 	lsr.w	r2, r2, r5
   bd2fe:	1880      	adds	r0, r0, r2
   bd300:	f141 0100 	adc.w	r1, r1, #0
   bd304:	fa03 f20e 	lsl.w	r2, r3, lr
   bd308:	1880      	adds	r0, r0, r2
   bd30a:	fa43 f305 	asr.w	r3, r3, r5
   bd30e:	4159      	adcs	r1, r3
   bd310:	e00e      	b.n	bd330 <__adddf3+0xd0>
   bd312:	f1a5 0520 	sub.w	r5, r5, #32
   bd316:	f10e 0e20 	add.w	lr, lr, #32
   bd31a:	2a01      	cmp	r2, #1
   bd31c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd320:	bf28      	it	cs
   bd322:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd326:	fa43 f305 	asr.w	r3, r3, r5
   bd32a:	18c0      	adds	r0, r0, r3
   bd32c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd334:	d507      	bpl.n	bd346 <__adddf3+0xe6>
   bd336:	f04f 0e00 	mov.w	lr, #0
   bd33a:	f1dc 0c00 	rsbs	ip, ip, #0
   bd33e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd342:	eb6e 0101 	sbc.w	r1, lr, r1
   bd346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd34a:	d31b      	bcc.n	bd384 <__adddf3+0x124>
   bd34c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd350:	d30c      	bcc.n	bd36c <__adddf3+0x10c>
   bd352:	0849      	lsrs	r1, r1, #1
   bd354:	ea5f 0030 	movs.w	r0, r0, rrx
   bd358:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd35c:	f104 0401 	add.w	r4, r4, #1
   bd360:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd368:	f080 809a 	bcs.w	bd4a0 <__adddf3+0x240>
   bd36c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd370:	bf08      	it	eq
   bd372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd376:	f150 0000 	adcs.w	r0, r0, #0
   bd37a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd37e:	ea41 0105 	orr.w	r1, r1, r5
   bd382:	bd30      	pop	{r4, r5, pc}
   bd384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd388:	4140      	adcs	r0, r0
   bd38a:	eb41 0101 	adc.w	r1, r1, r1
   bd38e:	3c01      	subs	r4, #1
   bd390:	bf28      	it	cs
   bd392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd396:	d2e9      	bcs.n	bd36c <__adddf3+0x10c>
   bd398:	f091 0f00 	teq	r1, #0
   bd39c:	bf04      	itt	eq
   bd39e:	4601      	moveq	r1, r0
   bd3a0:	2000      	moveq	r0, #0
   bd3a2:	fab1 f381 	clz	r3, r1
   bd3a6:	bf08      	it	eq
   bd3a8:	3320      	addeq	r3, #32
   bd3aa:	f1a3 030b 	sub.w	r3, r3, #11
   bd3ae:	f1b3 0220 	subs.w	r2, r3, #32
   bd3b2:	da0c      	bge.n	bd3ce <__adddf3+0x16e>
   bd3b4:	320c      	adds	r2, #12
   bd3b6:	dd08      	ble.n	bd3ca <__adddf3+0x16a>
   bd3b8:	f102 0c14 	add.w	ip, r2, #20
   bd3bc:	f1c2 020c 	rsb	r2, r2, #12
   bd3c0:	fa01 f00c 	lsl.w	r0, r1, ip
   bd3c4:	fa21 f102 	lsr.w	r1, r1, r2
   bd3c8:	e00c      	b.n	bd3e4 <__adddf3+0x184>
   bd3ca:	f102 0214 	add.w	r2, r2, #20
   bd3ce:	bfd8      	it	le
   bd3d0:	f1c2 0c20 	rsble	ip, r2, #32
   bd3d4:	fa01 f102 	lsl.w	r1, r1, r2
   bd3d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd3dc:	bfdc      	itt	le
   bd3de:	ea41 010c 	orrle.w	r1, r1, ip
   bd3e2:	4090      	lslle	r0, r2
   bd3e4:	1ae4      	subs	r4, r4, r3
   bd3e6:	bfa2      	ittt	ge
   bd3e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd3ec:	4329      	orrge	r1, r5
   bd3ee:	bd30      	popge	{r4, r5, pc}
   bd3f0:	ea6f 0404 	mvn.w	r4, r4
   bd3f4:	3c1f      	subs	r4, #31
   bd3f6:	da1c      	bge.n	bd432 <__adddf3+0x1d2>
   bd3f8:	340c      	adds	r4, #12
   bd3fa:	dc0e      	bgt.n	bd41a <__adddf3+0x1ba>
   bd3fc:	f104 0414 	add.w	r4, r4, #20
   bd400:	f1c4 0220 	rsb	r2, r4, #32
   bd404:	fa20 f004 	lsr.w	r0, r0, r4
   bd408:	fa01 f302 	lsl.w	r3, r1, r2
   bd40c:	ea40 0003 	orr.w	r0, r0, r3
   bd410:	fa21 f304 	lsr.w	r3, r1, r4
   bd414:	ea45 0103 	orr.w	r1, r5, r3
   bd418:	bd30      	pop	{r4, r5, pc}
   bd41a:	f1c4 040c 	rsb	r4, r4, #12
   bd41e:	f1c4 0220 	rsb	r2, r4, #32
   bd422:	fa20 f002 	lsr.w	r0, r0, r2
   bd426:	fa01 f304 	lsl.w	r3, r1, r4
   bd42a:	ea40 0003 	orr.w	r0, r0, r3
   bd42e:	4629      	mov	r1, r5
   bd430:	bd30      	pop	{r4, r5, pc}
   bd432:	fa21 f004 	lsr.w	r0, r1, r4
   bd436:	4629      	mov	r1, r5
   bd438:	bd30      	pop	{r4, r5, pc}
   bd43a:	f094 0f00 	teq	r4, #0
   bd43e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd442:	bf06      	itte	eq
   bd444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd448:	3401      	addeq	r4, #1
   bd44a:	3d01      	subne	r5, #1
   bd44c:	e74e      	b.n	bd2ec <__adddf3+0x8c>
   bd44e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd452:	bf18      	it	ne
   bd454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd458:	d029      	beq.n	bd4ae <__adddf3+0x24e>
   bd45a:	ea94 0f05 	teq	r4, r5
   bd45e:	bf08      	it	eq
   bd460:	ea90 0f02 	teqeq	r0, r2
   bd464:	d005      	beq.n	bd472 <__adddf3+0x212>
   bd466:	ea54 0c00 	orrs.w	ip, r4, r0
   bd46a:	bf04      	itt	eq
   bd46c:	4619      	moveq	r1, r3
   bd46e:	4610      	moveq	r0, r2
   bd470:	bd30      	pop	{r4, r5, pc}
   bd472:	ea91 0f03 	teq	r1, r3
   bd476:	bf1e      	ittt	ne
   bd478:	2100      	movne	r1, #0
   bd47a:	2000      	movne	r0, #0
   bd47c:	bd30      	popne	{r4, r5, pc}
   bd47e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd482:	d105      	bne.n	bd490 <__adddf3+0x230>
   bd484:	0040      	lsls	r0, r0, #1
   bd486:	4149      	adcs	r1, r1
   bd488:	bf28      	it	cs
   bd48a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd48e:	bd30      	pop	{r4, r5, pc}
   bd490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd494:	bf3c      	itt	cc
   bd496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd49a:	bd30      	popcc	{r4, r5, pc}
   bd49c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd4a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd4a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd4a8:	f04f 0000 	mov.w	r0, #0
   bd4ac:	bd30      	pop	{r4, r5, pc}
   bd4ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd4b2:	bf1a      	itte	ne
   bd4b4:	4619      	movne	r1, r3
   bd4b6:	4610      	movne	r0, r2
   bd4b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd4bc:	bf1c      	itt	ne
   bd4be:	460b      	movne	r3, r1
   bd4c0:	4602      	movne	r2, r0
   bd4c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd4c6:	bf06      	itte	eq
   bd4c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd4cc:	ea91 0f03 	teqeq	r1, r3
   bd4d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd4d4:	bd30      	pop	{r4, r5, pc}
   bd4d6:	bf00      	nop

000bd4d8 <__aeabi_ui2d>:
   bd4d8:	f090 0f00 	teq	r0, #0
   bd4dc:	bf04      	itt	eq
   bd4de:	2100      	moveq	r1, #0
   bd4e0:	4770      	bxeq	lr
   bd4e2:	b530      	push	{r4, r5, lr}
   bd4e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd4e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd4ec:	f04f 0500 	mov.w	r5, #0
   bd4f0:	f04f 0100 	mov.w	r1, #0
   bd4f4:	e750      	b.n	bd398 <__adddf3+0x138>
   bd4f6:	bf00      	nop

000bd4f8 <__aeabi_i2d>:
   bd4f8:	f090 0f00 	teq	r0, #0
   bd4fc:	bf04      	itt	eq
   bd4fe:	2100      	moveq	r1, #0
   bd500:	4770      	bxeq	lr
   bd502:	b530      	push	{r4, r5, lr}
   bd504:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd508:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd50c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd510:	bf48      	it	mi
   bd512:	4240      	negmi	r0, r0
   bd514:	f04f 0100 	mov.w	r1, #0
   bd518:	e73e      	b.n	bd398 <__adddf3+0x138>
   bd51a:	bf00      	nop

000bd51c <__aeabi_f2d>:
   bd51c:	0042      	lsls	r2, r0, #1
   bd51e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd522:	ea4f 0131 	mov.w	r1, r1, rrx
   bd526:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd52a:	bf1f      	itttt	ne
   bd52c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd538:	4770      	bxne	lr
   bd53a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd53e:	bf08      	it	eq
   bd540:	4770      	bxeq	lr
   bd542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd546:	bf04      	itt	eq
   bd548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd54c:	4770      	bxeq	lr
   bd54e:	b530      	push	{r4, r5, lr}
   bd550:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd55c:	e71c      	b.n	bd398 <__adddf3+0x138>
   bd55e:	bf00      	nop

000bd560 <__aeabi_ul2d>:
   bd560:	ea50 0201 	orrs.w	r2, r0, r1
   bd564:	bf08      	it	eq
   bd566:	4770      	bxeq	lr
   bd568:	b530      	push	{r4, r5, lr}
   bd56a:	f04f 0500 	mov.w	r5, #0
   bd56e:	e00a      	b.n	bd586 <__aeabi_l2d+0x16>

000bd570 <__aeabi_l2d>:
   bd570:	ea50 0201 	orrs.w	r2, r0, r1
   bd574:	bf08      	it	eq
   bd576:	4770      	bxeq	lr
   bd578:	b530      	push	{r4, r5, lr}
   bd57a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd57e:	d502      	bpl.n	bd586 <__aeabi_l2d+0x16>
   bd580:	4240      	negs	r0, r0
   bd582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd586:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd58a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd58e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd592:	f43f aed8 	beq.w	bd346 <__adddf3+0xe6>
   bd596:	f04f 0203 	mov.w	r2, #3
   bd59a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd59e:	bf18      	it	ne
   bd5a0:	3203      	addne	r2, #3
   bd5a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd5a6:	bf18      	it	ne
   bd5a8:	3203      	addne	r2, #3
   bd5aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd5ae:	f1c2 0320 	rsb	r3, r2, #32
   bd5b2:	fa00 fc03 	lsl.w	ip, r0, r3
   bd5b6:	fa20 f002 	lsr.w	r0, r0, r2
   bd5ba:	fa01 fe03 	lsl.w	lr, r1, r3
   bd5be:	ea40 000e 	orr.w	r0, r0, lr
   bd5c2:	fa21 f102 	lsr.w	r1, r1, r2
   bd5c6:	4414      	add	r4, r2
   bd5c8:	e6bd      	b.n	bd346 <__adddf3+0xe6>
   bd5ca:	bf00      	nop

000bd5cc <__aeabi_dmul>:
   bd5cc:	b570      	push	{r4, r5, r6, lr}
   bd5ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd5d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd5d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd5da:	bf1d      	ittte	ne
   bd5dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd5e0:	ea94 0f0c 	teqne	r4, ip
   bd5e4:	ea95 0f0c 	teqne	r5, ip
   bd5e8:	f000 f8de 	bleq	bd7a8 <__aeabi_dmul+0x1dc>
   bd5ec:	442c      	add	r4, r5
   bd5ee:	ea81 0603 	eor.w	r6, r1, r3
   bd5f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd5f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd5fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd5fe:	bf18      	it	ne
   bd600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd60c:	d038      	beq.n	bd680 <__aeabi_dmul+0xb4>
   bd60e:	fba0 ce02 	umull	ip, lr, r0, r2
   bd612:	f04f 0500 	mov.w	r5, #0
   bd616:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd61a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd61e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd622:	f04f 0600 	mov.w	r6, #0
   bd626:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd62a:	f09c 0f00 	teq	ip, #0
   bd62e:	bf18      	it	ne
   bd630:	f04e 0e01 	orrne.w	lr, lr, #1
   bd634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd63c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd640:	d204      	bcs.n	bd64c <__aeabi_dmul+0x80>
   bd642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd646:	416d      	adcs	r5, r5
   bd648:	eb46 0606 	adc.w	r6, r6, r6
   bd64c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd65c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd664:	bf88      	it	hi
   bd666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd66a:	d81e      	bhi.n	bd6aa <__aeabi_dmul+0xde>
   bd66c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd670:	bf08      	it	eq
   bd672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd676:	f150 0000 	adcs.w	r0, r0, #0
   bd67a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd67e:	bd70      	pop	{r4, r5, r6, pc}
   bd680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd684:	ea46 0101 	orr.w	r1, r6, r1
   bd688:	ea40 0002 	orr.w	r0, r0, r2
   bd68c:	ea81 0103 	eor.w	r1, r1, r3
   bd690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd694:	bfc2      	ittt	gt
   bd696:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd69a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd69e:	bd70      	popgt	{r4, r5, r6, pc}
   bd6a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd6a4:	f04f 0e00 	mov.w	lr, #0
   bd6a8:	3c01      	subs	r4, #1
   bd6aa:	f300 80ab 	bgt.w	bd804 <__aeabi_dmul+0x238>
   bd6ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd6b2:	bfde      	ittt	le
   bd6b4:	2000      	movle	r0, #0
   bd6b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd6ba:	bd70      	pople	{r4, r5, r6, pc}
   bd6bc:	f1c4 0400 	rsb	r4, r4, #0
   bd6c0:	3c20      	subs	r4, #32
   bd6c2:	da35      	bge.n	bd730 <__aeabi_dmul+0x164>
   bd6c4:	340c      	adds	r4, #12
   bd6c6:	dc1b      	bgt.n	bd700 <__aeabi_dmul+0x134>
   bd6c8:	f104 0414 	add.w	r4, r4, #20
   bd6cc:	f1c4 0520 	rsb	r5, r4, #32
   bd6d0:	fa00 f305 	lsl.w	r3, r0, r5
   bd6d4:	fa20 f004 	lsr.w	r0, r0, r4
   bd6d8:	fa01 f205 	lsl.w	r2, r1, r5
   bd6dc:	ea40 0002 	orr.w	r0, r0, r2
   bd6e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd6e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd6e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd6ec:	fa21 f604 	lsr.w	r6, r1, r4
   bd6f0:	eb42 0106 	adc.w	r1, r2, r6
   bd6f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd6f8:	bf08      	it	eq
   bd6fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd6fe:	bd70      	pop	{r4, r5, r6, pc}
   bd700:	f1c4 040c 	rsb	r4, r4, #12
   bd704:	f1c4 0520 	rsb	r5, r4, #32
   bd708:	fa00 f304 	lsl.w	r3, r0, r4
   bd70c:	fa20 f005 	lsr.w	r0, r0, r5
   bd710:	fa01 f204 	lsl.w	r2, r1, r4
   bd714:	ea40 0002 	orr.w	r0, r0, r2
   bd718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd71c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd720:	f141 0100 	adc.w	r1, r1, #0
   bd724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd728:	bf08      	it	eq
   bd72a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd72e:	bd70      	pop	{r4, r5, r6, pc}
   bd730:	f1c4 0520 	rsb	r5, r4, #32
   bd734:	fa00 f205 	lsl.w	r2, r0, r5
   bd738:	ea4e 0e02 	orr.w	lr, lr, r2
   bd73c:	fa20 f304 	lsr.w	r3, r0, r4
   bd740:	fa01 f205 	lsl.w	r2, r1, r5
   bd744:	ea43 0302 	orr.w	r3, r3, r2
   bd748:	fa21 f004 	lsr.w	r0, r1, r4
   bd74c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd750:	fa21 f204 	lsr.w	r2, r1, r4
   bd754:	ea20 0002 	bic.w	r0, r0, r2
   bd758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd75c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd760:	bf08      	it	eq
   bd762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd766:	bd70      	pop	{r4, r5, r6, pc}
   bd768:	f094 0f00 	teq	r4, #0
   bd76c:	d10f      	bne.n	bd78e <__aeabi_dmul+0x1c2>
   bd76e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd772:	0040      	lsls	r0, r0, #1
   bd774:	eb41 0101 	adc.w	r1, r1, r1
   bd778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd77c:	bf08      	it	eq
   bd77e:	3c01      	subeq	r4, #1
   bd780:	d0f7      	beq.n	bd772 <__aeabi_dmul+0x1a6>
   bd782:	ea41 0106 	orr.w	r1, r1, r6
   bd786:	f095 0f00 	teq	r5, #0
   bd78a:	bf18      	it	ne
   bd78c:	4770      	bxne	lr
   bd78e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd792:	0052      	lsls	r2, r2, #1
   bd794:	eb43 0303 	adc.w	r3, r3, r3
   bd798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd79c:	bf08      	it	eq
   bd79e:	3d01      	subeq	r5, #1
   bd7a0:	d0f7      	beq.n	bd792 <__aeabi_dmul+0x1c6>
   bd7a2:	ea43 0306 	orr.w	r3, r3, r6
   bd7a6:	4770      	bx	lr
   bd7a8:	ea94 0f0c 	teq	r4, ip
   bd7ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd7b0:	bf18      	it	ne
   bd7b2:	ea95 0f0c 	teqne	r5, ip
   bd7b6:	d00c      	beq.n	bd7d2 <__aeabi_dmul+0x206>
   bd7b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd7bc:	bf18      	it	ne
   bd7be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd7c2:	d1d1      	bne.n	bd768 <__aeabi_dmul+0x19c>
   bd7c4:	ea81 0103 	eor.w	r1, r1, r3
   bd7c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd7cc:	f04f 0000 	mov.w	r0, #0
   bd7d0:	bd70      	pop	{r4, r5, r6, pc}
   bd7d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd7d6:	bf06      	itte	eq
   bd7d8:	4610      	moveq	r0, r2
   bd7da:	4619      	moveq	r1, r3
   bd7dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd7e0:	d019      	beq.n	bd816 <__aeabi_dmul+0x24a>
   bd7e2:	ea94 0f0c 	teq	r4, ip
   bd7e6:	d102      	bne.n	bd7ee <__aeabi_dmul+0x222>
   bd7e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd7ec:	d113      	bne.n	bd816 <__aeabi_dmul+0x24a>
   bd7ee:	ea95 0f0c 	teq	r5, ip
   bd7f2:	d105      	bne.n	bd800 <__aeabi_dmul+0x234>
   bd7f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd7f8:	bf1c      	itt	ne
   bd7fa:	4610      	movne	r0, r2
   bd7fc:	4619      	movne	r1, r3
   bd7fe:	d10a      	bne.n	bd816 <__aeabi_dmul+0x24a>
   bd800:	ea81 0103 	eor.w	r1, r1, r3
   bd804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd80c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd810:	f04f 0000 	mov.w	r0, #0
   bd814:	bd70      	pop	{r4, r5, r6, pc}
   bd816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd81a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd81e:	bd70      	pop	{r4, r5, r6, pc}

000bd820 <__aeabi_ddiv>:
   bd820:	b570      	push	{r4, r5, r6, lr}
   bd822:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd82a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd82e:	bf1d      	ittte	ne
   bd830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd834:	ea94 0f0c 	teqne	r4, ip
   bd838:	ea95 0f0c 	teqne	r5, ip
   bd83c:	f000 f8a7 	bleq	bd98e <__aeabi_ddiv+0x16e>
   bd840:	eba4 0405 	sub.w	r4, r4, r5
   bd844:	ea81 0e03 	eor.w	lr, r1, r3
   bd848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd84c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd850:	f000 8088 	beq.w	bd964 <__aeabi_ddiv+0x144>
   bd854:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd85c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd864:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd86c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd870:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd878:	429d      	cmp	r5, r3
   bd87a:	bf08      	it	eq
   bd87c:	4296      	cmpeq	r6, r2
   bd87e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd882:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd886:	d202      	bcs.n	bd88e <__aeabi_ddiv+0x6e>
   bd888:	085b      	lsrs	r3, r3, #1
   bd88a:	ea4f 0232 	mov.w	r2, r2, rrx
   bd88e:	1ab6      	subs	r6, r6, r2
   bd890:	eb65 0503 	sbc.w	r5, r5, r3
   bd894:	085b      	lsrs	r3, r3, #1
   bd896:	ea4f 0232 	mov.w	r2, r2, rrx
   bd89a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd89e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd8a2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8aa:	bf22      	ittt	cs
   bd8ac:	1ab6      	subcs	r6, r6, r2
   bd8ae:	4675      	movcs	r5, lr
   bd8b0:	ea40 000c 	orrcs.w	r0, r0, ip
   bd8b4:	085b      	lsrs	r3, r3, #1
   bd8b6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8ba:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8be:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8c2:	bf22      	ittt	cs
   bd8c4:	1ab6      	subcs	r6, r6, r2
   bd8c6:	4675      	movcs	r5, lr
   bd8c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd8cc:	085b      	lsrs	r3, r3, #1
   bd8ce:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8d2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8da:	bf22      	ittt	cs
   bd8dc:	1ab6      	subcs	r6, r6, r2
   bd8de:	4675      	movcs	r5, lr
   bd8e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd8e4:	085b      	lsrs	r3, r3, #1
   bd8e6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8ea:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8f2:	bf22      	ittt	cs
   bd8f4:	1ab6      	subcs	r6, r6, r2
   bd8f6:	4675      	movcs	r5, lr
   bd8f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd8fc:	ea55 0e06 	orrs.w	lr, r5, r6
   bd900:	d018      	beq.n	bd934 <__aeabi_ddiv+0x114>
   bd902:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd90a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd90e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd91a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd91e:	d1c0      	bne.n	bd8a2 <__aeabi_ddiv+0x82>
   bd920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd924:	d10b      	bne.n	bd93e <__aeabi_ddiv+0x11e>
   bd926:	ea41 0100 	orr.w	r1, r1, r0
   bd92a:	f04f 0000 	mov.w	r0, #0
   bd92e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd932:	e7b6      	b.n	bd8a2 <__aeabi_ddiv+0x82>
   bd934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd938:	bf04      	itt	eq
   bd93a:	4301      	orreq	r1, r0
   bd93c:	2000      	moveq	r0, #0
   bd93e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd942:	bf88      	it	hi
   bd944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd948:	f63f aeaf 	bhi.w	bd6aa <__aeabi_dmul+0xde>
   bd94c:	ebb5 0c03 	subs.w	ip, r5, r3
   bd950:	bf04      	itt	eq
   bd952:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd95a:	f150 0000 	adcs.w	r0, r0, #0
   bd95e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd962:	bd70      	pop	{r4, r5, r6, pc}
   bd964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd96c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd970:	bfc2      	ittt	gt
   bd972:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd97a:	bd70      	popgt	{r4, r5, r6, pc}
   bd97c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd980:	f04f 0e00 	mov.w	lr, #0
   bd984:	3c01      	subs	r4, #1
   bd986:	e690      	b.n	bd6aa <__aeabi_dmul+0xde>
   bd988:	ea45 0e06 	orr.w	lr, r5, r6
   bd98c:	e68d      	b.n	bd6aa <__aeabi_dmul+0xde>
   bd98e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd992:	ea94 0f0c 	teq	r4, ip
   bd996:	bf08      	it	eq
   bd998:	ea95 0f0c 	teqeq	r5, ip
   bd99c:	f43f af3b 	beq.w	bd816 <__aeabi_dmul+0x24a>
   bd9a0:	ea94 0f0c 	teq	r4, ip
   bd9a4:	d10a      	bne.n	bd9bc <__aeabi_ddiv+0x19c>
   bd9a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd9aa:	f47f af34 	bne.w	bd816 <__aeabi_dmul+0x24a>
   bd9ae:	ea95 0f0c 	teq	r5, ip
   bd9b2:	f47f af25 	bne.w	bd800 <__aeabi_dmul+0x234>
   bd9b6:	4610      	mov	r0, r2
   bd9b8:	4619      	mov	r1, r3
   bd9ba:	e72c      	b.n	bd816 <__aeabi_dmul+0x24a>
   bd9bc:	ea95 0f0c 	teq	r5, ip
   bd9c0:	d106      	bne.n	bd9d0 <__aeabi_ddiv+0x1b0>
   bd9c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd9c6:	f43f aefd 	beq.w	bd7c4 <__aeabi_dmul+0x1f8>
   bd9ca:	4610      	mov	r0, r2
   bd9cc:	4619      	mov	r1, r3
   bd9ce:	e722      	b.n	bd816 <__aeabi_dmul+0x24a>
   bd9d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd9d4:	bf18      	it	ne
   bd9d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd9da:	f47f aec5 	bne.w	bd768 <__aeabi_dmul+0x19c>
   bd9de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd9e2:	f47f af0d 	bne.w	bd800 <__aeabi_dmul+0x234>
   bd9e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd9ea:	f47f aeeb 	bne.w	bd7c4 <__aeabi_dmul+0x1f8>
   bd9ee:	e712      	b.n	bd816 <__aeabi_dmul+0x24a>

000bd9f0 <__gedf2>:
   bd9f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd9f4:	e006      	b.n	bda04 <__cmpdf2+0x4>
   bd9f6:	bf00      	nop

000bd9f8 <__ledf2>:
   bd9f8:	f04f 0c01 	mov.w	ip, #1
   bd9fc:	e002      	b.n	bda04 <__cmpdf2+0x4>
   bd9fe:	bf00      	nop

000bda00 <__cmpdf2>:
   bda00:	f04f 0c01 	mov.w	ip, #1
   bda04:	f84d cd04 	str.w	ip, [sp, #-4]!
   bda08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bda0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bda10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bda14:	bf18      	it	ne
   bda16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bda1a:	d01b      	beq.n	bda54 <__cmpdf2+0x54>
   bda1c:	b001      	add	sp, #4
   bda1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bda22:	bf0c      	ite	eq
   bda24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bda28:	ea91 0f03 	teqne	r1, r3
   bda2c:	bf02      	ittt	eq
   bda2e:	ea90 0f02 	teqeq	r0, r2
   bda32:	2000      	moveq	r0, #0
   bda34:	4770      	bxeq	lr
   bda36:	f110 0f00 	cmn.w	r0, #0
   bda3a:	ea91 0f03 	teq	r1, r3
   bda3e:	bf58      	it	pl
   bda40:	4299      	cmppl	r1, r3
   bda42:	bf08      	it	eq
   bda44:	4290      	cmpeq	r0, r2
   bda46:	bf2c      	ite	cs
   bda48:	17d8      	asrcs	r0, r3, #31
   bda4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bda4e:	f040 0001 	orr.w	r0, r0, #1
   bda52:	4770      	bx	lr
   bda54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bda58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bda5c:	d102      	bne.n	bda64 <__cmpdf2+0x64>
   bda5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bda62:	d107      	bne.n	bda74 <__cmpdf2+0x74>
   bda64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bda68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bda6c:	d1d6      	bne.n	bda1c <__cmpdf2+0x1c>
   bda6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bda72:	d0d3      	beq.n	bda1c <__cmpdf2+0x1c>
   bda74:	f85d 0b04 	ldr.w	r0, [sp], #4
   bda78:	4770      	bx	lr
   bda7a:	bf00      	nop

000bda7c <__aeabi_cdrcmple>:
   bda7c:	4684      	mov	ip, r0
   bda7e:	4610      	mov	r0, r2
   bda80:	4662      	mov	r2, ip
   bda82:	468c      	mov	ip, r1
   bda84:	4619      	mov	r1, r3
   bda86:	4663      	mov	r3, ip
   bda88:	e000      	b.n	bda8c <__aeabi_cdcmpeq>
   bda8a:	bf00      	nop

000bda8c <__aeabi_cdcmpeq>:
   bda8c:	b501      	push	{r0, lr}
   bda8e:	f7ff ffb7 	bl	bda00 <__cmpdf2>
   bda92:	2800      	cmp	r0, #0
   bda94:	bf48      	it	mi
   bda96:	f110 0f00 	cmnmi.w	r0, #0
   bda9a:	bd01      	pop	{r0, pc}

000bda9c <__aeabi_dcmpeq>:
   bda9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdaa0:	f7ff fff4 	bl	bda8c <__aeabi_cdcmpeq>
   bdaa4:	bf0c      	ite	eq
   bdaa6:	2001      	moveq	r0, #1
   bdaa8:	2000      	movne	r0, #0
   bdaaa:	f85d fb08 	ldr.w	pc, [sp], #8
   bdaae:	bf00      	nop

000bdab0 <__aeabi_dcmplt>:
   bdab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdab4:	f7ff ffea 	bl	bda8c <__aeabi_cdcmpeq>
   bdab8:	bf34      	ite	cc
   bdaba:	2001      	movcc	r0, #1
   bdabc:	2000      	movcs	r0, #0
   bdabe:	f85d fb08 	ldr.w	pc, [sp], #8
   bdac2:	bf00      	nop

000bdac4 <__aeabi_dcmple>:
   bdac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdac8:	f7ff ffe0 	bl	bda8c <__aeabi_cdcmpeq>
   bdacc:	bf94      	ite	ls
   bdace:	2001      	movls	r0, #1
   bdad0:	2000      	movhi	r0, #0
   bdad2:	f85d fb08 	ldr.w	pc, [sp], #8
   bdad6:	bf00      	nop

000bdad8 <__aeabi_dcmpge>:
   bdad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdadc:	f7ff ffce 	bl	bda7c <__aeabi_cdrcmple>
   bdae0:	bf94      	ite	ls
   bdae2:	2001      	movls	r0, #1
   bdae4:	2000      	movhi	r0, #0
   bdae6:	f85d fb08 	ldr.w	pc, [sp], #8
   bdaea:	bf00      	nop

000bdaec <__aeabi_dcmpgt>:
   bdaec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdaf0:	f7ff ffc4 	bl	bda7c <__aeabi_cdrcmple>
   bdaf4:	bf34      	ite	cc
   bdaf6:	2001      	movcc	r0, #1
   bdaf8:	2000      	movcs	r0, #0
   bdafa:	f85d fb08 	ldr.w	pc, [sp], #8
   bdafe:	bf00      	nop

000bdb00 <__aeabi_dcmpun>:
   bdb00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdb04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdb08:	d102      	bne.n	bdb10 <__aeabi_dcmpun+0x10>
   bdb0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bdb0e:	d10a      	bne.n	bdb26 <__aeabi_dcmpun+0x26>
   bdb10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdb14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdb18:	d102      	bne.n	bdb20 <__aeabi_dcmpun+0x20>
   bdb1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bdb1e:	d102      	bne.n	bdb26 <__aeabi_dcmpun+0x26>
   bdb20:	f04f 0000 	mov.w	r0, #0
   bdb24:	4770      	bx	lr
   bdb26:	f04f 0001 	mov.w	r0, #1
   bdb2a:	4770      	bx	lr

000bdb2c <__aeabi_d2iz>:
   bdb2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdb30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdb34:	d215      	bcs.n	bdb62 <__aeabi_d2iz+0x36>
   bdb36:	d511      	bpl.n	bdb5c <__aeabi_d2iz+0x30>
   bdb38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdb3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdb40:	d912      	bls.n	bdb68 <__aeabi_d2iz+0x3c>
   bdb42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdb46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdb4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdb4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bdb52:	fa23 f002 	lsr.w	r0, r3, r2
   bdb56:	bf18      	it	ne
   bdb58:	4240      	negne	r0, r0
   bdb5a:	4770      	bx	lr
   bdb5c:	f04f 0000 	mov.w	r0, #0
   bdb60:	4770      	bx	lr
   bdb62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdb66:	d105      	bne.n	bdb74 <__aeabi_d2iz+0x48>
   bdb68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bdb6c:	bf08      	it	eq
   bdb6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bdb72:	4770      	bx	lr
   bdb74:	f04f 0000 	mov.w	r0, #0
   bdb78:	4770      	bx	lr
   bdb7a:	bf00      	nop

000bdb7c <__aeabi_d2uiz>:
   bdb7c:	004a      	lsls	r2, r1, #1
   bdb7e:	d211      	bcs.n	bdba4 <__aeabi_d2uiz+0x28>
   bdb80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdb84:	d211      	bcs.n	bdbaa <__aeabi_d2uiz+0x2e>
   bdb86:	d50d      	bpl.n	bdba4 <__aeabi_d2uiz+0x28>
   bdb88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdb8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdb90:	d40e      	bmi.n	bdbb0 <__aeabi_d2uiz+0x34>
   bdb92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdb96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdb9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdb9e:	fa23 f002 	lsr.w	r0, r3, r2
   bdba2:	4770      	bx	lr
   bdba4:	f04f 0000 	mov.w	r0, #0
   bdba8:	4770      	bx	lr
   bdbaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdbae:	d102      	bne.n	bdbb6 <__aeabi_d2uiz+0x3a>
   bdbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdbb4:	4770      	bx	lr
   bdbb6:	f04f 0000 	mov.w	r0, #0
   bdbba:	4770      	bx	lr

000bdbbc <__aeabi_d2f>:
   bdbbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdbc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bdbc4:	bf24      	itt	cs
   bdbc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bdbca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bdbce:	d90d      	bls.n	bdbec <__aeabi_d2f+0x30>
   bdbd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bdbd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bdbd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bdbdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bdbe0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bdbe4:	bf08      	it	eq
   bdbe6:	f020 0001 	biceq.w	r0, r0, #1
   bdbea:	4770      	bx	lr
   bdbec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bdbf0:	d121      	bne.n	bdc36 <__aeabi_d2f+0x7a>
   bdbf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bdbf6:	bfbc      	itt	lt
   bdbf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bdbfc:	4770      	bxlt	lr
   bdbfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdc02:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bdc06:	f1c2 0218 	rsb	r2, r2, #24
   bdc0a:	f1c2 0c20 	rsb	ip, r2, #32
   bdc0e:	fa10 f30c 	lsls.w	r3, r0, ip
   bdc12:	fa20 f002 	lsr.w	r0, r0, r2
   bdc16:	bf18      	it	ne
   bdc18:	f040 0001 	orrne.w	r0, r0, #1
   bdc1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdc20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bdc24:	fa03 fc0c 	lsl.w	ip, r3, ip
   bdc28:	ea40 000c 	orr.w	r0, r0, ip
   bdc2c:	fa23 f302 	lsr.w	r3, r3, r2
   bdc30:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bdc34:	e7cc      	b.n	bdbd0 <__aeabi_d2f+0x14>
   bdc36:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bdc3a:	d107      	bne.n	bdc4c <__aeabi_d2f+0x90>
   bdc3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bdc40:	bf1e      	ittt	ne
   bdc42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bdc46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bdc4a:	4770      	bxne	lr
   bdc4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bdc50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bdc54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bdc58:	4770      	bx	lr
   bdc5a:	bf00      	nop

000bdc5c <asctime_r>:
   bdc5c:	b510      	push	{r4, lr}
   bdc5e:	460c      	mov	r4, r1
   bdc60:	6941      	ldr	r1, [r0, #20]
   bdc62:	6903      	ldr	r3, [r0, #16]
   bdc64:	6982      	ldr	r2, [r0, #24]
   bdc66:	b086      	sub	sp, #24
   bdc68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bdc6c:	9104      	str	r1, [sp, #16]
   bdc6e:	6801      	ldr	r1, [r0, #0]
   bdc70:	9103      	str	r1, [sp, #12]
   bdc72:	6841      	ldr	r1, [r0, #4]
   bdc74:	9102      	str	r1, [sp, #8]
   bdc76:	6881      	ldr	r1, [r0, #8]
   bdc78:	9101      	str	r1, [sp, #4]
   bdc7a:	68c1      	ldr	r1, [r0, #12]
   bdc7c:	9100      	str	r1, [sp, #0]
   bdc7e:	4907      	ldr	r1, [pc, #28]	; (bdc9c <asctime_r+0x40>)
   bdc80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bdc84:	440b      	add	r3, r1
   bdc86:	4906      	ldr	r1, [pc, #24]	; (bdca0 <asctime_r+0x44>)
   bdc88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bdc8c:	440a      	add	r2, r1
   bdc8e:	4620      	mov	r0, r4
   bdc90:	4904      	ldr	r1, [pc, #16]	; (bdca4 <asctime_r+0x48>)
   bdc92:	f7fc f8d7 	bl	b9e44 <siprintf>
   bdc96:	4620      	mov	r0, r4
   bdc98:	b006      	add	sp, #24
   bdc9a:	bd10      	pop	{r4, pc}
   bdc9c:	000bf78e 	.word	0x000bf78e
   bdca0:	000bf779 	.word	0x000bf779
   bdca4:	000bf759 	.word	0x000bf759

000bdca8 <atexit>:
   bdca8:	2300      	movs	r3, #0
   bdcaa:	4601      	mov	r1, r0
   bdcac:	461a      	mov	r2, r3
   bdcae:	4618      	mov	r0, r3
   bdcb0:	f000 ba36 	b.w	be120 <__register_exitproc>

000bdcb4 <atoi>:
   bdcb4:	220a      	movs	r2, #10
   bdcb6:	2100      	movs	r1, #0
   bdcb8:	f000 b9bc 	b.w	be034 <strtol>

000bdcbc <gmtime>:
   bdcbc:	b538      	push	{r3, r4, r5, lr}
   bdcbe:	4b0b      	ldr	r3, [pc, #44]	; (bdcec <gmtime+0x30>)
   bdcc0:	681d      	ldr	r5, [r3, #0]
   bdcc2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bdcc4:	4604      	mov	r4, r0
   bdcc6:	b953      	cbnz	r3, bdcde <gmtime+0x22>
   bdcc8:	2024      	movs	r0, #36	; 0x24
   bdcca:	f7fc f8a3 	bl	b9e14 <malloc>
   bdcce:	4602      	mov	r2, r0
   bdcd0:	63e8      	str	r0, [r5, #60]	; 0x3c
   bdcd2:	b920      	cbnz	r0, bdcde <gmtime+0x22>
   bdcd4:	4b06      	ldr	r3, [pc, #24]	; (bdcf0 <gmtime+0x34>)
   bdcd6:	4807      	ldr	r0, [pc, #28]	; (bdcf4 <gmtime+0x38>)
   bdcd8:	2139      	movs	r1, #57	; 0x39
   bdcda:	f7fc f8eb 	bl	b9eb4 <__assert_func>
   bdcde:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bdce0:	4620      	mov	r0, r4
   bdce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdce6:	f7fc b905 	b.w	b9ef4 <gmtime_r>
   bdcea:	bf00      	nop
   bdcec:	2003e3e8 	.word	0x2003e3e8
   bdcf0:	000bf7b2 	.word	0x000bf7b2
   bdcf4:	000bf7c9 	.word	0x000bf7c9

000bdcf8 <isprint>:
   bdcf8:	4b02      	ldr	r3, [pc, #8]	; (bdd04 <isprint+0xc>)
   bdcfa:	4418      	add	r0, r3
   bdcfc:	7840      	ldrb	r0, [r0, #1]
   bdcfe:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bdd02:	4770      	bx	lr
   bdd04:	000bf87b 	.word	0x000bf87b

000bdd08 <memcpy>:
   bdd08:	440a      	add	r2, r1
   bdd0a:	4291      	cmp	r1, r2
   bdd0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bdd10:	d100      	bne.n	bdd14 <memcpy+0xc>
   bdd12:	4770      	bx	lr
   bdd14:	b510      	push	{r4, lr}
   bdd16:	f811 4b01 	ldrb.w	r4, [r1], #1
   bdd1a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bdd1e:	4291      	cmp	r1, r2
   bdd20:	d1f9      	bne.n	bdd16 <memcpy+0xe>
   bdd22:	bd10      	pop	{r4, pc}

000bdd24 <memmove>:
   bdd24:	4288      	cmp	r0, r1
   bdd26:	b510      	push	{r4, lr}
   bdd28:	eb01 0402 	add.w	r4, r1, r2
   bdd2c:	d902      	bls.n	bdd34 <memmove+0x10>
   bdd2e:	4284      	cmp	r4, r0
   bdd30:	4623      	mov	r3, r4
   bdd32:	d807      	bhi.n	bdd44 <memmove+0x20>
   bdd34:	1e43      	subs	r3, r0, #1
   bdd36:	42a1      	cmp	r1, r4
   bdd38:	d008      	beq.n	bdd4c <memmove+0x28>
   bdd3a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bdd3e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bdd42:	e7f8      	b.n	bdd36 <memmove+0x12>
   bdd44:	4402      	add	r2, r0
   bdd46:	4601      	mov	r1, r0
   bdd48:	428a      	cmp	r2, r1
   bdd4a:	d100      	bne.n	bdd4e <memmove+0x2a>
   bdd4c:	bd10      	pop	{r4, pc}
   bdd4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bdd52:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bdd56:	e7f7      	b.n	bdd48 <memmove+0x24>

000bdd58 <memset>:
   bdd58:	4402      	add	r2, r0
   bdd5a:	4603      	mov	r3, r0
   bdd5c:	4293      	cmp	r3, r2
   bdd5e:	d100      	bne.n	bdd62 <memset+0xa>
   bdd60:	4770      	bx	lr
   bdd62:	f803 1b01 	strb.w	r1, [r3], #1
   bdd66:	e7f9      	b.n	bdd5c <memset+0x4>

000bdd68 <srand>:
   bdd68:	b538      	push	{r3, r4, r5, lr}
   bdd6a:	4b10      	ldr	r3, [pc, #64]	; (bddac <srand+0x44>)
   bdd6c:	681d      	ldr	r5, [r3, #0]
   bdd6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdd70:	4604      	mov	r4, r0
   bdd72:	b9b3      	cbnz	r3, bdda2 <srand+0x3a>
   bdd74:	2018      	movs	r0, #24
   bdd76:	f7fc f84d 	bl	b9e14 <malloc>
   bdd7a:	4602      	mov	r2, r0
   bdd7c:	63a8      	str	r0, [r5, #56]	; 0x38
   bdd7e:	b920      	cbnz	r0, bdd8a <srand+0x22>
   bdd80:	4b0b      	ldr	r3, [pc, #44]	; (bddb0 <srand+0x48>)
   bdd82:	480c      	ldr	r0, [pc, #48]	; (bddb4 <srand+0x4c>)
   bdd84:	2142      	movs	r1, #66	; 0x42
   bdd86:	f7fc f895 	bl	b9eb4 <__assert_func>
   bdd8a:	490b      	ldr	r1, [pc, #44]	; (bddb8 <srand+0x50>)
   bdd8c:	4b0b      	ldr	r3, [pc, #44]	; (bddbc <srand+0x54>)
   bdd8e:	e9c0 1300 	strd	r1, r3, [r0]
   bdd92:	4b0b      	ldr	r3, [pc, #44]	; (bddc0 <srand+0x58>)
   bdd94:	6083      	str	r3, [r0, #8]
   bdd96:	230b      	movs	r3, #11
   bdd98:	8183      	strh	r3, [r0, #12]
   bdd9a:	2100      	movs	r1, #0
   bdd9c:	2001      	movs	r0, #1
   bdd9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bdda2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdda4:	2200      	movs	r2, #0
   bdda6:	611c      	str	r4, [r3, #16]
   bdda8:	615a      	str	r2, [r3, #20]
   bddaa:	bd38      	pop	{r3, r4, r5, pc}
   bddac:	2003e3e8 	.word	0x2003e3e8
   bddb0:	000bf7b2 	.word	0x000bf7b2
   bddb4:	000bf822 	.word	0x000bf822
   bddb8:	abcd330e 	.word	0xabcd330e
   bddbc:	e66d1234 	.word	0xe66d1234
   bddc0:	0005deec 	.word	0x0005deec

000bddc4 <strchr>:
   bddc4:	b2c9      	uxtb	r1, r1
   bddc6:	4603      	mov	r3, r0
   bddc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   bddcc:	b11a      	cbz	r2, bddd6 <strchr+0x12>
   bddce:	428a      	cmp	r2, r1
   bddd0:	d1f9      	bne.n	bddc6 <strchr+0x2>
   bddd2:	4618      	mov	r0, r3
   bddd4:	4770      	bx	lr
   bddd6:	2900      	cmp	r1, #0
   bddd8:	bf18      	it	ne
   bddda:	2300      	movne	r3, #0
   bdddc:	e7f9      	b.n	bddd2 <strchr+0xe>

000bddde <strchrnul>:
   bddde:	b510      	push	{r4, lr}
   bdde0:	4604      	mov	r4, r0
   bdde2:	f7ff ffef 	bl	bddc4 <strchr>
   bdde6:	b918      	cbnz	r0, bddf0 <strchrnul+0x12>
   bdde8:	4620      	mov	r0, r4
   bddea:	f000 f832 	bl	bde52 <strlen>
   bddee:	4420      	add	r0, r4
   bddf0:	bd10      	pop	{r4, pc}

000bddf2 <strcmp>:
   bddf2:	f810 2b01 	ldrb.w	r2, [r0], #1
   bddf6:	f811 3b01 	ldrb.w	r3, [r1], #1
   bddfa:	2a01      	cmp	r2, #1
   bddfc:	bf28      	it	cs
   bddfe:	429a      	cmpcs	r2, r3
   bde00:	d0f7      	beq.n	bddf2 <strcmp>
   bde02:	1ad0      	subs	r0, r2, r3
   bde04:	4770      	bx	lr

000bde06 <strcpy>:
   bde06:	4603      	mov	r3, r0
   bde08:	f811 2b01 	ldrb.w	r2, [r1], #1
   bde0c:	f803 2b01 	strb.w	r2, [r3], #1
   bde10:	2a00      	cmp	r2, #0
   bde12:	d1f9      	bne.n	bde08 <strcpy+0x2>
   bde14:	4770      	bx	lr
	...

000bde18 <strdup>:
   bde18:	4b02      	ldr	r3, [pc, #8]	; (bde24 <strdup+0xc>)
   bde1a:	4601      	mov	r1, r0
   bde1c:	6818      	ldr	r0, [r3, #0]
   bde1e:	f000 b803 	b.w	bde28 <_strdup_r>
   bde22:	bf00      	nop
   bde24:	2003e3e8 	.word	0x2003e3e8

000bde28 <_strdup_r>:
   bde28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bde2a:	4604      	mov	r4, r0
   bde2c:	4608      	mov	r0, r1
   bde2e:	460d      	mov	r5, r1
   bde30:	f000 f80f 	bl	bde52 <strlen>
   bde34:	1c42      	adds	r2, r0, #1
   bde36:	4611      	mov	r1, r2
   bde38:	4620      	mov	r0, r4
   bde3a:	9201      	str	r2, [sp, #4]
   bde3c:	f7fc f82a 	bl	b9e94 <_malloc_r>
   bde40:	4604      	mov	r4, r0
   bde42:	b118      	cbz	r0, bde4c <_strdup_r+0x24>
   bde44:	9a01      	ldr	r2, [sp, #4]
   bde46:	4629      	mov	r1, r5
   bde48:	f7ff ff5e 	bl	bdd08 <memcpy>
   bde4c:	4620      	mov	r0, r4
   bde4e:	b003      	add	sp, #12
   bde50:	bd30      	pop	{r4, r5, pc}

000bde52 <strlen>:
   bde52:	4603      	mov	r3, r0
   bde54:	f813 2b01 	ldrb.w	r2, [r3], #1
   bde58:	2a00      	cmp	r2, #0
   bde5a:	d1fb      	bne.n	bde54 <strlen+0x2>
   bde5c:	1a18      	subs	r0, r3, r0
   bde5e:	3801      	subs	r0, #1
   bde60:	4770      	bx	lr

000bde62 <strncmp>:
   bde62:	b510      	push	{r4, lr}
   bde64:	b17a      	cbz	r2, bde86 <strncmp+0x24>
   bde66:	4603      	mov	r3, r0
   bde68:	3901      	subs	r1, #1
   bde6a:	1884      	adds	r4, r0, r2
   bde6c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bde70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bde74:	4290      	cmp	r0, r2
   bde76:	d101      	bne.n	bde7c <strncmp+0x1a>
   bde78:	42a3      	cmp	r3, r4
   bde7a:	d101      	bne.n	bde80 <strncmp+0x1e>
   bde7c:	1a80      	subs	r0, r0, r2
   bde7e:	bd10      	pop	{r4, pc}
   bde80:	2800      	cmp	r0, #0
   bde82:	d1f3      	bne.n	bde6c <strncmp+0xa>
   bde84:	e7fa      	b.n	bde7c <strncmp+0x1a>
   bde86:	4610      	mov	r0, r2
   bde88:	e7f9      	b.n	bde7e <strncmp+0x1c>

000bde8a <strncpy>:
   bde8a:	b510      	push	{r4, lr}
   bde8c:	3901      	subs	r1, #1
   bde8e:	4603      	mov	r3, r0
   bde90:	b132      	cbz	r2, bdea0 <strncpy+0x16>
   bde92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bde96:	f803 4b01 	strb.w	r4, [r3], #1
   bde9a:	3a01      	subs	r2, #1
   bde9c:	2c00      	cmp	r4, #0
   bde9e:	d1f7      	bne.n	bde90 <strncpy+0x6>
   bdea0:	441a      	add	r2, r3
   bdea2:	2100      	movs	r1, #0
   bdea4:	4293      	cmp	r3, r2
   bdea6:	d100      	bne.n	bdeaa <strncpy+0x20>
   bdea8:	bd10      	pop	{r4, pc}
   bdeaa:	f803 1b01 	strb.w	r1, [r3], #1
   bdeae:	e7f9      	b.n	bdea4 <strncpy+0x1a>

000bdeb0 <strrchr>:
   bdeb0:	b538      	push	{r3, r4, r5, lr}
   bdeb2:	4603      	mov	r3, r0
   bdeb4:	460c      	mov	r4, r1
   bdeb6:	b969      	cbnz	r1, bded4 <strrchr+0x24>
   bdeb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdebc:	f7ff bf82 	b.w	bddc4 <strchr>
   bdec0:	1c43      	adds	r3, r0, #1
   bdec2:	4605      	mov	r5, r0
   bdec4:	4621      	mov	r1, r4
   bdec6:	4618      	mov	r0, r3
   bdec8:	f7ff ff7c 	bl	bddc4 <strchr>
   bdecc:	2800      	cmp	r0, #0
   bdece:	d1f7      	bne.n	bdec0 <strrchr+0x10>
   bded0:	4628      	mov	r0, r5
   bded2:	bd38      	pop	{r3, r4, r5, pc}
   bded4:	2500      	movs	r5, #0
   bded6:	e7f5      	b.n	bdec4 <strrchr+0x14>

000bded8 <__strtok_r>:
   bded8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdeda:	b908      	cbnz	r0, bdee0 <__strtok_r+0x8>
   bdedc:	6810      	ldr	r0, [r2, #0]
   bdede:	b188      	cbz	r0, bdf04 <__strtok_r+0x2c>
   bdee0:	4604      	mov	r4, r0
   bdee2:	4620      	mov	r0, r4
   bdee4:	f814 5b01 	ldrb.w	r5, [r4], #1
   bdee8:	460f      	mov	r7, r1
   bdeea:	f817 6b01 	ldrb.w	r6, [r7], #1
   bdeee:	b91e      	cbnz	r6, bdef8 <__strtok_r+0x20>
   bdef0:	b965      	cbnz	r5, bdf0c <__strtok_r+0x34>
   bdef2:	6015      	str	r5, [r2, #0]
   bdef4:	4628      	mov	r0, r5
   bdef6:	e005      	b.n	bdf04 <__strtok_r+0x2c>
   bdef8:	42b5      	cmp	r5, r6
   bdefa:	d1f6      	bne.n	bdeea <__strtok_r+0x12>
   bdefc:	2b00      	cmp	r3, #0
   bdefe:	d1f0      	bne.n	bdee2 <__strtok_r+0xa>
   bdf00:	6014      	str	r4, [r2, #0]
   bdf02:	7003      	strb	r3, [r0, #0]
   bdf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bdf06:	461c      	mov	r4, r3
   bdf08:	e00c      	b.n	bdf24 <__strtok_r+0x4c>
   bdf0a:	b915      	cbnz	r5, bdf12 <__strtok_r+0x3a>
   bdf0c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bdf10:	460e      	mov	r6, r1
   bdf12:	f816 5b01 	ldrb.w	r5, [r6], #1
   bdf16:	42ab      	cmp	r3, r5
   bdf18:	d1f7      	bne.n	bdf0a <__strtok_r+0x32>
   bdf1a:	2b00      	cmp	r3, #0
   bdf1c:	d0f3      	beq.n	bdf06 <__strtok_r+0x2e>
   bdf1e:	2300      	movs	r3, #0
   bdf20:	f804 3c01 	strb.w	r3, [r4, #-1]
   bdf24:	6014      	str	r4, [r2, #0]
   bdf26:	e7ed      	b.n	bdf04 <__strtok_r+0x2c>

000bdf28 <strtok_r>:
   bdf28:	2301      	movs	r3, #1
   bdf2a:	f7ff bfd5 	b.w	bded8 <__strtok_r>
	...

000bdf30 <_strtol_l.constprop.0>:
   bdf30:	2b01      	cmp	r3, #1
   bdf32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdf36:	d001      	beq.n	bdf3c <_strtol_l.constprop.0+0xc>
   bdf38:	2b24      	cmp	r3, #36	; 0x24
   bdf3a:	d906      	bls.n	bdf4a <_strtol_l.constprop.0+0x1a>
   bdf3c:	f7fb ffb2 	bl	b9ea4 <__errno>
   bdf40:	2316      	movs	r3, #22
   bdf42:	6003      	str	r3, [r0, #0]
   bdf44:	2000      	movs	r0, #0
   bdf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdf4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be030 <_strtol_l.constprop.0+0x100>
   bdf4e:	460d      	mov	r5, r1
   bdf50:	462e      	mov	r6, r5
   bdf52:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdf56:	f814 700c 	ldrb.w	r7, [r4, ip]
   bdf5a:	f017 0708 	ands.w	r7, r7, #8
   bdf5e:	d1f7      	bne.n	bdf50 <_strtol_l.constprop.0+0x20>
   bdf60:	2c2d      	cmp	r4, #45	; 0x2d
   bdf62:	d132      	bne.n	bdfca <_strtol_l.constprop.0+0x9a>
   bdf64:	782c      	ldrb	r4, [r5, #0]
   bdf66:	2701      	movs	r7, #1
   bdf68:	1cb5      	adds	r5, r6, #2
   bdf6a:	2b00      	cmp	r3, #0
   bdf6c:	d05b      	beq.n	be026 <_strtol_l.constprop.0+0xf6>
   bdf6e:	2b10      	cmp	r3, #16
   bdf70:	d109      	bne.n	bdf86 <_strtol_l.constprop.0+0x56>
   bdf72:	2c30      	cmp	r4, #48	; 0x30
   bdf74:	d107      	bne.n	bdf86 <_strtol_l.constprop.0+0x56>
   bdf76:	782c      	ldrb	r4, [r5, #0]
   bdf78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bdf7c:	2c58      	cmp	r4, #88	; 0x58
   bdf7e:	d14d      	bne.n	be01c <_strtol_l.constprop.0+0xec>
   bdf80:	786c      	ldrb	r4, [r5, #1]
   bdf82:	2310      	movs	r3, #16
   bdf84:	3502      	adds	r5, #2
   bdf86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bdf8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdf8e:	f04f 0c00 	mov.w	ip, #0
   bdf92:	fbb8 f9f3 	udiv	r9, r8, r3
   bdf96:	4666      	mov	r6, ip
   bdf98:	fb03 8a19 	mls	sl, r3, r9, r8
   bdf9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bdfa0:	f1be 0f09 	cmp.w	lr, #9
   bdfa4:	d816      	bhi.n	bdfd4 <_strtol_l.constprop.0+0xa4>
   bdfa6:	4674      	mov	r4, lr
   bdfa8:	42a3      	cmp	r3, r4
   bdfaa:	dd24      	ble.n	bdff6 <_strtol_l.constprop.0+0xc6>
   bdfac:	f1bc 0f00 	cmp.w	ip, #0
   bdfb0:	db1e      	blt.n	bdff0 <_strtol_l.constprop.0+0xc0>
   bdfb2:	45b1      	cmp	r9, r6
   bdfb4:	d31c      	bcc.n	bdff0 <_strtol_l.constprop.0+0xc0>
   bdfb6:	d101      	bne.n	bdfbc <_strtol_l.constprop.0+0x8c>
   bdfb8:	45a2      	cmp	sl, r4
   bdfba:	db19      	blt.n	bdff0 <_strtol_l.constprop.0+0xc0>
   bdfbc:	fb06 4603 	mla	r6, r6, r3, r4
   bdfc0:	f04f 0c01 	mov.w	ip, #1
   bdfc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdfc8:	e7e8      	b.n	bdf9c <_strtol_l.constprop.0+0x6c>
   bdfca:	2c2b      	cmp	r4, #43	; 0x2b
   bdfcc:	bf04      	itt	eq
   bdfce:	782c      	ldrbeq	r4, [r5, #0]
   bdfd0:	1cb5      	addeq	r5, r6, #2
   bdfd2:	e7ca      	b.n	bdf6a <_strtol_l.constprop.0+0x3a>
   bdfd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bdfd8:	f1be 0f19 	cmp.w	lr, #25
   bdfdc:	d801      	bhi.n	bdfe2 <_strtol_l.constprop.0+0xb2>
   bdfde:	3c37      	subs	r4, #55	; 0x37
   bdfe0:	e7e2      	b.n	bdfa8 <_strtol_l.constprop.0+0x78>
   bdfe2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bdfe6:	f1be 0f19 	cmp.w	lr, #25
   bdfea:	d804      	bhi.n	bdff6 <_strtol_l.constprop.0+0xc6>
   bdfec:	3c57      	subs	r4, #87	; 0x57
   bdfee:	e7db      	b.n	bdfa8 <_strtol_l.constprop.0+0x78>
   bdff0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdff4:	e7e6      	b.n	bdfc4 <_strtol_l.constprop.0+0x94>
   bdff6:	f1bc 0f00 	cmp.w	ip, #0
   bdffa:	da05      	bge.n	be008 <_strtol_l.constprop.0+0xd8>
   bdffc:	2322      	movs	r3, #34	; 0x22
   bdffe:	6003      	str	r3, [r0, #0]
   be000:	4646      	mov	r6, r8
   be002:	b942      	cbnz	r2, be016 <_strtol_l.constprop.0+0xe6>
   be004:	4630      	mov	r0, r6
   be006:	e79e      	b.n	bdf46 <_strtol_l.constprop.0+0x16>
   be008:	b107      	cbz	r7, be00c <_strtol_l.constprop.0+0xdc>
   be00a:	4276      	negs	r6, r6
   be00c:	2a00      	cmp	r2, #0
   be00e:	d0f9      	beq.n	be004 <_strtol_l.constprop.0+0xd4>
   be010:	f1bc 0f00 	cmp.w	ip, #0
   be014:	d000      	beq.n	be018 <_strtol_l.constprop.0+0xe8>
   be016:	1e69      	subs	r1, r5, #1
   be018:	6011      	str	r1, [r2, #0]
   be01a:	e7f3      	b.n	be004 <_strtol_l.constprop.0+0xd4>
   be01c:	2430      	movs	r4, #48	; 0x30
   be01e:	2b00      	cmp	r3, #0
   be020:	d1b1      	bne.n	bdf86 <_strtol_l.constprop.0+0x56>
   be022:	2308      	movs	r3, #8
   be024:	e7af      	b.n	bdf86 <_strtol_l.constprop.0+0x56>
   be026:	2c30      	cmp	r4, #48	; 0x30
   be028:	d0a5      	beq.n	bdf76 <_strtol_l.constprop.0+0x46>
   be02a:	230a      	movs	r3, #10
   be02c:	e7ab      	b.n	bdf86 <_strtol_l.constprop.0+0x56>
   be02e:	bf00      	nop
   be030:	000bf87c 	.word	0x000bf87c

000be034 <strtol>:
   be034:	4613      	mov	r3, r2
   be036:	460a      	mov	r2, r1
   be038:	4601      	mov	r1, r0
   be03a:	4802      	ldr	r0, [pc, #8]	; (be044 <strtol+0x10>)
   be03c:	6800      	ldr	r0, [r0, #0]
   be03e:	f7ff bf77 	b.w	bdf30 <_strtol_l.constprop.0>
   be042:	bf00      	nop
   be044:	2003e3e8 	.word	0x2003e3e8

000be048 <close>:
   be048:	4b02      	ldr	r3, [pc, #8]	; (be054 <close+0xc>)
   be04a:	4601      	mov	r1, r0
   be04c:	6818      	ldr	r0, [r3, #0]
   be04e:	f000 b8c9 	b.w	be1e4 <_close_r>
   be052:	bf00      	nop
   be054:	2003e3e8 	.word	0x2003e3e8

000be058 <fstat>:
   be058:	4b02      	ldr	r3, [pc, #8]	; (be064 <fstat+0xc>)
   be05a:	460a      	mov	r2, r1
   be05c:	4601      	mov	r1, r0
   be05e:	6818      	ldr	r0, [r3, #0]
   be060:	f000 b8d0 	b.w	be204 <_fstat_r>
   be064:	2003e3e8 	.word	0x2003e3e8

000be068 <lseek>:
   be068:	4613      	mov	r3, r2
   be06a:	460a      	mov	r2, r1
   be06c:	4601      	mov	r1, r0
   be06e:	4802      	ldr	r0, [pc, #8]	; (be078 <lseek+0x10>)
   be070:	6800      	ldr	r0, [r0, #0]
   be072:	f000 b8dd 	b.w	be230 <_lseek_r>
   be076:	bf00      	nop
   be078:	2003e3e8 	.word	0x2003e3e8

000be07c <open>:
   be07c:	b40e      	push	{r1, r2, r3}
   be07e:	b503      	push	{r0, r1, lr}
   be080:	ab03      	add	r3, sp, #12
   be082:	4601      	mov	r1, r0
   be084:	4806      	ldr	r0, [pc, #24]	; (be0a0 <open+0x24>)
   be086:	f853 2b04 	ldr.w	r2, [r3], #4
   be08a:	9301      	str	r3, [sp, #4]
   be08c:	6800      	ldr	r0, [r0, #0]
   be08e:	9b04      	ldr	r3, [sp, #16]
   be090:	f000 f8e0 	bl	be254 <_open_r>
   be094:	b002      	add	sp, #8
   be096:	f85d eb04 	ldr.w	lr, [sp], #4
   be09a:	b003      	add	sp, #12
   be09c:	4770      	bx	lr
   be09e:	bf00      	nop
   be0a0:	2003e3e8 	.word	0x2003e3e8

000be0a4 <read>:
   be0a4:	4613      	mov	r3, r2
   be0a6:	460a      	mov	r2, r1
   be0a8:	4601      	mov	r1, r0
   be0aa:	4802      	ldr	r0, [pc, #8]	; (be0b4 <read+0x10>)
   be0ac:	6800      	ldr	r0, [r0, #0]
   be0ae:	f000 b8e3 	b.w	be278 <_read_r>
   be0b2:	bf00      	nop
   be0b4:	2003e3e8 	.word	0x2003e3e8

000be0b8 <unlink>:
   be0b8:	4b02      	ldr	r3, [pc, #8]	; (be0c4 <unlink+0xc>)
   be0ba:	4601      	mov	r1, r0
   be0bc:	6818      	ldr	r0, [r3, #0]
   be0be:	f000 b80d 	b.w	be0dc <_unlink_r>
   be0c2:	bf00      	nop
   be0c4:	2003e3e8 	.word	0x2003e3e8

000be0c8 <write>:
   be0c8:	4613      	mov	r3, r2
   be0ca:	460a      	mov	r2, r1
   be0cc:	4601      	mov	r1, r0
   be0ce:	4802      	ldr	r0, [pc, #8]	; (be0d8 <write+0x10>)
   be0d0:	6800      	ldr	r0, [r0, #0]
   be0d2:	f000 b813 	b.w	be0fc <_write_r>
   be0d6:	bf00      	nop
   be0d8:	2003e3e8 	.word	0x2003e3e8

000be0dc <_unlink_r>:
   be0dc:	b538      	push	{r3, r4, r5, lr}
   be0de:	4d06      	ldr	r5, [pc, #24]	; (be0f8 <_unlink_r+0x1c>)
   be0e0:	2300      	movs	r3, #0
   be0e2:	4604      	mov	r4, r0
   be0e4:	4608      	mov	r0, r1
   be0e6:	602b      	str	r3, [r5, #0]
   be0e8:	f7fb fc68 	bl	b99bc <_unlink>
   be0ec:	1c43      	adds	r3, r0, #1
   be0ee:	d102      	bne.n	be0f6 <_unlink_r+0x1a>
   be0f0:	682b      	ldr	r3, [r5, #0]
   be0f2:	b103      	cbz	r3, be0f6 <_unlink_r+0x1a>
   be0f4:	6023      	str	r3, [r4, #0]
   be0f6:	bd38      	pop	{r3, r4, r5, pc}
   be0f8:	2003e7ec 	.word	0x2003e7ec

000be0fc <_write_r>:
   be0fc:	b538      	push	{r3, r4, r5, lr}
   be0fe:	4d07      	ldr	r5, [pc, #28]	; (be11c <_write_r+0x20>)
   be100:	4604      	mov	r4, r0
   be102:	4608      	mov	r0, r1
   be104:	4611      	mov	r1, r2
   be106:	2200      	movs	r2, #0
   be108:	602a      	str	r2, [r5, #0]
   be10a:	461a      	mov	r2, r3
   be10c:	f7fb fc1e 	bl	b994c <_write>
   be110:	1c43      	adds	r3, r0, #1
   be112:	d102      	bne.n	be11a <_write_r+0x1e>
   be114:	682b      	ldr	r3, [r5, #0]
   be116:	b103      	cbz	r3, be11a <_write_r+0x1e>
   be118:	6023      	str	r3, [r4, #0]
   be11a:	bd38      	pop	{r3, r4, r5, pc}
   be11c:	2003e7ec 	.word	0x2003e7ec

000be120 <__register_exitproc>:
   be120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be124:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be1e0 <__register_exitproc+0xc0>
   be128:	4606      	mov	r6, r0
   be12a:	f8d8 0000 	ldr.w	r0, [r8]
   be12e:	461f      	mov	r7, r3
   be130:	460d      	mov	r5, r1
   be132:	4691      	mov	r9, r2
   be134:	f000 f878 	bl	be228 <__retarget_lock_acquire_recursive>
   be138:	4b25      	ldr	r3, [pc, #148]	; (be1d0 <__register_exitproc+0xb0>)
   be13a:	681c      	ldr	r4, [r3, #0]
   be13c:	b934      	cbnz	r4, be14c <__register_exitproc+0x2c>
   be13e:	4c25      	ldr	r4, [pc, #148]	; (be1d4 <__register_exitproc+0xb4>)
   be140:	601c      	str	r4, [r3, #0]
   be142:	4b25      	ldr	r3, [pc, #148]	; (be1d8 <__register_exitproc+0xb8>)
   be144:	b113      	cbz	r3, be14c <__register_exitproc+0x2c>
   be146:	681b      	ldr	r3, [r3, #0]
   be148:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be14c:	6863      	ldr	r3, [r4, #4]
   be14e:	2b1f      	cmp	r3, #31
   be150:	dd07      	ble.n	be162 <__register_exitproc+0x42>
   be152:	f8d8 0000 	ldr.w	r0, [r8]
   be156:	f000 f869 	bl	be22c <__retarget_lock_release_recursive>
   be15a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be162:	b34e      	cbz	r6, be1b8 <__register_exitproc+0x98>
   be164:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be168:	b988      	cbnz	r0, be18e <__register_exitproc+0x6e>
   be16a:	4b1c      	ldr	r3, [pc, #112]	; (be1dc <__register_exitproc+0xbc>)
   be16c:	b923      	cbnz	r3, be178 <__register_exitproc+0x58>
   be16e:	f8d8 0000 	ldr.w	r0, [r8]
   be172:	f000 f85a 	bl	be22a <__retarget_lock_release>
   be176:	e7f0      	b.n	be15a <__register_exitproc+0x3a>
   be178:	f44f 7084 	mov.w	r0, #264	; 0x108
   be17c:	f7fb fe4a 	bl	b9e14 <malloc>
   be180:	2800      	cmp	r0, #0
   be182:	d0f4      	beq.n	be16e <__register_exitproc+0x4e>
   be184:	2300      	movs	r3, #0
   be186:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be18a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be18e:	6863      	ldr	r3, [r4, #4]
   be190:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be194:	2201      	movs	r2, #1
   be196:	409a      	lsls	r2, r3
   be198:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be19c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be1a0:	4313      	orrs	r3, r2
   be1a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be1a6:	2e02      	cmp	r6, #2
   be1a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be1ac:	bf02      	ittt	eq
   be1ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be1b2:	4313      	orreq	r3, r2
   be1b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be1b8:	6863      	ldr	r3, [r4, #4]
   be1ba:	f8d8 0000 	ldr.w	r0, [r8]
   be1be:	1c5a      	adds	r2, r3, #1
   be1c0:	3302      	adds	r3, #2
   be1c2:	6062      	str	r2, [r4, #4]
   be1c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be1c8:	f000 f830 	bl	be22c <__retarget_lock_release_recursive>
   be1cc:	2000      	movs	r0, #0
   be1ce:	e7c6      	b.n	be15e <__register_exitproc+0x3e>
   be1d0:	2003e7e4 	.word	0x2003e7e4
   be1d4:	2003e758 	.word	0x2003e758
   be1d8:	00000000 	.word	0x00000000
   be1dc:	000b9e15 	.word	0x000b9e15
   be1e0:	2003e44c 	.word	0x2003e44c

000be1e4 <_close_r>:
   be1e4:	b538      	push	{r3, r4, r5, lr}
   be1e6:	4d06      	ldr	r5, [pc, #24]	; (be200 <_close_r+0x1c>)
   be1e8:	2300      	movs	r3, #0
   be1ea:	4604      	mov	r4, r0
   be1ec:	4608      	mov	r0, r1
   be1ee:	602b      	str	r3, [r5, #0]
   be1f0:	f7fb fbbc 	bl	b996c <_close>
   be1f4:	1c43      	adds	r3, r0, #1
   be1f6:	d102      	bne.n	be1fe <_close_r+0x1a>
   be1f8:	682b      	ldr	r3, [r5, #0]
   be1fa:	b103      	cbz	r3, be1fe <_close_r+0x1a>
   be1fc:	6023      	str	r3, [r4, #0]
   be1fe:	bd38      	pop	{r3, r4, r5, pc}
   be200:	2003e7ec 	.word	0x2003e7ec

000be204 <_fstat_r>:
   be204:	b538      	push	{r3, r4, r5, lr}
   be206:	4d07      	ldr	r5, [pc, #28]	; (be224 <_fstat_r+0x20>)
   be208:	2300      	movs	r3, #0
   be20a:	4604      	mov	r4, r0
   be20c:	4608      	mov	r0, r1
   be20e:	4611      	mov	r1, r2
   be210:	602b      	str	r3, [r5, #0]
   be212:	f7fb fbb3 	bl	b997c <_fstat>
   be216:	1c43      	adds	r3, r0, #1
   be218:	d102      	bne.n	be220 <_fstat_r+0x1c>
   be21a:	682b      	ldr	r3, [r5, #0]
   be21c:	b103      	cbz	r3, be220 <_fstat_r+0x1c>
   be21e:	6023      	str	r3, [r4, #0]
   be220:	bd38      	pop	{r3, r4, r5, pc}
   be222:	bf00      	nop
   be224:	2003e7ec 	.word	0x2003e7ec

000be228 <__retarget_lock_acquire_recursive>:
   be228:	4770      	bx	lr

000be22a <__retarget_lock_release>:
   be22a:	4770      	bx	lr

000be22c <__retarget_lock_release_recursive>:
   be22c:	4770      	bx	lr
	...

000be230 <_lseek_r>:
   be230:	b538      	push	{r3, r4, r5, lr}
   be232:	4d07      	ldr	r5, [pc, #28]	; (be250 <_lseek_r+0x20>)
   be234:	4604      	mov	r4, r0
   be236:	4608      	mov	r0, r1
   be238:	4611      	mov	r1, r2
   be23a:	2200      	movs	r2, #0
   be23c:	602a      	str	r2, [r5, #0]
   be23e:	461a      	mov	r2, r3
   be240:	f7fb fba4 	bl	b998c <_lseek>
   be244:	1c43      	adds	r3, r0, #1
   be246:	d102      	bne.n	be24e <_lseek_r+0x1e>
   be248:	682b      	ldr	r3, [r5, #0]
   be24a:	b103      	cbz	r3, be24e <_lseek_r+0x1e>
   be24c:	6023      	str	r3, [r4, #0]
   be24e:	bd38      	pop	{r3, r4, r5, pc}
   be250:	2003e7ec 	.word	0x2003e7ec

000be254 <_open_r>:
   be254:	b538      	push	{r3, r4, r5, lr}
   be256:	4d07      	ldr	r5, [pc, #28]	; (be274 <_open_r+0x20>)
   be258:	4604      	mov	r4, r0
   be25a:	4608      	mov	r0, r1
   be25c:	4611      	mov	r1, r2
   be25e:	2200      	movs	r2, #0
   be260:	602a      	str	r2, [r5, #0]
   be262:	461a      	mov	r2, r3
   be264:	f7fb fb6a 	bl	b993c <_open>
   be268:	1c43      	adds	r3, r0, #1
   be26a:	d102      	bne.n	be272 <_open_r+0x1e>
   be26c:	682b      	ldr	r3, [r5, #0]
   be26e:	b103      	cbz	r3, be272 <_open_r+0x1e>
   be270:	6023      	str	r3, [r4, #0]
   be272:	bd38      	pop	{r3, r4, r5, pc}
   be274:	2003e7ec 	.word	0x2003e7ec

000be278 <_read_r>:
   be278:	b538      	push	{r3, r4, r5, lr}
   be27a:	4d07      	ldr	r5, [pc, #28]	; (be298 <_read_r+0x20>)
   be27c:	4604      	mov	r4, r0
   be27e:	4608      	mov	r0, r1
   be280:	4611      	mov	r1, r2
   be282:	2200      	movs	r2, #0
   be284:	602a      	str	r2, [r5, #0]
   be286:	461a      	mov	r2, r3
   be288:	f7fb fb68 	bl	b995c <_read>
   be28c:	1c43      	adds	r3, r0, #1
   be28e:	d102      	bne.n	be296 <_read_r+0x1e>
   be290:	682b      	ldr	r3, [r5, #0]
   be292:	b103      	cbz	r3, be296 <_read_r+0x1e>
   be294:	6023      	str	r3, [r4, #0]
   be296:	bd38      	pop	{r3, r4, r5, pc}
   be298:	2003e7ec 	.word	0x2003e7ec

000be29c <dynalib_user>:
   be29c:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   be2ac:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   be2bc:	72697620 6c617574 6f724600 7325206d      virtual.From %s
   be2cc:	206f7420 77207325 20687469 61766e69      to %s with inva
   be2dc:	2064696c 656d6974 6f724600 7325206d     lid time.From %s
   be2ec:	206f7420 4e007325 6144206f 52006174      to %s.No Data.R
   be2fc:	6f707365 2065736e 65636552 64657669     esponse Received
   be30c:	6b6e5500 6e776f6e 73657220 736e6f70     .Unknown respons
   be31c:	65722065 69766563 25206465 62550069     e recevied %i.Ub
   be32c:	746f6469 6f482073 52006b6f 696e6e75     idots Hook.Runni
   be33c:	5200676e 696e6e75 4420676e 796c6961     ng.Running Daily
   be34c:	656c4320 70756e61 65735500 75622072      Cleanup.User bu
   be35c:	6e6f7474 65727020 64657373 20746120     tton pressed at 
   be36c:	72617473 20707574 6573202d 6e697474     startup - settin
   be37c:	65642067 6c756166 4e007374 64207765     g defaults.New d
   be38c:	202c7961 65736572 6e697474 6f632067     ay, resetting co
   be39c:	73746e75 6d695400 73692065 766e6920     unts.Time is inv
   be3ac:	64696c61 20202d20 73207325 6f63206f     alid -  %s so co
   be3bc:	63656e6e 676e6974 6d695400 73692065     nnecting.Time is
   be3cc:	6c617620 2d206469 00732520 35545345      valid - %s.EST5
   be3dc:	2c544445 322e334d 322f302e 3a30303a     EDT,M3.2.0/2:00:
   be3ec:	4d2c3030 312e3131 322f302e 3a30303a     00,M11.1.0/2:00:
   be3fc:	25003030 74530054 75747261 6f632070     00.%T.Startup co
   be40c:	656c706d 77206574 20687469 7473616c     mplete with last
   be41c:	6e6f6320 7463656e 00732520 656b6f57      connect %s.Woke
   be42c:	74697720 73752068 62207265 6f747475      with user butto
   be43c:	202d206e 65736552 6e697474 6f682067     n - Resetting ho
   be44c:	20737275 20646e61 6e696f67 6f742067     urs and going to
   be45c:	6e6f6320 7463656e 6d695400 73692065      connect.Time is
   be46c:	20707520 25207461 69772073 25206874      up at %s with %
   be47c:	6620696c 20656572 6f6d656d 4e007972     li free memory.N
   be48c:	6320746f 656e6e6f 6e697463 202d2067     ot connecting - 
   be49c:	20776f6c 74746162 20797265 65646f6d     low battery mode
   be4ac:	66755300 69636966 20746e65 74746162     .Sufficient batt
   be4bc:	20797265 65776f70 6f632072 63656e6e     ery power connec
   be4cc:	676e6974 746f4e00 6e6f6320 7463656e     ting.Not connect
   be4dc:	20676e69 353c202d 20252530 72616863     ing - <50%% char
   be4ec:	2d206567 756f6620 6f682072 73207275     ge - four hour s
   be4fc:	64656863 00656c75 20746f4e 6e6e6f63     chedule.Not conn
   be50c:	69746365 2d20676e 2d303520 25253536     ecting - 50-65%%
   be51c:	61686320 20656772 7774202d 6f68206f      charge - two ho
   be52c:	73207275 64656863 00656c75 68626557     ur schedule.Webh
   be53c:	206b6f6f 656d6974 2074756f 6572202d     ook timeout - re
   be54c:	74746573 00676e69 6e6e6f43 65746365     setting.Connecte
   be55c:	6e692064 20692520 73636573 6c654300     d in %i secs.Cel
   be56c:	616c756c 72450072 20726f72 74617473     lular.Error stat
   be57c:	202d2065 65736572 6e697474 65520067     e - resetting.Re
   be58c:	74746573 20676e69 20657564 6c206f74     setting due to l
   be59c:	6d20776f 726f6d65 75430079 6e657272     ow memory.Curren
   be5ac:	61442074 49206174 6974696e 7a696c61     t Data Initializ
   be5bc:	6e006465 7620746f 64696c61 74616400     ed.not valid.dat
   be5cc:	6f6e2061 61762074 2064696c 6e65706f     a not valid open
   be5dc:	6d697420 253d2065 61640064 6e206174      time =%d.data n
   be5ec:	7620746f 64696c61 73616c20 6f632074     ot valid last co
   be5fc:	63656e6e 6e6f6974 72756420 6f697461     nnection duratio
   be60c:	253d206e 79730064 61745373 20737574     n =%d.sysStatus 
   be61c:	61746164 20736920 63007325 65727275     data is %s.curre
   be62c:	6420746e 61747369 2065636e 20746f6e     nt distance not 
   be63c:	696c6176 253d2064 6d632064 72756300     valid =%d cm.cur
   be64c:	746e6572 73696420 636e6174 73692065     rent distance is
   be65c:	00732520 65646f4d 616f4c00 676e6964      %s.Mode.Loading
   be66c:	73797320 206d6574 61666564 73746c75      system defaults
   be67c:	414e4100 32312d54 00000000              .ANAT-12....

000be688 <_ZTVN15StorageHelperRK15FileSystemPosixE>:
	...
   be690:	000b4d1d 000b4d1f 000b4d85 000b4d6d     .M...M...M..mM..
   be6a0:	000b4d9f 000b4d5d 000b4d4f 000b4d41     .M..]M..OM..AM..
   be6b0:	000b4d2d                                -M..

000be6b4 <_ZTVN15StorageHelperRK18PersistentDataFileE>:
	...
   be6bc:	000b89ed 000b8a7d 000b8d3d 000b89f3     ....}...=.......
   be6cc:	000b8a1b 000b8bed 000b8cc5 000b4e01     .............N..
   be6dc:	000b4e15 7273752f 7275632f 746e6572     .N../usr/current
   be6ec:	7461642e 73752f00 79732f72 61745373     .dat./usr/sysSta
   be6fc:	2e737574 00746164 64616f4c 20676e69     tus.dat.Loading 
   be70c:	74737953 44206d65 75616665 0073746c     System Defaults.
   be71c:	00000000                                ....

000be720 <_ZTV13sysStatusData>:
	...
   be728:	000b4f19 000b8a7d 000b8d3d 000b89f3     .O..}...=.......
   be738:	000b8a1b 000b52c9 000b53f1 000b4e29     .....R...S..)N..
   be748:	000b4e3d                                =N..

000be74c <_ZTV17currentStatusData>:
	...
   be754:	000b4fd5 000b8a7d 000b8d3d 000b89f3     .O..}...=.......
   be764:	000b8a1b 000b5359 000b5271 000b4e51     ....YS..qR..QN..
   be774:	000b4e65 74696e49 696c6169 676e697a     eN..Initializing
   be784:	72615020 6c636974 75662065 6974636e      Particle functi
   be794:	20736e6f 20646e61 69726176 656c6261     ons and variable
   be7a4:	6f430073 6e616d6d 7b007364 73696422     s.Commands.{"dis
   be7b4:	636e6174 253a2265 22202c69 74746162     tance":%i, "batt
   be7c4:	22797265 2e34253a 222c6632 3179656b     ery":%4.2f,"key1
   be7d4:	25223a22 202c2273 6d657422 253a2270     ":"%s", "temp":%
   be7e4:	66322e34 7222202c 74657365 253a2273     4.2f, "resets":%
   be7f4:	22202c69 72656c61 3a227374 222c6925     i, "alerts":%i,"
   be804:	6e6e6f63 74746365 22656d69 2c69253a     connecttime":%i,
   be814:	6d697422 61747365 3a22706d 30756c25     "timestamp":%lu0
   be824:	007d3030 64696255 5f73746f 6576654c     00}.Ubidots_Leve
   be834:	6f485f6c 765f6b6f 62550031 746f6469     l_Hook_v1.Ubidot
   be844:	65572073 6f6f6862 25203a6b 654c0073     s Webhook: %s.Le
   be854:	006c6576 69617254 6f6e006c 6f6c2074     vel.Trail.not lo
   be864:	6f702077 00726577 00726163 73726570     w power.car.pers
   be874:	50006e6f 69737261 6620676e 656c6961     on.Parsing faile
   be884:	202d2064 63656863 7973206b 7861746e     d - check syntax
   be894:	646d6300 72617600 006e6600 65736572     .cmd.var.fn.rese
   be8a4:	6c610074 6552006c 74746573 20676e69     t.all.Resetting 
   be8b4:	20656874 65746167 27796177 79732073     the gateway's sy
   be8c4:	6d657473 646e6120 72756320 746e6572     stem and current
   be8d4:	74616420 65520061 74746573 20676e69      data.Resetting 
   be8e4:	20656874 65746167 27796177 75632073     the gateway's cu
   be8f4:	6e657272 61642074 73006174 75746174     rrent data.statu
   be904:	69440073 6e617473 203a6563 202c6425     s.Distance: %d, 
   be914:	736e6553 203a726f 202c7325 74746142     Sensor: %s, Batt
   be924:	3a797265 2e342520 61206632 2520646e     ery: %4.2f and %
   be934:	6f6c0073 5400676e 3a656d69 2c732520     s.long.Time: %s,
   be944:	65706f20 25203a6e 63202c64 65736f6c      open: %d, close
   be954:	6425203a 6f6d202c 25206564 65730073     : %d, mode %s.se
   be964:	7300646e 00796174 65757274 696f4700     nd.stay.true.Goi
   be974:	7420676e 656b206f 74207065 64206568     ng to keep the d
   be984:	63697665 6e6f2065 656e696c 696f4700     evice online.Goi
   be994:	6220676e 206b6361 6e206f74 616d726f     ng back to norma
   be9a4:	6f63206c 63656e6e 69766974 6f007974     l connectivity.o
   be9b4:	006e6570 74746553 20676e69 6e65706f     pen.Setting open
   be9c4:	20676e69 72756f68 206f7420 303a6425     ing hour to %d:0
   be9d4:	704f0030 68206e65 2072756f 756d202d     0.Open hour - mu
   be9e4:	62207473 2d302065 63003231 65736f6c     st be 0-12.close
   be9f4:	74655300 676e6974 6f6c6320 676e6973     .Setting closing
   bea04:	756f6820 6f742072 3a642520 43003030      hour to %d:00.C
   bea14:	65736f6c 756f6820 202d2072 7473756d     lose hour - must
   bea24:	20656220 322d3331 79740034 53006570      be 13-24.type.S
   bea34:	69747465 7320676e 6f736e65 79742072     etting sensor ty
   bea44:	74206570 7325206f 756f6320 7265746e     pe to %s counter
   bea54:	6e655300 20726f73 626d756e 6f207265     .Sensor number o
   bea64:	6f207475 61722066 2065676e 322d3028     ut of range (0-2
   bea74:	6f4e0029 20612074 696c6176 6f632064     ).Not a valid co
   bea84:	6e616d6d 6e490064 65687420 73696420     mmand.In the dis
   bea94:	6e6e6f63 20746365 6d6f7266 72615020     connect from Par
   beaa4:	6c636974 75662065 6974636e 46006e6f     ticle function.F
   beab4:	656c6961 6f742064 73696420 6e6e6f63     ailed to disconn
   beac4:	20746365 6d6f7266 72615020 6c636974     ect from Particl
   bead4:	69440065 6e6f6373 7463656e 66206465     e.Disconnected f
   beae4:	206d6f72 74726150 656c6369 206e6920     rom Particle in 
   beaf4:	73206925 6e6f6365 46007364 656c6961     %i seconds.Faile
   beb04:	6f742064 72757420 666f206e 68742066     d to turn off th
   beb14:	65432065 6c756c6c 6d207261 6d65646f     e Cellular modem
   beb24:	72755400 2064656e 2066666f 20656874     .Turned off the 
   beb34:	6c6c6563 72616c75 646f6d20 69206d65     cellular modem i
   beb44:	6925206e 63657320 73646e6f 00000000     n %i seconds....

000beb54 <_ZTVN5spark10LogHandlerE>:
	...
   beb64:	000b40a5 000b55e9                       .@...U..

000beb6c <_ZTVN5spark16SerialLogHandlerE>:
	...
   beb74:	000b56c1 000b56f5 000bb9a5 000b55eb     .V...V.......U..

000beb84 <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   beb8c:	000b5605 000b5619 6e6b6e55 006e776f     .V...V..Unknown.
   beb9c:	20746f4e 72616843 676e6967 61684300     Not Charging.Cha
   bebac:	64656772 73694400 72616863 676e6967     rged.Discharging
   bebbc:	75614600 4400746c 6e6f6369 7463656e     .Fault.Diconnect
   bebcc:	00006465                                ed..

000bebd0 <_ZTV18Particle_Functions>:
	...
   bebd8:	000b55f3 000b55f5 74696e49 7a696c61     .U...U..Initaliz
   bebe8:	20676e69 20656874 4d6e6970 7365646f     ing the pinModes
   bebf8:	696e4900 6c616974 6e697a69 6f502067     .Initializing Po
   bec08:	20726577 666e6f43 50006769 7265776f     wer Config.Power
   bec18:	6e6f6320 75676966 69746172 70206e6f      configuration p
   bec28:	65636f72 73207373 63636375 75667365     rocess succcesfu
   bec38:	                                         l.

000bec3a <BLUE_LED>:
   bec3a:	                                         ..

000bec3c <BUTTON_PIN>:
   bec3c:	                                         ..

000bec3e <DISTANCE_PIN>:
   bec3e:	                                         ..

000bec40 <EXTERNAL_TEMP_PIN>:
   bec40:	                                         ..

000bec42 <INTERNAL_TEMP_PIN>:
   bec42:	6f4e000f 5700656e 00694669 004d5347     ..None.WiFi.GSM.
   bec52:	53544d55 4d444300 544c0041 45490045     UMTS.CDMA.LTE.IE
   bec62:	30384545 34353132 45544c00 5441435f     EE802154.LTE_CAT
   bec72:	00314d5f 5f45544c 5f544143 0031424e     _M1.LTE_CAT_NB1.
   bec82:	53207325 2e32253a 25256630 3a51202c     %s S:%2.0f%%, Q:
   bec92:	302e3225 20252566 73734100 69747265     %2.0f%% .Asserti
   beca2:	61466e6f 72756c69 72732065 26262063     onFailure src &&
   becb2:	63727320 61633e2d 61626c6c 42006b63      src->callback.B
   becc2:	65747461 73207972 65746174 20666f20     attery state of 
   becd2:	72616863 25206567 66322e34 45002525     charge %4.2f%%.E
   bece2:	72657478 206c616e 706d6554 3425203a     xternal Temp: %4
   becf2:	4366322e 73694400 636e6174 25203a65     .2fC.Distance: %
   bed02:	006d6364 65746e49 6c616e72 6d655420     dcm.Internal Tem
   bed12:	25203a70 66322e34 eb940043 ec44000b     p: %4.2fC.....D.
   bed22:	ec49000b ec4e000b ec52000b ec57000b     ..I...N...R...W.
   bed32:	ec5c000b ec60000b ec6b000b ec76000b     ..\...`...k...v.
   bed42:	6142000b 72676b63 646e756f 6c627550     ..BackgroundPubl
   bed52:	52687369                                 ishRK.

000bed58 <_ZTV19BackgroundPublishRK>:
	...
   bed60:	000b654d 000b6569                       Me..ie..

000bed68 <_ZTV10JsonBuffer>:
	...
   bed70:	000b684d 000b6869                       Mh..ih..

000bed78 <_ZTV10JsonParser>:
	...
   bed80:	000b687d 000b68a1 253a6425 64253a64     }h...h..%d:%d:%d
   bed90:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   beda0:	4d003935 252e6425 64252e64 00002c00     59.M%d.%d.%d.,..

000bedb0 <_ZTV9LocalTime>:
	...
   bedb8:	000b70ad 000b70c5                       .p...p..

000bedc0 <_ZTV12LocalTimeHMS>:
	...
   bedc8:	000b705b 000b705f                       [p.._p..

000bedd0 <_ZTV15LocalTimeChange>:
	...
   bedd8:	000b705d 000b706d                       ]p..mp..

000bede0 <_ZTV22LocalTimePosixTimezone>:
	...
   bede8:	000b707d 000b7099 656c6966 3d6d754e     }p...p..fileNum=
   bedf8:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   bee08:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   bee18:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   bee28:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   bee38:	7572726f 64657470 65766520 6e20746e     orrupted event n
   bee48:	20656d61 6420726f 00617461 64616572     ame or data.read
   bee58:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   bee68:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   bee78:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   bee88:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   bee98:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   beea8:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   beeb8:	6c696620 6d754e65 0064253d 63736964      fileNum=%d.disc
   beec8:	65647261 76652064 20746e65 72006425     arded event %d.r
   beed8:	74657365 20726f20 63736964 656e6e6f     eset or disconne
   beee8:	65207463 746e6576 6173202c 66206576     ct event, save f
   beef8:	73656c69 206f7420 75657571 61720065     iles to queue.ra
   bef08:	6964006d 72616373 676e6964 726f6320     m.discarding cor
   bef18:	74707572 66206465 20656c69 70006425     rupted file %d.p
   bef28:	696c6275 6e696873 73252067 65766520     ublishing %s eve
   bef38:	253d746e 61642073 253d6174 59530073     nt=%s data=%s.SY
   bef48:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   bef58:	2944454c 20736920 75716572 64657269     LED) is required
   bef68:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   bef78:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   bef88:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   bef98:	61657263 73206574 3a3a6474 75716564     create std::dequ
   befa8:	616c2065 72656772 61687420 616d206e     e larger than ma
   befb8:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   befc8:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   befd8:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   befe8:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   beff8:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   bf008:	63637573 20737365 72006425 766f6d65     success %d.remov
   bf018:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   bf028:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   bf038:	676e6974 206f7420 656c6966 66612073     ting to files af
   bf048:	20726574 6c627570 20687369 6c696166     ter publish fail
   bf058:	00657275 2e707061 71627570 00000000     ure.app.pubq....

000bf068 <_ZTV17PublishQueuePosix>:
	...
   bf070:	000b804d 000b8309 000b832d 64383025     M.......-...%08d
   bf080:	72002f00 766f6d65 25206465 73250073     ./.removed %s.%s
   bf090:	69786520 20737473 20646e61 61207369      exists and is a
   bf0a0:	72696420 6f746365 66007972 20656c69      directory.file 
   bf0b0:	74206e69 77206568 202c7961 656c6564     in the way, dele
   bf0c0:	676e6974 00732520 74617473 6c696620     ting %s.stat fil
   bf0d0:	65206465 6f6e7272 0064253d 61657263     ed errno=%d.crea
   bf0e0:	20646574 20726964 6d007325 7269646b     ted dir %s.mkdir
   bf0f0:	69616620 2064656c 6e727265 64253d6f      failed errno=%d
   bf100:	636e7500 69666e6f 65727567 69642064     .unconfigured di
   bf110:	74615072 63730068 696e6e61 2520676e     rPath.scanning %
   bf120:	69772073 70206874 65747461 25206e72     s with pattern %
   bf130:	64610073 676e6964 206f7420 75657571     s.adding to queu
   bf140:	64252065 00732520 46746567 46656c69     e %d %s.getFileF
   bf150:	516d6f72 65756575 74657220 656e7275     romQueue returne
   bf160:	64252064 70706100 7165732e 656c6966     d %d.app.seqfile
   bf170:	00000000                                ....

000bf174 <_ZTV14SequentialFile>:
	...
   bf17c:	000b8695 000b86c1 000b8341 696c6176     ........A...vali
   bf18c:	69746164 6420676e 20617461 657a6973     dating data size
   bf19c:	0064253d 3a746f67 67616d20 253d6369     =%d.got: magic=%
   bf1ac:	20783830 73726576 3d6e6f69 78343025     08x version=%04x
   bf1bc:	7a697320 30253d65 68207834 3d687361      size=%04x hash=
   bf1cc:	78383025 70786500 616d203a 3d636967     %08x.exp: magic=
   bf1dc:	78383025 72657620 6e6f6973 3430253d     %08x version=%04
   bf1ec:	69732078 253d657a 20783430 68736168     x size=%04x hash
   bf1fc:	3830253d 61730078 676e6976 74616420     =%08x.saving dat
   bf20c:	69732061 253d657a 00000064              a size=%d...

000bf218 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bf220:	000b89ed 000b8a55 000b8cf1 000b89f3     ....U...........
   bf230:	000b8a1b 000b8bed 000b8cc5              ............

000bf23c <_ZTVN15StorageHelperRK24PersistentDataFileSystemE>:
	...
   bf244:	000b89ed 000b8a7d 000b8d3d 000b89f3     ....}...=.......
   bf254:	000b8a1b 000b8bed 000b8cc5 000b4dcd     .............M..
   bf264:	000b4e79 6c696166 74206465 6572206f     yN..failed to re
   bf274:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   bf284:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   bf294:	72206f74 20646165 41676572 3d726464     to read regAddr=
   bf2a4:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   bf2b4:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   bf2c4:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   bf2d4:	656c6961 6f742064 69727720 72206574     ailed to write r
   bf2e4:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   bf2f4:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   bf304:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   bf314:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   bf324:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   bf334:	62206425 75736552 253d746c 41570064     %d bResult=%d.WA
   bf344:	44484354 4400474f 5f504545 45574f50     TCHDOG.DEEP_POWE
   bf354:	4f445f52 43004e57 544e554f 4e574f44     R_DOWN.COUNTDOWN
   bf364:	4d49545f 41005245 4d52414c 69616600     _TIMER.ALARM.fai
   bf374:	6572756c 206e6920 61647075 61576574     lure in updateWa
   bf384:	6552656b 6e6f7361 00642520 656b6177     keReason %d.wake
   bf394:	61657220 206e6f73 7325203d 34302500      reason = %s.%04
   bf3a4:	30252d64 252d6432 20643230 64323025     d-%02d-%02d %02d
   bf3b4:	3230253a 30253a64 67006432 74527465     :%02d:%02d.getRt
   bf3c4:	54734163 7325206d 74657300 41637452     cAsTm %s.setRtcA
   bf3d4:	206d5473 66007325 756c6961 69206572     sTm %s.failure i
   bf3e4:	6573206e 63745274 6d6f7246 25206d54     n setRtcFromTm %
   bf3f4:	65730064 54522074 72662043 63206d6f     d.set RTC from c
   bf404:	64756f6c 00732520 20746573 74737973     loud %s.set syst
   bf414:	63206d65 6b636f6c 6f726620 5452206d     em clock from RT
   bf424:	73252043 69616600 2064656c 64206f74     C %s.failed to d
   bf434:	63657465 42412074 35303831 70706100     etect AB1805.app
   bf444:	3162612e 00353038                       .ab1805.

000bf44c <_ZTV6AB1805>:
	...
   bf454:	000b8d79 000b8d7b 000b917b 000b9201     y...{...{.......

000bf464 <_ZTVN5spark13CellularClassE>:
	...
   bf46c:	000b9fff 000b9ff5 000b9feb 000b9fa1     ................
   bf47c:	000b9fdf 000b9fd3 000bbcfd 000bbd05     ................
   bf48c:	000b9fc7 000b9fbf 000b9fb5 000b9fab     ................
   bf49c:	000bbd35                                5...

000bf4a0 <_ZTV14CellularSignal>:
	...
   bf4a8:	000ba08d 000ba0f1 000ba08f 000ba101     ................
   bf4b8:	000ba135 000ba161 000ba195 000ba0b5     5...a...........
   bf4c8:	000ba093 000ba0af fffffffc 00000000     ................
   bf4d8:	000ba0e9                                ....

000bf4dc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf4e4:	000ba1d9 000ba1df 000ba21d 000ba1ed     ................
   bf4f4:	000ba1db                                ....

000bf4f8 <_ZTVN5spark13EthernetClassE>:
	...
   bf500:	000ba7e3 000ba7d9 000ba7cf 000ba7c5     ................
   bf510:	000ba7b9 000ba7ad 000bbcfd 000bbd05     ................
   bf520:	000ba7a1 000ba799 000ba78f 000ba785     ................
   bf530:	000bbd35                                5...

000bf534 <_ZTV7TwoWire>:
	...
   bf53c:	000ba801 000ba84b 000ba823 000ba803     ....K...#.......
   bf54c:	000ba82b 000ba833 000ba83b 000ba843     +...3...;...C...

000bf55c <_ZTV9IPAddress>:
	...
   bf564:	000ba9bd 000ba9ad 000ba9af 34302575     ............u%04
   bf574:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   bf584:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   bf594:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   bf5a4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   bf5b4:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   bf5c4:	20736c69 0d00203d 6e6c000a 646f6300     ils = ....ln.cod
   bf5d4:	65640065 6c696174 00000000              e.detail....

000bf5e0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf5e8:	000bae69 000bae8f 000bae4d 000baacb     i.......M.......

000bf5f8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf600:	000bb24d 000bb265 000bb9a5 000b55eb     M...e........U..

000bf610 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf618:	000bb279 000bb28d 000bbb49 000bae55     y.......I...U...

000bf628 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf630:	000bae67 000bae9d 000bb909 000bae57     g...........W...

000bf640 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf648:	000bae65 000baeab 000bb1b5 000baecd     e...............

000bf658 <_ZTVN5spark12NetworkClassE>:
	...
   bf660:	000bbcbd 000bbcc7 000bbcd1 000bbcdb     ................
   bf670:	000bbce5 000bbcf1 000bbcfd 000bbd05     ................
   bf680:	000bbd0d 000bbd19 000bbd21 000bbd2b     ........!...+...
   bf690:	000bbd35 006e616e 00666e69 0066766f     5...nan.inf.ovf.
   bf6a0:	69726977 5300676e 65747379 6c73206d     wiring.System sl
   bf6b0:	20706565 666e6f63 72756769 6f697461     eep configuratio
   bf6c0:	7369206e 766e6920 64696c61 005a002e     n is invalid..Z.
   bf6d0:	33302b25 30253a64 25007532 6d252d59     %+03d:%02u.%Y-%m
   bf6e0:	5464252d 253a4825 53253a4d 61007a25     -%dT%H:%M:%S%z.a
   bf6f0:	69746373 0000656d                       sctime..

000bf6f8 <_ZTV11USARTSerial>:
	...
   bf700:	000bca5d 000bcac9 000bcaa1 000bbf85     ]...............
   bf710:	000bca71 000bca8d 000bca7f 000bca9b     q...............
   bf720:	000bca5f 000bca63                       _...c...

000bf728 <_ZTV9USBSerial>:
	...
   bf730:	000bcb1b 000bcb83 000bcb59 000bbf85     ........Y.......
   bf740:	000bcb4b 000bcb1d 000bcb2d 000bcb7d     K.......-...}...
   bf750:	000bcb3d 000bcb15                       =.......

000bf758 <_ZSt7nothrow>:
   bf758:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   bf768:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000bf779 <day_name.1>:
   bf779:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bf789:	61536972                                 riSat

000bf78e <mon_name.0>:
   bf78e:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bf79e:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bf7ae:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bf7be:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bf7ce:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bf7de:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bf7ee:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bf7fe:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bf80e:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   bf81e:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   bf82e:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bf83e:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bf84e:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bf85e:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bf86e:	696c6474 61722f62 632e646e               tdlib/rand.c.

000bf87b <_ctype_>:
   bf87b:	20202000 20202020 28282020 20282828     .         ((((( 
   bf88b:	20202020 20202020 20202020 20202020                     
   bf89b:	10108820 10101010 10101010 10101010      ...............
   bf8ab:	04040410 04040404 10040404 10101010     ................
   bf8bb:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bf8cb:	01010101 01010101 01010101 10101010     ................
   bf8db:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bf8eb:	02020202 02020202 02020202 10101010     ................
   bf8fb:	00000020 00000000 00000000 00000000      ...............
	...

000bf97c <link_const_variable_data_end>:
   bf97c:	000b44f1 	.word	0x000b44f1
   bf980:	000b55dd 	.word	0x000b55dd
   bf984:	000b5db5 	.word	0x000b5db5
   bf988:	000b82f9 	.word	0x000b82f9
   bf98c:	000b89dd 	.word	0x000b89dd
   bf990:	000b961d 	.word	0x000b961d
   bf994:	000b9f91 	.word	0x000b9f91
   bf998:	000ba05d 	.word	0x000ba05d
   bf99c:	000ba7ed 	.word	0x000ba7ed
   bf9a0:	000bb995 	.word	0x000bb995
   bf9a4:	000bbe0d 	.word	0x000bbe0d
   bf9a8:	000bc241 	.word	0x000bc241
   bf9ac:	000bc6f9 	.word	0x000bc6f9
   bf9b0:	000bca49 	.word	0x000bca49

000bf9b4 <link_constructors_end>:
	...
